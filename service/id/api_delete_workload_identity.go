// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package id

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDeleteWorkloadIdentityCommon = "DeleteWorkloadIdentity"

// DeleteWorkloadIdentityCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteWorkloadIdentityCommon operation. The "output" return
// value will be populated with the DeleteWorkloadIdentityCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteWorkloadIdentityCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteWorkloadIdentityCommon Send returns without error.
//
// See DeleteWorkloadIdentityCommon for more information on using the DeleteWorkloadIdentityCommon
// API call, and error handling.
//
//    // Example sending a request using the DeleteWorkloadIdentityCommonRequest method.
//    req, resp := client.DeleteWorkloadIdentityCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ID) DeleteWorkloadIdentityCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteWorkloadIdentityCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DeleteWorkloadIdentityCommon API operation for ID.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ID's
// API operation DeleteWorkloadIdentityCommon for usage and error information.
func (c *ID) DeleteWorkloadIdentityCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteWorkloadIdentityCommonRequest(input)
	return out, req.Send()
}

// DeleteWorkloadIdentityCommonWithContext is the same as DeleteWorkloadIdentityCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteWorkloadIdentityCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ID) DeleteWorkloadIdentityCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteWorkloadIdentityCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteWorkloadIdentity = "DeleteWorkloadIdentity"

// DeleteWorkloadIdentityRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteWorkloadIdentity operation. The "output" return
// value will be populated with the DeleteWorkloadIdentityCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteWorkloadIdentityCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteWorkloadIdentityCommon Send returns without error.
//
// See DeleteWorkloadIdentity for more information on using the DeleteWorkloadIdentity
// API call, and error handling.
//
//    // Example sending a request using the DeleteWorkloadIdentityRequest method.
//    req, resp := client.DeleteWorkloadIdentityRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ID) DeleteWorkloadIdentityRequest(input *DeleteWorkloadIdentityInput) (req *request.Request, output *DeleteWorkloadIdentityOutput) {
	op := &request.Operation{
		Name:       opDeleteWorkloadIdentity,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteWorkloadIdentityInput{}
	}

	output = &DeleteWorkloadIdentityOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DeleteWorkloadIdentity API operation for ID.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ID's
// API operation DeleteWorkloadIdentity for usage and error information.
func (c *ID) DeleteWorkloadIdentity(input *DeleteWorkloadIdentityInput) (*DeleteWorkloadIdentityOutput, error) {
	req, out := c.DeleteWorkloadIdentityRequest(input)
	return out, req.Send()
}

// DeleteWorkloadIdentityWithContext is the same as DeleteWorkloadIdentity with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteWorkloadIdentity for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ID) DeleteWorkloadIdentityWithContext(ctx volcengine.Context, input *DeleteWorkloadIdentityInput, opts ...request.Option) (*DeleteWorkloadIdentityOutput, error) {
	req, out := c.DeleteWorkloadIdentityRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DeleteWorkloadIdentityInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// Name is a required field
	Name *string `type:"string" json:",omitempty" required:"true"`

	WorkloadPoolName *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s DeleteWorkloadIdentityInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteWorkloadIdentityInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeleteWorkloadIdentityInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DeleteWorkloadIdentityInput"}
	if s.Name == nil {
		invalidParams.Add(request.NewErrParamRequired("Name"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetName sets the Name field's value.
func (s *DeleteWorkloadIdentityInput) SetName(v string) *DeleteWorkloadIdentityInput {
	s.Name = &v
	return s
}

// SetWorkloadPoolName sets the WorkloadPoolName field's value.
func (s *DeleteWorkloadIdentityInput) SetWorkloadPoolName(v string) *DeleteWorkloadIdentityInput {
	s.WorkloadPoolName = &v
	return s
}

type DeleteWorkloadIdentityOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s DeleteWorkloadIdentityOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteWorkloadIdentityOutput) GoString() string {
	return s.String()
}
