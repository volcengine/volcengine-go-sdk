// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package id

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opGetWorkloadAccessTokenCommon = "GetWorkloadAccessToken"

// GetWorkloadAccessTokenCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the GetWorkloadAccessTokenCommon operation. The "output" return
// value will be populated with the GetWorkloadAccessTokenCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetWorkloadAccessTokenCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetWorkloadAccessTokenCommon Send returns without error.
//
// See GetWorkloadAccessTokenCommon for more information on using the GetWorkloadAccessTokenCommon
// API call, and error handling.
//
//    // Example sending a request using the GetWorkloadAccessTokenCommonRequest method.
//    req, resp := client.GetWorkloadAccessTokenCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ID) GetWorkloadAccessTokenCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opGetWorkloadAccessTokenCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetWorkloadAccessTokenCommon API operation for ID.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ID's
// API operation GetWorkloadAccessTokenCommon for usage and error information.
func (c *ID) GetWorkloadAccessTokenCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.GetWorkloadAccessTokenCommonRequest(input)
	return out, req.Send()
}

// GetWorkloadAccessTokenCommonWithContext is the same as GetWorkloadAccessTokenCommon with the addition of
// the ability to pass a context and additional request options.
//
// See GetWorkloadAccessTokenCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ID) GetWorkloadAccessTokenCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.GetWorkloadAccessTokenCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opGetWorkloadAccessToken = "GetWorkloadAccessToken"

// GetWorkloadAccessTokenRequest generates a "volcengine/request.Request" representing the
// client's request for the GetWorkloadAccessToken operation. The "output" return
// value will be populated with the GetWorkloadAccessTokenCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetWorkloadAccessTokenCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetWorkloadAccessTokenCommon Send returns without error.
//
// See GetWorkloadAccessToken for more information on using the GetWorkloadAccessToken
// API call, and error handling.
//
//    // Example sending a request using the GetWorkloadAccessTokenRequest method.
//    req, resp := client.GetWorkloadAccessTokenRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ID) GetWorkloadAccessTokenRequest(input *GetWorkloadAccessTokenInput) (req *request.Request, output *GetWorkloadAccessTokenOutput) {
	op := &request.Operation{
		Name:       opGetWorkloadAccessToken,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &GetWorkloadAccessTokenInput{}
	}

	output = &GetWorkloadAccessTokenOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetWorkloadAccessToken API operation for ID.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ID's
// API operation GetWorkloadAccessToken for usage and error information.
func (c *ID) GetWorkloadAccessToken(input *GetWorkloadAccessTokenInput) (*GetWorkloadAccessTokenOutput, error) {
	req, out := c.GetWorkloadAccessTokenRequest(input)
	return out, req.Send()
}

// GetWorkloadAccessTokenWithContext is the same as GetWorkloadAccessToken with the addition of
// the ability to pass a context and additional request options.
//
// See GetWorkloadAccessToken for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ID) GetWorkloadAccessTokenWithContext(ctx volcengine.Context, input *GetWorkloadAccessTokenInput, opts ...request.Option) (*GetWorkloadAccessTokenOutput, error) {
	req, out := c.GetWorkloadAccessTokenRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type GetWorkloadAccessTokenInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Name *string `type:"string" json:",omitempty"`

	WorkloadPoolName *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s GetWorkloadAccessTokenInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetWorkloadAccessTokenInput) GoString() string {
	return s.String()
}

// SetName sets the Name field's value.
func (s *GetWorkloadAccessTokenInput) SetName(v string) *GetWorkloadAccessTokenInput {
	s.Name = &v
	return s
}

// SetWorkloadPoolName sets the WorkloadPoolName field's value.
func (s *GetWorkloadAccessTokenInput) SetWorkloadPoolName(v string) *GetWorkloadAccessTokenInput {
	s.WorkloadPoolName = &v
	return s
}

type GetWorkloadAccessTokenOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	ExpiresAt *string `type:"string" json:",omitempty"`

	WorkloadAccessToken *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s GetWorkloadAccessTokenOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetWorkloadAccessTokenOutput) GoString() string {
	return s.String()
}

// SetExpiresAt sets the ExpiresAt field's value.
func (s *GetWorkloadAccessTokenOutput) SetExpiresAt(v string) *GetWorkloadAccessTokenOutput {
	s.ExpiresAt = &v
	return s
}

// SetWorkloadAccessToken sets the WorkloadAccessToken field's value.
func (s *GetWorkloadAccessTokenOutput) SetWorkloadAccessToken(v string) *GetWorkloadAccessTokenOutput {
	s.WorkloadAccessToken = &v
	return s
}
