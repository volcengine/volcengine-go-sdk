// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package id

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDeleteUsersCommon = "DeleteUsers"

// DeleteUsersCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteUsersCommon operation. The "output" return
// value will be populated with the DeleteUsersCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteUsersCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteUsersCommon Send returns without error.
//
// See DeleteUsersCommon for more information on using the DeleteUsersCommon
// API call, and error handling.
//
//    // Example sending a request using the DeleteUsersCommonRequest method.
//    req, resp := client.DeleteUsersCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ID) DeleteUsersCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteUsersCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DeleteUsersCommon API operation for ID.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ID's
// API operation DeleteUsersCommon for usage and error information.
func (c *ID) DeleteUsersCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteUsersCommonRequest(input)
	return out, req.Send()
}

// DeleteUsersCommonWithContext is the same as DeleteUsersCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteUsersCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ID) DeleteUsersCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteUsersCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteUsers = "DeleteUsers"

// DeleteUsersRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteUsers operation. The "output" return
// value will be populated with the DeleteUsersCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteUsersCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteUsersCommon Send returns without error.
//
// See DeleteUsers for more information on using the DeleteUsers
// API call, and error handling.
//
//    // Example sending a request using the DeleteUsersRequest method.
//    req, resp := client.DeleteUsersRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ID) DeleteUsersRequest(input *DeleteUsersInput) (req *request.Request, output *DeleteUsersOutput) {
	op := &request.Operation{
		Name:       opDeleteUsers,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteUsersInput{}
	}

	output = &DeleteUsersOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DeleteUsers API operation for ID.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ID's
// API operation DeleteUsers for usage and error information.
func (c *ID) DeleteUsers(input *DeleteUsersInput) (*DeleteUsersOutput, error) {
	req, out := c.DeleteUsersRequest(input)
	return out, req.Send()
}

// DeleteUsersWithContext is the same as DeleteUsers with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteUsers for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ID) DeleteUsersWithContext(ctx volcengine.Context, input *DeleteUsersInput, opts ...request.Option) (*DeleteUsersOutput, error) {
	req, out := c.DeleteUsersRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DeleteUsersInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// UserPoolUid is a required field
	UserPoolUid *string `type:"string" json:",omitempty" required:"true"`

	UserUids []*string `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s DeleteUsersInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteUsersInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeleteUsersInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DeleteUsersInput"}
	if s.UserPoolUid == nil {
		invalidParams.Add(request.NewErrParamRequired("UserPoolUid"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetUserPoolUid sets the UserPoolUid field's value.
func (s *DeleteUsersInput) SetUserPoolUid(v string) *DeleteUsersInput {
	s.UserPoolUid = &v
	return s
}

// SetUserUids sets the UserUids field's value.
func (s *DeleteUsersInput) SetUserUids(v []*string) *DeleteUsersInput {
	s.UserUids = v
	return s
}

type DeleteUsersOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Errors []*string `type:"list" json:",omitempty"`

	FailureCount *int32 `type:"int32" json:",omitempty"`

	SuccessCount *int32 `type:"int32" json:",omitempty"`

	SuccessfulUids []*string `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s DeleteUsersOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteUsersOutput) GoString() string {
	return s.String()
}

// SetErrors sets the Errors field's value.
func (s *DeleteUsersOutput) SetErrors(v []*string) *DeleteUsersOutput {
	s.Errors = v
	return s
}

// SetFailureCount sets the FailureCount field's value.
func (s *DeleteUsersOutput) SetFailureCount(v int32) *DeleteUsersOutput {
	s.FailureCount = &v
	return s
}

// SetSuccessCount sets the SuccessCount field's value.
func (s *DeleteUsersOutput) SetSuccessCount(v int32) *DeleteUsersOutput {
	s.SuccessCount = &v
	return s
}

// SetSuccessfulUids sets the SuccessfulUids field's value.
func (s *DeleteUsersOutput) SetSuccessfulUids(v []*string) *DeleteUsersOutput {
	s.SuccessfulUids = v
	return s
}
