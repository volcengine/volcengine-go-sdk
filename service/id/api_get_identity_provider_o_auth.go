// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package id

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opGetIdentityProviderOAuthCommon = "GetIdentityProviderOAuth"

// GetIdentityProviderOAuthCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the GetIdentityProviderOAuthCommon operation. The "output" return
// value will be populated with the GetIdentityProviderOAuthCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetIdentityProviderOAuthCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetIdentityProviderOAuthCommon Send returns without error.
//
// See GetIdentityProviderOAuthCommon for more information on using the GetIdentityProviderOAuthCommon
// API call, and error handling.
//
//    // Example sending a request using the GetIdentityProviderOAuthCommonRequest method.
//    req, resp := client.GetIdentityProviderOAuthCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ID) GetIdentityProviderOAuthCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opGetIdentityProviderOAuthCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetIdentityProviderOAuthCommon API operation for ID.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ID's
// API operation GetIdentityProviderOAuthCommon for usage and error information.
func (c *ID) GetIdentityProviderOAuthCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.GetIdentityProviderOAuthCommonRequest(input)
	return out, req.Send()
}

// GetIdentityProviderOAuthCommonWithContext is the same as GetIdentityProviderOAuthCommon with the addition of
// the ability to pass a context and additional request options.
//
// See GetIdentityProviderOAuthCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ID) GetIdentityProviderOAuthCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.GetIdentityProviderOAuthCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opGetIdentityProviderOAuth = "GetIdentityProviderOAuth"

// GetIdentityProviderOAuthRequest generates a "volcengine/request.Request" representing the
// client's request for the GetIdentityProviderOAuth operation. The "output" return
// value will be populated with the GetIdentityProviderOAuthCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetIdentityProviderOAuthCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetIdentityProviderOAuthCommon Send returns without error.
//
// See GetIdentityProviderOAuth for more information on using the GetIdentityProviderOAuth
// API call, and error handling.
//
//    // Example sending a request using the GetIdentityProviderOAuthRequest method.
//    req, resp := client.GetIdentityProviderOAuthRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ID) GetIdentityProviderOAuthRequest(input *GetIdentityProviderOAuthInput) (req *request.Request, output *GetIdentityProviderOAuthOutput) {
	op := &request.Operation{
		Name:       opGetIdentityProviderOAuth,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &GetIdentityProviderOAuthInput{}
	}

	output = &GetIdentityProviderOAuthOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetIdentityProviderOAuth API operation for ID.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ID's
// API operation GetIdentityProviderOAuth for usage and error information.
func (c *ID) GetIdentityProviderOAuth(input *GetIdentityProviderOAuthInput) (*GetIdentityProviderOAuthOutput, error) {
	req, out := c.GetIdentityProviderOAuthRequest(input)
	return out, req.Send()
}

// GetIdentityProviderOAuthWithContext is the same as GetIdentityProviderOAuth with the addition of
// the ability to pass a context and additional request options.
//
// See GetIdentityProviderOAuth for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ID) GetIdentityProviderOAuthWithContext(ctx volcengine.Context, input *GetIdentityProviderOAuthInput, opts ...request.Option) (*GetIdentityProviderOAuthOutput, error) {
	req, out := c.GetIdentityProviderOAuthRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type GetIdentityProviderOAuthInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// ConnectionUid is a required field
	ConnectionUid *string `type:"string" json:",omitempty" required:"true"`

	// UserPoolUid is a required field
	UserPoolUid *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s GetIdentityProviderOAuthInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetIdentityProviderOAuthInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *GetIdentityProviderOAuthInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "GetIdentityProviderOAuthInput"}
	if s.ConnectionUid == nil {
		invalidParams.Add(request.NewErrParamRequired("ConnectionUid"))
	}
	if s.UserPoolUid == nil {
		invalidParams.Add(request.NewErrParamRequired("UserPoolUid"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetConnectionUid sets the ConnectionUid field's value.
func (s *GetIdentityProviderOAuthInput) SetConnectionUid(v string) *GetIdentityProviderOAuthInput {
	s.ConnectionUid = &v
	return s
}

// SetUserPoolUid sets the UserPoolUid field's value.
func (s *GetIdentityProviderOAuthInput) SetUserPoolUid(v string) *GetIdentityProviderOAuthInput {
	s.UserPoolUid = &v
	return s
}

type GetIdentityProviderOAuthOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	AuthorizationEndpoint *string `type:"string" json:",omitempty"`

	ClientId *string `type:"string" json:",omitempty"`

	ClientSecret *string `type:"string" json:",omitempty"`

	Enabled *bool `type:"boolean" json:",omitempty"`

	IdAttribute *string `type:"string" json:",omitempty"`

	Name *string `type:"string" json:",omitempty"`

	ProviderOptions *ProviderOptionsForGetIdentityProviderOAuthOutput `type:"structure" json:",omitempty"`

	ScopesList []*string `type:"list" json:",omitempty"`

	TokenEndpoint *string `type:"string" json:",omitempty"`

	Uid *string `type:"string" json:",omitempty"`

	UsePkce *bool `type:"boolean" json:",omitempty"`

	UserEndpoint *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s GetIdentityProviderOAuthOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetIdentityProviderOAuthOutput) GoString() string {
	return s.String()
}

// SetAuthorizationEndpoint sets the AuthorizationEndpoint field's value.
func (s *GetIdentityProviderOAuthOutput) SetAuthorizationEndpoint(v string) *GetIdentityProviderOAuthOutput {
	s.AuthorizationEndpoint = &v
	return s
}

// SetClientId sets the ClientId field's value.
func (s *GetIdentityProviderOAuthOutput) SetClientId(v string) *GetIdentityProviderOAuthOutput {
	s.ClientId = &v
	return s
}

// SetClientSecret sets the ClientSecret field's value.
func (s *GetIdentityProviderOAuthOutput) SetClientSecret(v string) *GetIdentityProviderOAuthOutput {
	s.ClientSecret = &v
	return s
}

// SetEnabled sets the Enabled field's value.
func (s *GetIdentityProviderOAuthOutput) SetEnabled(v bool) *GetIdentityProviderOAuthOutput {
	s.Enabled = &v
	return s
}

// SetIdAttribute sets the IdAttribute field's value.
func (s *GetIdentityProviderOAuthOutput) SetIdAttribute(v string) *GetIdentityProviderOAuthOutput {
	s.IdAttribute = &v
	return s
}

// SetName sets the Name field's value.
func (s *GetIdentityProviderOAuthOutput) SetName(v string) *GetIdentityProviderOAuthOutput {
	s.Name = &v
	return s
}

// SetProviderOptions sets the ProviderOptions field's value.
func (s *GetIdentityProviderOAuthOutput) SetProviderOptions(v *ProviderOptionsForGetIdentityProviderOAuthOutput) *GetIdentityProviderOAuthOutput {
	s.ProviderOptions = v
	return s
}

// SetScopesList sets the ScopesList field's value.
func (s *GetIdentityProviderOAuthOutput) SetScopesList(v []*string) *GetIdentityProviderOAuthOutput {
	s.ScopesList = v
	return s
}

// SetTokenEndpoint sets the TokenEndpoint field's value.
func (s *GetIdentityProviderOAuthOutput) SetTokenEndpoint(v string) *GetIdentityProviderOAuthOutput {
	s.TokenEndpoint = &v
	return s
}

// SetUid sets the Uid field's value.
func (s *GetIdentityProviderOAuthOutput) SetUid(v string) *GetIdentityProviderOAuthOutput {
	s.Uid = &v
	return s
}

// SetUsePkce sets the UsePkce field's value.
func (s *GetIdentityProviderOAuthOutput) SetUsePkce(v bool) *GetIdentityProviderOAuthOutput {
	s.UsePkce = &v
	return s
}

// SetUserEndpoint sets the UserEndpoint field's value.
func (s *GetIdentityProviderOAuthOutput) SetUserEndpoint(v string) *GetIdentityProviderOAuthOutput {
	s.UserEndpoint = &v
	return s
}

type ProviderOptionsForGetIdentityProviderOAuthOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	AutoLinking *string `type:"string" json:",omitempty"`

	IsAutoCreation *bool `type:"boolean" json:",omitempty"`

	IsAutoUpdate *bool `type:"boolean" json:",omitempty"`

	IsCreationAllowed *bool `type:"boolean" json:",omitempty"`

	IsLinkingAllowed *bool `type:"boolean" json:",omitempty"`
}

// String returns the string representation
func (s ProviderOptionsForGetIdentityProviderOAuthOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ProviderOptionsForGetIdentityProviderOAuthOutput) GoString() string {
	return s.String()
}

// SetAutoLinking sets the AutoLinking field's value.
func (s *ProviderOptionsForGetIdentityProviderOAuthOutput) SetAutoLinking(v string) *ProviderOptionsForGetIdentityProviderOAuthOutput {
	s.AutoLinking = &v
	return s
}

// SetIsAutoCreation sets the IsAutoCreation field's value.
func (s *ProviderOptionsForGetIdentityProviderOAuthOutput) SetIsAutoCreation(v bool) *ProviderOptionsForGetIdentityProviderOAuthOutput {
	s.IsAutoCreation = &v
	return s
}

// SetIsAutoUpdate sets the IsAutoUpdate field's value.
func (s *ProviderOptionsForGetIdentityProviderOAuthOutput) SetIsAutoUpdate(v bool) *ProviderOptionsForGetIdentityProviderOAuthOutput {
	s.IsAutoUpdate = &v
	return s
}

// SetIsCreationAllowed sets the IsCreationAllowed field's value.
func (s *ProviderOptionsForGetIdentityProviderOAuthOutput) SetIsCreationAllowed(v bool) *ProviderOptionsForGetIdentityProviderOAuthOutput {
	s.IsCreationAllowed = &v
	return s
}

// SetIsLinkingAllowed sets the IsLinkingAllowed field's value.
func (s *ProviderOptionsForGetIdentityProviderOAuthOutput) SetIsLinkingAllowed(v bool) *ProviderOptionsForGetIdentityProviderOAuthOutput {
	s.IsLinkingAllowed = &v
	return s
}
