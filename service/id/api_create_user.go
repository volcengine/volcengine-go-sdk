// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package id

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opCreateUserCommon = "CreateUser"

// CreateUserCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateUserCommon operation. The "output" return
// value will be populated with the CreateUserCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateUserCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateUserCommon Send returns without error.
//
// See CreateUserCommon for more information on using the CreateUserCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateUserCommonRequest method.
//    req, resp := client.CreateUserCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ID) CreateUserCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateUserCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateUserCommon API operation for ID.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ID's
// API operation CreateUserCommon for usage and error information.
func (c *ID) CreateUserCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateUserCommonRequest(input)
	return out, req.Send()
}

// CreateUserCommonWithContext is the same as CreateUserCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateUserCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ID) CreateUserCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateUserCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateUser = "CreateUser"

// CreateUserRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateUser operation. The "output" return
// value will be populated with the CreateUserCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateUserCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateUserCommon Send returns without error.
//
// See CreateUser for more information on using the CreateUser
// API call, and error handling.
//
//    // Example sending a request using the CreateUserRequest method.
//    req, resp := client.CreateUserRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ID) CreateUserRequest(input *CreateUserInput) (req *request.Request, output *CreateUserOutput) {
	op := &request.Operation{
		Name:       opCreateUser,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateUserInput{}
	}

	output = &CreateUserOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateUser API operation for ID.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ID's
// API operation CreateUser for usage and error information.
func (c *ID) CreateUser(input *CreateUserInput) (*CreateUserOutput, error) {
	req, out := c.CreateUserRequest(input)
	return out, req.Send()
}

// CreateUserWithContext is the same as CreateUser with the addition of
// the ability to pass a context and additional request options.
//
// See CreateUser for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ID) CreateUserWithContext(ctx volcengine.Context, input *CreateUserInput, opts ...request.Option) (*CreateUserOutput, error) {
	req, out := c.CreateUserRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type CreateUserInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Email *string `type:"string" json:",omitempty"`

	EmailVerified *bool `type:"boolean" json:",omitempty"`

	FamilyName *string `type:"string" json:",omitempty"`

	GivenName *string `type:"string" json:",omitempty"`

	MiddleName *string `type:"string" json:",omitempty"`

	Name *string `type:"string" json:",omitempty"`

	Password *string `type:"string" json:",omitempty"`

	PhoneNumber *string `type:"string" json:",omitempty"`

	PhoneNumberVerified *bool `type:"boolean" json:",omitempty"`

	PreferredUsername *string `type:"string" json:",omitempty"`

	UserMetadata *string `type:"string" json:",omitempty"`

	// UserPoolUid is a required field
	UserPoolUid *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s CreateUserInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateUserInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateUserInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CreateUserInput"}
	if s.UserPoolUid == nil {
		invalidParams.Add(request.NewErrParamRequired("UserPoolUid"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetEmail sets the Email field's value.
func (s *CreateUserInput) SetEmail(v string) *CreateUserInput {
	s.Email = &v
	return s
}

// SetEmailVerified sets the EmailVerified field's value.
func (s *CreateUserInput) SetEmailVerified(v bool) *CreateUserInput {
	s.EmailVerified = &v
	return s
}

// SetFamilyName sets the FamilyName field's value.
func (s *CreateUserInput) SetFamilyName(v string) *CreateUserInput {
	s.FamilyName = &v
	return s
}

// SetGivenName sets the GivenName field's value.
func (s *CreateUserInput) SetGivenName(v string) *CreateUserInput {
	s.GivenName = &v
	return s
}

// SetMiddleName sets the MiddleName field's value.
func (s *CreateUserInput) SetMiddleName(v string) *CreateUserInput {
	s.MiddleName = &v
	return s
}

// SetName sets the Name field's value.
func (s *CreateUserInput) SetName(v string) *CreateUserInput {
	s.Name = &v
	return s
}

// SetPassword sets the Password field's value.
func (s *CreateUserInput) SetPassword(v string) *CreateUserInput {
	s.Password = &v
	return s
}

// SetPhoneNumber sets the PhoneNumber field's value.
func (s *CreateUserInput) SetPhoneNumber(v string) *CreateUserInput {
	s.PhoneNumber = &v
	return s
}

// SetPhoneNumberVerified sets the PhoneNumberVerified field's value.
func (s *CreateUserInput) SetPhoneNumberVerified(v bool) *CreateUserInput {
	s.PhoneNumberVerified = &v
	return s
}

// SetPreferredUsername sets the PreferredUsername field's value.
func (s *CreateUserInput) SetPreferredUsername(v string) *CreateUserInput {
	s.PreferredUsername = &v
	return s
}

// SetUserMetadata sets the UserMetadata field's value.
func (s *CreateUserInput) SetUserMetadata(v string) *CreateUserInput {
	s.UserMetadata = &v
	return s
}

// SetUserPoolUid sets the UserPoolUid field's value.
func (s *CreateUserInput) SetUserPoolUid(v string) *CreateUserInput {
	s.UserPoolUid = &v
	return s
}

type CreateUserOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Birthdate *string `type:"string" json:",omitempty"`

	Connection *string `type:"string" json:",omitempty"`

	CreateTime *string `type:"string" json:",omitempty"`

	Email *string `type:"string" json:",omitempty"`

	EmailVerified *bool `type:"boolean" json:",omitempty"`

	FamilyName *string `type:"string" json:",omitempty"`

	Gender *string `type:"string" json:",omitempty"`

	GivenName *string `type:"string" json:",omitempty"`

	LatestBrowser *string `type:"string" json:",omitempty"`

	LatestLogin *string `type:"string" json:",omitempty"`

	Locale *string `type:"string" json:",omitempty"`

	MiddleName *string `type:"string" json:",omitempty"`

	Name *string `type:"string" json:",omitempty"`

	NickName *string `type:"string" json:",omitempty"`

	NumLogins *int32 `type:"int32" json:",omitempty"`

	PhoneNumber *string `type:"string" json:",omitempty"`

	PhoneNumberVerified *bool `type:"boolean" json:",omitempty"`

	Picture *string `type:"string" json:",omitempty"`

	PreferredUsername *string `type:"string" json:",omitempty"`

	Profile *string `type:"string" json:",omitempty"`

	Sub *string `type:"string" json:",omitempty"`

	Uid *string `type:"string" json:",omitempty"`

	UpdateTime *string `type:"string" json:",omitempty"`

	UserMetadata *string `type:"string" json:",omitempty"`

	Website *string `type:"string" json:",omitempty"`

	ZoneInfo *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s CreateUserOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateUserOutput) GoString() string {
	return s.String()
}

// SetBirthdate sets the Birthdate field's value.
func (s *CreateUserOutput) SetBirthdate(v string) *CreateUserOutput {
	s.Birthdate = &v
	return s
}

// SetConnection sets the Connection field's value.
func (s *CreateUserOutput) SetConnection(v string) *CreateUserOutput {
	s.Connection = &v
	return s
}

// SetCreateTime sets the CreateTime field's value.
func (s *CreateUserOutput) SetCreateTime(v string) *CreateUserOutput {
	s.CreateTime = &v
	return s
}

// SetEmail sets the Email field's value.
func (s *CreateUserOutput) SetEmail(v string) *CreateUserOutput {
	s.Email = &v
	return s
}

// SetEmailVerified sets the EmailVerified field's value.
func (s *CreateUserOutput) SetEmailVerified(v bool) *CreateUserOutput {
	s.EmailVerified = &v
	return s
}

// SetFamilyName sets the FamilyName field's value.
func (s *CreateUserOutput) SetFamilyName(v string) *CreateUserOutput {
	s.FamilyName = &v
	return s
}

// SetGender sets the Gender field's value.
func (s *CreateUserOutput) SetGender(v string) *CreateUserOutput {
	s.Gender = &v
	return s
}

// SetGivenName sets the GivenName field's value.
func (s *CreateUserOutput) SetGivenName(v string) *CreateUserOutput {
	s.GivenName = &v
	return s
}

// SetLatestBrowser sets the LatestBrowser field's value.
func (s *CreateUserOutput) SetLatestBrowser(v string) *CreateUserOutput {
	s.LatestBrowser = &v
	return s
}

// SetLatestLogin sets the LatestLogin field's value.
func (s *CreateUserOutput) SetLatestLogin(v string) *CreateUserOutput {
	s.LatestLogin = &v
	return s
}

// SetLocale sets the Locale field's value.
func (s *CreateUserOutput) SetLocale(v string) *CreateUserOutput {
	s.Locale = &v
	return s
}

// SetMiddleName sets the MiddleName field's value.
func (s *CreateUserOutput) SetMiddleName(v string) *CreateUserOutput {
	s.MiddleName = &v
	return s
}

// SetName sets the Name field's value.
func (s *CreateUserOutput) SetName(v string) *CreateUserOutput {
	s.Name = &v
	return s
}

// SetNickName sets the NickName field's value.
func (s *CreateUserOutput) SetNickName(v string) *CreateUserOutput {
	s.NickName = &v
	return s
}

// SetNumLogins sets the NumLogins field's value.
func (s *CreateUserOutput) SetNumLogins(v int32) *CreateUserOutput {
	s.NumLogins = &v
	return s
}

// SetPhoneNumber sets the PhoneNumber field's value.
func (s *CreateUserOutput) SetPhoneNumber(v string) *CreateUserOutput {
	s.PhoneNumber = &v
	return s
}

// SetPhoneNumberVerified sets the PhoneNumberVerified field's value.
func (s *CreateUserOutput) SetPhoneNumberVerified(v bool) *CreateUserOutput {
	s.PhoneNumberVerified = &v
	return s
}

// SetPicture sets the Picture field's value.
func (s *CreateUserOutput) SetPicture(v string) *CreateUserOutput {
	s.Picture = &v
	return s
}

// SetPreferredUsername sets the PreferredUsername field's value.
func (s *CreateUserOutput) SetPreferredUsername(v string) *CreateUserOutput {
	s.PreferredUsername = &v
	return s
}

// SetProfile sets the Profile field's value.
func (s *CreateUserOutput) SetProfile(v string) *CreateUserOutput {
	s.Profile = &v
	return s
}

// SetSub sets the Sub field's value.
func (s *CreateUserOutput) SetSub(v string) *CreateUserOutput {
	s.Sub = &v
	return s
}

// SetUid sets the Uid field's value.
func (s *CreateUserOutput) SetUid(v string) *CreateUserOutput {
	s.Uid = &v
	return s
}

// SetUpdateTime sets the UpdateTime field's value.
func (s *CreateUserOutput) SetUpdateTime(v string) *CreateUserOutput {
	s.UpdateTime = &v
	return s
}

// SetUserMetadata sets the UserMetadata field's value.
func (s *CreateUserOutput) SetUserMetadata(v string) *CreateUserOutput {
	s.UserMetadata = &v
	return s
}

// SetWebsite sets the Website field's value.
func (s *CreateUserOutput) SetWebsite(v string) *CreateUserOutput {
	s.Website = &v
	return s
}

// SetZoneInfo sets the ZoneInfo field's value.
func (s *CreateUserOutput) SetZoneInfo(v string) *CreateUserOutput {
	s.ZoneInfo = &v
	return s
}
