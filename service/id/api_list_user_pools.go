// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package id

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opListUserPoolsCommon = "ListUserPools"

// ListUserPoolsCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ListUserPoolsCommon operation. The "output" return
// value will be populated with the ListUserPoolsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListUserPoolsCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListUserPoolsCommon Send returns without error.
//
// See ListUserPoolsCommon for more information on using the ListUserPoolsCommon
// API call, and error handling.
//
//    // Example sending a request using the ListUserPoolsCommonRequest method.
//    req, resp := client.ListUserPoolsCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ID) ListUserPoolsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opListUserPoolsCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListUserPoolsCommon API operation for ID.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ID's
// API operation ListUserPoolsCommon for usage and error information.
func (c *ID) ListUserPoolsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ListUserPoolsCommonRequest(input)
	return out, req.Send()
}

// ListUserPoolsCommonWithContext is the same as ListUserPoolsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ListUserPoolsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ID) ListUserPoolsCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ListUserPoolsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListUserPools = "ListUserPools"

// ListUserPoolsRequest generates a "volcengine/request.Request" representing the
// client's request for the ListUserPools operation. The "output" return
// value will be populated with the ListUserPoolsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListUserPoolsCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListUserPoolsCommon Send returns without error.
//
// See ListUserPools for more information on using the ListUserPools
// API call, and error handling.
//
//    // Example sending a request using the ListUserPoolsRequest method.
//    req, resp := client.ListUserPoolsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ID) ListUserPoolsRequest(input *ListUserPoolsInput) (req *request.Request, output *ListUserPoolsOutput) {
	op := &request.Operation{
		Name:       opListUserPools,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListUserPoolsInput{}
	}

	output = &ListUserPoolsOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListUserPools API operation for ID.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ID's
// API operation ListUserPools for usage and error information.
func (c *ID) ListUserPools(input *ListUserPoolsInput) (*ListUserPoolsOutput, error) {
	req, out := c.ListUserPoolsRequest(input)
	return out, req.Send()
}

// ListUserPoolsWithContext is the same as ListUserPools with the addition of
// the ability to pass a context and additional request options.
//
// See ListUserPools for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ID) ListUserPoolsWithContext(ctx volcengine.Context, input *ListUserPoolsInput, opts ...request.Option) (*ListUserPoolsOutput, error) {
	req, out := c.ListUserPoolsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DataForListUserPoolsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	CreateTime *string `type:"string" json:",omitempty"`

	Description *string `type:"string" json:",omitempty"`

	Domain *string `type:"string" json:",omitempty"`

	Name *string `type:"string" json:",omitempty"`

	Trn *string `type:"string" json:",omitempty"`

	Uid *string `type:"string" json:",omitempty"`

	UpdateTime *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s DataForListUserPoolsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DataForListUserPoolsOutput) GoString() string {
	return s.String()
}

// SetCreateTime sets the CreateTime field's value.
func (s *DataForListUserPoolsOutput) SetCreateTime(v string) *DataForListUserPoolsOutput {
	s.CreateTime = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *DataForListUserPoolsOutput) SetDescription(v string) *DataForListUserPoolsOutput {
	s.Description = &v
	return s
}

// SetDomain sets the Domain field's value.
func (s *DataForListUserPoolsOutput) SetDomain(v string) *DataForListUserPoolsOutput {
	s.Domain = &v
	return s
}

// SetName sets the Name field's value.
func (s *DataForListUserPoolsOutput) SetName(v string) *DataForListUserPoolsOutput {
	s.Name = &v
	return s
}

// SetTrn sets the Trn field's value.
func (s *DataForListUserPoolsOutput) SetTrn(v string) *DataForListUserPoolsOutput {
	s.Trn = &v
	return s
}

// SetUid sets the Uid field's value.
func (s *DataForListUserPoolsOutput) SetUid(v string) *DataForListUserPoolsOutput {
	s.Uid = &v
	return s
}

// SetUpdateTime sets the UpdateTime field's value.
func (s *DataForListUserPoolsOutput) SetUpdateTime(v string) *DataForListUserPoolsOutput {
	s.UpdateTime = &v
	return s
}

type FilterForListUserPoolsInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Description *string `type:"string" json:",omitempty"`

	Name *string `type:"string" json:",omitempty"`

	Trn *string `type:"string" json:",omitempty"`

	Uid *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s FilterForListUserPoolsInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s FilterForListUserPoolsInput) GoString() string {
	return s.String()
}

// SetDescription sets the Description field's value.
func (s *FilterForListUserPoolsInput) SetDescription(v string) *FilterForListUserPoolsInput {
	s.Description = &v
	return s
}

// SetName sets the Name field's value.
func (s *FilterForListUserPoolsInput) SetName(v string) *FilterForListUserPoolsInput {
	s.Name = &v
	return s
}

// SetTrn sets the Trn field's value.
func (s *FilterForListUserPoolsInput) SetTrn(v string) *FilterForListUserPoolsInput {
	s.Trn = &v
	return s
}

// SetUid sets the Uid field's value.
func (s *FilterForListUserPoolsInput) SetUid(v string) *FilterForListUserPoolsInput {
	s.Uid = &v
	return s
}

type ListUserPoolsInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Filter *FilterForListUserPoolsInput `type:"structure" json:",omitempty"`

	// PageNumber is a required field
	PageNumber *int32 `type:"int32" json:",omitempty" required:"true"`

	// PageSize is a required field
	PageSize *int32 `type:"int32" json:",omitempty" required:"true"`

	SortDirection *string `type:"string" json:",omitempty"`

	SortField *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ListUserPoolsInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListUserPoolsInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ListUserPoolsInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ListUserPoolsInput"}
	if s.PageNumber == nil {
		invalidParams.Add(request.NewErrParamRequired("PageNumber"))
	}
	if s.PageSize == nil {
		invalidParams.Add(request.NewErrParamRequired("PageSize"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetFilter sets the Filter field's value.
func (s *ListUserPoolsInput) SetFilter(v *FilterForListUserPoolsInput) *ListUserPoolsInput {
	s.Filter = v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *ListUserPoolsInput) SetPageNumber(v int32) *ListUserPoolsInput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *ListUserPoolsInput) SetPageSize(v int32) *ListUserPoolsInput {
	s.PageSize = &v
	return s
}

// SetSortDirection sets the SortDirection field's value.
func (s *ListUserPoolsInput) SetSortDirection(v string) *ListUserPoolsInput {
	s.SortDirection = &v
	return s
}

// SetSortField sets the SortField field's value.
func (s *ListUserPoolsInput) SetSortField(v string) *ListUserPoolsInput {
	s.SortField = &v
	return s
}

type ListUserPoolsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Data []*DataForListUserPoolsOutput `type:"list" json:",omitempty"`

	PageNumber *int32 `type:"int32" json:",omitempty"`

	PageSize *int32 `type:"int32" json:",omitempty"`

	TotalCount *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s ListUserPoolsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListUserPoolsOutput) GoString() string {
	return s.String()
}

// SetData sets the Data field's value.
func (s *ListUserPoolsOutput) SetData(v []*DataForListUserPoolsOutput) *ListUserPoolsOutput {
	s.Data = v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *ListUserPoolsOutput) SetPageNumber(v int32) *ListUserPoolsOutput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *ListUserPoolsOutput) SetPageSize(v int32) *ListUserPoolsOutput {
	s.PageSize = &v
	return s
}

// SetTotalCount sets the TotalCount field's value.
func (s *ListUserPoolsOutput) SetTotalCount(v int32) *ListUserPoolsOutput {
	s.TotalCount = &v
	return s
}
