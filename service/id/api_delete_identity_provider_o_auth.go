// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package id

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDeleteIdentityProviderOAuthCommon = "DeleteIdentityProviderOAuth"

// DeleteIdentityProviderOAuthCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteIdentityProviderOAuthCommon operation. The "output" return
// value will be populated with the DeleteIdentityProviderOAuthCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteIdentityProviderOAuthCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteIdentityProviderOAuthCommon Send returns without error.
//
// See DeleteIdentityProviderOAuthCommon for more information on using the DeleteIdentityProviderOAuthCommon
// API call, and error handling.
//
//    // Example sending a request using the DeleteIdentityProviderOAuthCommonRequest method.
//    req, resp := client.DeleteIdentityProviderOAuthCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ID) DeleteIdentityProviderOAuthCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteIdentityProviderOAuthCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DeleteIdentityProviderOAuthCommon API operation for ID.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ID's
// API operation DeleteIdentityProviderOAuthCommon for usage and error information.
func (c *ID) DeleteIdentityProviderOAuthCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteIdentityProviderOAuthCommonRequest(input)
	return out, req.Send()
}

// DeleteIdentityProviderOAuthCommonWithContext is the same as DeleteIdentityProviderOAuthCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteIdentityProviderOAuthCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ID) DeleteIdentityProviderOAuthCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteIdentityProviderOAuthCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteIdentityProviderOAuth = "DeleteIdentityProviderOAuth"

// DeleteIdentityProviderOAuthRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteIdentityProviderOAuth operation. The "output" return
// value will be populated with the DeleteIdentityProviderOAuthCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteIdentityProviderOAuthCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteIdentityProviderOAuthCommon Send returns without error.
//
// See DeleteIdentityProviderOAuth for more information on using the DeleteIdentityProviderOAuth
// API call, and error handling.
//
//    // Example sending a request using the DeleteIdentityProviderOAuthRequest method.
//    req, resp := client.DeleteIdentityProviderOAuthRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ID) DeleteIdentityProviderOAuthRequest(input *DeleteIdentityProviderOAuthInput) (req *request.Request, output *DeleteIdentityProviderOAuthOutput) {
	op := &request.Operation{
		Name:       opDeleteIdentityProviderOAuth,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteIdentityProviderOAuthInput{}
	}

	output = &DeleteIdentityProviderOAuthOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DeleteIdentityProviderOAuth API operation for ID.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ID's
// API operation DeleteIdentityProviderOAuth for usage and error information.
func (c *ID) DeleteIdentityProviderOAuth(input *DeleteIdentityProviderOAuthInput) (*DeleteIdentityProviderOAuthOutput, error) {
	req, out := c.DeleteIdentityProviderOAuthRequest(input)
	return out, req.Send()
}

// DeleteIdentityProviderOAuthWithContext is the same as DeleteIdentityProviderOAuth with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteIdentityProviderOAuth for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ID) DeleteIdentityProviderOAuthWithContext(ctx volcengine.Context, input *DeleteIdentityProviderOAuthInput, opts ...request.Option) (*DeleteIdentityProviderOAuthOutput, error) {
	req, out := c.DeleteIdentityProviderOAuthRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DeleteIdentityProviderOAuthInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// ConnectionUid is a required field
	ConnectionUid *string `type:"string" json:",omitempty" required:"true"`

	// UserPoolUid is a required field
	UserPoolUid *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s DeleteIdentityProviderOAuthInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteIdentityProviderOAuthInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeleteIdentityProviderOAuthInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DeleteIdentityProviderOAuthInput"}
	if s.ConnectionUid == nil {
		invalidParams.Add(request.NewErrParamRequired("ConnectionUid"))
	}
	if s.UserPoolUid == nil {
		invalidParams.Add(request.NewErrParamRequired("UserPoolUid"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetConnectionUid sets the ConnectionUid field's value.
func (s *DeleteIdentityProviderOAuthInput) SetConnectionUid(v string) *DeleteIdentityProviderOAuthInput {
	s.ConnectionUid = &v
	return s
}

// SetUserPoolUid sets the UserPoolUid field's value.
func (s *DeleteIdentityProviderOAuthInput) SetUserPoolUid(v string) *DeleteIdentityProviderOAuthInput {
	s.UserPoolUid = &v
	return s
}

type DeleteIdentityProviderOAuthOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Message *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s DeleteIdentityProviderOAuthOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteIdentityProviderOAuthOutput) GoString() string {
	return s.String()
}

// SetMessage sets the Message field's value.
func (s *DeleteIdentityProviderOAuthOutput) SetMessage(v string) *DeleteIdentityProviderOAuthOutput {
	s.Message = &v
	return s
}
