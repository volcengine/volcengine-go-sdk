// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package id

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDeletePolicyCommon = "DeletePolicy"

// DeletePolicyCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DeletePolicyCommon operation. The "output" return
// value will be populated with the DeletePolicyCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeletePolicyCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeletePolicyCommon Send returns without error.
//
// See DeletePolicyCommon for more information on using the DeletePolicyCommon
// API call, and error handling.
//
//    // Example sending a request using the DeletePolicyCommonRequest method.
//    req, resp := client.DeletePolicyCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ID) DeletePolicyCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeletePolicyCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DeletePolicyCommon API operation for ID.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ID's
// API operation DeletePolicyCommon for usage and error information.
func (c *ID) DeletePolicyCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeletePolicyCommonRequest(input)
	return out, req.Send()
}

// DeletePolicyCommonWithContext is the same as DeletePolicyCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeletePolicyCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ID) DeletePolicyCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeletePolicyCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeletePolicy = "DeletePolicy"

// DeletePolicyRequest generates a "volcengine/request.Request" representing the
// client's request for the DeletePolicy operation. The "output" return
// value will be populated with the DeletePolicyCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeletePolicyCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeletePolicyCommon Send returns without error.
//
// See DeletePolicy for more information on using the DeletePolicy
// API call, and error handling.
//
//    // Example sending a request using the DeletePolicyRequest method.
//    req, resp := client.DeletePolicyRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ID) DeletePolicyRequest(input *DeletePolicyInput) (req *request.Request, output *DeletePolicyOutput) {
	op := &request.Operation{
		Name:       opDeletePolicy,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeletePolicyInput{}
	}

	output = &DeletePolicyOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DeletePolicy API operation for ID.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ID's
// API operation DeletePolicy for usage and error information.
func (c *ID) DeletePolicy(input *DeletePolicyInput) (*DeletePolicyOutput, error) {
	req, out := c.DeletePolicyRequest(input)
	return out, req.Send()
}

// DeletePolicyWithContext is the same as DeletePolicy with the addition of
// the ability to pass a context and additional request options.
//
// See DeletePolicy for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ID) DeletePolicyWithContext(ctx volcengine.Context, input *DeletePolicyInput, opts ...request.Option) (*DeletePolicyOutput, error) {
	req, out := c.DeletePolicyRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DeletePolicyInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	NamespaceName *string `type:"string" json:",omitempty"`

	PolicyId *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s DeletePolicyInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeletePolicyInput) GoString() string {
	return s.String()
}

// SetNamespaceName sets the NamespaceName field's value.
func (s *DeletePolicyInput) SetNamespaceName(v string) *DeletePolicyInput {
	s.NamespaceName = &v
	return s
}

// SetPolicyId sets the PolicyId field's value.
func (s *DeletePolicyInput) SetPolicyId(v string) *DeletePolicyInput {
	s.PolicyId = &v
	return s
}

type DeletePolicyOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Message *string `type:"string" json:",omitempty"`

	Success *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s DeletePolicyOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeletePolicyOutput) GoString() string {
	return s.String()
}

// SetMessage sets the Message field's value.
func (s *DeletePolicyOutput) SetMessage(v string) *DeletePolicyOutput {
	s.Message = &v
	return s
}

// SetSuccess sets the Success field's value.
func (s *DeletePolicyOutput) SetSuccess(v int32) *DeletePolicyOutput {
	s.Success = &v
	return s
}
