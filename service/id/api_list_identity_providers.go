// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package id

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opListIdentityProvidersCommon = "ListIdentityProviders"

// ListIdentityProvidersCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ListIdentityProvidersCommon operation. The "output" return
// value will be populated with the ListIdentityProvidersCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListIdentityProvidersCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListIdentityProvidersCommon Send returns without error.
//
// See ListIdentityProvidersCommon for more information on using the ListIdentityProvidersCommon
// API call, and error handling.
//
//    // Example sending a request using the ListIdentityProvidersCommonRequest method.
//    req, resp := client.ListIdentityProvidersCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ID) ListIdentityProvidersCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opListIdentityProvidersCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListIdentityProvidersCommon API operation for ID.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ID's
// API operation ListIdentityProvidersCommon for usage and error information.
func (c *ID) ListIdentityProvidersCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ListIdentityProvidersCommonRequest(input)
	return out, req.Send()
}

// ListIdentityProvidersCommonWithContext is the same as ListIdentityProvidersCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ListIdentityProvidersCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ID) ListIdentityProvidersCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ListIdentityProvidersCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListIdentityProviders = "ListIdentityProviders"

// ListIdentityProvidersRequest generates a "volcengine/request.Request" representing the
// client's request for the ListIdentityProviders operation. The "output" return
// value will be populated with the ListIdentityProvidersCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListIdentityProvidersCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListIdentityProvidersCommon Send returns without error.
//
// See ListIdentityProviders for more information on using the ListIdentityProviders
// API call, and error handling.
//
//    // Example sending a request using the ListIdentityProvidersRequest method.
//    req, resp := client.ListIdentityProvidersRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ID) ListIdentityProvidersRequest(input *ListIdentityProvidersInput) (req *request.Request, output *ListIdentityProvidersOutput) {
	op := &request.Operation{
		Name:       opListIdentityProviders,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListIdentityProvidersInput{}
	}

	output = &ListIdentityProvidersOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListIdentityProviders API operation for ID.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ID's
// API operation ListIdentityProviders for usage and error information.
func (c *ID) ListIdentityProviders(input *ListIdentityProvidersInput) (*ListIdentityProvidersOutput, error) {
	req, out := c.ListIdentityProvidersRequest(input)
	return out, req.Send()
}

// ListIdentityProvidersWithContext is the same as ListIdentityProviders with the addition of
// the ability to pass a context and additional request options.
//
// See ListIdentityProviders for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ID) ListIdentityProvidersWithContext(ctx volcengine.Context, input *ListIdentityProvidersInput, opts ...request.Option) (*ListIdentityProvidersOutput, error) {
	req, out := c.ListIdentityProvidersRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DataForListIdentityProvidersOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	ConnectionType *string `type:"string" json:",omitempty"`

	CreateTime *string `type:"string" json:",omitempty"`

	Name *string `type:"string" json:",omitempty"`

	Uid *string `type:"string" json:",omitempty"`

	UpdateTime *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s DataForListIdentityProvidersOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DataForListIdentityProvidersOutput) GoString() string {
	return s.String()
}

// SetConnectionType sets the ConnectionType field's value.
func (s *DataForListIdentityProvidersOutput) SetConnectionType(v string) *DataForListIdentityProvidersOutput {
	s.ConnectionType = &v
	return s
}

// SetCreateTime sets the CreateTime field's value.
func (s *DataForListIdentityProvidersOutput) SetCreateTime(v string) *DataForListIdentityProvidersOutput {
	s.CreateTime = &v
	return s
}

// SetName sets the Name field's value.
func (s *DataForListIdentityProvidersOutput) SetName(v string) *DataForListIdentityProvidersOutput {
	s.Name = &v
	return s
}

// SetUid sets the Uid field's value.
func (s *DataForListIdentityProvidersOutput) SetUid(v string) *DataForListIdentityProvidersOutput {
	s.Uid = &v
	return s
}

// SetUpdateTime sets the UpdateTime field's value.
func (s *DataForListIdentityProvidersOutput) SetUpdateTime(v string) *DataForListIdentityProvidersOutput {
	s.UpdateTime = &v
	return s
}

type FilterForListIdentityProvidersInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	ConnectionType *string `type:"string" json:",omitempty"`

	Name *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s FilterForListIdentityProvidersInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s FilterForListIdentityProvidersInput) GoString() string {
	return s.String()
}

// SetConnectionType sets the ConnectionType field's value.
func (s *FilterForListIdentityProvidersInput) SetConnectionType(v string) *FilterForListIdentityProvidersInput {
	s.ConnectionType = &v
	return s
}

// SetName sets the Name field's value.
func (s *FilterForListIdentityProvidersInput) SetName(v string) *FilterForListIdentityProvidersInput {
	s.Name = &v
	return s
}

type ListIdentityProvidersInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Filter *FilterForListIdentityProvidersInput `type:"structure" json:",omitempty"`

	// PageNumber is a required field
	PageNumber *int32 `type:"int32" json:",omitempty" required:"true"`

	// PageSize is a required field
	PageSize *int32 `type:"int32" json:",omitempty" required:"true"`

	// UserPoolUID is a required field
	UserPoolUID *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s ListIdentityProvidersInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListIdentityProvidersInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ListIdentityProvidersInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ListIdentityProvidersInput"}
	if s.PageNumber == nil {
		invalidParams.Add(request.NewErrParamRequired("PageNumber"))
	}
	if s.PageSize == nil {
		invalidParams.Add(request.NewErrParamRequired("PageSize"))
	}
	if s.UserPoolUID == nil {
		invalidParams.Add(request.NewErrParamRequired("UserPoolUID"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetFilter sets the Filter field's value.
func (s *ListIdentityProvidersInput) SetFilter(v *FilterForListIdentityProvidersInput) *ListIdentityProvidersInput {
	s.Filter = v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *ListIdentityProvidersInput) SetPageNumber(v int32) *ListIdentityProvidersInput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *ListIdentityProvidersInput) SetPageSize(v int32) *ListIdentityProvidersInput {
	s.PageSize = &v
	return s
}

// SetUserPoolUID sets the UserPoolUID field's value.
func (s *ListIdentityProvidersInput) SetUserPoolUID(v string) *ListIdentityProvidersInput {
	s.UserPoolUID = &v
	return s
}

type ListIdentityProvidersOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Data []*DataForListIdentityProvidersOutput `type:"list" json:",omitempty"`

	PageNumber *int32 `type:"int32" json:",omitempty"`

	PageSize *int32 `type:"int32" json:",omitempty"`

	TotalCount *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s ListIdentityProvidersOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListIdentityProvidersOutput) GoString() string {
	return s.String()
}

// SetData sets the Data field's value.
func (s *ListIdentityProvidersOutput) SetData(v []*DataForListIdentityProvidersOutput) *ListIdentityProvidersOutput {
	s.Data = v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *ListIdentityProvidersOutput) SetPageNumber(v int32) *ListIdentityProvidersOutput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *ListIdentityProvidersOutput) SetPageSize(v int32) *ListIdentityProvidersOutput {
	s.PageSize = &v
	return s
}

// SetTotalCount sets the TotalCount field's value.
func (s *ListIdentityProvidersOutput) SetTotalCount(v int32) *ListIdentityProvidersOutput {
	s.TotalCount = &v
	return s
}
