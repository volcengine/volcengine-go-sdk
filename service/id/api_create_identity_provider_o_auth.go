// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package id

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opCreateIdentityProviderOAuthCommon = "CreateIdentityProviderOAuth"

// CreateIdentityProviderOAuthCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateIdentityProviderOAuthCommon operation. The "output" return
// value will be populated with the CreateIdentityProviderOAuthCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateIdentityProviderOAuthCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateIdentityProviderOAuthCommon Send returns without error.
//
// See CreateIdentityProviderOAuthCommon for more information on using the CreateIdentityProviderOAuthCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateIdentityProviderOAuthCommonRequest method.
//    req, resp := client.CreateIdentityProviderOAuthCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ID) CreateIdentityProviderOAuthCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateIdentityProviderOAuthCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateIdentityProviderOAuthCommon API operation for ID.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ID's
// API operation CreateIdentityProviderOAuthCommon for usage and error information.
func (c *ID) CreateIdentityProviderOAuthCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateIdentityProviderOAuthCommonRequest(input)
	return out, req.Send()
}

// CreateIdentityProviderOAuthCommonWithContext is the same as CreateIdentityProviderOAuthCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateIdentityProviderOAuthCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ID) CreateIdentityProviderOAuthCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateIdentityProviderOAuthCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateIdentityProviderOAuth = "CreateIdentityProviderOAuth"

// CreateIdentityProviderOAuthRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateIdentityProviderOAuth operation. The "output" return
// value will be populated with the CreateIdentityProviderOAuthCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateIdentityProviderOAuthCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateIdentityProviderOAuthCommon Send returns without error.
//
// See CreateIdentityProviderOAuth for more information on using the CreateIdentityProviderOAuth
// API call, and error handling.
//
//    // Example sending a request using the CreateIdentityProviderOAuthRequest method.
//    req, resp := client.CreateIdentityProviderOAuthRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ID) CreateIdentityProviderOAuthRequest(input *CreateIdentityProviderOAuthInput) (req *request.Request, output *CreateIdentityProviderOAuthOutput) {
	op := &request.Operation{
		Name:       opCreateIdentityProviderOAuth,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateIdentityProviderOAuthInput{}
	}

	output = &CreateIdentityProviderOAuthOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateIdentityProviderOAuth API operation for ID.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ID's
// API operation CreateIdentityProviderOAuth for usage and error information.
func (c *ID) CreateIdentityProviderOAuth(input *CreateIdentityProviderOAuthInput) (*CreateIdentityProviderOAuthOutput, error) {
	req, out := c.CreateIdentityProviderOAuthRequest(input)
	return out, req.Send()
}

// CreateIdentityProviderOAuthWithContext is the same as CreateIdentityProviderOAuth with the addition of
// the ability to pass a context and additional request options.
//
// See CreateIdentityProviderOAuth for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ID) CreateIdentityProviderOAuthWithContext(ctx volcengine.Context, input *CreateIdentityProviderOAuthInput, opts ...request.Option) (*CreateIdentityProviderOAuthOutput, error) {
	req, out := c.CreateIdentityProviderOAuthRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type CreateIdentityProviderOAuthInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// AuthorizationEndpoint is a required field
	AuthorizationEndpoint *string `type:"string" json:",omitempty" required:"true"`

	// ClientId is a required field
	ClientId *string `type:"string" json:",omitempty" required:"true"`

	// ClientSecret is a required field
	ClientSecret *string `type:"string" json:",omitempty" required:"true"`

	// Enabled is a required field
	Enabled *bool `type:"boolean" json:",omitempty" required:"true"`

	// IdAttribute is a required field
	IdAttribute *string `type:"string" json:",omitempty" required:"true"`

	// Name is a required field
	Name *string `type:"string" json:",omitempty" required:"true"`

	ProviderOptions *ProviderOptionsForCreateIdentityProviderOAuthInput `type:"structure" json:",omitempty"`

	ScopesList []*string `type:"list" json:",omitempty"`

	// TokenEndpoint is a required field
	TokenEndpoint *string `type:"string" json:",omitempty" required:"true"`

	// UsePkce is a required field
	UsePkce *bool `type:"boolean" json:",omitempty" required:"true"`

	// UserEndpoint is a required field
	UserEndpoint *string `type:"string" json:",omitempty" required:"true"`

	// UserPoolUid is a required field
	UserPoolUid *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s CreateIdentityProviderOAuthInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateIdentityProviderOAuthInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateIdentityProviderOAuthInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CreateIdentityProviderOAuthInput"}
	if s.AuthorizationEndpoint == nil {
		invalidParams.Add(request.NewErrParamRequired("AuthorizationEndpoint"))
	}
	if s.ClientId == nil {
		invalidParams.Add(request.NewErrParamRequired("ClientId"))
	}
	if s.ClientSecret == nil {
		invalidParams.Add(request.NewErrParamRequired("ClientSecret"))
	}
	if s.Enabled == nil {
		invalidParams.Add(request.NewErrParamRequired("Enabled"))
	}
	if s.IdAttribute == nil {
		invalidParams.Add(request.NewErrParamRequired("IdAttribute"))
	}
	if s.Name == nil {
		invalidParams.Add(request.NewErrParamRequired("Name"))
	}
	if s.TokenEndpoint == nil {
		invalidParams.Add(request.NewErrParamRequired("TokenEndpoint"))
	}
	if s.UsePkce == nil {
		invalidParams.Add(request.NewErrParamRequired("UsePkce"))
	}
	if s.UserEndpoint == nil {
		invalidParams.Add(request.NewErrParamRequired("UserEndpoint"))
	}
	if s.UserPoolUid == nil {
		invalidParams.Add(request.NewErrParamRequired("UserPoolUid"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAuthorizationEndpoint sets the AuthorizationEndpoint field's value.
func (s *CreateIdentityProviderOAuthInput) SetAuthorizationEndpoint(v string) *CreateIdentityProviderOAuthInput {
	s.AuthorizationEndpoint = &v
	return s
}

// SetClientId sets the ClientId field's value.
func (s *CreateIdentityProviderOAuthInput) SetClientId(v string) *CreateIdentityProviderOAuthInput {
	s.ClientId = &v
	return s
}

// SetClientSecret sets the ClientSecret field's value.
func (s *CreateIdentityProviderOAuthInput) SetClientSecret(v string) *CreateIdentityProviderOAuthInput {
	s.ClientSecret = &v
	return s
}

// SetEnabled sets the Enabled field's value.
func (s *CreateIdentityProviderOAuthInput) SetEnabled(v bool) *CreateIdentityProviderOAuthInput {
	s.Enabled = &v
	return s
}

// SetIdAttribute sets the IdAttribute field's value.
func (s *CreateIdentityProviderOAuthInput) SetIdAttribute(v string) *CreateIdentityProviderOAuthInput {
	s.IdAttribute = &v
	return s
}

// SetName sets the Name field's value.
func (s *CreateIdentityProviderOAuthInput) SetName(v string) *CreateIdentityProviderOAuthInput {
	s.Name = &v
	return s
}

// SetProviderOptions sets the ProviderOptions field's value.
func (s *CreateIdentityProviderOAuthInput) SetProviderOptions(v *ProviderOptionsForCreateIdentityProviderOAuthInput) *CreateIdentityProviderOAuthInput {
	s.ProviderOptions = v
	return s
}

// SetScopesList sets the ScopesList field's value.
func (s *CreateIdentityProviderOAuthInput) SetScopesList(v []*string) *CreateIdentityProviderOAuthInput {
	s.ScopesList = v
	return s
}

// SetTokenEndpoint sets the TokenEndpoint field's value.
func (s *CreateIdentityProviderOAuthInput) SetTokenEndpoint(v string) *CreateIdentityProviderOAuthInput {
	s.TokenEndpoint = &v
	return s
}

// SetUsePkce sets the UsePkce field's value.
func (s *CreateIdentityProviderOAuthInput) SetUsePkce(v bool) *CreateIdentityProviderOAuthInput {
	s.UsePkce = &v
	return s
}

// SetUserEndpoint sets the UserEndpoint field's value.
func (s *CreateIdentityProviderOAuthInput) SetUserEndpoint(v string) *CreateIdentityProviderOAuthInput {
	s.UserEndpoint = &v
	return s
}

// SetUserPoolUid sets the UserPoolUid field's value.
func (s *CreateIdentityProviderOAuthInput) SetUserPoolUid(v string) *CreateIdentityProviderOAuthInput {
	s.UserPoolUid = &v
	return s
}

type CreateIdentityProviderOAuthOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	AuthorizationEndpoint *string `type:"string" json:",omitempty"`

	ClientId *string `type:"string" json:",omitempty"`

	ClientSecret *string `type:"string" json:",omitempty"`

	Enabled *bool `type:"boolean" json:",omitempty"`

	IdAttribute *string `type:"string" json:",omitempty"`

	Name *string `type:"string" json:",omitempty"`

	ProviderOptions *ProviderOptionsForCreateIdentityProviderOAuthOutput `type:"structure" json:",omitempty"`

	ScopesList []*string `type:"list" json:",omitempty"`

	TokenEndpoint *string `type:"string" json:",omitempty"`

	Uid *string `type:"string" json:",omitempty"`

	UsePkce *bool `type:"boolean" json:",omitempty"`

	UserEndpoint *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s CreateIdentityProviderOAuthOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateIdentityProviderOAuthOutput) GoString() string {
	return s.String()
}

// SetAuthorizationEndpoint sets the AuthorizationEndpoint field's value.
func (s *CreateIdentityProviderOAuthOutput) SetAuthorizationEndpoint(v string) *CreateIdentityProviderOAuthOutput {
	s.AuthorizationEndpoint = &v
	return s
}

// SetClientId sets the ClientId field's value.
func (s *CreateIdentityProviderOAuthOutput) SetClientId(v string) *CreateIdentityProviderOAuthOutput {
	s.ClientId = &v
	return s
}

// SetClientSecret sets the ClientSecret field's value.
func (s *CreateIdentityProviderOAuthOutput) SetClientSecret(v string) *CreateIdentityProviderOAuthOutput {
	s.ClientSecret = &v
	return s
}

// SetEnabled sets the Enabled field's value.
func (s *CreateIdentityProviderOAuthOutput) SetEnabled(v bool) *CreateIdentityProviderOAuthOutput {
	s.Enabled = &v
	return s
}

// SetIdAttribute sets the IdAttribute field's value.
func (s *CreateIdentityProviderOAuthOutput) SetIdAttribute(v string) *CreateIdentityProviderOAuthOutput {
	s.IdAttribute = &v
	return s
}

// SetName sets the Name field's value.
func (s *CreateIdentityProviderOAuthOutput) SetName(v string) *CreateIdentityProviderOAuthOutput {
	s.Name = &v
	return s
}

// SetProviderOptions sets the ProviderOptions field's value.
func (s *CreateIdentityProviderOAuthOutput) SetProviderOptions(v *ProviderOptionsForCreateIdentityProviderOAuthOutput) *CreateIdentityProviderOAuthOutput {
	s.ProviderOptions = v
	return s
}

// SetScopesList sets the ScopesList field's value.
func (s *CreateIdentityProviderOAuthOutput) SetScopesList(v []*string) *CreateIdentityProviderOAuthOutput {
	s.ScopesList = v
	return s
}

// SetTokenEndpoint sets the TokenEndpoint field's value.
func (s *CreateIdentityProviderOAuthOutput) SetTokenEndpoint(v string) *CreateIdentityProviderOAuthOutput {
	s.TokenEndpoint = &v
	return s
}

// SetUid sets the Uid field's value.
func (s *CreateIdentityProviderOAuthOutput) SetUid(v string) *CreateIdentityProviderOAuthOutput {
	s.Uid = &v
	return s
}

// SetUsePkce sets the UsePkce field's value.
func (s *CreateIdentityProviderOAuthOutput) SetUsePkce(v bool) *CreateIdentityProviderOAuthOutput {
	s.UsePkce = &v
	return s
}

// SetUserEndpoint sets the UserEndpoint field's value.
func (s *CreateIdentityProviderOAuthOutput) SetUserEndpoint(v string) *CreateIdentityProviderOAuthOutput {
	s.UserEndpoint = &v
	return s
}

type ProviderOptionsForCreateIdentityProviderOAuthInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	AutoLinking *string `type:"string" json:",omitempty"`

	IsAutoCreation *bool `type:"boolean" json:",omitempty"`

	IsAutoUpdate *bool `type:"boolean" json:",omitempty"`

	IsCreationAllowed *bool `type:"boolean" json:",omitempty"`

	IsLinkingAllowed *bool `type:"boolean" json:",omitempty"`
}

// String returns the string representation
func (s ProviderOptionsForCreateIdentityProviderOAuthInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ProviderOptionsForCreateIdentityProviderOAuthInput) GoString() string {
	return s.String()
}

// SetAutoLinking sets the AutoLinking field's value.
func (s *ProviderOptionsForCreateIdentityProviderOAuthInput) SetAutoLinking(v string) *ProviderOptionsForCreateIdentityProviderOAuthInput {
	s.AutoLinking = &v
	return s
}

// SetIsAutoCreation sets the IsAutoCreation field's value.
func (s *ProviderOptionsForCreateIdentityProviderOAuthInput) SetIsAutoCreation(v bool) *ProviderOptionsForCreateIdentityProviderOAuthInput {
	s.IsAutoCreation = &v
	return s
}

// SetIsAutoUpdate sets the IsAutoUpdate field's value.
func (s *ProviderOptionsForCreateIdentityProviderOAuthInput) SetIsAutoUpdate(v bool) *ProviderOptionsForCreateIdentityProviderOAuthInput {
	s.IsAutoUpdate = &v
	return s
}

// SetIsCreationAllowed sets the IsCreationAllowed field's value.
func (s *ProviderOptionsForCreateIdentityProviderOAuthInput) SetIsCreationAllowed(v bool) *ProviderOptionsForCreateIdentityProviderOAuthInput {
	s.IsCreationAllowed = &v
	return s
}

// SetIsLinkingAllowed sets the IsLinkingAllowed field's value.
func (s *ProviderOptionsForCreateIdentityProviderOAuthInput) SetIsLinkingAllowed(v bool) *ProviderOptionsForCreateIdentityProviderOAuthInput {
	s.IsLinkingAllowed = &v
	return s
}

type ProviderOptionsForCreateIdentityProviderOAuthOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	AutoLinking *string `type:"string" json:",omitempty"`

	IsAutoCreation *bool `type:"boolean" json:",omitempty"`

	IsAutoUpdate *bool `type:"boolean" json:",omitempty"`

	IsCreationAllowed *bool `type:"boolean" json:",omitempty"`

	IsLinkingAllowed *bool `type:"boolean" json:",omitempty"`
}

// String returns the string representation
func (s ProviderOptionsForCreateIdentityProviderOAuthOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ProviderOptionsForCreateIdentityProviderOAuthOutput) GoString() string {
	return s.String()
}

// SetAutoLinking sets the AutoLinking field's value.
func (s *ProviderOptionsForCreateIdentityProviderOAuthOutput) SetAutoLinking(v string) *ProviderOptionsForCreateIdentityProviderOAuthOutput {
	s.AutoLinking = &v
	return s
}

// SetIsAutoCreation sets the IsAutoCreation field's value.
func (s *ProviderOptionsForCreateIdentityProviderOAuthOutput) SetIsAutoCreation(v bool) *ProviderOptionsForCreateIdentityProviderOAuthOutput {
	s.IsAutoCreation = &v
	return s
}

// SetIsAutoUpdate sets the IsAutoUpdate field's value.
func (s *ProviderOptionsForCreateIdentityProviderOAuthOutput) SetIsAutoUpdate(v bool) *ProviderOptionsForCreateIdentityProviderOAuthOutput {
	s.IsAutoUpdate = &v
	return s
}

// SetIsCreationAllowed sets the IsCreationAllowed field's value.
func (s *ProviderOptionsForCreateIdentityProviderOAuthOutput) SetIsCreationAllowed(v bool) *ProviderOptionsForCreateIdentityProviderOAuthOutput {
	s.IsCreationAllowed = &v
	return s
}

// SetIsLinkingAllowed sets the IsLinkingAllowed field's value.
func (s *ProviderOptionsForCreateIdentityProviderOAuthOutput) SetIsLinkingAllowed(v bool) *ProviderOptionsForCreateIdentityProviderOAuthOutput {
	s.IsLinkingAllowed = &v
	return s
}
