// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package id

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opCheckPermissionCommon = "CheckPermission"

// CheckPermissionCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the CheckPermissionCommon operation. The "output" return
// value will be populated with the CheckPermissionCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CheckPermissionCommon Request to send the API call to the service.
// the "output" return value is not valid until after CheckPermissionCommon Send returns without error.
//
// See CheckPermissionCommon for more information on using the CheckPermissionCommon
// API call, and error handling.
//
//    // Example sending a request using the CheckPermissionCommonRequest method.
//    req, resp := client.CheckPermissionCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ID) CheckPermissionCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCheckPermissionCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CheckPermissionCommon API operation for ID.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ID's
// API operation CheckPermissionCommon for usage and error information.
func (c *ID) CheckPermissionCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CheckPermissionCommonRequest(input)
	return out, req.Send()
}

// CheckPermissionCommonWithContext is the same as CheckPermissionCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CheckPermissionCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ID) CheckPermissionCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CheckPermissionCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCheckPermission = "CheckPermission"

// CheckPermissionRequest generates a "volcengine/request.Request" representing the
// client's request for the CheckPermission operation. The "output" return
// value will be populated with the CheckPermissionCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CheckPermissionCommon Request to send the API call to the service.
// the "output" return value is not valid until after CheckPermissionCommon Send returns without error.
//
// See CheckPermission for more information on using the CheckPermission
// API call, and error handling.
//
//    // Example sending a request using the CheckPermissionRequest method.
//    req, resp := client.CheckPermissionRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ID) CheckPermissionRequest(input *CheckPermissionInput) (req *request.Request, output *CheckPermissionOutput) {
	op := &request.Operation{
		Name:       opCheckPermission,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CheckPermissionInput{}
	}

	output = &CheckPermissionOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CheckPermission API operation for ID.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ID's
// API operation CheckPermission for usage and error information.
func (c *ID) CheckPermission(input *CheckPermissionInput) (*CheckPermissionOutput, error) {
	req, out := c.CheckPermissionRequest(input)
	return out, req.Send()
}

// CheckPermissionWithContext is the same as CheckPermission with the addition of
// the ability to pass a context and additional request options.
//
// See CheckPermission for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ID) CheckPermissionWithContext(ctx volcengine.Context, input *CheckPermissionInput, opts ...request.Option) (*CheckPermissionOutput, error) {
	req, out := c.CheckPermissionRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type CheckPermissionInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// NamespaceName is a required field
	NamespaceName *string `type:"string" json:",omitempty" required:"true"`

	Operation *OperationForCheckPermissionInput `type:"structure" json:",omitempty"`

	OriginalCallers []*OriginalCallerForCheckPermissionInput `type:"list" json:",omitempty"`

	Principal *PrincipalForCheckPermissionInput `type:"structure" json:",omitempty"`

	References []*ReferenceForCheckPermissionInput `type:"list" json:",omitempty"`

	Resource *ResourceForCheckPermissionInput `type:"structure" json:",omitempty"`
}

// String returns the string representation
func (s CheckPermissionInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CheckPermissionInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CheckPermissionInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CheckPermissionInput"}
	if s.NamespaceName == nil {
		invalidParams.Add(request.NewErrParamRequired("NamespaceName"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetNamespaceName sets the NamespaceName field's value.
func (s *CheckPermissionInput) SetNamespaceName(v string) *CheckPermissionInput {
	s.NamespaceName = &v
	return s
}

// SetOperation sets the Operation field's value.
func (s *CheckPermissionInput) SetOperation(v *OperationForCheckPermissionInput) *CheckPermissionInput {
	s.Operation = v
	return s
}

// SetOriginalCallers sets the OriginalCallers field's value.
func (s *CheckPermissionInput) SetOriginalCallers(v []*OriginalCallerForCheckPermissionInput) *CheckPermissionInput {
	s.OriginalCallers = v
	return s
}

// SetPrincipal sets the Principal field's value.
func (s *CheckPermissionInput) SetPrincipal(v *PrincipalForCheckPermissionInput) *CheckPermissionInput {
	s.Principal = v
	return s
}

// SetReferences sets the References field's value.
func (s *CheckPermissionInput) SetReferences(v []*ReferenceForCheckPermissionInput) *CheckPermissionInput {
	s.References = v
	return s
}

// SetResource sets the Resource field's value.
func (s *CheckPermissionInput) SetResource(v *ResourceForCheckPermissionInput) *CheckPermissionInput {
	s.Resource = v
	return s
}

type CheckPermissionOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Allowed *bool `type:"boolean" json:",omitempty"`

	Message *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s CheckPermissionOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CheckPermissionOutput) GoString() string {
	return s.String()
}

// SetAllowed sets the Allowed field's value.
func (s *CheckPermissionOutput) SetAllowed(v bool) *CheckPermissionOutput {
	s.Allowed = &v
	return s
}

// SetMessage sets the Message field's value.
func (s *CheckPermissionOutput) SetMessage(v string) *CheckPermissionOutput {
	s.Message = &v
	return s
}

type EntityForCheckPermissionInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Id *string `type:"string" json:",omitempty"`

	Type *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s EntityForCheckPermissionInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s EntityForCheckPermissionInput) GoString() string {
	return s.String()
}

// SetId sets the Id field's value.
func (s *EntityForCheckPermissionInput) SetId(v string) *EntityForCheckPermissionInput {
	s.Id = &v
	return s
}

// SetType sets the Type field's value.
func (s *EntityForCheckPermissionInput) SetType(v string) *EntityForCheckPermissionInput {
	s.Type = &v
	return s
}

type OperationForCheckPermissionInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Id *string `type:"string" json:",omitempty"`

	Type *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s OperationForCheckPermissionInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s OperationForCheckPermissionInput) GoString() string {
	return s.String()
}

// SetId sets the Id field's value.
func (s *OperationForCheckPermissionInput) SetId(v string) *OperationForCheckPermissionInput {
	s.Id = &v
	return s
}

// SetType sets the Type field's value.
func (s *OperationForCheckPermissionInput) SetType(v string) *OperationForCheckPermissionInput {
	s.Type = &v
	return s
}

type OriginalCallerForCheckPermissionInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Id *string `type:"string" json:",omitempty"`

	Type *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s OriginalCallerForCheckPermissionInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s OriginalCallerForCheckPermissionInput) GoString() string {
	return s.String()
}

// SetId sets the Id field's value.
func (s *OriginalCallerForCheckPermissionInput) SetId(v string) *OriginalCallerForCheckPermissionInput {
	s.Id = &v
	return s
}

// SetType sets the Type field's value.
func (s *OriginalCallerForCheckPermissionInput) SetType(v string) *OriginalCallerForCheckPermissionInput {
	s.Type = &v
	return s
}

type ParentForCheckPermissionInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Id *string `type:"string" json:",omitempty"`

	Type *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ParentForCheckPermissionInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ParentForCheckPermissionInput) GoString() string {
	return s.String()
}

// SetId sets the Id field's value.
func (s *ParentForCheckPermissionInput) SetId(v string) *ParentForCheckPermissionInput {
	s.Id = &v
	return s
}

// SetType sets the Type field's value.
func (s *ParentForCheckPermissionInput) SetType(v string) *ParentForCheckPermissionInput {
	s.Type = &v
	return s
}

type PrincipalForCheckPermissionInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Id *string `type:"string" json:",omitempty"`

	Type *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s PrincipalForCheckPermissionInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s PrincipalForCheckPermissionInput) GoString() string {
	return s.String()
}

// SetId sets the Id field's value.
func (s *PrincipalForCheckPermissionInput) SetId(v string) *PrincipalForCheckPermissionInput {
	s.Id = &v
	return s
}

// SetType sets the Type field's value.
func (s *PrincipalForCheckPermissionInput) SetType(v string) *PrincipalForCheckPermissionInput {
	s.Type = &v
	return s
}

type ReferenceForCheckPermissionInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Entity *EntityForCheckPermissionInput `type:"structure" json:",omitempty"`

	Parents []*ParentForCheckPermissionInput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s ReferenceForCheckPermissionInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ReferenceForCheckPermissionInput) GoString() string {
	return s.String()
}

// SetEntity sets the Entity field's value.
func (s *ReferenceForCheckPermissionInput) SetEntity(v *EntityForCheckPermissionInput) *ReferenceForCheckPermissionInput {
	s.Entity = v
	return s
}

// SetParents sets the Parents field's value.
func (s *ReferenceForCheckPermissionInput) SetParents(v []*ParentForCheckPermissionInput) *ReferenceForCheckPermissionInput {
	s.Parents = v
	return s
}

type ResourceForCheckPermissionInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Id *string `type:"string" json:",omitempty"`

	Type *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ResourceForCheckPermissionInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ResourceForCheckPermissionInput) GoString() string {
	return s.String()
}

// SetId sets the Id field's value.
func (s *ResourceForCheckPermissionInput) SetId(v string) *ResourceForCheckPermissionInput {
	s.Id = &v
	return s
}

// SetType sets the Type field's value.
func (s *ResourceForCheckPermissionInput) SetType(v string) *ResourceForCheckPermissionInput {
	s.Type = &v
	return s
}
