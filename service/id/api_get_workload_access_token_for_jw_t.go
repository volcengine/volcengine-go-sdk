// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package id

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opGetWorkloadAccessTokenForJWTCommon = "GetWorkloadAccessTokenForJWT"

// GetWorkloadAccessTokenForJWTCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the GetWorkloadAccessTokenForJWTCommon operation. The "output" return
// value will be populated with the GetWorkloadAccessTokenForJWTCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetWorkloadAccessTokenForJWTCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetWorkloadAccessTokenForJWTCommon Send returns without error.
//
// See GetWorkloadAccessTokenForJWTCommon for more information on using the GetWorkloadAccessTokenForJWTCommon
// API call, and error handling.
//
//    // Example sending a request using the GetWorkloadAccessTokenForJWTCommonRequest method.
//    req, resp := client.GetWorkloadAccessTokenForJWTCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ID) GetWorkloadAccessTokenForJWTCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opGetWorkloadAccessTokenForJWTCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetWorkloadAccessTokenForJWTCommon API operation for ID.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ID's
// API operation GetWorkloadAccessTokenForJWTCommon for usage and error information.
func (c *ID) GetWorkloadAccessTokenForJWTCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.GetWorkloadAccessTokenForJWTCommonRequest(input)
	return out, req.Send()
}

// GetWorkloadAccessTokenForJWTCommonWithContext is the same as GetWorkloadAccessTokenForJWTCommon with the addition of
// the ability to pass a context and additional request options.
//
// See GetWorkloadAccessTokenForJWTCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ID) GetWorkloadAccessTokenForJWTCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.GetWorkloadAccessTokenForJWTCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opGetWorkloadAccessTokenForJWT = "GetWorkloadAccessTokenForJWT"

// GetWorkloadAccessTokenForJWTRequest generates a "volcengine/request.Request" representing the
// client's request for the GetWorkloadAccessTokenForJWT operation. The "output" return
// value will be populated with the GetWorkloadAccessTokenForJWTCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetWorkloadAccessTokenForJWTCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetWorkloadAccessTokenForJWTCommon Send returns without error.
//
// See GetWorkloadAccessTokenForJWT for more information on using the GetWorkloadAccessTokenForJWT
// API call, and error handling.
//
//    // Example sending a request using the GetWorkloadAccessTokenForJWTRequest method.
//    req, resp := client.GetWorkloadAccessTokenForJWTRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ID) GetWorkloadAccessTokenForJWTRequest(input *GetWorkloadAccessTokenForJWTInput) (req *request.Request, output *GetWorkloadAccessTokenForJWTOutput) {
	op := &request.Operation{
		Name:       opGetWorkloadAccessTokenForJWT,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &GetWorkloadAccessTokenForJWTInput{}
	}

	output = &GetWorkloadAccessTokenForJWTOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetWorkloadAccessTokenForJWT API operation for ID.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ID's
// API operation GetWorkloadAccessTokenForJWT for usage and error information.
func (c *ID) GetWorkloadAccessTokenForJWT(input *GetWorkloadAccessTokenForJWTInput) (*GetWorkloadAccessTokenForJWTOutput, error) {
	req, out := c.GetWorkloadAccessTokenForJWTRequest(input)
	return out, req.Send()
}

// GetWorkloadAccessTokenForJWTWithContext is the same as GetWorkloadAccessTokenForJWT with the addition of
// the ability to pass a context and additional request options.
//
// See GetWorkloadAccessTokenForJWT for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ID) GetWorkloadAccessTokenForJWTWithContext(ctx volcengine.Context, input *GetWorkloadAccessTokenForJWTInput, opts ...request.Option) (*GetWorkloadAccessTokenForJWTOutput, error) {
	req, out := c.GetWorkloadAccessTokenForJWTRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type GetWorkloadAccessTokenForJWTInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Name *string `type:"string" json:",omitempty"`

	// UserToken is a required field
	UserToken *string `type:"string" json:",omitempty" required:"true"`

	WorkloadPoolName *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s GetWorkloadAccessTokenForJWTInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetWorkloadAccessTokenForJWTInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *GetWorkloadAccessTokenForJWTInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "GetWorkloadAccessTokenForJWTInput"}
	if s.UserToken == nil {
		invalidParams.Add(request.NewErrParamRequired("UserToken"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetName sets the Name field's value.
func (s *GetWorkloadAccessTokenForJWTInput) SetName(v string) *GetWorkloadAccessTokenForJWTInput {
	s.Name = &v
	return s
}

// SetUserToken sets the UserToken field's value.
func (s *GetWorkloadAccessTokenForJWTInput) SetUserToken(v string) *GetWorkloadAccessTokenForJWTInput {
	s.UserToken = &v
	return s
}

// SetWorkloadPoolName sets the WorkloadPoolName field's value.
func (s *GetWorkloadAccessTokenForJWTInput) SetWorkloadPoolName(v string) *GetWorkloadAccessTokenForJWTInput {
	s.WorkloadPoolName = &v
	return s
}

type GetWorkloadAccessTokenForJWTOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	ExpiresAt *string `type:"string" json:",omitempty"`

	WorkloadAccessToken *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s GetWorkloadAccessTokenForJWTOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetWorkloadAccessTokenForJWTOutput) GoString() string {
	return s.String()
}

// SetExpiresAt sets the ExpiresAt field's value.
func (s *GetWorkloadAccessTokenForJWTOutput) SetExpiresAt(v string) *GetWorkloadAccessTokenForJWTOutput {
	s.ExpiresAt = &v
	return s
}

// SetWorkloadAccessToken sets the WorkloadAccessToken field's value.
func (s *GetWorkloadAccessTokenForJWTOutput) SetWorkloadAccessToken(v string) *GetWorkloadAccessTokenForJWTOutput {
	s.WorkloadAccessToken = &v
	return s
}
