// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package id

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opGetNamespaceCommon = "GetNamespace"

// GetNamespaceCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the GetNamespaceCommon operation. The "output" return
// value will be populated with the GetNamespaceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetNamespaceCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetNamespaceCommon Send returns without error.
//
// See GetNamespaceCommon for more information on using the GetNamespaceCommon
// API call, and error handling.
//
//    // Example sending a request using the GetNamespaceCommonRequest method.
//    req, resp := client.GetNamespaceCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ID) GetNamespaceCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opGetNamespaceCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetNamespaceCommon API operation for ID.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ID's
// API operation GetNamespaceCommon for usage and error information.
func (c *ID) GetNamespaceCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.GetNamespaceCommonRequest(input)
	return out, req.Send()
}

// GetNamespaceCommonWithContext is the same as GetNamespaceCommon with the addition of
// the ability to pass a context and additional request options.
//
// See GetNamespaceCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ID) GetNamespaceCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.GetNamespaceCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opGetNamespace = "GetNamespace"

// GetNamespaceRequest generates a "volcengine/request.Request" representing the
// client's request for the GetNamespace operation. The "output" return
// value will be populated with the GetNamespaceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetNamespaceCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetNamespaceCommon Send returns without error.
//
// See GetNamespace for more information on using the GetNamespace
// API call, and error handling.
//
//    // Example sending a request using the GetNamespaceRequest method.
//    req, resp := client.GetNamespaceRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ID) GetNamespaceRequest(input *GetNamespaceInput) (req *request.Request, output *GetNamespaceOutput) {
	op := &request.Operation{
		Name:       opGetNamespace,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &GetNamespaceInput{}
	}

	output = &GetNamespaceOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetNamespace API operation for ID.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ID's
// API operation GetNamespace for usage and error information.
func (c *ID) GetNamespace(input *GetNamespaceInput) (*GetNamespaceOutput, error) {
	req, out := c.GetNamespaceRequest(input)
	return out, req.Send()
}

// GetNamespaceWithContext is the same as GetNamespace with the addition of
// the ability to pass a context and additional request options.
//
// See GetNamespace for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ID) GetNamespaceWithContext(ctx volcengine.Context, input *GetNamespaceInput, opts ...request.Option) (*GetNamespaceOutput, error) {
	req, out := c.GetNamespaceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type GetNamespaceInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	NamespaceId *string `type:"string" json:",omitempty"`

	NamespaceName *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s GetNamespaceInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetNamespaceInput) GoString() string {
	return s.String()
}

// SetNamespaceId sets the NamespaceId field's value.
func (s *GetNamespaceInput) SetNamespaceId(v string) *GetNamespaceInput {
	s.NamespaceId = &v
	return s
}

// SetNamespaceName sets the NamespaceName field's value.
func (s *GetNamespaceInput) SetNamespaceName(v string) *GetNamespaceInput {
	s.NamespaceName = &v
	return s
}

type GetNamespaceOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Description *string `type:"string" json:",omitempty"`

	NamespaceId *string `type:"string" json:",omitempty"`

	NamespaceName *string `type:"string" json:",omitempty"`

	Trn *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s GetNamespaceOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetNamespaceOutput) GoString() string {
	return s.String()
}

// SetDescription sets the Description field's value.
func (s *GetNamespaceOutput) SetDescription(v string) *GetNamespaceOutput {
	s.Description = &v
	return s
}

// SetNamespaceId sets the NamespaceId field's value.
func (s *GetNamespaceOutput) SetNamespaceId(v string) *GetNamespaceOutput {
	s.NamespaceId = &v
	return s
}

// SetNamespaceName sets the NamespaceName field's value.
func (s *GetNamespaceOutput) SetNamespaceName(v string) *GetNamespaceOutput {
	s.NamespaceName = &v
	return s
}

// SetTrn sets the Trn field's value.
func (s *GetNamespaceOutput) SetTrn(v string) *GetNamespaceOutput {
	s.Trn = &v
	return s
}
