// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package id

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opAttachInboundAuthConfigCommon = "AttachInboundAuthConfig"

// AttachInboundAuthConfigCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the AttachInboundAuthConfigCommon operation. The "output" return
// value will be populated with the AttachInboundAuthConfigCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned AttachInboundAuthConfigCommon Request to send the API call to the service.
// the "output" return value is not valid until after AttachInboundAuthConfigCommon Send returns without error.
//
// See AttachInboundAuthConfigCommon for more information on using the AttachInboundAuthConfigCommon
// API call, and error handling.
//
//    // Example sending a request using the AttachInboundAuthConfigCommonRequest method.
//    req, resp := client.AttachInboundAuthConfigCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ID) AttachInboundAuthConfigCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opAttachInboundAuthConfigCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// AttachInboundAuthConfigCommon API operation for ID.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ID's
// API operation AttachInboundAuthConfigCommon for usage and error information.
func (c *ID) AttachInboundAuthConfigCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.AttachInboundAuthConfigCommonRequest(input)
	return out, req.Send()
}

// AttachInboundAuthConfigCommonWithContext is the same as AttachInboundAuthConfigCommon with the addition of
// the ability to pass a context and additional request options.
//
// See AttachInboundAuthConfigCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ID) AttachInboundAuthConfigCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.AttachInboundAuthConfigCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opAttachInboundAuthConfig = "AttachInboundAuthConfig"

// AttachInboundAuthConfigRequest generates a "volcengine/request.Request" representing the
// client's request for the AttachInboundAuthConfig operation. The "output" return
// value will be populated with the AttachInboundAuthConfigCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned AttachInboundAuthConfigCommon Request to send the API call to the service.
// the "output" return value is not valid until after AttachInboundAuthConfigCommon Send returns without error.
//
// See AttachInboundAuthConfig for more information on using the AttachInboundAuthConfig
// API call, and error handling.
//
//    // Example sending a request using the AttachInboundAuthConfigRequest method.
//    req, resp := client.AttachInboundAuthConfigRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ID) AttachInboundAuthConfigRequest(input *AttachInboundAuthConfigInput) (req *request.Request, output *AttachInboundAuthConfigOutput) {
	op := &request.Operation{
		Name:       opAttachInboundAuthConfig,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &AttachInboundAuthConfigInput{}
	}

	output = &AttachInboundAuthConfigOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// AttachInboundAuthConfig API operation for ID.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ID's
// API operation AttachInboundAuthConfig for usage and error information.
func (c *ID) AttachInboundAuthConfig(input *AttachInboundAuthConfigInput) (*AttachInboundAuthConfigOutput, error) {
	req, out := c.AttachInboundAuthConfigRequest(input)
	return out, req.Send()
}

// AttachInboundAuthConfigWithContext is the same as AttachInboundAuthConfig with the addition of
// the ability to pass a context and additional request options.
//
// See AttachInboundAuthConfig for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ID) AttachInboundAuthConfigWithContext(ctx volcengine.Context, input *AttachInboundAuthConfigInput, opts ...request.Option) (*AttachInboundAuthConfigOutput, error) {
	req, out := c.AttachInboundAuthConfigRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type AttachInboundAuthConfigInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// InboundAuthConfigId is a required field
	InboundAuthConfigId *string `type:"string" json:",omitempty" required:"true"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s AttachInboundAuthConfigInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s AttachInboundAuthConfigInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *AttachInboundAuthConfigInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "AttachInboundAuthConfigInput"}
	if s.InboundAuthConfigId == nil {
		invalidParams.Add(request.NewErrParamRequired("InboundAuthConfigId"))
	}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetInboundAuthConfigId sets the InboundAuthConfigId field's value.
func (s *AttachInboundAuthConfigInput) SetInboundAuthConfigId(v string) *AttachInboundAuthConfigInput {
	s.InboundAuthConfigId = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *AttachInboundAuthConfigInput) SetInstanceId(v string) *AttachInboundAuthConfigInput {
	s.InstanceId = &v
	return s
}

type AttachInboundAuthConfigOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s AttachInboundAuthConfigOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s AttachInboundAuthConfigOutput) GoString() string {
	return s.String()
}
