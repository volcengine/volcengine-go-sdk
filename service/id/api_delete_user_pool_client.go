// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package id

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDeleteUserPoolClientCommon = "DeleteUserPoolClient"

// DeleteUserPoolClientCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteUserPoolClientCommon operation. The "output" return
// value will be populated with the DeleteUserPoolClientCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteUserPoolClientCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteUserPoolClientCommon Send returns without error.
//
// See DeleteUserPoolClientCommon for more information on using the DeleteUserPoolClientCommon
// API call, and error handling.
//
//    // Example sending a request using the DeleteUserPoolClientCommonRequest method.
//    req, resp := client.DeleteUserPoolClientCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ID) DeleteUserPoolClientCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteUserPoolClientCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DeleteUserPoolClientCommon API operation for ID.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ID's
// API operation DeleteUserPoolClientCommon for usage and error information.
func (c *ID) DeleteUserPoolClientCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteUserPoolClientCommonRequest(input)
	return out, req.Send()
}

// DeleteUserPoolClientCommonWithContext is the same as DeleteUserPoolClientCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteUserPoolClientCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ID) DeleteUserPoolClientCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteUserPoolClientCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteUserPoolClient = "DeleteUserPoolClient"

// DeleteUserPoolClientRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteUserPoolClient operation. The "output" return
// value will be populated with the DeleteUserPoolClientCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteUserPoolClientCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteUserPoolClientCommon Send returns without error.
//
// See DeleteUserPoolClient for more information on using the DeleteUserPoolClient
// API call, and error handling.
//
//    // Example sending a request using the DeleteUserPoolClientRequest method.
//    req, resp := client.DeleteUserPoolClientRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ID) DeleteUserPoolClientRequest(input *DeleteUserPoolClientInput) (req *request.Request, output *DeleteUserPoolClientOutput) {
	op := &request.Operation{
		Name:       opDeleteUserPoolClient,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteUserPoolClientInput{}
	}

	output = &DeleteUserPoolClientOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DeleteUserPoolClient API operation for ID.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ID's
// API operation DeleteUserPoolClient for usage and error information.
func (c *ID) DeleteUserPoolClient(input *DeleteUserPoolClientInput) (*DeleteUserPoolClientOutput, error) {
	req, out := c.DeleteUserPoolClientRequest(input)
	return out, req.Send()
}

// DeleteUserPoolClientWithContext is the same as DeleteUserPoolClient with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteUserPoolClient for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ID) DeleteUserPoolClientWithContext(ctx volcengine.Context, input *DeleteUserPoolClientInput, opts ...request.Option) (*DeleteUserPoolClientOutput, error) {
	req, out := c.DeleteUserPoolClientRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DeleteUserPoolClientInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// ClientUid is a required field
	ClientUid *string `type:"string" json:",omitempty" required:"true"`

	// UserPoolUid is a required field
	UserPoolUid *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s DeleteUserPoolClientInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteUserPoolClientInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeleteUserPoolClientInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DeleteUserPoolClientInput"}
	if s.ClientUid == nil {
		invalidParams.Add(request.NewErrParamRequired("ClientUid"))
	}
	if s.UserPoolUid == nil {
		invalidParams.Add(request.NewErrParamRequired("UserPoolUid"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetClientUid sets the ClientUid field's value.
func (s *DeleteUserPoolClientInput) SetClientUid(v string) *DeleteUserPoolClientInput {
	s.ClientUid = &v
	return s
}

// SetUserPoolUid sets the UserPoolUid field's value.
func (s *DeleteUserPoolClientInput) SetUserPoolUid(v string) *DeleteUserPoolClientInput {
	s.UserPoolUid = &v
	return s
}

type DeleteUserPoolClientOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Message *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s DeleteUserPoolClientOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteUserPoolClientOutput) GoString() string {
	return s.String()
}

// SetMessage sets the Message field's value.
func (s *DeleteUserPoolClientOutput) SetMessage(v string) *DeleteUserPoolClientOutput {
	s.Message = &v
	return s
}
