// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package id

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opListUsersCommon = "ListUsers"

// ListUsersCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ListUsersCommon operation. The "output" return
// value will be populated with the ListUsersCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListUsersCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListUsersCommon Send returns without error.
//
// See ListUsersCommon for more information on using the ListUsersCommon
// API call, and error handling.
//
//    // Example sending a request using the ListUsersCommonRequest method.
//    req, resp := client.ListUsersCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ID) ListUsersCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opListUsersCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListUsersCommon API operation for ID.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ID's
// API operation ListUsersCommon for usage and error information.
func (c *ID) ListUsersCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ListUsersCommonRequest(input)
	return out, req.Send()
}

// ListUsersCommonWithContext is the same as ListUsersCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ListUsersCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ID) ListUsersCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ListUsersCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListUsers = "ListUsers"

// ListUsersRequest generates a "volcengine/request.Request" representing the
// client's request for the ListUsers operation. The "output" return
// value will be populated with the ListUsersCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListUsersCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListUsersCommon Send returns without error.
//
// See ListUsers for more information on using the ListUsers
// API call, and error handling.
//
//    // Example sending a request using the ListUsersRequest method.
//    req, resp := client.ListUsersRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ID) ListUsersRequest(input *ListUsersInput) (req *request.Request, output *ListUsersOutput) {
	op := &request.Operation{
		Name:       opListUsers,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListUsersInput{}
	}

	output = &ListUsersOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListUsers API operation for ID.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ID's
// API operation ListUsers for usage and error information.
func (c *ID) ListUsers(input *ListUsersInput) (*ListUsersOutput, error) {
	req, out := c.ListUsersRequest(input)
	return out, req.Send()
}

// ListUsersWithContext is the same as ListUsers with the addition of
// the ability to pass a context and additional request options.
//
// See ListUsers for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ID) ListUsersWithContext(ctx volcengine.Context, input *ListUsersInput, opts ...request.Option) (*ListUsersOutput, error) {
	req, out := c.ListUsersRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DataForListUsersOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Birthdate *string `type:"string" json:",omitempty"`

	Connection *string `type:"string" json:",omitempty"`

	CreateTime *string `type:"string" json:",omitempty"`

	Email *string `type:"string" json:",omitempty"`

	EmailVerified *bool `type:"boolean" json:",omitempty"`

	FamilyName *string `type:"string" json:",omitempty"`

	Gender *string `type:"string" json:",omitempty"`

	GivenName *string `type:"string" json:",omitempty"`

	LatestBrowser *string `type:"string" json:",omitempty"`

	LatestLogin *string `type:"string" json:",omitempty"`

	Locale *string `type:"string" json:",omitempty"`

	MiddleName *string `type:"string" json:",omitempty"`

	Name *string `type:"string" json:",omitempty"`

	NickName *string `type:"string" json:",omitempty"`

	NumLogins *int32 `type:"int32" json:",omitempty"`

	PhoneNumber *string `type:"string" json:",omitempty"`

	PhoneNumberVerified *bool `type:"boolean" json:",omitempty"`

	Picture *string `type:"string" json:",omitempty"`

	PreferredUsername *string `type:"string" json:",omitempty"`

	Profile *string `type:"string" json:",omitempty"`

	Sub *string `type:"string" json:",omitempty"`

	Uid *string `type:"string" json:",omitempty"`

	UpdateTime *string `type:"string" json:",omitempty"`

	UserMetadata *string `type:"string" json:",omitempty"`

	Website *string `type:"string" json:",omitempty"`

	ZoneInfo *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s DataForListUsersOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DataForListUsersOutput) GoString() string {
	return s.String()
}

// SetBirthdate sets the Birthdate field's value.
func (s *DataForListUsersOutput) SetBirthdate(v string) *DataForListUsersOutput {
	s.Birthdate = &v
	return s
}

// SetConnection sets the Connection field's value.
func (s *DataForListUsersOutput) SetConnection(v string) *DataForListUsersOutput {
	s.Connection = &v
	return s
}

// SetCreateTime sets the CreateTime field's value.
func (s *DataForListUsersOutput) SetCreateTime(v string) *DataForListUsersOutput {
	s.CreateTime = &v
	return s
}

// SetEmail sets the Email field's value.
func (s *DataForListUsersOutput) SetEmail(v string) *DataForListUsersOutput {
	s.Email = &v
	return s
}

// SetEmailVerified sets the EmailVerified field's value.
func (s *DataForListUsersOutput) SetEmailVerified(v bool) *DataForListUsersOutput {
	s.EmailVerified = &v
	return s
}

// SetFamilyName sets the FamilyName field's value.
func (s *DataForListUsersOutput) SetFamilyName(v string) *DataForListUsersOutput {
	s.FamilyName = &v
	return s
}

// SetGender sets the Gender field's value.
func (s *DataForListUsersOutput) SetGender(v string) *DataForListUsersOutput {
	s.Gender = &v
	return s
}

// SetGivenName sets the GivenName field's value.
func (s *DataForListUsersOutput) SetGivenName(v string) *DataForListUsersOutput {
	s.GivenName = &v
	return s
}

// SetLatestBrowser sets the LatestBrowser field's value.
func (s *DataForListUsersOutput) SetLatestBrowser(v string) *DataForListUsersOutput {
	s.LatestBrowser = &v
	return s
}

// SetLatestLogin sets the LatestLogin field's value.
func (s *DataForListUsersOutput) SetLatestLogin(v string) *DataForListUsersOutput {
	s.LatestLogin = &v
	return s
}

// SetLocale sets the Locale field's value.
func (s *DataForListUsersOutput) SetLocale(v string) *DataForListUsersOutput {
	s.Locale = &v
	return s
}

// SetMiddleName sets the MiddleName field's value.
func (s *DataForListUsersOutput) SetMiddleName(v string) *DataForListUsersOutput {
	s.MiddleName = &v
	return s
}

// SetName sets the Name field's value.
func (s *DataForListUsersOutput) SetName(v string) *DataForListUsersOutput {
	s.Name = &v
	return s
}

// SetNickName sets the NickName field's value.
func (s *DataForListUsersOutput) SetNickName(v string) *DataForListUsersOutput {
	s.NickName = &v
	return s
}

// SetNumLogins sets the NumLogins field's value.
func (s *DataForListUsersOutput) SetNumLogins(v int32) *DataForListUsersOutput {
	s.NumLogins = &v
	return s
}

// SetPhoneNumber sets the PhoneNumber field's value.
func (s *DataForListUsersOutput) SetPhoneNumber(v string) *DataForListUsersOutput {
	s.PhoneNumber = &v
	return s
}

// SetPhoneNumberVerified sets the PhoneNumberVerified field's value.
func (s *DataForListUsersOutput) SetPhoneNumberVerified(v bool) *DataForListUsersOutput {
	s.PhoneNumberVerified = &v
	return s
}

// SetPicture sets the Picture field's value.
func (s *DataForListUsersOutput) SetPicture(v string) *DataForListUsersOutput {
	s.Picture = &v
	return s
}

// SetPreferredUsername sets the PreferredUsername field's value.
func (s *DataForListUsersOutput) SetPreferredUsername(v string) *DataForListUsersOutput {
	s.PreferredUsername = &v
	return s
}

// SetProfile sets the Profile field's value.
func (s *DataForListUsersOutput) SetProfile(v string) *DataForListUsersOutput {
	s.Profile = &v
	return s
}

// SetSub sets the Sub field's value.
func (s *DataForListUsersOutput) SetSub(v string) *DataForListUsersOutput {
	s.Sub = &v
	return s
}

// SetUid sets the Uid field's value.
func (s *DataForListUsersOutput) SetUid(v string) *DataForListUsersOutput {
	s.Uid = &v
	return s
}

// SetUpdateTime sets the UpdateTime field's value.
func (s *DataForListUsersOutput) SetUpdateTime(v string) *DataForListUsersOutput {
	s.UpdateTime = &v
	return s
}

// SetUserMetadata sets the UserMetadata field's value.
func (s *DataForListUsersOutput) SetUserMetadata(v string) *DataForListUsersOutput {
	s.UserMetadata = &v
	return s
}

// SetWebsite sets the Website field's value.
func (s *DataForListUsersOutput) SetWebsite(v string) *DataForListUsersOutput {
	s.Website = &v
	return s
}

// SetZoneInfo sets the ZoneInfo field's value.
func (s *DataForListUsersOutput) SetZoneInfo(v string) *DataForListUsersOutput {
	s.ZoneInfo = &v
	return s
}

type FilterForListUsersInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Connection *string `type:"string" json:",omitempty"`

	Email *string `type:"string" json:",omitempty"`

	FamilyName *string `type:"string" json:",omitempty"`

	Gender *string `type:"string" json:",omitempty"`

	GivenName *string `type:"string" json:",omitempty"`

	LatestBrowser *string `type:"string" json:",omitempty"`

	Locale *string `type:"string" json:",omitempty"`

	MiddleName *string `type:"string" json:",omitempty"`

	Name *string `type:"string" json:",omitempty"`

	Nickname *string `type:"string" json:",omitempty"`

	PhoneNumber *string `type:"string" json:",omitempty"`

	PreferredUsername *string `type:"string" json:",omitempty"`

	Website *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s FilterForListUsersInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s FilterForListUsersInput) GoString() string {
	return s.String()
}

// SetConnection sets the Connection field's value.
func (s *FilterForListUsersInput) SetConnection(v string) *FilterForListUsersInput {
	s.Connection = &v
	return s
}

// SetEmail sets the Email field's value.
func (s *FilterForListUsersInput) SetEmail(v string) *FilterForListUsersInput {
	s.Email = &v
	return s
}

// SetFamilyName sets the FamilyName field's value.
func (s *FilterForListUsersInput) SetFamilyName(v string) *FilterForListUsersInput {
	s.FamilyName = &v
	return s
}

// SetGender sets the Gender field's value.
func (s *FilterForListUsersInput) SetGender(v string) *FilterForListUsersInput {
	s.Gender = &v
	return s
}

// SetGivenName sets the GivenName field's value.
func (s *FilterForListUsersInput) SetGivenName(v string) *FilterForListUsersInput {
	s.GivenName = &v
	return s
}

// SetLatestBrowser sets the LatestBrowser field's value.
func (s *FilterForListUsersInput) SetLatestBrowser(v string) *FilterForListUsersInput {
	s.LatestBrowser = &v
	return s
}

// SetLocale sets the Locale field's value.
func (s *FilterForListUsersInput) SetLocale(v string) *FilterForListUsersInput {
	s.Locale = &v
	return s
}

// SetMiddleName sets the MiddleName field's value.
func (s *FilterForListUsersInput) SetMiddleName(v string) *FilterForListUsersInput {
	s.MiddleName = &v
	return s
}

// SetName sets the Name field's value.
func (s *FilterForListUsersInput) SetName(v string) *FilterForListUsersInput {
	s.Name = &v
	return s
}

// SetNickname sets the Nickname field's value.
func (s *FilterForListUsersInput) SetNickname(v string) *FilterForListUsersInput {
	s.Nickname = &v
	return s
}

// SetPhoneNumber sets the PhoneNumber field's value.
func (s *FilterForListUsersInput) SetPhoneNumber(v string) *FilterForListUsersInput {
	s.PhoneNumber = &v
	return s
}

// SetPreferredUsername sets the PreferredUsername field's value.
func (s *FilterForListUsersInput) SetPreferredUsername(v string) *FilterForListUsersInput {
	s.PreferredUsername = &v
	return s
}

// SetWebsite sets the Website field's value.
func (s *FilterForListUsersInput) SetWebsite(v string) *FilterForListUsersInput {
	s.Website = &v
	return s
}

type ListUsersInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Filter *FilterForListUsersInput `type:"structure" json:",omitempty"`

	// PageNumber is a required field
	PageNumber *int32 `type:"int32" json:",omitempty" required:"true"`

	// PageSize is a required field
	PageSize *int32 `type:"int32" json:",omitempty" required:"true"`

	SortDirection *string `type:"string" json:",omitempty"`

	SortField *string `type:"string" json:",omitempty"`

	// UserPoolUid is a required field
	UserPoolUid *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s ListUsersInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListUsersInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ListUsersInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ListUsersInput"}
	if s.PageNumber == nil {
		invalidParams.Add(request.NewErrParamRequired("PageNumber"))
	}
	if s.PageSize == nil {
		invalidParams.Add(request.NewErrParamRequired("PageSize"))
	}
	if s.UserPoolUid == nil {
		invalidParams.Add(request.NewErrParamRequired("UserPoolUid"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetFilter sets the Filter field's value.
func (s *ListUsersInput) SetFilter(v *FilterForListUsersInput) *ListUsersInput {
	s.Filter = v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *ListUsersInput) SetPageNumber(v int32) *ListUsersInput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *ListUsersInput) SetPageSize(v int32) *ListUsersInput {
	s.PageSize = &v
	return s
}

// SetSortDirection sets the SortDirection field's value.
func (s *ListUsersInput) SetSortDirection(v string) *ListUsersInput {
	s.SortDirection = &v
	return s
}

// SetSortField sets the SortField field's value.
func (s *ListUsersInput) SetSortField(v string) *ListUsersInput {
	s.SortField = &v
	return s
}

// SetUserPoolUid sets the UserPoolUid field's value.
func (s *ListUsersInput) SetUserPoolUid(v string) *ListUsersInput {
	s.UserPoolUid = &v
	return s
}

type ListUsersOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Data []*DataForListUsersOutput `type:"list" json:",omitempty"`

	PageNumber *int32 `type:"int32" json:",omitempty"`

	PageSize *int32 `type:"int32" json:",omitempty"`

	TotalCount *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s ListUsersOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListUsersOutput) GoString() string {
	return s.String()
}

// SetData sets the Data field's value.
func (s *ListUsersOutput) SetData(v []*DataForListUsersOutput) *ListUsersOutput {
	s.Data = v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *ListUsersOutput) SetPageNumber(v int32) *ListUsersOutput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *ListUsersOutput) SetPageSize(v int32) *ListUsersOutput {
	s.PageSize = &v
	return s
}

// SetTotalCount sets the TotalCount field's value.
func (s *ListUsersOutput) SetTotalCount(v int32) *ListUsersOutput {
	s.TotalCount = &v
	return s
}
