// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package id

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opListPoliciesCommon = "ListPolicies"

// ListPoliciesCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ListPoliciesCommon operation. The "output" return
// value will be populated with the ListPoliciesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListPoliciesCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListPoliciesCommon Send returns without error.
//
// See ListPoliciesCommon for more information on using the ListPoliciesCommon
// API call, and error handling.
//
//    // Example sending a request using the ListPoliciesCommonRequest method.
//    req, resp := client.ListPoliciesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ID) ListPoliciesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opListPoliciesCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListPoliciesCommon API operation for ID.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ID's
// API operation ListPoliciesCommon for usage and error information.
func (c *ID) ListPoliciesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ListPoliciesCommonRequest(input)
	return out, req.Send()
}

// ListPoliciesCommonWithContext is the same as ListPoliciesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ListPoliciesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ID) ListPoliciesCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ListPoliciesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListPolicies = "ListPolicies"

// ListPoliciesRequest generates a "volcengine/request.Request" representing the
// client's request for the ListPolicies operation. The "output" return
// value will be populated with the ListPoliciesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListPoliciesCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListPoliciesCommon Send returns without error.
//
// See ListPolicies for more information on using the ListPolicies
// API call, and error handling.
//
//    // Example sending a request using the ListPoliciesRequest method.
//    req, resp := client.ListPoliciesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ID) ListPoliciesRequest(input *ListPoliciesInput) (req *request.Request, output *ListPoliciesOutput) {
	op := &request.Operation{
		Name:       opListPolicies,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListPoliciesInput{}
	}

	output = &ListPoliciesOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListPolicies API operation for ID.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ID's
// API operation ListPolicies for usage and error information.
func (c *ID) ListPolicies(input *ListPoliciesInput) (*ListPoliciesOutput, error) {
	req, out := c.ListPoliciesRequest(input)
	return out, req.Send()
}

// ListPoliciesWithContext is the same as ListPolicies with the addition of
// the ability to pass a context and additional request options.
//
// See ListPolicies for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ID) ListPoliciesWithContext(ctx volcengine.Context, input *ListPoliciesInput, opts ...request.Option) (*ListPoliciesOutput, error) {
	req, out := c.ListPoliciesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DataForListPoliciesOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Namespace *string `type:"string" json:",omitempty"`

	Policy *string `type:"string" json:",omitempty"`

	PolicyId *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s DataForListPoliciesOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DataForListPoliciesOutput) GoString() string {
	return s.String()
}

// SetNamespace sets the Namespace field's value.
func (s *DataForListPoliciesOutput) SetNamespace(v string) *DataForListPoliciesOutput {
	s.Namespace = &v
	return s
}

// SetPolicy sets the Policy field's value.
func (s *DataForListPoliciesOutput) SetPolicy(v string) *DataForListPoliciesOutput {
	s.Policy = &v
	return s
}

// SetPolicyId sets the PolicyId field's value.
func (s *DataForListPoliciesOutput) SetPolicyId(v string) *DataForListPoliciesOutput {
	s.PolicyId = &v
	return s
}

type ListPoliciesInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	NamespaceName *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ListPoliciesInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListPoliciesInput) GoString() string {
	return s.String()
}

// SetNamespaceName sets the NamespaceName field's value.
func (s *ListPoliciesInput) SetNamespaceName(v string) *ListPoliciesInput {
	s.NamespaceName = &v
	return s
}

type ListPoliciesOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Data []*DataForListPoliciesOutput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s ListPoliciesOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListPoliciesOutput) GoString() string {
	return s.String()
}

// SetData sets the Data field's value.
func (s *ListPoliciesOutput) SetData(v []*DataForListPoliciesOutput) *ListPoliciesOutput {
	s.Data = v
	return s
}
