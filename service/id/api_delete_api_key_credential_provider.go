// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package id

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDeleteApiKeyCredentialProviderCommon = "DeleteApiKeyCredentialProvider"

// DeleteApiKeyCredentialProviderCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteApiKeyCredentialProviderCommon operation. The "output" return
// value will be populated with the DeleteApiKeyCredentialProviderCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteApiKeyCredentialProviderCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteApiKeyCredentialProviderCommon Send returns without error.
//
// See DeleteApiKeyCredentialProviderCommon for more information on using the DeleteApiKeyCredentialProviderCommon
// API call, and error handling.
//
//    // Example sending a request using the DeleteApiKeyCredentialProviderCommonRequest method.
//    req, resp := client.DeleteApiKeyCredentialProviderCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ID) DeleteApiKeyCredentialProviderCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteApiKeyCredentialProviderCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DeleteApiKeyCredentialProviderCommon API operation for ID.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ID's
// API operation DeleteApiKeyCredentialProviderCommon for usage and error information.
func (c *ID) DeleteApiKeyCredentialProviderCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteApiKeyCredentialProviderCommonRequest(input)
	return out, req.Send()
}

// DeleteApiKeyCredentialProviderCommonWithContext is the same as DeleteApiKeyCredentialProviderCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteApiKeyCredentialProviderCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ID) DeleteApiKeyCredentialProviderCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteApiKeyCredentialProviderCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteApiKeyCredentialProvider = "DeleteApiKeyCredentialProvider"

// DeleteApiKeyCredentialProviderRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteApiKeyCredentialProvider operation. The "output" return
// value will be populated with the DeleteApiKeyCredentialProviderCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteApiKeyCredentialProviderCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteApiKeyCredentialProviderCommon Send returns without error.
//
// See DeleteApiKeyCredentialProvider for more information on using the DeleteApiKeyCredentialProvider
// API call, and error handling.
//
//    // Example sending a request using the DeleteApiKeyCredentialProviderRequest method.
//    req, resp := client.DeleteApiKeyCredentialProviderRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ID) DeleteApiKeyCredentialProviderRequest(input *DeleteApiKeyCredentialProviderInput) (req *request.Request, output *DeleteApiKeyCredentialProviderOutput) {
	op := &request.Operation{
		Name:       opDeleteApiKeyCredentialProvider,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteApiKeyCredentialProviderInput{}
	}

	output = &DeleteApiKeyCredentialProviderOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DeleteApiKeyCredentialProvider API operation for ID.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ID's
// API operation DeleteApiKeyCredentialProvider for usage and error information.
func (c *ID) DeleteApiKeyCredentialProvider(input *DeleteApiKeyCredentialProviderInput) (*DeleteApiKeyCredentialProviderOutput, error) {
	req, out := c.DeleteApiKeyCredentialProviderRequest(input)
	return out, req.Send()
}

// DeleteApiKeyCredentialProviderWithContext is the same as DeleteApiKeyCredentialProvider with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteApiKeyCredentialProvider for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ID) DeleteApiKeyCredentialProviderWithContext(ctx volcengine.Context, input *DeleteApiKeyCredentialProviderInput, opts ...request.Option) (*DeleteApiKeyCredentialProviderOutput, error) {
	req, out := c.DeleteApiKeyCredentialProviderRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DeleteApiKeyCredentialProviderInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// Name is a required field
	Name *string `type:"string" json:",omitempty" required:"true"`

	PoolName *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s DeleteApiKeyCredentialProviderInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteApiKeyCredentialProviderInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeleteApiKeyCredentialProviderInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DeleteApiKeyCredentialProviderInput"}
	if s.Name == nil {
		invalidParams.Add(request.NewErrParamRequired("Name"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetName sets the Name field's value.
func (s *DeleteApiKeyCredentialProviderInput) SetName(v string) *DeleteApiKeyCredentialProviderInput {
	s.Name = &v
	return s
}

// SetPoolName sets the PoolName field's value.
func (s *DeleteApiKeyCredentialProviderInput) SetPoolName(v string) *DeleteApiKeyCredentialProviderInput {
	s.PoolName = &v
	return s
}

type DeleteApiKeyCredentialProviderOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s DeleteApiKeyCredentialProviderOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteApiKeyCredentialProviderOutput) GoString() string {
	return s.String()
}
