// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package id

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opUpdateIdentityProviderOAuthCommon = "UpdateIdentityProviderOAuth"

// UpdateIdentityProviderOAuthCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateIdentityProviderOAuthCommon operation. The "output" return
// value will be populated with the UpdateIdentityProviderOAuthCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateIdentityProviderOAuthCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateIdentityProviderOAuthCommon Send returns without error.
//
// See UpdateIdentityProviderOAuthCommon for more information on using the UpdateIdentityProviderOAuthCommon
// API call, and error handling.
//
//    // Example sending a request using the UpdateIdentityProviderOAuthCommonRequest method.
//    req, resp := client.UpdateIdentityProviderOAuthCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ID) UpdateIdentityProviderOAuthCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opUpdateIdentityProviderOAuthCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateIdentityProviderOAuthCommon API operation for ID.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ID's
// API operation UpdateIdentityProviderOAuthCommon for usage and error information.
func (c *ID) UpdateIdentityProviderOAuthCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.UpdateIdentityProviderOAuthCommonRequest(input)
	return out, req.Send()
}

// UpdateIdentityProviderOAuthCommonWithContext is the same as UpdateIdentityProviderOAuthCommon with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateIdentityProviderOAuthCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ID) UpdateIdentityProviderOAuthCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.UpdateIdentityProviderOAuthCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opUpdateIdentityProviderOAuth = "UpdateIdentityProviderOAuth"

// UpdateIdentityProviderOAuthRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateIdentityProviderOAuth operation. The "output" return
// value will be populated with the UpdateIdentityProviderOAuthCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateIdentityProviderOAuthCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateIdentityProviderOAuthCommon Send returns without error.
//
// See UpdateIdentityProviderOAuth for more information on using the UpdateIdentityProviderOAuth
// API call, and error handling.
//
//    // Example sending a request using the UpdateIdentityProviderOAuthRequest method.
//    req, resp := client.UpdateIdentityProviderOAuthRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ID) UpdateIdentityProviderOAuthRequest(input *UpdateIdentityProviderOAuthInput) (req *request.Request, output *UpdateIdentityProviderOAuthOutput) {
	op := &request.Operation{
		Name:       opUpdateIdentityProviderOAuth,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UpdateIdentityProviderOAuthInput{}
	}

	output = &UpdateIdentityProviderOAuthOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateIdentityProviderOAuth API operation for ID.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ID's
// API operation UpdateIdentityProviderOAuth for usage and error information.
func (c *ID) UpdateIdentityProviderOAuth(input *UpdateIdentityProviderOAuthInput) (*UpdateIdentityProviderOAuthOutput, error) {
	req, out := c.UpdateIdentityProviderOAuthRequest(input)
	return out, req.Send()
}

// UpdateIdentityProviderOAuthWithContext is the same as UpdateIdentityProviderOAuth with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateIdentityProviderOAuth for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ID) UpdateIdentityProviderOAuthWithContext(ctx volcengine.Context, input *UpdateIdentityProviderOAuthInput, opts ...request.Option) (*UpdateIdentityProviderOAuthOutput, error) {
	req, out := c.UpdateIdentityProviderOAuthRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ProviderOptionsForUpdateIdentityProviderOAuthInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	AutoLinking *string `type:"string" json:",omitempty"`

	IsAutoCreation *bool `type:"boolean" json:",omitempty"`

	IsAutoUpdate *bool `type:"boolean" json:",omitempty"`

	IsCreationAllowed *bool `type:"boolean" json:",omitempty"`

	IsLinkingAllowed *bool `type:"boolean" json:",omitempty"`
}

// String returns the string representation
func (s ProviderOptionsForUpdateIdentityProviderOAuthInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ProviderOptionsForUpdateIdentityProviderOAuthInput) GoString() string {
	return s.String()
}

// SetAutoLinking sets the AutoLinking field's value.
func (s *ProviderOptionsForUpdateIdentityProviderOAuthInput) SetAutoLinking(v string) *ProviderOptionsForUpdateIdentityProviderOAuthInput {
	s.AutoLinking = &v
	return s
}

// SetIsAutoCreation sets the IsAutoCreation field's value.
func (s *ProviderOptionsForUpdateIdentityProviderOAuthInput) SetIsAutoCreation(v bool) *ProviderOptionsForUpdateIdentityProviderOAuthInput {
	s.IsAutoCreation = &v
	return s
}

// SetIsAutoUpdate sets the IsAutoUpdate field's value.
func (s *ProviderOptionsForUpdateIdentityProviderOAuthInput) SetIsAutoUpdate(v bool) *ProviderOptionsForUpdateIdentityProviderOAuthInput {
	s.IsAutoUpdate = &v
	return s
}

// SetIsCreationAllowed sets the IsCreationAllowed field's value.
func (s *ProviderOptionsForUpdateIdentityProviderOAuthInput) SetIsCreationAllowed(v bool) *ProviderOptionsForUpdateIdentityProviderOAuthInput {
	s.IsCreationAllowed = &v
	return s
}

// SetIsLinkingAllowed sets the IsLinkingAllowed field's value.
func (s *ProviderOptionsForUpdateIdentityProviderOAuthInput) SetIsLinkingAllowed(v bool) *ProviderOptionsForUpdateIdentityProviderOAuthInput {
	s.IsLinkingAllowed = &v
	return s
}

type ProviderOptionsForUpdateIdentityProviderOAuthOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	AutoLinking *string `type:"string" json:",omitempty"`

	IsAutoCreation *bool `type:"boolean" json:",omitempty"`

	IsAutoUpdate *bool `type:"boolean" json:",omitempty"`

	IsCreationAllowed *bool `type:"boolean" json:",omitempty"`

	IsLinkingAllowed *bool `type:"boolean" json:",omitempty"`
}

// String returns the string representation
func (s ProviderOptionsForUpdateIdentityProviderOAuthOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ProviderOptionsForUpdateIdentityProviderOAuthOutput) GoString() string {
	return s.String()
}

// SetAutoLinking sets the AutoLinking field's value.
func (s *ProviderOptionsForUpdateIdentityProviderOAuthOutput) SetAutoLinking(v string) *ProviderOptionsForUpdateIdentityProviderOAuthOutput {
	s.AutoLinking = &v
	return s
}

// SetIsAutoCreation sets the IsAutoCreation field's value.
func (s *ProviderOptionsForUpdateIdentityProviderOAuthOutput) SetIsAutoCreation(v bool) *ProviderOptionsForUpdateIdentityProviderOAuthOutput {
	s.IsAutoCreation = &v
	return s
}

// SetIsAutoUpdate sets the IsAutoUpdate field's value.
func (s *ProviderOptionsForUpdateIdentityProviderOAuthOutput) SetIsAutoUpdate(v bool) *ProviderOptionsForUpdateIdentityProviderOAuthOutput {
	s.IsAutoUpdate = &v
	return s
}

// SetIsCreationAllowed sets the IsCreationAllowed field's value.
func (s *ProviderOptionsForUpdateIdentityProviderOAuthOutput) SetIsCreationAllowed(v bool) *ProviderOptionsForUpdateIdentityProviderOAuthOutput {
	s.IsCreationAllowed = &v
	return s
}

// SetIsLinkingAllowed sets the IsLinkingAllowed field's value.
func (s *ProviderOptionsForUpdateIdentityProviderOAuthOutput) SetIsLinkingAllowed(v bool) *ProviderOptionsForUpdateIdentityProviderOAuthOutput {
	s.IsLinkingAllowed = &v
	return s
}

type UpdateIdentityProviderOAuthInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	AuthorizationEndpoint *string `type:"string" json:",omitempty"`

	// ClientId is a required field
	ClientId *string `type:"string" json:",omitempty" required:"true"`

	ClientSecret *string `type:"string" json:",omitempty"`

	// ConnectionUid is a required field
	ConnectionUid *string `type:"string" json:",omitempty" required:"true"`

	Enabled *bool `type:"boolean" json:",omitempty"`

	// IdAttribute is a required field
	IdAttribute *string `type:"string" json:",omitempty" required:"true"`

	Name *string `type:"string" json:",omitempty"`

	ProviderOptions *ProviderOptionsForUpdateIdentityProviderOAuthInput `type:"structure" json:",omitempty"`

	ScopesList []*string `type:"list" json:",omitempty"`

	TokenEndpoint *string `type:"string" json:",omitempty"`

	// UsePkce is a required field
	UsePkce *bool `type:"boolean" json:",omitempty" required:"true"`

	UserEndpoint *string `type:"string" json:",omitempty"`

	// UserPoolUid is a required field
	UserPoolUid *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s UpdateIdentityProviderOAuthInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateIdentityProviderOAuthInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UpdateIdentityProviderOAuthInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "UpdateIdentityProviderOAuthInput"}
	if s.ClientId == nil {
		invalidParams.Add(request.NewErrParamRequired("ClientId"))
	}
	if s.ConnectionUid == nil {
		invalidParams.Add(request.NewErrParamRequired("ConnectionUid"))
	}
	if s.IdAttribute == nil {
		invalidParams.Add(request.NewErrParamRequired("IdAttribute"))
	}
	if s.UsePkce == nil {
		invalidParams.Add(request.NewErrParamRequired("UsePkce"))
	}
	if s.UserPoolUid == nil {
		invalidParams.Add(request.NewErrParamRequired("UserPoolUid"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAuthorizationEndpoint sets the AuthorizationEndpoint field's value.
func (s *UpdateIdentityProviderOAuthInput) SetAuthorizationEndpoint(v string) *UpdateIdentityProviderOAuthInput {
	s.AuthorizationEndpoint = &v
	return s
}

// SetClientId sets the ClientId field's value.
func (s *UpdateIdentityProviderOAuthInput) SetClientId(v string) *UpdateIdentityProviderOAuthInput {
	s.ClientId = &v
	return s
}

// SetClientSecret sets the ClientSecret field's value.
func (s *UpdateIdentityProviderOAuthInput) SetClientSecret(v string) *UpdateIdentityProviderOAuthInput {
	s.ClientSecret = &v
	return s
}

// SetConnectionUid sets the ConnectionUid field's value.
func (s *UpdateIdentityProviderOAuthInput) SetConnectionUid(v string) *UpdateIdentityProviderOAuthInput {
	s.ConnectionUid = &v
	return s
}

// SetEnabled sets the Enabled field's value.
func (s *UpdateIdentityProviderOAuthInput) SetEnabled(v bool) *UpdateIdentityProviderOAuthInput {
	s.Enabled = &v
	return s
}

// SetIdAttribute sets the IdAttribute field's value.
func (s *UpdateIdentityProviderOAuthInput) SetIdAttribute(v string) *UpdateIdentityProviderOAuthInput {
	s.IdAttribute = &v
	return s
}

// SetName sets the Name field's value.
func (s *UpdateIdentityProviderOAuthInput) SetName(v string) *UpdateIdentityProviderOAuthInput {
	s.Name = &v
	return s
}

// SetProviderOptions sets the ProviderOptions field's value.
func (s *UpdateIdentityProviderOAuthInput) SetProviderOptions(v *ProviderOptionsForUpdateIdentityProviderOAuthInput) *UpdateIdentityProviderOAuthInput {
	s.ProviderOptions = v
	return s
}

// SetScopesList sets the ScopesList field's value.
func (s *UpdateIdentityProviderOAuthInput) SetScopesList(v []*string) *UpdateIdentityProviderOAuthInput {
	s.ScopesList = v
	return s
}

// SetTokenEndpoint sets the TokenEndpoint field's value.
func (s *UpdateIdentityProviderOAuthInput) SetTokenEndpoint(v string) *UpdateIdentityProviderOAuthInput {
	s.TokenEndpoint = &v
	return s
}

// SetUsePkce sets the UsePkce field's value.
func (s *UpdateIdentityProviderOAuthInput) SetUsePkce(v bool) *UpdateIdentityProviderOAuthInput {
	s.UsePkce = &v
	return s
}

// SetUserEndpoint sets the UserEndpoint field's value.
func (s *UpdateIdentityProviderOAuthInput) SetUserEndpoint(v string) *UpdateIdentityProviderOAuthInput {
	s.UserEndpoint = &v
	return s
}

// SetUserPoolUid sets the UserPoolUid field's value.
func (s *UpdateIdentityProviderOAuthInput) SetUserPoolUid(v string) *UpdateIdentityProviderOAuthInput {
	s.UserPoolUid = &v
	return s
}

type UpdateIdentityProviderOAuthOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	AuthorizationEndpoint *string `type:"string" json:",omitempty"`

	ClientId *string `type:"string" json:",omitempty"`

	ClientSecret *string `type:"string" json:",omitempty"`

	Enabled *bool `type:"boolean" json:",omitempty"`

	IdAttribute *string `type:"string" json:",omitempty"`

	Name *string `type:"string" json:",omitempty"`

	ProviderOptions *ProviderOptionsForUpdateIdentityProviderOAuthOutput `type:"structure" json:",omitempty"`

	ScopesList []*string `type:"list" json:",omitempty"`

	TokenEndpoint *string `type:"string" json:",omitempty"`

	Uid *string `type:"string" json:",omitempty"`

	UsePkce *bool `type:"boolean" json:",omitempty"`

	UserEndpoint *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s UpdateIdentityProviderOAuthOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateIdentityProviderOAuthOutput) GoString() string {
	return s.String()
}

// SetAuthorizationEndpoint sets the AuthorizationEndpoint field's value.
func (s *UpdateIdentityProviderOAuthOutput) SetAuthorizationEndpoint(v string) *UpdateIdentityProviderOAuthOutput {
	s.AuthorizationEndpoint = &v
	return s
}

// SetClientId sets the ClientId field's value.
func (s *UpdateIdentityProviderOAuthOutput) SetClientId(v string) *UpdateIdentityProviderOAuthOutput {
	s.ClientId = &v
	return s
}

// SetClientSecret sets the ClientSecret field's value.
func (s *UpdateIdentityProviderOAuthOutput) SetClientSecret(v string) *UpdateIdentityProviderOAuthOutput {
	s.ClientSecret = &v
	return s
}

// SetEnabled sets the Enabled field's value.
func (s *UpdateIdentityProviderOAuthOutput) SetEnabled(v bool) *UpdateIdentityProviderOAuthOutput {
	s.Enabled = &v
	return s
}

// SetIdAttribute sets the IdAttribute field's value.
func (s *UpdateIdentityProviderOAuthOutput) SetIdAttribute(v string) *UpdateIdentityProviderOAuthOutput {
	s.IdAttribute = &v
	return s
}

// SetName sets the Name field's value.
func (s *UpdateIdentityProviderOAuthOutput) SetName(v string) *UpdateIdentityProviderOAuthOutput {
	s.Name = &v
	return s
}

// SetProviderOptions sets the ProviderOptions field's value.
func (s *UpdateIdentityProviderOAuthOutput) SetProviderOptions(v *ProviderOptionsForUpdateIdentityProviderOAuthOutput) *UpdateIdentityProviderOAuthOutput {
	s.ProviderOptions = v
	return s
}

// SetScopesList sets the ScopesList field's value.
func (s *UpdateIdentityProviderOAuthOutput) SetScopesList(v []*string) *UpdateIdentityProviderOAuthOutput {
	s.ScopesList = v
	return s
}

// SetTokenEndpoint sets the TokenEndpoint field's value.
func (s *UpdateIdentityProviderOAuthOutput) SetTokenEndpoint(v string) *UpdateIdentityProviderOAuthOutput {
	s.TokenEndpoint = &v
	return s
}

// SetUid sets the Uid field's value.
func (s *UpdateIdentityProviderOAuthOutput) SetUid(v string) *UpdateIdentityProviderOAuthOutput {
	s.Uid = &v
	return s
}

// SetUsePkce sets the UsePkce field's value.
func (s *UpdateIdentityProviderOAuthOutput) SetUsePkce(v bool) *UpdateIdentityProviderOAuthOutput {
	s.UsePkce = &v
	return s
}

// SetUserEndpoint sets the UserEndpoint field's value.
func (s *UpdateIdentityProviderOAuthOutput) SetUserEndpoint(v string) *UpdateIdentityProviderOAuthOutput {
	s.UserEndpoint = &v
	return s
}
