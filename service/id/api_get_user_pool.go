// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package id

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opGetUserPoolCommon = "GetUserPool"

// GetUserPoolCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the GetUserPoolCommon operation. The "output" return
// value will be populated with the GetUserPoolCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetUserPoolCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetUserPoolCommon Send returns without error.
//
// See GetUserPoolCommon for more information on using the GetUserPoolCommon
// API call, and error handling.
//
//    // Example sending a request using the GetUserPoolCommonRequest method.
//    req, resp := client.GetUserPoolCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ID) GetUserPoolCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opGetUserPoolCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetUserPoolCommon API operation for ID.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ID's
// API operation GetUserPoolCommon for usage and error information.
func (c *ID) GetUserPoolCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.GetUserPoolCommonRequest(input)
	return out, req.Send()
}

// GetUserPoolCommonWithContext is the same as GetUserPoolCommon with the addition of
// the ability to pass a context and additional request options.
//
// See GetUserPoolCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ID) GetUserPoolCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.GetUserPoolCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opGetUserPool = "GetUserPool"

// GetUserPoolRequest generates a "volcengine/request.Request" representing the
// client's request for the GetUserPool operation. The "output" return
// value will be populated with the GetUserPoolCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetUserPoolCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetUserPoolCommon Send returns without error.
//
// See GetUserPool for more information on using the GetUserPool
// API call, and error handling.
//
//    // Example sending a request using the GetUserPoolRequest method.
//    req, resp := client.GetUserPoolRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ID) GetUserPoolRequest(input *GetUserPoolInput) (req *request.Request, output *GetUserPoolOutput) {
	op := &request.Operation{
		Name:       opGetUserPool,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &GetUserPoolInput{}
	}

	output = &GetUserPoolOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetUserPool API operation for ID.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ID's
// API operation GetUserPool for usage and error information.
func (c *ID) GetUserPool(input *GetUserPoolInput) (*GetUserPoolOutput, error) {
	req, out := c.GetUserPoolRequest(input)
	return out, req.Send()
}

// GetUserPoolWithContext is the same as GetUserPool with the addition of
// the ability to pass a context and additional request options.
//
// See GetUserPool for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ID) GetUserPoolWithContext(ctx volcengine.Context, input *GetUserPoolInput, opts ...request.Option) (*GetUserPoolOutput, error) {
	req, out := c.GetUserPoolRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type GetUserPoolInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// UserPoolUid is a required field
	UserPoolUid *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s GetUserPoolInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetUserPoolInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *GetUserPoolInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "GetUserPoolInput"}
	if s.UserPoolUid == nil {
		invalidParams.Add(request.NewErrParamRequired("UserPoolUid"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetUserPoolUid sets the UserPoolUid field's value.
func (s *GetUserPoolInput) SetUserPoolUid(v string) *GetUserPoolInput {
	s.UserPoolUid = &v
	return s
}

type GetUserPoolOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	CreateTime *string `type:"string" json:",omitempty"`

	Description *string `type:"string" json:",omitempty"`

	Domain *string `type:"string" json:",omitempty"`

	Name *string `type:"string" json:",omitempty"`

	TokenSigningKeyUrl *string `type:"string" json:",omitempty"`

	TotalClients *int32 `type:"int32" json:",omitempty"`

	TotalConnections *int32 `type:"int32" json:",omitempty"`

	TotalUsers *int32 `type:"int32" json:",omitempty"`

	Trn *string `type:"string" json:",omitempty"`

	Uid *string `type:"string" json:",omitempty"`

	UpdateTime *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s GetUserPoolOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetUserPoolOutput) GoString() string {
	return s.String()
}

// SetCreateTime sets the CreateTime field's value.
func (s *GetUserPoolOutput) SetCreateTime(v string) *GetUserPoolOutput {
	s.CreateTime = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *GetUserPoolOutput) SetDescription(v string) *GetUserPoolOutput {
	s.Description = &v
	return s
}

// SetDomain sets the Domain field's value.
func (s *GetUserPoolOutput) SetDomain(v string) *GetUserPoolOutput {
	s.Domain = &v
	return s
}

// SetName sets the Name field's value.
func (s *GetUserPoolOutput) SetName(v string) *GetUserPoolOutput {
	s.Name = &v
	return s
}

// SetTokenSigningKeyUrl sets the TokenSigningKeyUrl field's value.
func (s *GetUserPoolOutput) SetTokenSigningKeyUrl(v string) *GetUserPoolOutput {
	s.TokenSigningKeyUrl = &v
	return s
}

// SetTotalClients sets the TotalClients field's value.
func (s *GetUserPoolOutput) SetTotalClients(v int32) *GetUserPoolOutput {
	s.TotalClients = &v
	return s
}

// SetTotalConnections sets the TotalConnections field's value.
func (s *GetUserPoolOutput) SetTotalConnections(v int32) *GetUserPoolOutput {
	s.TotalConnections = &v
	return s
}

// SetTotalUsers sets the TotalUsers field's value.
func (s *GetUserPoolOutput) SetTotalUsers(v int32) *GetUserPoolOutput {
	s.TotalUsers = &v
	return s
}

// SetTrn sets the Trn field's value.
func (s *GetUserPoolOutput) SetTrn(v string) *GetUserPoolOutput {
	s.Trn = &v
	return s
}

// SetUid sets the Uid field's value.
func (s *GetUserPoolOutput) SetUid(v string) *GetUserPoolOutput {
	s.Uid = &v
	return s
}

// SetUpdateTime sets the UpdateTime field's value.
func (s *GetUserPoolOutput) SetUpdateTime(v string) *GetUserPoolOutput {
	s.UpdateTime = &v
	return s
}
