// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package id

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opGetWorkloadPoolCommon = "GetWorkloadPool"

// GetWorkloadPoolCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the GetWorkloadPoolCommon operation. The "output" return
// value will be populated with the GetWorkloadPoolCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetWorkloadPoolCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetWorkloadPoolCommon Send returns without error.
//
// See GetWorkloadPoolCommon for more information on using the GetWorkloadPoolCommon
// API call, and error handling.
//
//    // Example sending a request using the GetWorkloadPoolCommonRequest method.
//    req, resp := client.GetWorkloadPoolCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ID) GetWorkloadPoolCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opGetWorkloadPoolCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetWorkloadPoolCommon API operation for ID.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ID's
// API operation GetWorkloadPoolCommon for usage and error information.
func (c *ID) GetWorkloadPoolCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.GetWorkloadPoolCommonRequest(input)
	return out, req.Send()
}

// GetWorkloadPoolCommonWithContext is the same as GetWorkloadPoolCommon with the addition of
// the ability to pass a context and additional request options.
//
// See GetWorkloadPoolCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ID) GetWorkloadPoolCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.GetWorkloadPoolCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opGetWorkloadPool = "GetWorkloadPool"

// GetWorkloadPoolRequest generates a "volcengine/request.Request" representing the
// client's request for the GetWorkloadPool operation. The "output" return
// value will be populated with the GetWorkloadPoolCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetWorkloadPoolCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetWorkloadPoolCommon Send returns without error.
//
// See GetWorkloadPool for more information on using the GetWorkloadPool
// API call, and error handling.
//
//    // Example sending a request using the GetWorkloadPoolRequest method.
//    req, resp := client.GetWorkloadPoolRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ID) GetWorkloadPoolRequest(input *GetWorkloadPoolInput) (req *request.Request, output *GetWorkloadPoolOutput) {
	op := &request.Operation{
		Name:       opGetWorkloadPool,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &GetWorkloadPoolInput{}
	}

	output = &GetWorkloadPoolOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetWorkloadPool API operation for ID.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ID's
// API operation GetWorkloadPool for usage and error information.
func (c *ID) GetWorkloadPool(input *GetWorkloadPoolInput) (*GetWorkloadPoolOutput, error) {
	req, out := c.GetWorkloadPoolRequest(input)
	return out, req.Send()
}

// GetWorkloadPoolWithContext is the same as GetWorkloadPool with the addition of
// the ability to pass a context and additional request options.
//
// See GetWorkloadPool for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ID) GetWorkloadPoolWithContext(ctx volcengine.Context, input *GetWorkloadPoolInput, opts ...request.Option) (*GetWorkloadPoolOutput, error) {
	req, out := c.GetWorkloadPoolRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type GetWorkloadPoolInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	WorkloadPoolId *string `type:"string" json:",omitempty"`

	WorkloadPoolName *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s GetWorkloadPoolInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetWorkloadPoolInput) GoString() string {
	return s.String()
}

// SetWorkloadPoolId sets the WorkloadPoolId field's value.
func (s *GetWorkloadPoolInput) SetWorkloadPoolId(v string) *GetWorkloadPoolInput {
	s.WorkloadPoolId = &v
	return s
}

// SetWorkloadPoolName sets the WorkloadPoolName field's value.
func (s *GetWorkloadPoolInput) SetWorkloadPoolName(v string) *GetWorkloadPoolInput {
	s.WorkloadPoolName = &v
	return s
}

type GetWorkloadPoolOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	CreatedAt *string `type:"string" json:",omitempty"`

	Description *string `type:"string" json:",omitempty"`

	Trn *string `type:"string" json:",omitempty"`

	UpdatedAt *string `type:"string" json:",omitempty"`

	WorkloadPoolId *string `type:"string" json:",omitempty"`

	WorkloadPoolName *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s GetWorkloadPoolOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetWorkloadPoolOutput) GoString() string {
	return s.String()
}

// SetCreatedAt sets the CreatedAt field's value.
func (s *GetWorkloadPoolOutput) SetCreatedAt(v string) *GetWorkloadPoolOutput {
	s.CreatedAt = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *GetWorkloadPoolOutput) SetDescription(v string) *GetWorkloadPoolOutput {
	s.Description = &v
	return s
}

// SetTrn sets the Trn field's value.
func (s *GetWorkloadPoolOutput) SetTrn(v string) *GetWorkloadPoolOutput {
	s.Trn = &v
	return s
}

// SetUpdatedAt sets the UpdatedAt field's value.
func (s *GetWorkloadPoolOutput) SetUpdatedAt(v string) *GetWorkloadPoolOutput {
	s.UpdatedAt = &v
	return s
}

// SetWorkloadPoolId sets the WorkloadPoolId field's value.
func (s *GetWorkloadPoolOutput) SetWorkloadPoolId(v string) *GetWorkloadPoolOutput {
	s.WorkloadPoolId = &v
	return s
}

// SetWorkloadPoolName sets the WorkloadPoolName field's value.
func (s *GetWorkloadPoolOutput) SetWorkloadPoolName(v string) *GetWorkloadPoolOutput {
	s.WorkloadPoolName = &v
	return s
}
