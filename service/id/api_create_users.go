// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package id

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opCreateUsersCommon = "CreateUsers"

// CreateUsersCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateUsersCommon operation. The "output" return
// value will be populated with the CreateUsersCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateUsersCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateUsersCommon Send returns without error.
//
// See CreateUsersCommon for more information on using the CreateUsersCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateUsersCommonRequest method.
//    req, resp := client.CreateUsersCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ID) CreateUsersCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateUsersCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateUsersCommon API operation for ID.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ID's
// API operation CreateUsersCommon for usage and error information.
func (c *ID) CreateUsersCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateUsersCommonRequest(input)
	return out, req.Send()
}

// CreateUsersCommonWithContext is the same as CreateUsersCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateUsersCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ID) CreateUsersCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateUsersCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateUsers = "CreateUsers"

// CreateUsersRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateUsers operation. The "output" return
// value will be populated with the CreateUsersCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateUsersCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateUsersCommon Send returns without error.
//
// See CreateUsers for more information on using the CreateUsers
// API call, and error handling.
//
//    // Example sending a request using the CreateUsersRequest method.
//    req, resp := client.CreateUsersRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ID) CreateUsersRequest(input *CreateUsersInput) (req *request.Request, output *CreateUsersOutput) {
	op := &request.Operation{
		Name:       opCreateUsers,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateUsersInput{}
	}

	output = &CreateUsersOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateUsers API operation for ID.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ID's
// API operation CreateUsers for usage and error information.
func (c *ID) CreateUsers(input *CreateUsersInput) (*CreateUsersOutput, error) {
	req, out := c.CreateUsersRequest(input)
	return out, req.Send()
}

// CreateUsersWithContext is the same as CreateUsers with the addition of
// the ability to pass a context and additional request options.
//
// See CreateUsers for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ID) CreateUsersWithContext(ctx volcengine.Context, input *CreateUsersInput, opts ...request.Option) (*CreateUsersOutput, error) {
	req, out := c.CreateUsersRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type CreateUsersInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// UserPoolUid is a required field
	UserPoolUid *string `type:"string" json:",omitempty" required:"true"`

	Users []*UserForCreateUsersInput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s CreateUsersInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateUsersInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateUsersInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CreateUsersInput"}
	if s.UserPoolUid == nil {
		invalidParams.Add(request.NewErrParamRequired("UserPoolUid"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetUserPoolUid sets the UserPoolUid field's value.
func (s *CreateUsersInput) SetUserPoolUid(v string) *CreateUsersInput {
	s.UserPoolUid = &v
	return s
}

// SetUsers sets the Users field's value.
func (s *CreateUsersInput) SetUsers(v []*UserForCreateUsersInput) *CreateUsersInput {
	s.Users = v
	return s
}

type CreateUsersOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Errors []*string `type:"list" json:",omitempty"`

	FailureCount *int32 `type:"int32" json:",omitempty"`

	SuccessCount *int32 `type:"int32" json:",omitempty"`

	SuccessfulUids []*string `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s CreateUsersOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateUsersOutput) GoString() string {
	return s.String()
}

// SetErrors sets the Errors field's value.
func (s *CreateUsersOutput) SetErrors(v []*string) *CreateUsersOutput {
	s.Errors = v
	return s
}

// SetFailureCount sets the FailureCount field's value.
func (s *CreateUsersOutput) SetFailureCount(v int32) *CreateUsersOutput {
	s.FailureCount = &v
	return s
}

// SetSuccessCount sets the SuccessCount field's value.
func (s *CreateUsersOutput) SetSuccessCount(v int32) *CreateUsersOutput {
	s.SuccessCount = &v
	return s
}

// SetSuccessfulUids sets the SuccessfulUids field's value.
func (s *CreateUsersOutput) SetSuccessfulUids(v []*string) *CreateUsersOutput {
	s.SuccessfulUids = v
	return s
}

type UserForCreateUsersInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Email *string `type:"string" json:",omitempty"`

	EmailVerified *bool `type:"boolean" json:",omitempty"`

	FamilyName *string `type:"string" json:",omitempty"`

	GivenName *string `type:"string" json:",omitempty"`

	MiddleName *string `type:"string" json:",omitempty"`

	Name *string `type:"string" json:",omitempty"`

	Password *string `type:"string" json:",omitempty"`

	PhoneNumber *string `type:"string" json:",omitempty"`

	PhoneNumberVerified *bool `type:"boolean" json:",omitempty"`

	PreferredUsername *string `type:"string" json:",omitempty"`

	UserMetadata *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s UserForCreateUsersInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UserForCreateUsersInput) GoString() string {
	return s.String()
}

// SetEmail sets the Email field's value.
func (s *UserForCreateUsersInput) SetEmail(v string) *UserForCreateUsersInput {
	s.Email = &v
	return s
}

// SetEmailVerified sets the EmailVerified field's value.
func (s *UserForCreateUsersInput) SetEmailVerified(v bool) *UserForCreateUsersInput {
	s.EmailVerified = &v
	return s
}

// SetFamilyName sets the FamilyName field's value.
func (s *UserForCreateUsersInput) SetFamilyName(v string) *UserForCreateUsersInput {
	s.FamilyName = &v
	return s
}

// SetGivenName sets the GivenName field's value.
func (s *UserForCreateUsersInput) SetGivenName(v string) *UserForCreateUsersInput {
	s.GivenName = &v
	return s
}

// SetMiddleName sets the MiddleName field's value.
func (s *UserForCreateUsersInput) SetMiddleName(v string) *UserForCreateUsersInput {
	s.MiddleName = &v
	return s
}

// SetName sets the Name field's value.
func (s *UserForCreateUsersInput) SetName(v string) *UserForCreateUsersInput {
	s.Name = &v
	return s
}

// SetPassword sets the Password field's value.
func (s *UserForCreateUsersInput) SetPassword(v string) *UserForCreateUsersInput {
	s.Password = &v
	return s
}

// SetPhoneNumber sets the PhoneNumber field's value.
func (s *UserForCreateUsersInput) SetPhoneNumber(v string) *UserForCreateUsersInput {
	s.PhoneNumber = &v
	return s
}

// SetPhoneNumberVerified sets the PhoneNumberVerified field's value.
func (s *UserForCreateUsersInput) SetPhoneNumberVerified(v bool) *UserForCreateUsersInput {
	s.PhoneNumberVerified = &v
	return s
}

// SetPreferredUsername sets the PreferredUsername field's value.
func (s *UserForCreateUsersInput) SetPreferredUsername(v string) *UserForCreateUsersInput {
	s.PreferredUsername = &v
	return s
}

// SetUserMetadata sets the UserMetadata field's value.
func (s *UserForCreateUsersInput) SetUserMetadata(v string) *UserForCreateUsersInput {
	s.UserMetadata = &v
	return s
}
