// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package id

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opOauth2CallbackCommon = "Oauth2Callback"

// Oauth2CallbackCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the Oauth2CallbackCommon operation. The "output" return
// value will be populated with the Oauth2CallbackCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Oauth2CallbackCommon Request to send the API call to the service.
// the "output" return value is not valid until after Oauth2CallbackCommon Send returns without error.
//
// See Oauth2CallbackCommon for more information on using the Oauth2CallbackCommon
// API call, and error handling.
//
//    // Example sending a request using the Oauth2CallbackCommonRequest method.
//    req, resp := client.Oauth2CallbackCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ID) Oauth2CallbackCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opOauth2CallbackCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// Oauth2CallbackCommon API operation for ID.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ID's
// API operation Oauth2CallbackCommon for usage and error information.
func (c *ID) Oauth2CallbackCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.Oauth2CallbackCommonRequest(input)
	return out, req.Send()
}

// Oauth2CallbackCommonWithContext is the same as Oauth2CallbackCommon with the addition of
// the ability to pass a context and additional request options.
//
// See Oauth2CallbackCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ID) Oauth2CallbackCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.Oauth2CallbackCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opOauth2Callback = "Oauth2Callback"

// Oauth2CallbackRequest generates a "volcengine/request.Request" representing the
// client's request for the Oauth2Callback operation. The "output" return
// value will be populated with the Oauth2CallbackCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Oauth2CallbackCommon Request to send the API call to the service.
// the "output" return value is not valid until after Oauth2CallbackCommon Send returns without error.
//
// See Oauth2Callback for more information on using the Oauth2Callback
// API call, and error handling.
//
//    // Example sending a request using the Oauth2CallbackRequest method.
//    req, resp := client.Oauth2CallbackRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ID) Oauth2CallbackRequest(input *Oauth2CallbackInput) (req *request.Request, output *Oauth2CallbackOutput) {
	op := &request.Operation{
		Name:       opOauth2Callback,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &Oauth2CallbackInput{}
	}

	output = &Oauth2CallbackOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// Oauth2Callback API operation for ID.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ID's
// API operation Oauth2Callback for usage and error information.
func (c *ID) Oauth2Callback(input *Oauth2CallbackInput) (*Oauth2CallbackOutput, error) {
	req, out := c.Oauth2CallbackRequest(input)
	return out, req.Send()
}

// Oauth2CallbackWithContext is the same as Oauth2Callback with the addition of
// the ability to pass a context and additional request options.
//
// See Oauth2Callback for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ID) Oauth2CallbackWithContext(ctx volcengine.Context, input *Oauth2CallbackInput, opts ...request.Option) (*Oauth2CallbackOutput, error) {
	req, out := c.Oauth2CallbackRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type Oauth2CallbackInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// Code is a required field
	Code *string `type:"string" json:",omitempty" required:"true"`

	// IdentityToken is a required field
	IdentityToken *string `type:"string" json:",omitempty" required:"true"`

	// State is a required field
	State *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s Oauth2CallbackInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s Oauth2CallbackInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *Oauth2CallbackInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "Oauth2CallbackInput"}
	if s.Code == nil {
		invalidParams.Add(request.NewErrParamRequired("Code"))
	}
	if s.IdentityToken == nil {
		invalidParams.Add(request.NewErrParamRequired("IdentityToken"))
	}
	if s.State == nil {
		invalidParams.Add(request.NewErrParamRequired("State"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetCode sets the Code field's value.
func (s *Oauth2CallbackInput) SetCode(v string) *Oauth2CallbackInput {
	s.Code = &v
	return s
}

// SetIdentityToken sets the IdentityToken field's value.
func (s *Oauth2CallbackInput) SetIdentityToken(v string) *Oauth2CallbackInput {
	s.IdentityToken = &v
	return s
}

// SetState sets the State field's value.
func (s *Oauth2CallbackInput) SetState(v string) *Oauth2CallbackInput {
	s.State = &v
	return s
}

type Oauth2CallbackOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	AccessToken *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s Oauth2CallbackOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s Oauth2CallbackOutput) GoString() string {
	return s.String()
}

// SetAccessToken sets the AccessToken field's value.
func (s *Oauth2CallbackOutput) SetAccessToken(v string) *Oauth2CallbackOutput {
	s.AccessToken = &v
	return s
}
