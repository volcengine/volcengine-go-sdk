// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package id

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDeleteOauth2CredentialProviderCommon = "DeleteOauth2CredentialProvider"

// DeleteOauth2CredentialProviderCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteOauth2CredentialProviderCommon operation. The "output" return
// value will be populated with the DeleteOauth2CredentialProviderCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteOauth2CredentialProviderCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteOauth2CredentialProviderCommon Send returns without error.
//
// See DeleteOauth2CredentialProviderCommon for more information on using the DeleteOauth2CredentialProviderCommon
// API call, and error handling.
//
//    // Example sending a request using the DeleteOauth2CredentialProviderCommonRequest method.
//    req, resp := client.DeleteOauth2CredentialProviderCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ID) DeleteOauth2CredentialProviderCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteOauth2CredentialProviderCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DeleteOauth2CredentialProviderCommon API operation for ID.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ID's
// API operation DeleteOauth2CredentialProviderCommon for usage and error information.
func (c *ID) DeleteOauth2CredentialProviderCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteOauth2CredentialProviderCommonRequest(input)
	return out, req.Send()
}

// DeleteOauth2CredentialProviderCommonWithContext is the same as DeleteOauth2CredentialProviderCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteOauth2CredentialProviderCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ID) DeleteOauth2CredentialProviderCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteOauth2CredentialProviderCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteOauth2CredentialProvider = "DeleteOauth2CredentialProvider"

// DeleteOauth2CredentialProviderRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteOauth2CredentialProvider operation. The "output" return
// value will be populated with the DeleteOauth2CredentialProviderCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteOauth2CredentialProviderCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteOauth2CredentialProviderCommon Send returns without error.
//
// See DeleteOauth2CredentialProvider for more information on using the DeleteOauth2CredentialProvider
// API call, and error handling.
//
//    // Example sending a request using the DeleteOauth2CredentialProviderRequest method.
//    req, resp := client.DeleteOauth2CredentialProviderRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ID) DeleteOauth2CredentialProviderRequest(input *DeleteOauth2CredentialProviderInput) (req *request.Request, output *DeleteOauth2CredentialProviderOutput) {
	op := &request.Operation{
		Name:       opDeleteOauth2CredentialProvider,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteOauth2CredentialProviderInput{}
	}

	output = &DeleteOauth2CredentialProviderOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DeleteOauth2CredentialProvider API operation for ID.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ID's
// API operation DeleteOauth2CredentialProvider for usage and error information.
func (c *ID) DeleteOauth2CredentialProvider(input *DeleteOauth2CredentialProviderInput) (*DeleteOauth2CredentialProviderOutput, error) {
	req, out := c.DeleteOauth2CredentialProviderRequest(input)
	return out, req.Send()
}

// DeleteOauth2CredentialProviderWithContext is the same as DeleteOauth2CredentialProvider with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteOauth2CredentialProvider for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ID) DeleteOauth2CredentialProviderWithContext(ctx volcengine.Context, input *DeleteOauth2CredentialProviderInput, opts ...request.Option) (*DeleteOauth2CredentialProviderOutput, error) {
	req, out := c.DeleteOauth2CredentialProviderRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DeleteOauth2CredentialProviderInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// Name is a required field
	Name *string `type:"string" json:",omitempty" required:"true"`

	PoolName *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s DeleteOauth2CredentialProviderInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteOauth2CredentialProviderInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeleteOauth2CredentialProviderInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DeleteOauth2CredentialProviderInput"}
	if s.Name == nil {
		invalidParams.Add(request.NewErrParamRequired("Name"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetName sets the Name field's value.
func (s *DeleteOauth2CredentialProviderInput) SetName(v string) *DeleteOauth2CredentialProviderInput {
	s.Name = &v
	return s
}

// SetPoolName sets the PoolName field's value.
func (s *DeleteOauth2CredentialProviderInput) SetPoolName(v string) *DeleteOauth2CredentialProviderInput {
	s.PoolName = &v
	return s
}

type DeleteOauth2CredentialProviderOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s DeleteOauth2CredentialProviderOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteOauth2CredentialProviderOutput) GoString() string {
	return s.String()
}
