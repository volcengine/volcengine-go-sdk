// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package directconnect

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opAllocateDirectConnectVirtualInterfaceCommon = "AllocateDirectConnectVirtualInterface"

// AllocateDirectConnectVirtualInterfaceCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the AllocateDirectConnectVirtualInterfaceCommon operation. The "output" return
// value will be populated with the AllocateDirectConnectVirtualInterfaceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned AllocateDirectConnectVirtualInterfaceCommon Request to send the API call to the service.
// the "output" return value is not valid until after AllocateDirectConnectVirtualInterfaceCommon Send returns without error.
//
// See AllocateDirectConnectVirtualInterfaceCommon for more information on using the AllocateDirectConnectVirtualInterfaceCommon
// API call, and error handling.
//
//    // Example sending a request using the AllocateDirectConnectVirtualInterfaceCommonRequest method.
//    req, resp := client.AllocateDirectConnectVirtualInterfaceCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DIRECTCONNECT) AllocateDirectConnectVirtualInterfaceCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opAllocateDirectConnectVirtualInterfaceCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// AllocateDirectConnectVirtualInterfaceCommon API operation for DIRECTCONNECT.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for DIRECTCONNECT's
// API operation AllocateDirectConnectVirtualInterfaceCommon for usage and error information.
func (c *DIRECTCONNECT) AllocateDirectConnectVirtualInterfaceCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.AllocateDirectConnectVirtualInterfaceCommonRequest(input)
	return out, req.Send()
}

// AllocateDirectConnectVirtualInterfaceCommonWithContext is the same as AllocateDirectConnectVirtualInterfaceCommon with the addition of
// the ability to pass a context and additional request options.
//
// See AllocateDirectConnectVirtualInterfaceCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DIRECTCONNECT) AllocateDirectConnectVirtualInterfaceCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.AllocateDirectConnectVirtualInterfaceCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opAllocateDirectConnectVirtualInterface = "AllocateDirectConnectVirtualInterface"

// AllocateDirectConnectVirtualInterfaceRequest generates a "volcengine/request.Request" representing the
// client's request for the AllocateDirectConnectVirtualInterface operation. The "output" return
// value will be populated with the AllocateDirectConnectVirtualInterfaceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned AllocateDirectConnectVirtualInterfaceCommon Request to send the API call to the service.
// the "output" return value is not valid until after AllocateDirectConnectVirtualInterfaceCommon Send returns without error.
//
// See AllocateDirectConnectVirtualInterface for more information on using the AllocateDirectConnectVirtualInterface
// API call, and error handling.
//
//    // Example sending a request using the AllocateDirectConnectVirtualInterfaceRequest method.
//    req, resp := client.AllocateDirectConnectVirtualInterfaceRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DIRECTCONNECT) AllocateDirectConnectVirtualInterfaceRequest(input *AllocateDirectConnectVirtualInterfaceInput) (req *request.Request, output *AllocateDirectConnectVirtualInterfaceOutput) {
	op := &request.Operation{
		Name:       opAllocateDirectConnectVirtualInterface,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &AllocateDirectConnectVirtualInterfaceInput{}
	}

	output = &AllocateDirectConnectVirtualInterfaceOutput{}
	req = c.newRequest(op, input, output)

	return
}

// AllocateDirectConnectVirtualInterface API operation for DIRECTCONNECT.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for DIRECTCONNECT's
// API operation AllocateDirectConnectVirtualInterface for usage and error information.
func (c *DIRECTCONNECT) AllocateDirectConnectVirtualInterface(input *AllocateDirectConnectVirtualInterfaceInput) (*AllocateDirectConnectVirtualInterfaceOutput, error) {
	req, out := c.AllocateDirectConnectVirtualInterfaceRequest(input)
	return out, req.Send()
}

// AllocateDirectConnectVirtualInterfaceWithContext is the same as AllocateDirectConnectVirtualInterface with the addition of
// the ability to pass a context and additional request options.
//
// See AllocateDirectConnectVirtualInterface for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DIRECTCONNECT) AllocateDirectConnectVirtualInterfaceWithContext(ctx volcengine.Context, input *AllocateDirectConnectVirtualInterfaceInput, opts ...request.Option) (*AllocateDirectConnectVirtualInterfaceOutput, error) {
	req, out := c.AllocateDirectConnectVirtualInterfaceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type AllocateDirectConnectVirtualInterfaceInput struct {
	_ struct{} `type:"structure"`

	Bandwidth *int64 `type:"integer"`

	BfdDetectInterval *int64 `min:"200" max:"1000" type:"integer"`

	BfdDetectMultiplier *int64 `min:"3" max:"10" type:"integer"`

	Description *string `min:"1" max:"255" type:"string"`

	// DirectConnectGatewayId is a required field
	DirectConnectGatewayId *string `type:"string" required:"true"`

	EnableBfd *bool `type:"boolean"`

	EnableBfdEcho *bool `type:"boolean"`

	EnableNqa *bool `type:"boolean"`

	// LocalIp is a required field
	LocalIp *string `type:"string" required:"true"`

	NqaDetectInterval *int64 `min:"1000" max:"5000" type:"integer"`

	NqaDetectMultiplier *int64 `min:"3" max:"8" type:"integer"`

	// PeerIp is a required field
	PeerIp *string `type:"string" required:"true"`

	RouteType *string `type:"string" enum:"RouteTypeForAllocateDirectConnectVirtualInterfaceInput"`

	Tags []*TagForAllocateDirectConnectVirtualInterfaceInput `type:"list"`

	VirtualInterfaceName *string `min:"1" max:"128" type:"string"`

	// VlanId is a required field
	VlanId *int64 `type:"integer" required:"true"`
}

// String returns the string representation
func (s AllocateDirectConnectVirtualInterfaceInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s AllocateDirectConnectVirtualInterfaceInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *AllocateDirectConnectVirtualInterfaceInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "AllocateDirectConnectVirtualInterfaceInput"}
	if s.BfdDetectInterval != nil && *s.BfdDetectInterval < 200 {
		invalidParams.Add(request.NewErrParamMinValue("BfdDetectInterval", 200))
	}
	if s.BfdDetectInterval != nil && *s.BfdDetectInterval > 1000 {
		invalidParams.Add(request.NewErrParamMaxValue("BfdDetectInterval", 1000))
	}
	if s.BfdDetectMultiplier != nil && *s.BfdDetectMultiplier < 3 {
		invalidParams.Add(request.NewErrParamMinValue("BfdDetectMultiplier", 3))
	}
	if s.BfdDetectMultiplier != nil && *s.BfdDetectMultiplier > 10 {
		invalidParams.Add(request.NewErrParamMaxValue("BfdDetectMultiplier", 10))
	}
	if s.Description != nil && len(*s.Description) < 1 {
		invalidParams.Add(request.NewErrParamMinLen("Description", 1))
	}
	if s.Description != nil && len(*s.Description) > 255 {
		invalidParams.Add(request.NewErrParamMaxLen("Description", 255, *s.Description))
	}
	if s.DirectConnectGatewayId == nil {
		invalidParams.Add(request.NewErrParamRequired("DirectConnectGatewayId"))
	}
	if s.LocalIp == nil {
		invalidParams.Add(request.NewErrParamRequired("LocalIp"))
	}
	if s.NqaDetectInterval != nil && *s.NqaDetectInterval < 1000 {
		invalidParams.Add(request.NewErrParamMinValue("NqaDetectInterval", 1000))
	}
	if s.NqaDetectInterval != nil && *s.NqaDetectInterval > 5000 {
		invalidParams.Add(request.NewErrParamMaxValue("NqaDetectInterval", 5000))
	}
	if s.NqaDetectMultiplier != nil && *s.NqaDetectMultiplier < 3 {
		invalidParams.Add(request.NewErrParamMinValue("NqaDetectMultiplier", 3))
	}
	if s.NqaDetectMultiplier != nil && *s.NqaDetectMultiplier > 8 {
		invalidParams.Add(request.NewErrParamMaxValue("NqaDetectMultiplier", 8))
	}
	if s.PeerIp == nil {
		invalidParams.Add(request.NewErrParamRequired("PeerIp"))
	}
	if s.VirtualInterfaceName != nil && len(*s.VirtualInterfaceName) < 1 {
		invalidParams.Add(request.NewErrParamMinLen("VirtualInterfaceName", 1))
	}
	if s.VirtualInterfaceName != nil && len(*s.VirtualInterfaceName) > 128 {
		invalidParams.Add(request.NewErrParamMaxLen("VirtualInterfaceName", 128, *s.VirtualInterfaceName))
	}
	if s.VlanId == nil {
		invalidParams.Add(request.NewErrParamRequired("VlanId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetBandwidth sets the Bandwidth field's value.
func (s *AllocateDirectConnectVirtualInterfaceInput) SetBandwidth(v int64) *AllocateDirectConnectVirtualInterfaceInput {
	s.Bandwidth = &v
	return s
}

// SetBfdDetectInterval sets the BfdDetectInterval field's value.
func (s *AllocateDirectConnectVirtualInterfaceInput) SetBfdDetectInterval(v int64) *AllocateDirectConnectVirtualInterfaceInput {
	s.BfdDetectInterval = &v
	return s
}

// SetBfdDetectMultiplier sets the BfdDetectMultiplier field's value.
func (s *AllocateDirectConnectVirtualInterfaceInput) SetBfdDetectMultiplier(v int64) *AllocateDirectConnectVirtualInterfaceInput {
	s.BfdDetectMultiplier = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *AllocateDirectConnectVirtualInterfaceInput) SetDescription(v string) *AllocateDirectConnectVirtualInterfaceInput {
	s.Description = &v
	return s
}

// SetDirectConnectGatewayId sets the DirectConnectGatewayId field's value.
func (s *AllocateDirectConnectVirtualInterfaceInput) SetDirectConnectGatewayId(v string) *AllocateDirectConnectVirtualInterfaceInput {
	s.DirectConnectGatewayId = &v
	return s
}

// SetEnableBfd sets the EnableBfd field's value.
func (s *AllocateDirectConnectVirtualInterfaceInput) SetEnableBfd(v bool) *AllocateDirectConnectVirtualInterfaceInput {
	s.EnableBfd = &v
	return s
}

// SetEnableBfdEcho sets the EnableBfdEcho field's value.
func (s *AllocateDirectConnectVirtualInterfaceInput) SetEnableBfdEcho(v bool) *AllocateDirectConnectVirtualInterfaceInput {
	s.EnableBfdEcho = &v
	return s
}

// SetEnableNqa sets the EnableNqa field's value.
func (s *AllocateDirectConnectVirtualInterfaceInput) SetEnableNqa(v bool) *AllocateDirectConnectVirtualInterfaceInput {
	s.EnableNqa = &v
	return s
}

// SetLocalIp sets the LocalIp field's value.
func (s *AllocateDirectConnectVirtualInterfaceInput) SetLocalIp(v string) *AllocateDirectConnectVirtualInterfaceInput {
	s.LocalIp = &v
	return s
}

// SetNqaDetectInterval sets the NqaDetectInterval field's value.
func (s *AllocateDirectConnectVirtualInterfaceInput) SetNqaDetectInterval(v int64) *AllocateDirectConnectVirtualInterfaceInput {
	s.NqaDetectInterval = &v
	return s
}

// SetNqaDetectMultiplier sets the NqaDetectMultiplier field's value.
func (s *AllocateDirectConnectVirtualInterfaceInput) SetNqaDetectMultiplier(v int64) *AllocateDirectConnectVirtualInterfaceInput {
	s.NqaDetectMultiplier = &v
	return s
}

// SetPeerIp sets the PeerIp field's value.
func (s *AllocateDirectConnectVirtualInterfaceInput) SetPeerIp(v string) *AllocateDirectConnectVirtualInterfaceInput {
	s.PeerIp = &v
	return s
}

// SetRouteType sets the RouteType field's value.
func (s *AllocateDirectConnectVirtualInterfaceInput) SetRouteType(v string) *AllocateDirectConnectVirtualInterfaceInput {
	s.RouteType = &v
	return s
}

// SetTags sets the Tags field's value.
func (s *AllocateDirectConnectVirtualInterfaceInput) SetTags(v []*TagForAllocateDirectConnectVirtualInterfaceInput) *AllocateDirectConnectVirtualInterfaceInput {
	s.Tags = v
	return s
}

// SetVirtualInterfaceName sets the VirtualInterfaceName field's value.
func (s *AllocateDirectConnectVirtualInterfaceInput) SetVirtualInterfaceName(v string) *AllocateDirectConnectVirtualInterfaceInput {
	s.VirtualInterfaceName = &v
	return s
}

// SetVlanId sets the VlanId field's value.
func (s *AllocateDirectConnectVirtualInterfaceInput) SetVlanId(v int64) *AllocateDirectConnectVirtualInterfaceInput {
	s.VlanId = &v
	return s
}

type AllocateDirectConnectVirtualInterfaceOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	RequestId *string `type:"string"`

	VirtualInterfaceId *string `type:"string"`
}

// String returns the string representation
func (s AllocateDirectConnectVirtualInterfaceOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s AllocateDirectConnectVirtualInterfaceOutput) GoString() string {
	return s.String()
}

// SetRequestId sets the RequestId field's value.
func (s *AllocateDirectConnectVirtualInterfaceOutput) SetRequestId(v string) *AllocateDirectConnectVirtualInterfaceOutput {
	s.RequestId = &v
	return s
}

// SetVirtualInterfaceId sets the VirtualInterfaceId field's value.
func (s *AllocateDirectConnectVirtualInterfaceOutput) SetVirtualInterfaceId(v string) *AllocateDirectConnectVirtualInterfaceOutput {
	s.VirtualInterfaceId = &v
	return s
}

type TagForAllocateDirectConnectVirtualInterfaceInput struct {
	_ struct{} `type:"structure"`

	Key *string `type:"string"`

	Value *string `type:"string"`
}

// String returns the string representation
func (s TagForAllocateDirectConnectVirtualInterfaceInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s TagForAllocateDirectConnectVirtualInterfaceInput) GoString() string {
	return s.String()
}

// SetKey sets the Key field's value.
func (s *TagForAllocateDirectConnectVirtualInterfaceInput) SetKey(v string) *TagForAllocateDirectConnectVirtualInterfaceInput {
	s.Key = &v
	return s
}

// SetValue sets the Value field's value.
func (s *TagForAllocateDirectConnectVirtualInterfaceInput) SetValue(v string) *TagForAllocateDirectConnectVirtualInterfaceInput {
	s.Value = &v
	return s
}

const (
	// RouteTypeForAllocateDirectConnectVirtualInterfaceInputStatic is a RouteTypeForAllocateDirectConnectVirtualInterfaceInput enum value
	RouteTypeForAllocateDirectConnectVirtualInterfaceInputStatic = "Static"

	// RouteTypeForAllocateDirectConnectVirtualInterfaceInputBgp is a RouteTypeForAllocateDirectConnectVirtualInterfaceInput enum value
	RouteTypeForAllocateDirectConnectVirtualInterfaceInputBgp = "BGP"
)
