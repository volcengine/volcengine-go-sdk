// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vedbm

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opCreateParameterTemplateCommon = "CreateParameterTemplate"

// CreateParameterTemplateCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateParameterTemplateCommon operation. The "output" return
// value will be populated with the CreateParameterTemplateCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateParameterTemplateCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateParameterTemplateCommon Send returns without error.
//
// See CreateParameterTemplateCommon for more information on using the CreateParameterTemplateCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateParameterTemplateCommonRequest method.
//    req, resp := client.CreateParameterTemplateCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VEDBM) CreateParameterTemplateCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateParameterTemplateCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateParameterTemplateCommon API operation for VEDBM.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VEDBM's
// API operation CreateParameterTemplateCommon for usage and error information.
func (c *VEDBM) CreateParameterTemplateCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateParameterTemplateCommonRequest(input)
	return out, req.Send()
}

// CreateParameterTemplateCommonWithContext is the same as CreateParameterTemplateCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateParameterTemplateCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VEDBM) CreateParameterTemplateCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateParameterTemplateCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateParameterTemplate = "CreateParameterTemplate"

// CreateParameterTemplateRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateParameterTemplate operation. The "output" return
// value will be populated with the CreateParameterTemplateCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateParameterTemplateCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateParameterTemplateCommon Send returns without error.
//
// See CreateParameterTemplate for more information on using the CreateParameterTemplate
// API call, and error handling.
//
//    // Example sending a request using the CreateParameterTemplateRequest method.
//    req, resp := client.CreateParameterTemplateRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VEDBM) CreateParameterTemplateRequest(input *CreateParameterTemplateInput) (req *request.Request, output *CreateParameterTemplateOutput) {
	op := &request.Operation{
		Name:       opCreateParameterTemplate,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateParameterTemplateInput{}
	}

	output = &CreateParameterTemplateOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateParameterTemplate API operation for VEDBM.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VEDBM's
// API operation CreateParameterTemplate for usage and error information.
func (c *VEDBM) CreateParameterTemplate(input *CreateParameterTemplateInput) (*CreateParameterTemplateOutput, error) {
	req, out := c.CreateParameterTemplateRequest(input)
	return out, req.Send()
}

// CreateParameterTemplateWithContext is the same as CreateParameterTemplate with the addition of
// the ability to pass a context and additional request options.
//
// See CreateParameterTemplate for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VEDBM) CreateParameterTemplateWithContext(ctx volcengine.Context, input *CreateParameterTemplateInput, opts ...request.Option) (*CreateParameterTemplateOutput, error) {
	req, out := c.CreateParameterTemplateRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type CreateParameterTemplateInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// TemplateCategory is a required field
	TemplateCategory *string `type:"string" json:",omitempty" required:"true" enum:"EnumOfTemplateCategoryForCreateParameterTemplateInput"`

	TemplateDescription *string `type:"string" json:",omitempty"`

	// TemplateName is a required field
	TemplateName *string `type:"string" json:",omitempty" required:"true"`

	TemplateParameters []*TemplateParameterForCreateParameterTemplateInput `type:"list" json:",omitempty"`

	// TemplateType is a required field
	TemplateType *string `type:"string" json:",omitempty" required:"true" enum:"EnumOfTemplateTypeForCreateParameterTemplateInput"`

	// TemplateTypeVersion is a required field
	TemplateTypeVersion *string `type:"string" json:",omitempty" required:"true" enum:"EnumOfTemplateTypeVersionForCreateParameterTemplateInput"`
}

// String returns the string representation
func (s CreateParameterTemplateInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateParameterTemplateInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateParameterTemplateInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CreateParameterTemplateInput"}
	if s.TemplateCategory == nil {
		invalidParams.Add(request.NewErrParamRequired("TemplateCategory"))
	}
	if s.TemplateName == nil {
		invalidParams.Add(request.NewErrParamRequired("TemplateName"))
	}
	if s.TemplateType == nil {
		invalidParams.Add(request.NewErrParamRequired("TemplateType"))
	}
	if s.TemplateTypeVersion == nil {
		invalidParams.Add(request.NewErrParamRequired("TemplateTypeVersion"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetTemplateCategory sets the TemplateCategory field's value.
func (s *CreateParameterTemplateInput) SetTemplateCategory(v string) *CreateParameterTemplateInput {
	s.TemplateCategory = &v
	return s
}

// SetTemplateDescription sets the TemplateDescription field's value.
func (s *CreateParameterTemplateInput) SetTemplateDescription(v string) *CreateParameterTemplateInput {
	s.TemplateDescription = &v
	return s
}

// SetTemplateName sets the TemplateName field's value.
func (s *CreateParameterTemplateInput) SetTemplateName(v string) *CreateParameterTemplateInput {
	s.TemplateName = &v
	return s
}

// SetTemplateParameters sets the TemplateParameters field's value.
func (s *CreateParameterTemplateInput) SetTemplateParameters(v []*TemplateParameterForCreateParameterTemplateInput) *CreateParameterTemplateInput {
	s.TemplateParameters = v
	return s
}

// SetTemplateType sets the TemplateType field's value.
func (s *CreateParameterTemplateInput) SetTemplateType(v string) *CreateParameterTemplateInput {
	s.TemplateType = &v
	return s
}

// SetTemplateTypeVersion sets the TemplateTypeVersion field's value.
func (s *CreateParameterTemplateInput) SetTemplateTypeVersion(v string) *CreateParameterTemplateInput {
	s.TemplateTypeVersion = &v
	return s
}

type CreateParameterTemplateOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	TemplateId *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s CreateParameterTemplateOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateParameterTemplateOutput) GoString() string {
	return s.String()
}

// SetTemplateId sets the TemplateId field's value.
func (s *CreateParameterTemplateOutput) SetTemplateId(v string) *CreateParameterTemplateOutput {
	s.TemplateId = &v
	return s
}

type TemplateParameterForCreateParameterTemplateInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	ParameterName *string `type:"string" json:",omitempty"`

	ParameterValue *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s TemplateParameterForCreateParameterTemplateInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s TemplateParameterForCreateParameterTemplateInput) GoString() string {
	return s.String()
}

// SetParameterName sets the ParameterName field's value.
func (s *TemplateParameterForCreateParameterTemplateInput) SetParameterName(v string) *TemplateParameterForCreateParameterTemplateInput {
	s.ParameterName = &v
	return s
}

// SetParameterValue sets the ParameterValue field's value.
func (s *TemplateParameterForCreateParameterTemplateInput) SetParameterValue(v string) *TemplateParameterForCreateParameterTemplateInput {
	s.ParameterValue = &v
	return s
}

const (
	// EnumOfTemplateCategoryForCreateParameterTemplateInputDbengine is a EnumOfTemplateCategoryForCreateParameterTemplateInput enum value
	EnumOfTemplateCategoryForCreateParameterTemplateInputDbengine = "DBEngine"
)

const (
	// EnumOfTemplateTypeForCreateParameterTemplateInputMySql is a EnumOfTemplateTypeForCreateParameterTemplateInput enum value
	EnumOfTemplateTypeForCreateParameterTemplateInputMySql = "MySQL"
)

const (
	// EnumOfTemplateTypeVersionForCreateParameterTemplateInputMySql57 is a EnumOfTemplateTypeVersionForCreateParameterTemplateInput enum value
	EnumOfTemplateTypeVersionForCreateParameterTemplateInputMySql57 = "MySQL_5_7"

	// EnumOfTemplateTypeVersionForCreateParameterTemplateInputMySql80 is a EnumOfTemplateTypeVersionForCreateParameterTemplateInput enum value
	EnumOfTemplateTypeVersionForCreateParameterTemplateInputMySql80 = "MySQL_8_0"
)
