// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vedbm

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opCancelScheduleEventsCommon = "CancelScheduleEvents"

// CancelScheduleEventsCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the CancelScheduleEventsCommon operation. The "output" return
// value will be populated with the CancelScheduleEventsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CancelScheduleEventsCommon Request to send the API call to the service.
// the "output" return value is not valid until after CancelScheduleEventsCommon Send returns without error.
//
// See CancelScheduleEventsCommon for more information on using the CancelScheduleEventsCommon
// API call, and error handling.
//
//    // Example sending a request using the CancelScheduleEventsCommonRequest method.
//    req, resp := client.CancelScheduleEventsCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VEDBM) CancelScheduleEventsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCancelScheduleEventsCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CancelScheduleEventsCommon API operation for VEDBM.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VEDBM's
// API operation CancelScheduleEventsCommon for usage and error information.
func (c *VEDBM) CancelScheduleEventsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CancelScheduleEventsCommonRequest(input)
	return out, req.Send()
}

// CancelScheduleEventsCommonWithContext is the same as CancelScheduleEventsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CancelScheduleEventsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VEDBM) CancelScheduleEventsCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CancelScheduleEventsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCancelScheduleEvents = "CancelScheduleEvents"

// CancelScheduleEventsRequest generates a "volcengine/request.Request" representing the
// client's request for the CancelScheduleEvents operation. The "output" return
// value will be populated with the CancelScheduleEventsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CancelScheduleEventsCommon Request to send the API call to the service.
// the "output" return value is not valid until after CancelScheduleEventsCommon Send returns without error.
//
// See CancelScheduleEvents for more information on using the CancelScheduleEvents
// API call, and error handling.
//
//    // Example sending a request using the CancelScheduleEventsRequest method.
//    req, resp := client.CancelScheduleEventsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VEDBM) CancelScheduleEventsRequest(input *CancelScheduleEventsInput) (req *request.Request, output *CancelScheduleEventsOutput) {
	op := &request.Operation{
		Name:       opCancelScheduleEvents,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CancelScheduleEventsInput{}
	}

	output = &CancelScheduleEventsOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CancelScheduleEvents API operation for VEDBM.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VEDBM's
// API operation CancelScheduleEvents for usage and error information.
func (c *VEDBM) CancelScheduleEvents(input *CancelScheduleEventsInput) (*CancelScheduleEventsOutput, error) {
	req, out := c.CancelScheduleEventsRequest(input)
	return out, req.Send()
}

// CancelScheduleEventsWithContext is the same as CancelScheduleEvents with the addition of
// the ability to pass a context and additional request options.
//
// See CancelScheduleEvents for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VEDBM) CancelScheduleEventsWithContext(ctx volcengine.Context, input *CancelScheduleEventsInput, opts ...request.Option) (*CancelScheduleEventsOutput, error) {
	req, out := c.CancelScheduleEventsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type CancelScheduleEventsInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	EventId []*string `type:"list" json:",omitempty"`

	InstanceIds []*string `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s CancelScheduleEventsInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CancelScheduleEventsInput) GoString() string {
	return s.String()
}

// SetEventId sets the EventId field's value.
func (s *CancelScheduleEventsInput) SetEventId(v []*string) *CancelScheduleEventsInput {
	s.EventId = v
	return s
}

// SetInstanceIds sets the InstanceIds field's value.
func (s *CancelScheduleEventsInput) SetInstanceIds(v []*string) *CancelScheduleEventsInput {
	s.InstanceIds = v
	return s
}

type CancelScheduleEventsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s CancelScheduleEventsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CancelScheduleEventsOutput) GoString() string {
	return s.String()
}
