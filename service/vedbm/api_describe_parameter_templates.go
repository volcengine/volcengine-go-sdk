// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vedbm

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDescribeParameterTemplatesCommon = "DescribeParameterTemplates"

// DescribeParameterTemplatesCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeParameterTemplatesCommon operation. The "output" return
// value will be populated with the DescribeParameterTemplatesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeParameterTemplatesCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeParameterTemplatesCommon Send returns without error.
//
// See DescribeParameterTemplatesCommon for more information on using the DescribeParameterTemplatesCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeParameterTemplatesCommonRequest method.
//    req, resp := client.DescribeParameterTemplatesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VEDBM) DescribeParameterTemplatesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeParameterTemplatesCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeParameterTemplatesCommon API operation for VEDBM.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VEDBM's
// API operation DescribeParameterTemplatesCommon for usage and error information.
func (c *VEDBM) DescribeParameterTemplatesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeParameterTemplatesCommonRequest(input)
	return out, req.Send()
}

// DescribeParameterTemplatesCommonWithContext is the same as DescribeParameterTemplatesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeParameterTemplatesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VEDBM) DescribeParameterTemplatesCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeParameterTemplatesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeParameterTemplates = "DescribeParameterTemplates"

// DescribeParameterTemplatesRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeParameterTemplates operation. The "output" return
// value will be populated with the DescribeParameterTemplatesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeParameterTemplatesCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeParameterTemplatesCommon Send returns without error.
//
// See DescribeParameterTemplates for more information on using the DescribeParameterTemplates
// API call, and error handling.
//
//    // Example sending a request using the DescribeParameterTemplatesRequest method.
//    req, resp := client.DescribeParameterTemplatesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VEDBM) DescribeParameterTemplatesRequest(input *DescribeParameterTemplatesInput) (req *request.Request, output *DescribeParameterTemplatesOutput) {
	op := &request.Operation{
		Name:       opDescribeParameterTemplates,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeParameterTemplatesInput{}
	}

	output = &DescribeParameterTemplatesOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeParameterTemplates API operation for VEDBM.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VEDBM's
// API operation DescribeParameterTemplates for usage and error information.
func (c *VEDBM) DescribeParameterTemplates(input *DescribeParameterTemplatesInput) (*DescribeParameterTemplatesOutput, error) {
	req, out := c.DescribeParameterTemplatesRequest(input)
	return out, req.Send()
}

// DescribeParameterTemplatesWithContext is the same as DescribeParameterTemplates with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeParameterTemplates for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VEDBM) DescribeParameterTemplatesWithContext(ctx volcengine.Context, input *DescribeParameterTemplatesInput, opts ...request.Option) (*DescribeParameterTemplatesOutput, error) {
	req, out := c.DescribeParameterTemplatesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DescribeParameterTemplatesInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// PageNumber is a required field
	PageNumber *int32 `type:"int32" json:",omitempty" required:"true"`

	// PageSize is a required field
	PageSize *int32 `type:"int32" json:",omitempty" required:"true"`

	TemplateCategory *string `type:"string" json:",omitempty" enum:"EnumOfTemplateCategoryForDescribeParameterTemplatesInput"`

	TemplateId *string `type:"string" json:",omitempty"`

	TemplateName *string `type:"string" json:",omitempty"`

	TemplateSource *string `type:"string" json:",omitempty" enum:"EnumOfTemplateSourceForDescribeParameterTemplatesInput"`

	TemplateType *string `type:"string" json:",omitempty" enum:"EnumOfTemplateTypeForDescribeParameterTemplatesInput"`

	TemplateTypeVersion *string `type:"string" json:",omitempty" enum:"EnumOfTemplateTypeVersionForDescribeParameterTemplatesInput"`
}

// String returns the string representation
func (s DescribeParameterTemplatesInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeParameterTemplatesInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeParameterTemplatesInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DescribeParameterTemplatesInput"}
	if s.PageNumber == nil {
		invalidParams.Add(request.NewErrParamRequired("PageNumber"))
	}
	if s.PageSize == nil {
		invalidParams.Add(request.NewErrParamRequired("PageSize"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetPageNumber sets the PageNumber field's value.
func (s *DescribeParameterTemplatesInput) SetPageNumber(v int32) *DescribeParameterTemplatesInput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *DescribeParameterTemplatesInput) SetPageSize(v int32) *DescribeParameterTemplatesInput {
	s.PageSize = &v
	return s
}

// SetTemplateCategory sets the TemplateCategory field's value.
func (s *DescribeParameterTemplatesInput) SetTemplateCategory(v string) *DescribeParameterTemplatesInput {
	s.TemplateCategory = &v
	return s
}

// SetTemplateId sets the TemplateId field's value.
func (s *DescribeParameterTemplatesInput) SetTemplateId(v string) *DescribeParameterTemplatesInput {
	s.TemplateId = &v
	return s
}

// SetTemplateName sets the TemplateName field's value.
func (s *DescribeParameterTemplatesInput) SetTemplateName(v string) *DescribeParameterTemplatesInput {
	s.TemplateName = &v
	return s
}

// SetTemplateSource sets the TemplateSource field's value.
func (s *DescribeParameterTemplatesInput) SetTemplateSource(v string) *DescribeParameterTemplatesInput {
	s.TemplateSource = &v
	return s
}

// SetTemplateType sets the TemplateType field's value.
func (s *DescribeParameterTemplatesInput) SetTemplateType(v string) *DescribeParameterTemplatesInput {
	s.TemplateType = &v
	return s
}

// SetTemplateTypeVersion sets the TemplateTypeVersion field's value.
func (s *DescribeParameterTemplatesInput) SetTemplateTypeVersion(v string) *DescribeParameterTemplatesInput {
	s.TemplateTypeVersion = &v
	return s
}

type DescribeParameterTemplatesOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	TemplateInfos []*TemplateInfoForDescribeParameterTemplatesOutput `type:"list" json:",omitempty"`

	Total *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s DescribeParameterTemplatesOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeParameterTemplatesOutput) GoString() string {
	return s.String()
}

// SetTemplateInfos sets the TemplateInfos field's value.
func (s *DescribeParameterTemplatesOutput) SetTemplateInfos(v []*TemplateInfoForDescribeParameterTemplatesOutput) *DescribeParameterTemplatesOutput {
	s.TemplateInfos = v
	return s
}

// SetTotal sets the Total field's value.
func (s *DescribeParameterTemplatesOutput) SetTotal(v int32) *DescribeParameterTemplatesOutput {
	s.Total = &v
	return s
}

type TemplateInfoForDescribeParameterTemplatesOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	CreateTime *string `type:"string" json:",omitempty"`

	NeedRestart *bool `type:"boolean" json:",omitempty"`

	ParameterNumber *int32 `type:"int32" json:",omitempty"`

	TemplateCategory *string `type:"string" json:",omitempty" enum:"EnumOfTemplateCategoryForDescribeParameterTemplatesOutput"`

	TemplateDescription *string `type:"string" json:",omitempty"`

	TemplateId *string `type:"string" json:",omitempty"`

	TemplateName *string `type:"string" json:",omitempty"`

	TemplateSource *string `type:"string" json:",omitempty" enum:"EnumOfTemplateSourceForDescribeParameterTemplatesOutput"`

	TemplateType *string `type:"string" json:",omitempty" enum:"EnumOfTemplateTypeForDescribeParameterTemplatesOutput"`

	TemplateTypeVersion *string `type:"string" json:",omitempty" enum:"EnumOfTemplateTypeVersionForDescribeParameterTemplatesOutput"`

	UpdateTime *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s TemplateInfoForDescribeParameterTemplatesOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s TemplateInfoForDescribeParameterTemplatesOutput) GoString() string {
	return s.String()
}

// SetCreateTime sets the CreateTime field's value.
func (s *TemplateInfoForDescribeParameterTemplatesOutput) SetCreateTime(v string) *TemplateInfoForDescribeParameterTemplatesOutput {
	s.CreateTime = &v
	return s
}

// SetNeedRestart sets the NeedRestart field's value.
func (s *TemplateInfoForDescribeParameterTemplatesOutput) SetNeedRestart(v bool) *TemplateInfoForDescribeParameterTemplatesOutput {
	s.NeedRestart = &v
	return s
}

// SetParameterNumber sets the ParameterNumber field's value.
func (s *TemplateInfoForDescribeParameterTemplatesOutput) SetParameterNumber(v int32) *TemplateInfoForDescribeParameterTemplatesOutput {
	s.ParameterNumber = &v
	return s
}

// SetTemplateCategory sets the TemplateCategory field's value.
func (s *TemplateInfoForDescribeParameterTemplatesOutput) SetTemplateCategory(v string) *TemplateInfoForDescribeParameterTemplatesOutput {
	s.TemplateCategory = &v
	return s
}

// SetTemplateDescription sets the TemplateDescription field's value.
func (s *TemplateInfoForDescribeParameterTemplatesOutput) SetTemplateDescription(v string) *TemplateInfoForDescribeParameterTemplatesOutput {
	s.TemplateDescription = &v
	return s
}

// SetTemplateId sets the TemplateId field's value.
func (s *TemplateInfoForDescribeParameterTemplatesOutput) SetTemplateId(v string) *TemplateInfoForDescribeParameterTemplatesOutput {
	s.TemplateId = &v
	return s
}

// SetTemplateName sets the TemplateName field's value.
func (s *TemplateInfoForDescribeParameterTemplatesOutput) SetTemplateName(v string) *TemplateInfoForDescribeParameterTemplatesOutput {
	s.TemplateName = &v
	return s
}

// SetTemplateSource sets the TemplateSource field's value.
func (s *TemplateInfoForDescribeParameterTemplatesOutput) SetTemplateSource(v string) *TemplateInfoForDescribeParameterTemplatesOutput {
	s.TemplateSource = &v
	return s
}

// SetTemplateType sets the TemplateType field's value.
func (s *TemplateInfoForDescribeParameterTemplatesOutput) SetTemplateType(v string) *TemplateInfoForDescribeParameterTemplatesOutput {
	s.TemplateType = &v
	return s
}

// SetTemplateTypeVersion sets the TemplateTypeVersion field's value.
func (s *TemplateInfoForDescribeParameterTemplatesOutput) SetTemplateTypeVersion(v string) *TemplateInfoForDescribeParameterTemplatesOutput {
	s.TemplateTypeVersion = &v
	return s
}

// SetUpdateTime sets the UpdateTime field's value.
func (s *TemplateInfoForDescribeParameterTemplatesOutput) SetUpdateTime(v string) *TemplateInfoForDescribeParameterTemplatesOutput {
	s.UpdateTime = &v
	return s
}

const (
	// EnumOfTemplateCategoryForDescribeParameterTemplatesInputDbengine is a EnumOfTemplateCategoryForDescribeParameterTemplatesInput enum value
	EnumOfTemplateCategoryForDescribeParameterTemplatesInputDbengine = "DBEngine"
)

const (
	// EnumOfTemplateCategoryForDescribeParameterTemplatesOutputDbengine is a EnumOfTemplateCategoryForDescribeParameterTemplatesOutput enum value
	EnumOfTemplateCategoryForDescribeParameterTemplatesOutputDbengine = "DBEngine"
)

const (
	// EnumOfTemplateSourceForDescribeParameterTemplatesInputSystem is a EnumOfTemplateSourceForDescribeParameterTemplatesInput enum value
	EnumOfTemplateSourceForDescribeParameterTemplatesInputSystem = "System"

	// EnumOfTemplateSourceForDescribeParameterTemplatesInputUser is a EnumOfTemplateSourceForDescribeParameterTemplatesInput enum value
	EnumOfTemplateSourceForDescribeParameterTemplatesInputUser = "User"
)

const (
	// EnumOfTemplateSourceForDescribeParameterTemplatesOutputSystem is a EnumOfTemplateSourceForDescribeParameterTemplatesOutput enum value
	EnumOfTemplateSourceForDescribeParameterTemplatesOutputSystem = "System"

	// EnumOfTemplateSourceForDescribeParameterTemplatesOutputUser is a EnumOfTemplateSourceForDescribeParameterTemplatesOutput enum value
	EnumOfTemplateSourceForDescribeParameterTemplatesOutputUser = "User"
)

const (
	// EnumOfTemplateTypeForDescribeParameterTemplatesInputMySql is a EnumOfTemplateTypeForDescribeParameterTemplatesInput enum value
	EnumOfTemplateTypeForDescribeParameterTemplatesInputMySql = "MySQL"
)

const (
	// EnumOfTemplateTypeForDescribeParameterTemplatesOutputMySql is a EnumOfTemplateTypeForDescribeParameterTemplatesOutput enum value
	EnumOfTemplateTypeForDescribeParameterTemplatesOutputMySql = "MySQL"
)

const (
	// EnumOfTemplateTypeVersionForDescribeParameterTemplatesInputMySql57 is a EnumOfTemplateTypeVersionForDescribeParameterTemplatesInput enum value
	EnumOfTemplateTypeVersionForDescribeParameterTemplatesInputMySql57 = "MySQL_5_7"

	// EnumOfTemplateTypeVersionForDescribeParameterTemplatesInputMySql80 is a EnumOfTemplateTypeVersionForDescribeParameterTemplatesInput enum value
	EnumOfTemplateTypeVersionForDescribeParameterTemplatesInputMySql80 = "MySQL_8_0"
)

const (
	// EnumOfTemplateTypeVersionForDescribeParameterTemplatesOutputMySql57 is a EnumOfTemplateTypeVersionForDescribeParameterTemplatesOutput enum value
	EnumOfTemplateTypeVersionForDescribeParameterTemplatesOutputMySql57 = "MySQL_5_7"

	// EnumOfTemplateTypeVersionForDescribeParameterTemplatesOutputMySql80 is a EnumOfTemplateTypeVersionForDescribeParameterTemplatesOutput enum value
	EnumOfTemplateTypeVersionForDescribeParameterTemplatesOutputMySql80 = "MySQL_8_0"
)
