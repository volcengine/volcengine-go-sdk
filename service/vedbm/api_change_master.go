// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vedbm

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opChangeMasterCommon = "ChangeMaster"

// ChangeMasterCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ChangeMasterCommon operation. The "output" return
// value will be populated with the ChangeMasterCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ChangeMasterCommon Request to send the API call to the service.
// the "output" return value is not valid until after ChangeMasterCommon Send returns without error.
//
// See ChangeMasterCommon for more information on using the ChangeMasterCommon
// API call, and error handling.
//
//    // Example sending a request using the ChangeMasterCommonRequest method.
//    req, resp := client.ChangeMasterCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VEDBM) ChangeMasterCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opChangeMasterCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ChangeMasterCommon API operation for VEDBM.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VEDBM's
// API operation ChangeMasterCommon for usage and error information.
func (c *VEDBM) ChangeMasterCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ChangeMasterCommonRequest(input)
	return out, req.Send()
}

// ChangeMasterCommonWithContext is the same as ChangeMasterCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ChangeMasterCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VEDBM) ChangeMasterCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ChangeMasterCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opChangeMaster = "ChangeMaster"

// ChangeMasterRequest generates a "volcengine/request.Request" representing the
// client's request for the ChangeMaster operation. The "output" return
// value will be populated with the ChangeMasterCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ChangeMasterCommon Request to send the API call to the service.
// the "output" return value is not valid until after ChangeMasterCommon Send returns without error.
//
// See ChangeMaster for more information on using the ChangeMaster
// API call, and error handling.
//
//    // Example sending a request using the ChangeMasterRequest method.
//    req, resp := client.ChangeMasterRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VEDBM) ChangeMasterRequest(input *ChangeMasterInput) (req *request.Request, output *ChangeMasterOutput) {
	op := &request.Operation{
		Name:       opChangeMaster,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ChangeMasterInput{}
	}

	output = &ChangeMasterOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ChangeMaster API operation for VEDBM.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VEDBM's
// API operation ChangeMaster for usage and error information.
func (c *VEDBM) ChangeMaster(input *ChangeMasterInput) (*ChangeMasterOutput, error) {
	req, out := c.ChangeMasterRequest(input)
	return out, req.Send()
}

// ChangeMasterWithContext is the same as ChangeMaster with the addition of
// the ability to pass a context and additional request options.
//
// See ChangeMaster for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VEDBM) ChangeMasterWithContext(ctx volcengine.Context, input *ChangeMasterInput, opts ...request.Option) (*ChangeMasterOutput, error) {
	req, out := c.ChangeMasterRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ChangeMasterInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// ClusterName is a required field
	ClusterName *string `type:"string" json:",omitempty" required:"true"`

	// TargetNode is a required field
	TargetNode *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s ChangeMasterInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ChangeMasterInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ChangeMasterInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ChangeMasterInput"}
	if s.ClusterName == nil {
		invalidParams.Add(request.NewErrParamRequired("ClusterName"))
	}
	if s.TargetNode == nil {
		invalidParams.Add(request.NewErrParamRequired("TargetNode"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetClusterName sets the ClusterName field's value.
func (s *ChangeMasterInput) SetClusterName(v string) *ChangeMasterInput {
	s.ClusterName = &v
	return s
}

// SetTargetNode sets the TargetNode field's value.
func (s *ChangeMasterInput) SetTargetNode(v string) *ChangeMasterInput {
	s.TargetNode = &v
	return s
}

type ChangeMasterOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s ChangeMasterOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ChangeMasterOutput) GoString() string {
	return s.String()
}
