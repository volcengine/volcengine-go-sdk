// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vedbm

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opApplyParameterTemplateCommon = "ApplyParameterTemplate"

// ApplyParameterTemplateCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ApplyParameterTemplateCommon operation. The "output" return
// value will be populated with the ApplyParameterTemplateCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ApplyParameterTemplateCommon Request to send the API call to the service.
// the "output" return value is not valid until after ApplyParameterTemplateCommon Send returns without error.
//
// See ApplyParameterTemplateCommon for more information on using the ApplyParameterTemplateCommon
// API call, and error handling.
//
//    // Example sending a request using the ApplyParameterTemplateCommonRequest method.
//    req, resp := client.ApplyParameterTemplateCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VEDBM) ApplyParameterTemplateCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opApplyParameterTemplateCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ApplyParameterTemplateCommon API operation for VEDBM.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VEDBM's
// API operation ApplyParameterTemplateCommon for usage and error information.
func (c *VEDBM) ApplyParameterTemplateCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ApplyParameterTemplateCommonRequest(input)
	return out, req.Send()
}

// ApplyParameterTemplateCommonWithContext is the same as ApplyParameterTemplateCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ApplyParameterTemplateCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VEDBM) ApplyParameterTemplateCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ApplyParameterTemplateCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opApplyParameterTemplate = "ApplyParameterTemplate"

// ApplyParameterTemplateRequest generates a "volcengine/request.Request" representing the
// client's request for the ApplyParameterTemplate operation. The "output" return
// value will be populated with the ApplyParameterTemplateCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ApplyParameterTemplateCommon Request to send the API call to the service.
// the "output" return value is not valid until after ApplyParameterTemplateCommon Send returns without error.
//
// See ApplyParameterTemplate for more information on using the ApplyParameterTemplate
// API call, and error handling.
//
//    // Example sending a request using the ApplyParameterTemplateRequest method.
//    req, resp := client.ApplyParameterTemplateRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VEDBM) ApplyParameterTemplateRequest(input *ApplyParameterTemplateInput) (req *request.Request, output *ApplyParameterTemplateOutput) {
	op := &request.Operation{
		Name:       opApplyParameterTemplate,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ApplyParameterTemplateInput{}
	}

	output = &ApplyParameterTemplateOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ApplyParameterTemplate API operation for VEDBM.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VEDBM's
// API operation ApplyParameterTemplate for usage and error information.
func (c *VEDBM) ApplyParameterTemplate(input *ApplyParameterTemplateInput) (*ApplyParameterTemplateOutput, error) {
	req, out := c.ApplyParameterTemplateRequest(input)
	return out, req.Send()
}

// ApplyParameterTemplateWithContext is the same as ApplyParameterTemplate with the addition of
// the ability to pass a context and additional request options.
//
// See ApplyParameterTemplate for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VEDBM) ApplyParameterTemplateWithContext(ctx volcengine.Context, input *ApplyParameterTemplateInput, opts ...request.Option) (*ApplyParameterTemplateOutput, error) {
	req, out := c.ApplyParameterTemplateRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ApplyParameterTemplateInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	InstanceIds []*string `type:"list" json:",omitempty"`

	// TemplateId is a required field
	TemplateId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s ApplyParameterTemplateInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ApplyParameterTemplateInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ApplyParameterTemplateInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ApplyParameterTemplateInput"}
	if s.TemplateId == nil {
		invalidParams.Add(request.NewErrParamRequired("TemplateId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetInstanceIds sets the InstanceIds field's value.
func (s *ApplyParameterTemplateInput) SetInstanceIds(v []*string) *ApplyParameterTemplateInput {
	s.InstanceIds = v
	return s
}

// SetTemplateId sets the TemplateId field's value.
func (s *ApplyParameterTemplateInput) SetTemplateId(v string) *ApplyParameterTemplateInput {
	s.TemplateId = &v
	return s
}

type ApplyParameterTemplateOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s ApplyParameterTemplateOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ApplyParameterTemplateOutput) GoString() string {
	return s.String()
}
