// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vedbm

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDescribeDBEndpointCommon = "DescribeDBEndpoint"

// DescribeDBEndpointCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeDBEndpointCommon operation. The "output" return
// value will be populated with the DescribeDBEndpointCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeDBEndpointCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeDBEndpointCommon Send returns without error.
//
// See DescribeDBEndpointCommon for more information on using the DescribeDBEndpointCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeDBEndpointCommonRequest method.
//    req, resp := client.DescribeDBEndpointCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VEDBM) DescribeDBEndpointCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeDBEndpointCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeDBEndpointCommon API operation for VEDBM.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VEDBM's
// API operation DescribeDBEndpointCommon for usage and error information.
func (c *VEDBM) DescribeDBEndpointCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeDBEndpointCommonRequest(input)
	return out, req.Send()
}

// DescribeDBEndpointCommonWithContext is the same as DescribeDBEndpointCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeDBEndpointCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VEDBM) DescribeDBEndpointCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeDBEndpointCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeDBEndpoint = "DescribeDBEndpoint"

// DescribeDBEndpointRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeDBEndpoint operation. The "output" return
// value will be populated with the DescribeDBEndpointCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeDBEndpointCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeDBEndpointCommon Send returns without error.
//
// See DescribeDBEndpoint for more information on using the DescribeDBEndpoint
// API call, and error handling.
//
//    // Example sending a request using the DescribeDBEndpointRequest method.
//    req, resp := client.DescribeDBEndpointRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VEDBM) DescribeDBEndpointRequest(input *DescribeDBEndpointInput) (req *request.Request, output *DescribeDBEndpointOutput) {
	op := &request.Operation{
		Name:       opDescribeDBEndpoint,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeDBEndpointInput{}
	}

	output = &DescribeDBEndpointOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeDBEndpoint API operation for VEDBM.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VEDBM's
// API operation DescribeDBEndpoint for usage and error information.
func (c *VEDBM) DescribeDBEndpoint(input *DescribeDBEndpointInput) (*DescribeDBEndpointOutput, error) {
	req, out := c.DescribeDBEndpointRequest(input)
	return out, req.Send()
}

// DescribeDBEndpointWithContext is the same as DescribeDBEndpoint with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeDBEndpoint for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VEDBM) DescribeDBEndpointWithContext(ctx volcengine.Context, input *DescribeDBEndpointInput, opts ...request.Option) (*DescribeDBEndpointOutput, error) {
	req, out := c.DescribeDBEndpointRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type AddressForDescribeDBEndpointOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	DNSVisibility *bool `type:"boolean" json:",omitempty"`

	Domain *string `type:"string" json:",omitempty"`

	EipId *string `type:"string" json:",omitempty"`

	IPAddress *string `type:"string" json:",omitempty"`

	NetworkType *string `type:"string" json:",omitempty" enum:"EnumOfNetworkTypeForDescribeDBEndpointOutput"`

	Port *string `type:"string" json:",omitempty"`

	SubnetId *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s AddressForDescribeDBEndpointOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s AddressForDescribeDBEndpointOutput) GoString() string {
	return s.String()
}

// SetDNSVisibility sets the DNSVisibility field's value.
func (s *AddressForDescribeDBEndpointOutput) SetDNSVisibility(v bool) *AddressForDescribeDBEndpointOutput {
	s.DNSVisibility = &v
	return s
}

// SetDomain sets the Domain field's value.
func (s *AddressForDescribeDBEndpointOutput) SetDomain(v string) *AddressForDescribeDBEndpointOutput {
	s.Domain = &v
	return s
}

// SetEipId sets the EipId field's value.
func (s *AddressForDescribeDBEndpointOutput) SetEipId(v string) *AddressForDescribeDBEndpointOutput {
	s.EipId = &v
	return s
}

// SetIPAddress sets the IPAddress field's value.
func (s *AddressForDescribeDBEndpointOutput) SetIPAddress(v string) *AddressForDescribeDBEndpointOutput {
	s.IPAddress = &v
	return s
}

// SetNetworkType sets the NetworkType field's value.
func (s *AddressForDescribeDBEndpointOutput) SetNetworkType(v string) *AddressForDescribeDBEndpointOutput {
	s.NetworkType = &v
	return s
}

// SetPort sets the Port field's value.
func (s *AddressForDescribeDBEndpointOutput) SetPort(v string) *AddressForDescribeDBEndpointOutput {
	s.Port = &v
	return s
}

// SetSubnetId sets the SubnetId field's value.
func (s *AddressForDescribeDBEndpointOutput) SetSubnetId(v string) *AddressForDescribeDBEndpointOutput {
	s.SubnetId = &v
	return s
}

type DescribeDBEndpointInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	EndpointId *string `type:"string" json:",omitempty"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s DescribeDBEndpointInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeDBEndpointInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeDBEndpointInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DescribeDBEndpointInput"}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetEndpointId sets the EndpointId field's value.
func (s *DescribeDBEndpointInput) SetEndpointId(v string) *DescribeDBEndpointInput {
	s.EndpointId = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *DescribeDBEndpointInput) SetInstanceId(v string) *DescribeDBEndpointInput {
	s.InstanceId = &v
	return s
}

type DescribeDBEndpointOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Endpoints []*EndpointForDescribeDBEndpointOutput `type:"list" json:",omitempty"`

	Total *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s DescribeDBEndpointOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeDBEndpointOutput) GoString() string {
	return s.String()
}

// SetEndpoints sets the Endpoints field's value.
func (s *DescribeDBEndpointOutput) SetEndpoints(v []*EndpointForDescribeDBEndpointOutput) *DescribeDBEndpointOutput {
	s.Endpoints = v
	return s
}

// SetTotal sets the Total field's value.
func (s *DescribeDBEndpointOutput) SetTotal(v int32) *DescribeDBEndpointOutput {
	s.Total = &v
	return s
}

type EndpointForDescribeDBEndpointOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Addresses []*AddressForDescribeDBEndpointOutput `type:"list" json:",omitempty"`

	AutoAddNewNodes *bool `type:"boolean" json:",omitempty"`

	ConsistLevel *string `type:"string" json:",omitempty" enum:"EnumOfConsistLevelForDescribeDBEndpointOutput"`

	ConsistTimeout *int32 `type:"int32" json:",omitempty"`

	ConsistTimeoutAction *string `type:"string" json:",omitempty" enum:"EnumOfConsistTimeoutActionForDescribeDBEndpointOutput"`

	Description *string `type:"string" json:",omitempty"`

	DistributedTransaction *bool `type:"boolean" json:",omitempty"`

	EndpointId *string `type:"string" json:",omitempty"`

	EndpointName *string `type:"string" json:",omitempty"`

	EndpointType *string `type:"string" json:",omitempty" enum:"EnumOfEndpointTypeForDescribeDBEndpointOutput"`

	MasterAcceptReadRequests *bool `type:"boolean" json:",omitempty"`

	NodeIds []*string `type:"list" json:",omitempty"`

	ReadWriteMode *string `type:"string" json:",omitempty" enum:"EnumOfReadWriteModeForDescribeDBEndpointOutput"`
}

// String returns the string representation
func (s EndpointForDescribeDBEndpointOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s EndpointForDescribeDBEndpointOutput) GoString() string {
	return s.String()
}

// SetAddresses sets the Addresses field's value.
func (s *EndpointForDescribeDBEndpointOutput) SetAddresses(v []*AddressForDescribeDBEndpointOutput) *EndpointForDescribeDBEndpointOutput {
	s.Addresses = v
	return s
}

// SetAutoAddNewNodes sets the AutoAddNewNodes field's value.
func (s *EndpointForDescribeDBEndpointOutput) SetAutoAddNewNodes(v bool) *EndpointForDescribeDBEndpointOutput {
	s.AutoAddNewNodes = &v
	return s
}

// SetConsistLevel sets the ConsistLevel field's value.
func (s *EndpointForDescribeDBEndpointOutput) SetConsistLevel(v string) *EndpointForDescribeDBEndpointOutput {
	s.ConsistLevel = &v
	return s
}

// SetConsistTimeout sets the ConsistTimeout field's value.
func (s *EndpointForDescribeDBEndpointOutput) SetConsistTimeout(v int32) *EndpointForDescribeDBEndpointOutput {
	s.ConsistTimeout = &v
	return s
}

// SetConsistTimeoutAction sets the ConsistTimeoutAction field's value.
func (s *EndpointForDescribeDBEndpointOutput) SetConsistTimeoutAction(v string) *EndpointForDescribeDBEndpointOutput {
	s.ConsistTimeoutAction = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *EndpointForDescribeDBEndpointOutput) SetDescription(v string) *EndpointForDescribeDBEndpointOutput {
	s.Description = &v
	return s
}

// SetDistributedTransaction sets the DistributedTransaction field's value.
func (s *EndpointForDescribeDBEndpointOutput) SetDistributedTransaction(v bool) *EndpointForDescribeDBEndpointOutput {
	s.DistributedTransaction = &v
	return s
}

// SetEndpointId sets the EndpointId field's value.
func (s *EndpointForDescribeDBEndpointOutput) SetEndpointId(v string) *EndpointForDescribeDBEndpointOutput {
	s.EndpointId = &v
	return s
}

// SetEndpointName sets the EndpointName field's value.
func (s *EndpointForDescribeDBEndpointOutput) SetEndpointName(v string) *EndpointForDescribeDBEndpointOutput {
	s.EndpointName = &v
	return s
}

// SetEndpointType sets the EndpointType field's value.
func (s *EndpointForDescribeDBEndpointOutput) SetEndpointType(v string) *EndpointForDescribeDBEndpointOutput {
	s.EndpointType = &v
	return s
}

// SetMasterAcceptReadRequests sets the MasterAcceptReadRequests field's value.
func (s *EndpointForDescribeDBEndpointOutput) SetMasterAcceptReadRequests(v bool) *EndpointForDescribeDBEndpointOutput {
	s.MasterAcceptReadRequests = &v
	return s
}

// SetNodeIds sets the NodeIds field's value.
func (s *EndpointForDescribeDBEndpointOutput) SetNodeIds(v []*string) *EndpointForDescribeDBEndpointOutput {
	s.NodeIds = v
	return s
}

// SetReadWriteMode sets the ReadWriteMode field's value.
func (s *EndpointForDescribeDBEndpointOutput) SetReadWriteMode(v string) *EndpointForDescribeDBEndpointOutput {
	s.ReadWriteMode = &v
	return s
}

const (
	// EnumOfConsistLevelForDescribeDBEndpointOutputEventual is a EnumOfConsistLevelForDescribeDBEndpointOutput enum value
	EnumOfConsistLevelForDescribeDBEndpointOutputEventual = "Eventual"

	// EnumOfConsistLevelForDescribeDBEndpointOutputGlobal is a EnumOfConsistLevelForDescribeDBEndpointOutput enum value
	EnumOfConsistLevelForDescribeDBEndpointOutputGlobal = "Global"

	// EnumOfConsistLevelForDescribeDBEndpointOutputSession is a EnumOfConsistLevelForDescribeDBEndpointOutput enum value
	EnumOfConsistLevelForDescribeDBEndpointOutputSession = "Session"
)

const (
	// EnumOfConsistTimeoutActionForDescribeDBEndpointOutputReadMaster is a EnumOfConsistTimeoutActionForDescribeDBEndpointOutput enum value
	EnumOfConsistTimeoutActionForDescribeDBEndpointOutputReadMaster = "ReadMaster"

	// EnumOfConsistTimeoutActionForDescribeDBEndpointOutputReturnError is a EnumOfConsistTimeoutActionForDescribeDBEndpointOutput enum value
	EnumOfConsistTimeoutActionForDescribeDBEndpointOutputReturnError = "ReturnError"
)

const (
	// EnumOfEndpointTypeForDescribeDBEndpointOutputCluster is a EnumOfEndpointTypeForDescribeDBEndpointOutput enum value
	EnumOfEndpointTypeForDescribeDBEndpointOutputCluster = "Cluster"

	// EnumOfEndpointTypeForDescribeDBEndpointOutputCustom is a EnumOfEndpointTypeForDescribeDBEndpointOutput enum value
	EnumOfEndpointTypeForDescribeDBEndpointOutputCustom = "Custom"

	// EnumOfEndpointTypeForDescribeDBEndpointOutputPrimary is a EnumOfEndpointTypeForDescribeDBEndpointOutput enum value
	EnumOfEndpointTypeForDescribeDBEndpointOutputPrimary = "Primary"
)

const (
	// EnumOfNetworkTypeForDescribeDBEndpointOutputPrivate is a EnumOfNetworkTypeForDescribeDBEndpointOutput enum value
	EnumOfNetworkTypeForDescribeDBEndpointOutputPrivate = "Private"

	// EnumOfNetworkTypeForDescribeDBEndpointOutputPublic is a EnumOfNetworkTypeForDescribeDBEndpointOutput enum value
	EnumOfNetworkTypeForDescribeDBEndpointOutputPublic = "Public"
)

const (
	// EnumOfReadWriteModeForDescribeDBEndpointOutputReadOnly is a EnumOfReadWriteModeForDescribeDBEndpointOutput enum value
	EnumOfReadWriteModeForDescribeDBEndpointOutputReadOnly = "ReadOnly"

	// EnumOfReadWriteModeForDescribeDBEndpointOutputReadWrite is a EnumOfReadWriteModeForDescribeDBEndpointOutput enum value
	EnumOfReadWriteModeForDescribeDBEndpointOutputReadWrite = "ReadWrite"
)
