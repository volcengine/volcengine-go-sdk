// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package graph

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opUpdateKeyBlackListConfCommon = "UpdateKeyBlackListConf"

// UpdateKeyBlackListConfCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateKeyBlackListConfCommon operation. The "output" return
// value will be populated with the UpdateKeyBlackListConfCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateKeyBlackListConfCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateKeyBlackListConfCommon Send returns without error.
//
// See UpdateKeyBlackListConfCommon for more information on using the UpdateKeyBlackListConfCommon
// API call, and error handling.
//
//    // Example sending a request using the UpdateKeyBlackListConfCommonRequest method.
//    req, resp := client.UpdateKeyBlackListConfCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *GRAPH) UpdateKeyBlackListConfCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opUpdateKeyBlackListConfCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateKeyBlackListConfCommon API operation for GRAPH.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for GRAPH's
// API operation UpdateKeyBlackListConfCommon for usage and error information.
func (c *GRAPH) UpdateKeyBlackListConfCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.UpdateKeyBlackListConfCommonRequest(input)
	return out, req.Send()
}

// UpdateKeyBlackListConfCommonWithContext is the same as UpdateKeyBlackListConfCommon with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateKeyBlackListConfCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *GRAPH) UpdateKeyBlackListConfCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.UpdateKeyBlackListConfCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opUpdateKeyBlackListConf = "UpdateKeyBlackListConf"

// UpdateKeyBlackListConfRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateKeyBlackListConf operation. The "output" return
// value will be populated with the UpdateKeyBlackListConfCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateKeyBlackListConfCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateKeyBlackListConfCommon Send returns without error.
//
// See UpdateKeyBlackListConf for more information on using the UpdateKeyBlackListConf
// API call, and error handling.
//
//    // Example sending a request using the UpdateKeyBlackListConfRequest method.
//    req, resp := client.UpdateKeyBlackListConfRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *GRAPH) UpdateKeyBlackListConfRequest(input *UpdateKeyBlackListConfInput) (req *request.Request, output *UpdateKeyBlackListConfOutput) {
	op := &request.Operation{
		Name:       opUpdateKeyBlackListConf,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UpdateKeyBlackListConfInput{}
	}

	output = &UpdateKeyBlackListConfOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateKeyBlackListConf API operation for GRAPH.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for GRAPH's
// API operation UpdateKeyBlackListConf for usage and error information.
func (c *GRAPH) UpdateKeyBlackListConf(input *UpdateKeyBlackListConfInput) (*UpdateKeyBlackListConfOutput, error) {
	req, out := c.UpdateKeyBlackListConfRequest(input)
	return out, req.Send()
}

// UpdateKeyBlackListConfWithContext is the same as UpdateKeyBlackListConf with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateKeyBlackListConf for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *GRAPH) UpdateKeyBlackListConfWithContext(ctx volcengine.Context, input *UpdateKeyBlackListConfInput, opts ...request.Option) (*UpdateKeyBlackListConfOutput, error) {
	req, out := c.UpdateKeyBlackListConfRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type KeyBlackListForUpdateKeyBlackListConfInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Key *string `type:"string" json:",omitempty"`

	ReadRejectPct *int32 `type:"int32" json:",omitempty"`

	WriteRejectPct *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s KeyBlackListForUpdateKeyBlackListConfInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s KeyBlackListForUpdateKeyBlackListConfInput) GoString() string {
	return s.String()
}

// SetKey sets the Key field's value.
func (s *KeyBlackListForUpdateKeyBlackListConfInput) SetKey(v string) *KeyBlackListForUpdateKeyBlackListConfInput {
	s.Key = &v
	return s
}

// SetReadRejectPct sets the ReadRejectPct field's value.
func (s *KeyBlackListForUpdateKeyBlackListConfInput) SetReadRejectPct(v int32) *KeyBlackListForUpdateKeyBlackListConfInput {
	s.ReadRejectPct = &v
	return s
}

// SetWriteRejectPct sets the WriteRejectPct field's value.
func (s *KeyBlackListForUpdateKeyBlackListConfInput) SetWriteRejectPct(v int32) *KeyBlackListForUpdateKeyBlackListConfInput {
	s.WriteRejectPct = &v
	return s
}

type UpdateKeyBlackListConfInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// AccountId is a required field
	AccountId *int64 `type:"int64" json:",omitempty" required:"true"`

	ConfigRecordId *int64 `type:"int64" json:",omitempty"`

	// Creator is a required field
	Creator *string `type:"string" json:",omitempty" required:"true"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:",omitempty" required:"true"`

	KeyBlackList []*KeyBlackListForUpdateKeyBlackListConfInput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s UpdateKeyBlackListConfInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateKeyBlackListConfInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UpdateKeyBlackListConfInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "UpdateKeyBlackListConfInput"}
	if s.AccountId == nil {
		invalidParams.Add(request.NewErrParamRequired("AccountId"))
	}
	if s.Creator == nil {
		invalidParams.Add(request.NewErrParamRequired("Creator"))
	}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAccountId sets the AccountId field's value.
func (s *UpdateKeyBlackListConfInput) SetAccountId(v int64) *UpdateKeyBlackListConfInput {
	s.AccountId = &v
	return s
}

// SetConfigRecordId sets the ConfigRecordId field's value.
func (s *UpdateKeyBlackListConfInput) SetConfigRecordId(v int64) *UpdateKeyBlackListConfInput {
	s.ConfigRecordId = &v
	return s
}

// SetCreator sets the Creator field's value.
func (s *UpdateKeyBlackListConfInput) SetCreator(v string) *UpdateKeyBlackListConfInput {
	s.Creator = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *UpdateKeyBlackListConfInput) SetInstanceId(v string) *UpdateKeyBlackListConfInput {
	s.InstanceId = &v
	return s
}

// SetKeyBlackList sets the KeyBlackList field's value.
func (s *UpdateKeyBlackListConfInput) SetKeyBlackList(v []*KeyBlackListForUpdateKeyBlackListConfInput) *UpdateKeyBlackListConfInput {
	s.KeyBlackList = v
	return s
}

type UpdateKeyBlackListConfOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s UpdateKeyBlackListConfOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateKeyBlackListConfOutput) GoString() string {
	return s.String()
}
