// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package graph

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opListTabletServerCommon = "ListTabletServer"

// ListTabletServerCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ListTabletServerCommon operation. The "output" return
// value will be populated with the ListTabletServerCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListTabletServerCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListTabletServerCommon Send returns without error.
//
// See ListTabletServerCommon for more information on using the ListTabletServerCommon
// API call, and error handling.
//
//    // Example sending a request using the ListTabletServerCommonRequest method.
//    req, resp := client.ListTabletServerCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *GRAPH) ListTabletServerCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opListTabletServerCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListTabletServerCommon API operation for GRAPH.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for GRAPH's
// API operation ListTabletServerCommon for usage and error information.
func (c *GRAPH) ListTabletServerCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ListTabletServerCommonRequest(input)
	return out, req.Send()
}

// ListTabletServerCommonWithContext is the same as ListTabletServerCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ListTabletServerCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *GRAPH) ListTabletServerCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ListTabletServerCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListTabletServer = "ListTabletServer"

// ListTabletServerRequest generates a "volcengine/request.Request" representing the
// client's request for the ListTabletServer operation. The "output" return
// value will be populated with the ListTabletServerCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListTabletServerCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListTabletServerCommon Send returns without error.
//
// See ListTabletServer for more information on using the ListTabletServer
// API call, and error handling.
//
//    // Example sending a request using the ListTabletServerRequest method.
//    req, resp := client.ListTabletServerRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *GRAPH) ListTabletServerRequest(input *ListTabletServerInput) (req *request.Request, output *ListTabletServerOutput) {
	op := &request.Operation{
		Name:       opListTabletServer,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListTabletServerInput{}
	}

	output = &ListTabletServerOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListTabletServer API operation for GRAPH.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for GRAPH's
// API operation ListTabletServer for usage and error information.
func (c *GRAPH) ListTabletServer(input *ListTabletServerInput) (*ListTabletServerOutput, error) {
	req, out := c.ListTabletServerRequest(input)
	return out, req.Send()
}

// ListTabletServerWithContext is the same as ListTabletServer with the addition of
// the ability to pass a context and additional request options.
//
// See ListTabletServer for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *GRAPH) ListTabletServerWithContext(ctx volcengine.Context, input *ListTabletServerInput, opts ...request.Option) (*ListTabletServerOutput, error) {
	req, out := c.ListTabletServerRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ListTabletServerInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:",omitempty" required:"true"`

	Region *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ListTabletServerInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListTabletServerInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ListTabletServerInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ListTabletServerInput"}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetInstanceId sets the InstanceId field's value.
func (s *ListTabletServerInput) SetInstanceId(v string) *ListTabletServerInput {
	s.InstanceId = &v
	return s
}

// SetRegion sets the Region field's value.
func (s *ListTabletServerInput) SetRegion(v string) *ListTabletServerInput {
	s.Region = &v
	return s
}

type ListTabletServerOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	LeaderAddr *string `type:"string" json:",omitempty"`

	TabletServerInfos []*TabletServerInfoForListTabletServerOutput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s ListTabletServerOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListTabletServerOutput) GoString() string {
	return s.String()
}

// SetLeaderAddr sets the LeaderAddr field's value.
func (s *ListTabletServerOutput) SetLeaderAddr(v string) *ListTabletServerOutput {
	s.LeaderAddr = &v
	return s
}

// SetTabletServerInfos sets the TabletServerInfos field's value.
func (s *ListTabletServerOutput) SetTabletServerInfos(v []*TabletServerInfoForListTabletServerOutput) *ListTabletServerOutput {
	s.TabletServerInfos = v
	return s
}

type TabletServerInfoForListTabletServerOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Addr *string `type:"string" json:",omitempty"`

	Idc *string `type:"string" json:",omitempty"`

	ScheduleState *string `type:"string" json:",omitempty"`

	State *string `type:"string" json:",omitempty"`

	TabletManagerAddr *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s TabletServerInfoForListTabletServerOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s TabletServerInfoForListTabletServerOutput) GoString() string {
	return s.String()
}

// SetAddr sets the Addr field's value.
func (s *TabletServerInfoForListTabletServerOutput) SetAddr(v string) *TabletServerInfoForListTabletServerOutput {
	s.Addr = &v
	return s
}

// SetIdc sets the Idc field's value.
func (s *TabletServerInfoForListTabletServerOutput) SetIdc(v string) *TabletServerInfoForListTabletServerOutput {
	s.Idc = &v
	return s
}

// SetScheduleState sets the ScheduleState field's value.
func (s *TabletServerInfoForListTabletServerOutput) SetScheduleState(v string) *TabletServerInfoForListTabletServerOutput {
	s.ScheduleState = &v
	return s
}

// SetState sets the State field's value.
func (s *TabletServerInfoForListTabletServerOutput) SetState(v string) *TabletServerInfoForListTabletServerOutput {
	s.State = &v
	return s
}

// SetTabletManagerAddr sets the TabletManagerAddr field's value.
func (s *TabletServerInfoForListTabletServerOutput) SetTabletManagerAddr(v string) *TabletServerInfoForListTabletServerOutput {
	s.TabletManagerAddr = &v
	return s
}
