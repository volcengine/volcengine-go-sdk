// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package graph

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opExecuteMetaserviceCliCommon = "ExecuteMetaserviceCli"

// ExecuteMetaserviceCliCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ExecuteMetaserviceCliCommon operation. The "output" return
// value will be populated with the ExecuteMetaserviceCliCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ExecuteMetaserviceCliCommon Request to send the API call to the service.
// the "output" return value is not valid until after ExecuteMetaserviceCliCommon Send returns without error.
//
// See ExecuteMetaserviceCliCommon for more information on using the ExecuteMetaserviceCliCommon
// API call, and error handling.
//
//    // Example sending a request using the ExecuteMetaserviceCliCommonRequest method.
//    req, resp := client.ExecuteMetaserviceCliCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *GRAPH) ExecuteMetaserviceCliCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opExecuteMetaserviceCliCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ExecuteMetaserviceCliCommon API operation for GRAPH.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for GRAPH's
// API operation ExecuteMetaserviceCliCommon for usage and error information.
func (c *GRAPH) ExecuteMetaserviceCliCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ExecuteMetaserviceCliCommonRequest(input)
	return out, req.Send()
}

// ExecuteMetaserviceCliCommonWithContext is the same as ExecuteMetaserviceCliCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ExecuteMetaserviceCliCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *GRAPH) ExecuteMetaserviceCliCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ExecuteMetaserviceCliCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opExecuteMetaserviceCli = "ExecuteMetaserviceCli"

// ExecuteMetaserviceCliRequest generates a "volcengine/request.Request" representing the
// client's request for the ExecuteMetaserviceCli operation. The "output" return
// value will be populated with the ExecuteMetaserviceCliCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ExecuteMetaserviceCliCommon Request to send the API call to the service.
// the "output" return value is not valid until after ExecuteMetaserviceCliCommon Send returns without error.
//
// See ExecuteMetaserviceCli for more information on using the ExecuteMetaserviceCli
// API call, and error handling.
//
//    // Example sending a request using the ExecuteMetaserviceCliRequest method.
//    req, resp := client.ExecuteMetaserviceCliRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *GRAPH) ExecuteMetaserviceCliRequest(input *ExecuteMetaserviceCliInput) (req *request.Request, output *ExecuteMetaserviceCliOutput) {
	op := &request.Operation{
		Name:       opExecuteMetaserviceCli,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ExecuteMetaserviceCliInput{}
	}

	output = &ExecuteMetaserviceCliOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ExecuteMetaserviceCli API operation for GRAPH.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for GRAPH's
// API operation ExecuteMetaserviceCli for usage and error information.
func (c *GRAPH) ExecuteMetaserviceCli(input *ExecuteMetaserviceCliInput) (*ExecuteMetaserviceCliOutput, error) {
	req, out := c.ExecuteMetaserviceCliRequest(input)
	return out, req.Send()
}

// ExecuteMetaserviceCliWithContext is the same as ExecuteMetaserviceCli with the addition of
// the ability to pass a context and additional request options.
//
// See ExecuteMetaserviceCli for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *GRAPH) ExecuteMetaserviceCliWithContext(ctx volcengine.Context, input *ExecuteMetaserviceCliInput, opts ...request.Option) (*ExecuteMetaserviceCliOutput, error) {
	req, out := c.ExecuteMetaserviceCliRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ExecuteMetaserviceCliInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// Command is a required field
	Command *string `type:"string" json:"command,omitempty" required:"true"`

	// Flags is a required field
	Flags *string `type:"string" json:"flags,omitempty" required:"true"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:"instanceId,omitempty" required:"true"`

	// Raw_command is a required field
	Raw_command *string `type:"string" json:"raw_command,omitempty" required:"true"`

	// Sub_command is a required field
	Sub_command *string `type:"string" json:"sub_command,omitempty" required:"true"`
}

// String returns the string representation
func (s ExecuteMetaserviceCliInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ExecuteMetaserviceCliInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ExecuteMetaserviceCliInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ExecuteMetaserviceCliInput"}
	if s.Command == nil {
		invalidParams.Add(request.NewErrParamRequired("Command"))
	}
	if s.Flags == nil {
		invalidParams.Add(request.NewErrParamRequired("Flags"))
	}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}
	if s.Raw_command == nil {
		invalidParams.Add(request.NewErrParamRequired("Raw_command"))
	}
	if s.Sub_command == nil {
		invalidParams.Add(request.NewErrParamRequired("Sub_command"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetCommand sets the Command field's value.
func (s *ExecuteMetaserviceCliInput) SetCommand(v string) *ExecuteMetaserviceCliInput {
	s.Command = &v
	return s
}

// SetFlags sets the Flags field's value.
func (s *ExecuteMetaserviceCliInput) SetFlags(v string) *ExecuteMetaserviceCliInput {
	s.Flags = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *ExecuteMetaserviceCliInput) SetInstanceId(v string) *ExecuteMetaserviceCliInput {
	s.InstanceId = &v
	return s
}

// SetRaw_command sets the Raw_command field's value.
func (s *ExecuteMetaserviceCliInput) SetRaw_command(v string) *ExecuteMetaserviceCliInput {
	s.Raw_command = &v
	return s
}

// SetSub_command sets the Sub_command field's value.
func (s *ExecuteMetaserviceCliInput) SetSub_command(v string) *ExecuteMetaserviceCliInput {
	s.Sub_command = &v
	return s
}

type ExecuteMetaserviceCliOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Output *string `type:"string" json:"output,omitempty"`
}

// String returns the string representation
func (s ExecuteMetaserviceCliOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ExecuteMetaserviceCliOutput) GoString() string {
	return s.String()
}

// SetOutput sets the Output field's value.
func (s *ExecuteMetaserviceCliOutput) SetOutput(v string) *ExecuteMetaserviceCliOutput {
	s.Output = &v
	return s
}
