// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package graph

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opGetTableCommon = "GetTable"

// GetTableCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the GetTableCommon operation. The "output" return
// value will be populated with the GetTableCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetTableCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetTableCommon Send returns without error.
//
// See GetTableCommon for more information on using the GetTableCommon
// API call, and error handling.
//
//    // Example sending a request using the GetTableCommonRequest method.
//    req, resp := client.GetTableCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *GRAPH) GetTableCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opGetTableCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetTableCommon API operation for GRAPH.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for GRAPH's
// API operation GetTableCommon for usage and error information.
func (c *GRAPH) GetTableCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.GetTableCommonRequest(input)
	return out, req.Send()
}

// GetTableCommonWithContext is the same as GetTableCommon with the addition of
// the ability to pass a context and additional request options.
//
// See GetTableCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *GRAPH) GetTableCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.GetTableCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opGetTable = "GetTable"

// GetTableRequest generates a "volcengine/request.Request" representing the
// client's request for the GetTable operation. The "output" return
// value will be populated with the GetTableCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetTableCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetTableCommon Send returns without error.
//
// See GetTable for more information on using the GetTable
// API call, and error handling.
//
//    // Example sending a request using the GetTableRequest method.
//    req, resp := client.GetTableRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *GRAPH) GetTableRequest(input *GetTableInput) (req *request.Request, output *GetTableOutput) {
	op := &request.Operation{
		Name:       opGetTable,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &GetTableInput{}
	}

	output = &GetTableOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetTable API operation for GRAPH.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for GRAPH's
// API operation GetTable for usage and error information.
func (c *GRAPH) GetTable(input *GetTableInput) (*GetTableOutput, error) {
	req, out := c.GetTableRequest(input)
	return out, req.Send()
}

// GetTableWithContext is the same as GetTable with the addition of
// the ability to pass a context and additional request options.
//
// See GetTable for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *GRAPH) GetTableWithContext(ctx volcengine.Context, input *GetTableInput, opts ...request.Option) (*GetTableOutput, error) {
	req, out := c.GetTableRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type GetTableInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:",omitempty" required:"true"`

	// TableName is a required field
	TableName *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s GetTableInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetTableInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *GetTableInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "GetTableInput"}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}
	if s.TableName == nil {
		invalidParams.Add(request.NewErrParamRequired("TableName"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetInstanceId sets the InstanceId field's value.
func (s *GetTableInput) SetInstanceId(v string) *GetTableInput {
	s.InstanceId = &v
	return s
}

// SetTableName sets the TableName field's value.
func (s *GetTableInput) SetTableName(v string) *GetTableInput {
	s.TableName = &v
	return s
}

type GetTableOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	EnableRead *bool `type:"boolean" json:",omitempty"`

	EnableWrite *bool `type:"boolean" json:",omitempty"`

	State *string `type:"string" json:",omitempty"`

	TableId *int64 `type:"int64" json:",omitempty"`

	TableName *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s GetTableOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetTableOutput) GoString() string {
	return s.String()
}

// SetEnableRead sets the EnableRead field's value.
func (s *GetTableOutput) SetEnableRead(v bool) *GetTableOutput {
	s.EnableRead = &v
	return s
}

// SetEnableWrite sets the EnableWrite field's value.
func (s *GetTableOutput) SetEnableWrite(v bool) *GetTableOutput {
	s.EnableWrite = &v
	return s
}

// SetState sets the State field's value.
func (s *GetTableOutput) SetState(v string) *GetTableOutput {
	s.State = &v
	return s
}

// SetTableId sets the TableId field's value.
func (s *GetTableOutput) SetTableId(v int64) *GetTableOutput {
	s.TableId = &v
	return s
}

// SetTableName sets the TableName field's value.
func (s *GetTableOutput) SetTableName(v string) *GetTableOutput {
	s.TableName = &v
	return s
}
