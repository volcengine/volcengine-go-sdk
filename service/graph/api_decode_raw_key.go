// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package graph

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDecodeRawKeyCommon = "DecodeRawKey"

// DecodeRawKeyCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DecodeRawKeyCommon operation. The "output" return
// value will be populated with the DecodeRawKeyCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DecodeRawKeyCommon Request to send the API call to the service.
// the "output" return value is not valid until after DecodeRawKeyCommon Send returns without error.
//
// See DecodeRawKeyCommon for more information on using the DecodeRawKeyCommon
// API call, and error handling.
//
//    // Example sending a request using the DecodeRawKeyCommonRequest method.
//    req, resp := client.DecodeRawKeyCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *GRAPH) DecodeRawKeyCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDecodeRawKeyCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DecodeRawKeyCommon API operation for GRAPH.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for GRAPH's
// API operation DecodeRawKeyCommon for usage and error information.
func (c *GRAPH) DecodeRawKeyCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DecodeRawKeyCommonRequest(input)
	return out, req.Send()
}

// DecodeRawKeyCommonWithContext is the same as DecodeRawKeyCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DecodeRawKeyCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *GRAPH) DecodeRawKeyCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DecodeRawKeyCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDecodeRawKey = "DecodeRawKey"

// DecodeRawKeyRequest generates a "volcengine/request.Request" representing the
// client's request for the DecodeRawKey operation. The "output" return
// value will be populated with the DecodeRawKeyCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DecodeRawKeyCommon Request to send the API call to the service.
// the "output" return value is not valid until after DecodeRawKeyCommon Send returns without error.
//
// See DecodeRawKey for more information on using the DecodeRawKey
// API call, and error handling.
//
//    // Example sending a request using the DecodeRawKeyRequest method.
//    req, resp := client.DecodeRawKeyRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *GRAPH) DecodeRawKeyRequest(input *DecodeRawKeyInput) (req *request.Request, output *DecodeRawKeyOutput) {
	op := &request.Operation{
		Name:       opDecodeRawKey,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DecodeRawKeyInput{}
	}

	output = &DecodeRawKeyOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DecodeRawKey API operation for GRAPH.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for GRAPH's
// API operation DecodeRawKey for usage and error information.
func (c *GRAPH) DecodeRawKey(input *DecodeRawKeyInput) (*DecodeRawKeyOutput, error) {
	req, out := c.DecodeRawKeyRequest(input)
	return out, req.Send()
}

// DecodeRawKeyWithContext is the same as DecodeRawKey with the addition of
// the ability to pass a context and additional request options.
//
// See DecodeRawKey for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *GRAPH) DecodeRawKeyWithContext(ctx volcengine.Context, input *DecodeRawKeyInput, opts ...request.Option) (*DecodeRawKeyOutput, error) {
	req, out := c.DecodeRawKeyRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DecodeRawKeyInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:",omitempty" required:"true"`

	// RawKey is a required field
	RawKey *string `type:"string" json:",omitempty" required:"true"`

	// TableName is a required field
	TableName *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s DecodeRawKeyInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DecodeRawKeyInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DecodeRawKeyInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DecodeRawKeyInput"}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}
	if s.RawKey == nil {
		invalidParams.Add(request.NewErrParamRequired("RawKey"))
	}
	if s.TableName == nil {
		invalidParams.Add(request.NewErrParamRequired("TableName"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetInstanceId sets the InstanceId field's value.
func (s *DecodeRawKeyInput) SetInstanceId(v string) *DecodeRawKeyInput {
	s.InstanceId = &v
	return s
}

// SetRawKey sets the RawKey field's value.
func (s *DecodeRawKeyInput) SetRawKey(v string) *DecodeRawKeyInput {
	s.RawKey = &v
	return s
}

// SetTableName sets the TableName field's value.
func (s *DecodeRawKeyInput) SetTableName(v string) *DecodeRawKeyInput {
	s.TableName = &v
	return s
}

type DecodeRawKeyOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	DecodedKey *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s DecodeRawKeyOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DecodeRawKeyOutput) GoString() string {
	return s.String()
}

// SetDecodedKey sets the DecodedKey field's value.
func (s *DecodeRawKeyOutput) SetDecodedKey(v string) *DecodeRawKeyOutput {
	s.DecodedKey = &v
	return s
}
