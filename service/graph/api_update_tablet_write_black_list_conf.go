// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package graph

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opUpdateTabletWriteBlackListConfCommon = "UpdateTabletWriteBlackListConf"

// UpdateTabletWriteBlackListConfCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateTabletWriteBlackListConfCommon operation. The "output" return
// value will be populated with the UpdateTabletWriteBlackListConfCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateTabletWriteBlackListConfCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateTabletWriteBlackListConfCommon Send returns without error.
//
// See UpdateTabletWriteBlackListConfCommon for more information on using the UpdateTabletWriteBlackListConfCommon
// API call, and error handling.
//
//    // Example sending a request using the UpdateTabletWriteBlackListConfCommonRequest method.
//    req, resp := client.UpdateTabletWriteBlackListConfCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *GRAPH) UpdateTabletWriteBlackListConfCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opUpdateTabletWriteBlackListConfCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateTabletWriteBlackListConfCommon API operation for GRAPH.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for GRAPH's
// API operation UpdateTabletWriteBlackListConfCommon for usage and error information.
func (c *GRAPH) UpdateTabletWriteBlackListConfCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.UpdateTabletWriteBlackListConfCommonRequest(input)
	return out, req.Send()
}

// UpdateTabletWriteBlackListConfCommonWithContext is the same as UpdateTabletWriteBlackListConfCommon with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateTabletWriteBlackListConfCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *GRAPH) UpdateTabletWriteBlackListConfCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.UpdateTabletWriteBlackListConfCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opUpdateTabletWriteBlackListConf = "UpdateTabletWriteBlackListConf"

// UpdateTabletWriteBlackListConfRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateTabletWriteBlackListConf operation. The "output" return
// value will be populated with the UpdateTabletWriteBlackListConfCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateTabletWriteBlackListConfCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateTabletWriteBlackListConfCommon Send returns without error.
//
// See UpdateTabletWriteBlackListConf for more information on using the UpdateTabletWriteBlackListConf
// API call, and error handling.
//
//    // Example sending a request using the UpdateTabletWriteBlackListConfRequest method.
//    req, resp := client.UpdateTabletWriteBlackListConfRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *GRAPH) UpdateTabletWriteBlackListConfRequest(input *UpdateTabletWriteBlackListConfInput) (req *request.Request, output *UpdateTabletWriteBlackListConfOutput) {
	op := &request.Operation{
		Name:       opUpdateTabletWriteBlackListConf,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UpdateTabletWriteBlackListConfInput{}
	}

	output = &UpdateTabletWriteBlackListConfOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateTabletWriteBlackListConf API operation for GRAPH.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for GRAPH's
// API operation UpdateTabletWriteBlackListConf for usage and error information.
func (c *GRAPH) UpdateTabletWriteBlackListConf(input *UpdateTabletWriteBlackListConfInput) (*UpdateTabletWriteBlackListConfOutput, error) {
	req, out := c.UpdateTabletWriteBlackListConfRequest(input)
	return out, req.Send()
}

// UpdateTabletWriteBlackListConfWithContext is the same as UpdateTabletWriteBlackListConf with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateTabletWriteBlackListConf for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *GRAPH) UpdateTabletWriteBlackListConfWithContext(ctx volcengine.Context, input *UpdateTabletWriteBlackListConfInput, opts ...request.Option) (*UpdateTabletWriteBlackListConfOutput, error) {
	req, out := c.UpdateTabletWriteBlackListConfRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type UpdateTabletWriteBlackListConfInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// AccountId is a required field
	AccountId *int64 `type:"int64" json:",omitempty" required:"true"`

	ConfigRecordId *int64 `type:"int64" json:",omitempty"`

	// Creator is a required field
	Creator *string `type:"string" json:",omitempty" required:"true"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:",omitempty" required:"true"`

	TabletWriteBlackList []*int32 `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s UpdateTabletWriteBlackListConfInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateTabletWriteBlackListConfInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UpdateTabletWriteBlackListConfInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "UpdateTabletWriteBlackListConfInput"}
	if s.AccountId == nil {
		invalidParams.Add(request.NewErrParamRequired("AccountId"))
	}
	if s.Creator == nil {
		invalidParams.Add(request.NewErrParamRequired("Creator"))
	}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAccountId sets the AccountId field's value.
func (s *UpdateTabletWriteBlackListConfInput) SetAccountId(v int64) *UpdateTabletWriteBlackListConfInput {
	s.AccountId = &v
	return s
}

// SetConfigRecordId sets the ConfigRecordId field's value.
func (s *UpdateTabletWriteBlackListConfInput) SetConfigRecordId(v int64) *UpdateTabletWriteBlackListConfInput {
	s.ConfigRecordId = &v
	return s
}

// SetCreator sets the Creator field's value.
func (s *UpdateTabletWriteBlackListConfInput) SetCreator(v string) *UpdateTabletWriteBlackListConfInput {
	s.Creator = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *UpdateTabletWriteBlackListConfInput) SetInstanceId(v string) *UpdateTabletWriteBlackListConfInput {
	s.InstanceId = &v
	return s
}

// SetTabletWriteBlackList sets the TabletWriteBlackList field's value.
func (s *UpdateTabletWriteBlackListConfInput) SetTabletWriteBlackList(v []*int32) *UpdateTabletWriteBlackListConfInput {
	s.TabletWriteBlackList = v
	return s
}

type UpdateTabletWriteBlackListConfOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s UpdateTabletWriteBlackListConfOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateTabletWriteBlackListConfOutput) GoString() string {
	return s.String()
}
