// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package graph

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opMigrateTabletReplicaCommon = "MigrateTabletReplica"

// MigrateTabletReplicaCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the MigrateTabletReplicaCommon operation. The "output" return
// value will be populated with the MigrateTabletReplicaCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned MigrateTabletReplicaCommon Request to send the API call to the service.
// the "output" return value is not valid until after MigrateTabletReplicaCommon Send returns without error.
//
// See MigrateTabletReplicaCommon for more information on using the MigrateTabletReplicaCommon
// API call, and error handling.
//
//    // Example sending a request using the MigrateTabletReplicaCommonRequest method.
//    req, resp := client.MigrateTabletReplicaCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *GRAPH) MigrateTabletReplicaCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opMigrateTabletReplicaCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// MigrateTabletReplicaCommon API operation for GRAPH.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for GRAPH's
// API operation MigrateTabletReplicaCommon for usage and error information.
func (c *GRAPH) MigrateTabletReplicaCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.MigrateTabletReplicaCommonRequest(input)
	return out, req.Send()
}

// MigrateTabletReplicaCommonWithContext is the same as MigrateTabletReplicaCommon with the addition of
// the ability to pass a context and additional request options.
//
// See MigrateTabletReplicaCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *GRAPH) MigrateTabletReplicaCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.MigrateTabletReplicaCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opMigrateTabletReplica = "MigrateTabletReplica"

// MigrateTabletReplicaRequest generates a "volcengine/request.Request" representing the
// client's request for the MigrateTabletReplica operation. The "output" return
// value will be populated with the MigrateTabletReplicaCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned MigrateTabletReplicaCommon Request to send the API call to the service.
// the "output" return value is not valid until after MigrateTabletReplicaCommon Send returns without error.
//
// See MigrateTabletReplica for more information on using the MigrateTabletReplica
// API call, and error handling.
//
//    // Example sending a request using the MigrateTabletReplicaRequest method.
//    req, resp := client.MigrateTabletReplicaRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *GRAPH) MigrateTabletReplicaRequest(input *MigrateTabletReplicaInput) (req *request.Request, output *MigrateTabletReplicaOutput) {
	op := &request.Operation{
		Name:       opMigrateTabletReplica,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &MigrateTabletReplicaInput{}
	}

	output = &MigrateTabletReplicaOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// MigrateTabletReplica API operation for GRAPH.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for GRAPH's
// API operation MigrateTabletReplica for usage and error information.
func (c *GRAPH) MigrateTabletReplica(input *MigrateTabletReplicaInput) (*MigrateTabletReplicaOutput, error) {
	req, out := c.MigrateTabletReplicaRequest(input)
	return out, req.Send()
}

// MigrateTabletReplicaWithContext is the same as MigrateTabletReplica with the addition of
// the ability to pass a context and additional request options.
//
// See MigrateTabletReplica for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *GRAPH) MigrateTabletReplicaWithContext(ctx volcengine.Context, input *MigrateTabletReplicaInput, opts ...request.Option) (*MigrateTabletReplicaOutput, error) {
	req, out := c.MigrateTabletReplicaRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type MigrateTabletReplicaInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:",omitempty" required:"true"`

	Region *string `type:"string" json:",omitempty"`

	// ReplicaId is a required field
	ReplicaId *int64 `type:"int64" json:",omitempty" required:"true"`

	// TableName is a required field
	TableName *string `type:"string" json:",omitempty" required:"true"`

	// TabletId is a required field
	TabletId *int64 `type:"int64" json:",omitempty" required:"true"`

	TargetServerAddr *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s MigrateTabletReplicaInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s MigrateTabletReplicaInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *MigrateTabletReplicaInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "MigrateTabletReplicaInput"}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}
	if s.ReplicaId == nil {
		invalidParams.Add(request.NewErrParamRequired("ReplicaId"))
	}
	if s.TableName == nil {
		invalidParams.Add(request.NewErrParamRequired("TableName"))
	}
	if s.TabletId == nil {
		invalidParams.Add(request.NewErrParamRequired("TabletId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetInstanceId sets the InstanceId field's value.
func (s *MigrateTabletReplicaInput) SetInstanceId(v string) *MigrateTabletReplicaInput {
	s.InstanceId = &v
	return s
}

// SetRegion sets the Region field's value.
func (s *MigrateTabletReplicaInput) SetRegion(v string) *MigrateTabletReplicaInput {
	s.Region = &v
	return s
}

// SetReplicaId sets the ReplicaId field's value.
func (s *MigrateTabletReplicaInput) SetReplicaId(v int64) *MigrateTabletReplicaInput {
	s.ReplicaId = &v
	return s
}

// SetTableName sets the TableName field's value.
func (s *MigrateTabletReplicaInput) SetTableName(v string) *MigrateTabletReplicaInput {
	s.TableName = &v
	return s
}

// SetTabletId sets the TabletId field's value.
func (s *MigrateTabletReplicaInput) SetTabletId(v int64) *MigrateTabletReplicaInput {
	s.TabletId = &v
	return s
}

// SetTargetServerAddr sets the TargetServerAddr field's value.
func (s *MigrateTabletReplicaInput) SetTargetServerAddr(v string) *MigrateTabletReplicaInput {
	s.TargetServerAddr = &v
	return s
}

type MigrateTabletReplicaOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	TaskId *int64 `type:"int64" json:",omitempty"`
}

// String returns the string representation
func (s MigrateTabletReplicaOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s MigrateTabletReplicaOutput) GoString() string {
	return s.String()
}

// SetTaskId sets the TaskId field's value.
func (s *MigrateTabletReplicaOutput) SetTaskId(v int64) *MigrateTabletReplicaOutput {
	s.TaskId = &v
	return s
}
