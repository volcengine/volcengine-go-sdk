// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package graph

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opListTabletsCommon = "ListTablets"

// ListTabletsCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ListTabletsCommon operation. The "output" return
// value will be populated with the ListTabletsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListTabletsCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListTabletsCommon Send returns without error.
//
// See ListTabletsCommon for more information on using the ListTabletsCommon
// API call, and error handling.
//
//    // Example sending a request using the ListTabletsCommonRequest method.
//    req, resp := client.ListTabletsCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *GRAPH) ListTabletsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opListTabletsCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListTabletsCommon API operation for GRAPH.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for GRAPH's
// API operation ListTabletsCommon for usage and error information.
func (c *GRAPH) ListTabletsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ListTabletsCommonRequest(input)
	return out, req.Send()
}

// ListTabletsCommonWithContext is the same as ListTabletsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ListTabletsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *GRAPH) ListTabletsCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ListTabletsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListTablets = "ListTablets"

// ListTabletsRequest generates a "volcengine/request.Request" representing the
// client's request for the ListTablets operation. The "output" return
// value will be populated with the ListTabletsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListTabletsCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListTabletsCommon Send returns without error.
//
// See ListTablets for more information on using the ListTablets
// API call, and error handling.
//
//    // Example sending a request using the ListTabletsRequest method.
//    req, resp := client.ListTabletsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *GRAPH) ListTabletsRequest(input *ListTabletsInput) (req *request.Request, output *ListTabletsOutput) {
	op := &request.Operation{
		Name:       opListTablets,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListTabletsInput{}
	}

	output = &ListTabletsOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListTablets API operation for GRAPH.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for GRAPH's
// API operation ListTablets for usage and error information.
func (c *GRAPH) ListTablets(input *ListTabletsInput) (*ListTabletsOutput, error) {
	req, out := c.ListTabletsRequest(input)
	return out, req.Send()
}

// ListTabletsWithContext is the same as ListTablets with the addition of
// the ability to pass a context and additional request options.
//
// See ListTablets for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *GRAPH) ListTabletsWithContext(ctx volcengine.Context, input *ListTabletsInput, opts ...request.Option) (*ListTabletsOutput, error) {
	req, out := c.ListTabletsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ConvertValueForListTabletsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	PendingScheduleReplica []*PendingScheduleReplicaForListTabletsOutput `type:"list" json:",omitempty"`

	ReplicaInfo []*ReplicaInfoForListTabletsOutput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s ConvertValueForListTabletsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ConvertValueForListTabletsOutput) GoString() string {
	return s.String()
}

// SetPendingScheduleReplica sets the PendingScheduleReplica field's value.
func (s *ConvertValueForListTabletsOutput) SetPendingScheduleReplica(v []*PendingScheduleReplicaForListTabletsOutput) *ConvertValueForListTabletsOutput {
	s.PendingScheduleReplica = v
	return s
}

// SetReplicaInfo sets the ReplicaInfo field's value.
func (s *ConvertValueForListTabletsOutput) SetReplicaInfo(v []*ReplicaInfoForListTabletsOutput) *ConvertValueForListTabletsOutput {
	s.ReplicaInfo = v
	return s
}

type ListTabletsInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:",omitempty" required:"true"`

	Region *string `type:"string" json:",omitempty"`

	RequestTabletServerAddr *string `type:"string" json:",omitempty"`

	ReturnPartitionRouteInfo *bool `type:"boolean" json:",omitempty"`

	ReturnTabletRouteInfo *bool `type:"boolean" json:",omitempty"`

	TableNames []*string `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s ListTabletsInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListTabletsInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ListTabletsInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ListTabletsInput"}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetInstanceId sets the InstanceId field's value.
func (s *ListTabletsInput) SetInstanceId(v string) *ListTabletsInput {
	s.InstanceId = &v
	return s
}

// SetRegion sets the Region field's value.
func (s *ListTabletsInput) SetRegion(v string) *ListTabletsInput {
	s.Region = &v
	return s
}

// SetRequestTabletServerAddr sets the RequestTabletServerAddr field's value.
func (s *ListTabletsInput) SetRequestTabletServerAddr(v string) *ListTabletsInput {
	s.RequestTabletServerAddr = &v
	return s
}

// SetReturnPartitionRouteInfo sets the ReturnPartitionRouteInfo field's value.
func (s *ListTabletsInput) SetReturnPartitionRouteInfo(v bool) *ListTabletsInput {
	s.ReturnPartitionRouteInfo = &v
	return s
}

// SetReturnTabletRouteInfo sets the ReturnTabletRouteInfo field's value.
func (s *ListTabletsInput) SetReturnTabletRouteInfo(v bool) *ListTabletsInput {
	s.ReturnTabletRouteInfo = &v
	return s
}

// SetTableNames sets the TableNames field's value.
func (s *ListTabletsInput) SetTableNames(v []*string) *ListTabletsInput {
	s.TableNames = v
	return s
}

type ListTabletsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	TabletInfos []*TabletInfoForListTabletsOutput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s ListTabletsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListTabletsOutput) GoString() string {
	return s.String()
}

// SetTabletInfos sets the TabletInfos field's value.
func (s *ListTabletsOutput) SetTabletInfos(v []*TabletInfoForListTabletsOutput) *ListTabletsOutput {
	s.TabletInfos = v
	return s
}

type PendingScheduleReplicaForListTabletsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Key *int64 `type:"int64" json:",omitempty"`

	Value *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s PendingScheduleReplicaForListTabletsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s PendingScheduleReplicaForListTabletsOutput) GoString() string {
	return s.String()
}

// SetKey sets the Key field's value.
func (s *PendingScheduleReplicaForListTabletsOutput) SetKey(v int64) *PendingScheduleReplicaForListTabletsOutput {
	s.Key = &v
	return s
}

// SetValue sets the Value field's value.
func (s *PendingScheduleReplicaForListTabletsOutput) SetValue(v string) *PendingScheduleReplicaForListTabletsOutput {
	s.Value = &v
	return s
}

type ReplicaInfoForListTabletsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Key *int64 `type:"int64" json:",omitempty"`

	Value *ValueForListTabletsOutput `type:"structure" json:",omitempty"`
}

// String returns the string representation
func (s ReplicaInfoForListTabletsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ReplicaInfoForListTabletsOutput) GoString() string {
	return s.String()
}

// SetKey sets the Key field's value.
func (s *ReplicaInfoForListTabletsOutput) SetKey(v int64) *ReplicaInfoForListTabletsOutput {
	s.Key = &v
	return s
}

// SetValue sets the Value field's value.
func (s *ReplicaInfoForListTabletsOutput) SetValue(v *ValueForListTabletsOutput) *ReplicaInfoForListTabletsOutput {
	s.Value = v
	return s
}

type TabletInfoForListTabletsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Key *int64 `type:"int64" json:",omitempty"`

	Value *ConvertValueForListTabletsOutput `type:"structure" json:",omitempty"`
}

// String returns the string representation
func (s TabletInfoForListTabletsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s TabletInfoForListTabletsOutput) GoString() string {
	return s.String()
}

// SetKey sets the Key field's value.
func (s *TabletInfoForListTabletsOutput) SetKey(v int64) *TabletInfoForListTabletsOutput {
	s.Key = &v
	return s
}

// SetValue sets the Value field's value.
func (s *TabletInfoForListTabletsOutput) SetValue(v *ConvertValueForListTabletsOutput) *TabletInfoForListTabletsOutput {
	s.Value = v
	return s
}

type ValueForListTabletsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Addr *string `type:"string" json:",omitempty"`

	Epoch *int64 `type:"int64" json:",omitempty"`

	Idc *string `type:"string" json:",omitempty"`

	IsRw *bool `type:"boolean" json:",omitempty"`
}

// String returns the string representation
func (s ValueForListTabletsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ValueForListTabletsOutput) GoString() string {
	return s.String()
}

// SetAddr sets the Addr field's value.
func (s *ValueForListTabletsOutput) SetAddr(v string) *ValueForListTabletsOutput {
	s.Addr = &v
	return s
}

// SetEpoch sets the Epoch field's value.
func (s *ValueForListTabletsOutput) SetEpoch(v int64) *ValueForListTabletsOutput {
	s.Epoch = &v
	return s
}

// SetIdc sets the Idc field's value.
func (s *ValueForListTabletsOutput) SetIdc(v string) *ValueForListTabletsOutput {
	s.Idc = &v
	return s
}

// SetIsRw sets the IsRw field's value.
func (s *ValueForListTabletsOutput) SetIsRw(v bool) *ValueForListTabletsOutput {
	s.IsRw = &v
	return s
}
