// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package graph

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDescribeVegraphConfigInK8sCommon = "DescribeVegraphConfigInK8s"

// DescribeVegraphConfigInK8sCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeVegraphConfigInK8sCommon operation. The "output" return
// value will be populated with the DescribeVegraphConfigInK8sCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeVegraphConfigInK8sCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeVegraphConfigInK8sCommon Send returns without error.
//
// See DescribeVegraphConfigInK8sCommon for more information on using the DescribeVegraphConfigInK8sCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeVegraphConfigInK8sCommonRequest method.
//    req, resp := client.DescribeVegraphConfigInK8sCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *GRAPH) DescribeVegraphConfigInK8sCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeVegraphConfigInK8sCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeVegraphConfigInK8sCommon API operation for GRAPH.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for GRAPH's
// API operation DescribeVegraphConfigInK8sCommon for usage and error information.
func (c *GRAPH) DescribeVegraphConfigInK8sCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeVegraphConfigInK8sCommonRequest(input)
	return out, req.Send()
}

// DescribeVegraphConfigInK8sCommonWithContext is the same as DescribeVegraphConfigInK8sCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeVegraphConfigInK8sCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *GRAPH) DescribeVegraphConfigInK8sCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeVegraphConfigInK8sCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeVegraphConfigInK8s = "DescribeVegraphConfigInK8s"

// DescribeVegraphConfigInK8sRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeVegraphConfigInK8s operation. The "output" return
// value will be populated with the DescribeVegraphConfigInK8sCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeVegraphConfigInK8sCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeVegraphConfigInK8sCommon Send returns without error.
//
// See DescribeVegraphConfigInK8s for more information on using the DescribeVegraphConfigInK8s
// API call, and error handling.
//
//    // Example sending a request using the DescribeVegraphConfigInK8sRequest method.
//    req, resp := client.DescribeVegraphConfigInK8sRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *GRAPH) DescribeVegraphConfigInK8sRequest(input *DescribeVegraphConfigInK8sInput) (req *request.Request, output *DescribeVegraphConfigInK8sOutput) {
	op := &request.Operation{
		Name:       opDescribeVegraphConfigInK8s,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeVegraphConfigInK8sInput{}
	}

	output = &DescribeVegraphConfigInK8sOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeVegraphConfigInK8s API operation for GRAPH.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for GRAPH's
// API operation DescribeVegraphConfigInK8s for usage and error information.
func (c *GRAPH) DescribeVegraphConfigInK8s(input *DescribeVegraphConfigInK8sInput) (*DescribeVegraphConfigInK8sOutput, error) {
	req, out := c.DescribeVegraphConfigInK8sRequest(input)
	return out, req.Send()
}

// DescribeVegraphConfigInK8sWithContext is the same as DescribeVegraphConfigInK8s with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeVegraphConfigInK8s for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *GRAPH) DescribeVegraphConfigInK8sWithContext(ctx volcengine.Context, input *DescribeVegraphConfigInK8sInput, opts ...request.Option) (*DescribeVegraphConfigInK8sOutput, error) {
	req, out := c.DescribeVegraphConfigInK8sRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DescribeVegraphConfigInK8sInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:"instanceId,omitempty" required:"true"`
}

// String returns the string representation
func (s DescribeVegraphConfigInK8sInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeVegraphConfigInK8sInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeVegraphConfigInK8sInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DescribeVegraphConfigInK8sInput"}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetInstanceId sets the InstanceId field's value.
func (s *DescribeVegraphConfigInK8sInput) SetInstanceId(v string) *DescribeVegraphConfigInK8sInput {
	s.InstanceId = &v
	return s
}

type DescribeVegraphConfigInK8sOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Bg3CanaryConfig *string `type:"string" json:"bg3CanaryConfig,omitempty"`

	Bg3Config *string `type:"string" json:"bg3Config,omitempty"`

	MsCanaryConfig *string `type:"string" json:"msCanaryConfig,omitempty"`

	MsConfig *string `type:"string" json:"msConfig,omitempty"`
}

// String returns the string representation
func (s DescribeVegraphConfigInK8sOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeVegraphConfigInK8sOutput) GoString() string {
	return s.String()
}

// SetBg3CanaryConfig sets the Bg3CanaryConfig field's value.
func (s *DescribeVegraphConfigInK8sOutput) SetBg3CanaryConfig(v string) *DescribeVegraphConfigInK8sOutput {
	s.Bg3CanaryConfig = &v
	return s
}

// SetBg3Config sets the Bg3Config field's value.
func (s *DescribeVegraphConfigInK8sOutput) SetBg3Config(v string) *DescribeVegraphConfigInK8sOutput {
	s.Bg3Config = &v
	return s
}

// SetMsCanaryConfig sets the MsCanaryConfig field's value.
func (s *DescribeVegraphConfigInK8sOutput) SetMsCanaryConfig(v string) *DescribeVegraphConfigInK8sOutput {
	s.MsCanaryConfig = &v
	return s
}

// SetMsConfig sets the MsConfig field's value.
func (s *DescribeVegraphConfigInK8sOutput) SetMsConfig(v string) *DescribeVegraphConfigInK8sOutput {
	s.MsConfig = &v
	return s
}
