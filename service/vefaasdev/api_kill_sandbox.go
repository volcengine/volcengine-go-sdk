// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vefaasdev

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opKillSandboxCommon = "KillSandbox"

// KillSandboxCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the KillSandboxCommon operation. The "output" return
// value will be populated with the KillSandboxCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned KillSandboxCommon Request to send the API call to the service.
// the "output" return value is not valid until after KillSandboxCommon Send returns without error.
//
// See KillSandboxCommon for more information on using the KillSandboxCommon
// API call, and error handling.
//
//    // Example sending a request using the KillSandboxCommonRequest method.
//    req, resp := client.KillSandboxCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VEFAASDEV) KillSandboxCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opKillSandboxCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// KillSandboxCommon API operation for VEFAAS_DEV.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VEFAAS_DEV's
// API operation KillSandboxCommon for usage and error information.
func (c *VEFAASDEV) KillSandboxCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.KillSandboxCommonRequest(input)
	return out, req.Send()
}

// KillSandboxCommonWithContext is the same as KillSandboxCommon with the addition of
// the ability to pass a context and additional request options.
//
// See KillSandboxCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VEFAASDEV) KillSandboxCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.KillSandboxCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opKillSandbox = "KillSandbox"

// KillSandboxRequest generates a "volcengine/request.Request" representing the
// client's request for the KillSandbox operation. The "output" return
// value will be populated with the KillSandboxCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned KillSandboxCommon Request to send the API call to the service.
// the "output" return value is not valid until after KillSandboxCommon Send returns without error.
//
// See KillSandbox for more information on using the KillSandbox
// API call, and error handling.
//
//    // Example sending a request using the KillSandboxRequest method.
//    req, resp := client.KillSandboxRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VEFAASDEV) KillSandboxRequest(input *KillSandboxInput) (req *request.Request, output *KillSandboxOutput) {
	op := &request.Operation{
		Name:       opKillSandbox,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &KillSandboxInput{}
	}

	output = &KillSandboxOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// KillSandbox API operation for VEFAAS_DEV.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VEFAAS_DEV's
// API operation KillSandbox for usage and error information.
func (c *VEFAASDEV) KillSandbox(input *KillSandboxInput) (*KillSandboxOutput, error) {
	req, out := c.KillSandboxRequest(input)
	return out, req.Send()
}

// KillSandboxWithContext is the same as KillSandbox with the addition of
// the ability to pass a context and additional request options.
//
// See KillSandbox for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VEFAASDEV) KillSandboxWithContext(ctx volcengine.Context, input *KillSandboxInput, opts ...request.Option) (*KillSandboxOutput, error) {
	req, out := c.KillSandboxRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type KillSandboxInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// FunctionId is a required field
	FunctionId *string `type:"string" json:",omitempty" required:"true"`

	// SandboxId is a required field
	SandboxId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s KillSandboxInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s KillSandboxInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *KillSandboxInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "KillSandboxInput"}
	if s.FunctionId == nil {
		invalidParams.Add(request.NewErrParamRequired("FunctionId"))
	}
	if s.SandboxId == nil {
		invalidParams.Add(request.NewErrParamRequired("SandboxId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetFunctionId sets the FunctionId field's value.
func (s *KillSandboxInput) SetFunctionId(v string) *KillSandboxInput {
	s.FunctionId = &v
	return s
}

// SetSandboxId sets the SandboxId field's value.
func (s *KillSandboxInput) SetSandboxId(v string) *KillSandboxInput {
	s.SandboxId = &v
	return s
}

type KillSandboxOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s KillSandboxOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s KillSandboxOutput) GoString() string {
	return s.String()
}
