// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vefaasdev

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opRunCodeCommon = "RunCode"

// RunCodeCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the RunCodeCommon operation. The "output" return
// value will be populated with the RunCodeCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned RunCodeCommon Request to send the API call to the service.
// the "output" return value is not valid until after RunCodeCommon Send returns without error.
//
// See RunCodeCommon for more information on using the RunCodeCommon
// API call, and error handling.
//
//    // Example sending a request using the RunCodeCommonRequest method.
//    req, resp := client.RunCodeCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VEFAASDEV) RunCodeCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opRunCodeCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// RunCodeCommon API operation for VEFAAS_DEV.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VEFAAS_DEV's
// API operation RunCodeCommon for usage and error information.
func (c *VEFAASDEV) RunCodeCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.RunCodeCommonRequest(input)
	return out, req.Send()
}

// RunCodeCommonWithContext is the same as RunCodeCommon with the addition of
// the ability to pass a context and additional request options.
//
// See RunCodeCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VEFAASDEV) RunCodeCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.RunCodeCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opRunCode = "RunCode"

// RunCodeRequest generates a "volcengine/request.Request" representing the
// client's request for the RunCode operation. The "output" return
// value will be populated with the RunCodeCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned RunCodeCommon Request to send the API call to the service.
// the "output" return value is not valid until after RunCodeCommon Send returns without error.
//
// See RunCode for more information on using the RunCode
// API call, and error handling.
//
//    // Example sending a request using the RunCodeRequest method.
//    req, resp := client.RunCodeRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VEFAASDEV) RunCodeRequest(input *RunCodeInput) (req *request.Request, output *RunCodeOutput) {
	op := &request.Operation{
		Name:       opRunCode,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &RunCodeInput{}
	}

	output = &RunCodeOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// RunCode API operation for VEFAAS_DEV.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VEFAAS_DEV's
// API operation RunCode for usage and error information.
func (c *VEFAASDEV) RunCode(input *RunCodeInput) (*RunCodeOutput, error) {
	req, out := c.RunCodeRequest(input)
	return out, req.Send()
}

// RunCodeWithContext is the same as RunCode with the addition of
// the ability to pass a context and additional request options.
//
// See RunCode for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VEFAASDEV) RunCodeWithContext(ctx volcengine.Context, input *RunCodeInput, opts ...request.Option) (*RunCodeOutput, error) {
	req, out := c.RunCodeRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type CompileResultForRunCodeOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	CpuTime *string `type:"string" json:",omitempty"`

	ExecutionTime *string `type:"string" json:",omitempty"`

	Status *string `type:"string" json:",omitempty"`

	Stderr *string `type:"string" json:",omitempty"`

	Stdout *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s CompileResultForRunCodeOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CompileResultForRunCodeOutput) GoString() string {
	return s.String()
}

// SetCpuTime sets the CpuTime field's value.
func (s *CompileResultForRunCodeOutput) SetCpuTime(v string) *CompileResultForRunCodeOutput {
	s.CpuTime = &v
	return s
}

// SetExecutionTime sets the ExecutionTime field's value.
func (s *CompileResultForRunCodeOutput) SetExecutionTime(v string) *CompileResultForRunCodeOutput {
	s.ExecutionTime = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *CompileResultForRunCodeOutput) SetStatus(v string) *CompileResultForRunCodeOutput {
	s.Status = &v
	return s
}

// SetStderr sets the Stderr field's value.
func (s *CompileResultForRunCodeOutput) SetStderr(v string) *CompileResultForRunCodeOutput {
	s.Stderr = &v
	return s
}

// SetStdout sets the Stdout field's value.
func (s *CompileResultForRunCodeOutput) SetStdout(v string) *CompileResultForRunCodeOutput {
	s.Stdout = &v
	return s
}

type FilesForRunCodeInput struct {
	_ struct{} `type:"structure" json:",omitempty"`
}

// String returns the string representation
func (s FilesForRunCodeInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s FilesForRunCodeInput) GoString() string {
	return s.String()
}

type FilesForRunCodeOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`
}

// String returns the string representation
func (s FilesForRunCodeOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s FilesForRunCodeOutput) GoString() string {
	return s.String()
}

type RunCodeInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// Code is a required field
	Code *string `type:"string" json:",omitempty" required:"true"`

	// Data is a required field
	Data *string `type:"string" json:",omitempty" required:"true"`

	FetchFiles []*string `type:"list" json:",omitempty"`

	Files *FilesForRunCodeInput `type:"structure" json:",omitempty"`

	// FunctionId is a required field
	FunctionId *string `type:"string" json:",omitempty" required:"true"`

	// Language is a required field
	Language *string `type:"string" json:",omitempty" required:"true"`

	SandboxId *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s RunCodeInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s RunCodeInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *RunCodeInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "RunCodeInput"}
	if s.Code == nil {
		invalidParams.Add(request.NewErrParamRequired("Code"))
	}
	if s.Data == nil {
		invalidParams.Add(request.NewErrParamRequired("Data"))
	}
	if s.FunctionId == nil {
		invalidParams.Add(request.NewErrParamRequired("FunctionId"))
	}
	if s.Language == nil {
		invalidParams.Add(request.NewErrParamRequired("Language"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetCode sets the Code field's value.
func (s *RunCodeInput) SetCode(v string) *RunCodeInput {
	s.Code = &v
	return s
}

// SetData sets the Data field's value.
func (s *RunCodeInput) SetData(v string) *RunCodeInput {
	s.Data = &v
	return s
}

// SetFetchFiles sets the FetchFiles field's value.
func (s *RunCodeInput) SetFetchFiles(v []*string) *RunCodeInput {
	s.FetchFiles = v
	return s
}

// SetFiles sets the Files field's value.
func (s *RunCodeInput) SetFiles(v *FilesForRunCodeInput) *RunCodeInput {
	s.Files = v
	return s
}

// SetFunctionId sets the FunctionId field's value.
func (s *RunCodeInput) SetFunctionId(v string) *RunCodeInput {
	s.FunctionId = &v
	return s
}

// SetLanguage sets the Language field's value.
func (s *RunCodeInput) SetLanguage(v string) *RunCodeInput {
	s.Language = &v
	return s
}

// SetSandboxId sets the SandboxId field's value.
func (s *RunCodeInput) SetSandboxId(v string) *RunCodeInput {
	s.SandboxId = &v
	return s
}

type RunCodeOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	CompileResult *CompileResultForRunCodeOutput `type:"structure" json:",omitempty"`

	ExecutorPodName *string `type:"string" json:",omitempty"`

	Files *FilesForRunCodeOutput `type:"structure" json:",omitempty"`

	Result *string `type:"string" json:",omitempty"`

	RunResult *RunResultForRunCodeOutput `type:"structure" json:",omitempty"`

	Status *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s RunCodeOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s RunCodeOutput) GoString() string {
	return s.String()
}

// SetCompileResult sets the CompileResult field's value.
func (s *RunCodeOutput) SetCompileResult(v *CompileResultForRunCodeOutput) *RunCodeOutput {
	s.CompileResult = v
	return s
}

// SetExecutorPodName sets the ExecutorPodName field's value.
func (s *RunCodeOutput) SetExecutorPodName(v string) *RunCodeOutput {
	s.ExecutorPodName = &v
	return s
}

// SetFiles sets the Files field's value.
func (s *RunCodeOutput) SetFiles(v *FilesForRunCodeOutput) *RunCodeOutput {
	s.Files = v
	return s
}

// SetResult sets the Result field's value.
func (s *RunCodeOutput) SetResult(v string) *RunCodeOutput {
	s.Result = &v
	return s
}

// SetRunResult sets the RunResult field's value.
func (s *RunCodeOutput) SetRunResult(v *RunResultForRunCodeOutput) *RunCodeOutput {
	s.RunResult = v
	return s
}

// SetStatus sets the Status field's value.
func (s *RunCodeOutput) SetStatus(v string) *RunCodeOutput {
	s.Status = &v
	return s
}

type RunResultForRunCodeOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	CpuTime *string `type:"string" json:",omitempty"`

	ExecutionTime *string `type:"string" json:",omitempty"`

	Status *string `type:"string" json:",omitempty"`

	Stderr *string `type:"string" json:",omitempty"`

	Stdout *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s RunResultForRunCodeOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s RunResultForRunCodeOutput) GoString() string {
	return s.String()
}

// SetCpuTime sets the CpuTime field's value.
func (s *RunResultForRunCodeOutput) SetCpuTime(v string) *RunResultForRunCodeOutput {
	s.CpuTime = &v
	return s
}

// SetExecutionTime sets the ExecutionTime field's value.
func (s *RunResultForRunCodeOutput) SetExecutionTime(v string) *RunResultForRunCodeOutput {
	s.ExecutionTime = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *RunResultForRunCodeOutput) SetStatus(v string) *RunResultForRunCodeOutput {
	s.Status = &v
	return s
}

// SetStderr sets the Stderr field's value.
func (s *RunResultForRunCodeOutput) SetStderr(v string) *RunResultForRunCodeOutput {
	s.Stderr = &v
	return s
}

// SetStdout sets the Stdout field's value.
func (s *RunResultForRunCodeOutput) SetStdout(v string) *RunResultForRunCodeOutput {
	s.Stdout = &v
	return s
}
