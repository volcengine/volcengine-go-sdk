// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vefaasdev

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opSetSandboxTimeoutCommon = "SetSandboxTimeout"

// SetSandboxTimeoutCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the SetSandboxTimeoutCommon operation. The "output" return
// value will be populated with the SetSandboxTimeoutCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned SetSandboxTimeoutCommon Request to send the API call to the service.
// the "output" return value is not valid until after SetSandboxTimeoutCommon Send returns without error.
//
// See SetSandboxTimeoutCommon for more information on using the SetSandboxTimeoutCommon
// API call, and error handling.
//
//    // Example sending a request using the SetSandboxTimeoutCommonRequest method.
//    req, resp := client.SetSandboxTimeoutCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VEFAASDEV) SetSandboxTimeoutCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opSetSandboxTimeoutCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// SetSandboxTimeoutCommon API operation for VEFAAS_DEV.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VEFAAS_DEV's
// API operation SetSandboxTimeoutCommon for usage and error information.
func (c *VEFAASDEV) SetSandboxTimeoutCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.SetSandboxTimeoutCommonRequest(input)
	return out, req.Send()
}

// SetSandboxTimeoutCommonWithContext is the same as SetSandboxTimeoutCommon with the addition of
// the ability to pass a context and additional request options.
//
// See SetSandboxTimeoutCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VEFAASDEV) SetSandboxTimeoutCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.SetSandboxTimeoutCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opSetSandboxTimeout = "SetSandboxTimeout"

// SetSandboxTimeoutRequest generates a "volcengine/request.Request" representing the
// client's request for the SetSandboxTimeout operation. The "output" return
// value will be populated with the SetSandboxTimeoutCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned SetSandboxTimeoutCommon Request to send the API call to the service.
// the "output" return value is not valid until after SetSandboxTimeoutCommon Send returns without error.
//
// See SetSandboxTimeout for more information on using the SetSandboxTimeout
// API call, and error handling.
//
//    // Example sending a request using the SetSandboxTimeoutRequest method.
//    req, resp := client.SetSandboxTimeoutRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VEFAASDEV) SetSandboxTimeoutRequest(input *SetSandboxTimeoutInput) (req *request.Request, output *SetSandboxTimeoutOutput) {
	op := &request.Operation{
		Name:       opSetSandboxTimeout,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &SetSandboxTimeoutInput{}
	}

	output = &SetSandboxTimeoutOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// SetSandboxTimeout API operation for VEFAAS_DEV.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VEFAAS_DEV's
// API operation SetSandboxTimeout for usage and error information.
func (c *VEFAASDEV) SetSandboxTimeout(input *SetSandboxTimeoutInput) (*SetSandboxTimeoutOutput, error) {
	req, out := c.SetSandboxTimeoutRequest(input)
	return out, req.Send()
}

// SetSandboxTimeoutWithContext is the same as SetSandboxTimeout with the addition of
// the ability to pass a context and additional request options.
//
// See SetSandboxTimeout for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VEFAASDEV) SetSandboxTimeoutWithContext(ctx volcengine.Context, input *SetSandboxTimeoutInput, opts ...request.Option) (*SetSandboxTimeoutOutput, error) {
	req, out := c.SetSandboxTimeoutRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type SetSandboxTimeoutInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// FunctionId is a required field
	FunctionId *string `type:"string" json:",omitempty" required:"true"`

	// SandboxId is a required field
	SandboxId *string `type:"string" json:",omitempty" required:"true"`

	// Timeout is a required field
	Timeout *int32 `type:"int32" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s SetSandboxTimeoutInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s SetSandboxTimeoutInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *SetSandboxTimeoutInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "SetSandboxTimeoutInput"}
	if s.FunctionId == nil {
		invalidParams.Add(request.NewErrParamRequired("FunctionId"))
	}
	if s.SandboxId == nil {
		invalidParams.Add(request.NewErrParamRequired("SandboxId"))
	}
	if s.Timeout == nil {
		invalidParams.Add(request.NewErrParamRequired("Timeout"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetFunctionId sets the FunctionId field's value.
func (s *SetSandboxTimeoutInput) SetFunctionId(v string) *SetSandboxTimeoutInput {
	s.FunctionId = &v
	return s
}

// SetSandboxId sets the SandboxId field's value.
func (s *SetSandboxTimeoutInput) SetSandboxId(v string) *SetSandboxTimeoutInput {
	s.SandboxId = &v
	return s
}

// SetTimeout sets the Timeout field's value.
func (s *SetSandboxTimeoutInput) SetTimeout(v int32) *SetSandboxTimeoutInput {
	s.Timeout = &v
	return s
}

type SetSandboxTimeoutOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	ExpireAt *string `type:"string" json:",omitempty"`

	FunctionId *string `type:"string" json:",omitempty"`

	SandboxId *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s SetSandboxTimeoutOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s SetSandboxTimeoutOutput) GoString() string {
	return s.String()
}

// SetExpireAt sets the ExpireAt field's value.
func (s *SetSandboxTimeoutOutput) SetExpireAt(v string) *SetSandboxTimeoutOutput {
	s.ExpireAt = &v
	return s
}

// SetFunctionId sets the FunctionId field's value.
func (s *SetSandboxTimeoutOutput) SetFunctionId(v string) *SetSandboxTimeoutOutput {
	s.FunctionId = &v
	return s
}

// SetSandboxId sets the SandboxId field's value.
func (s *SetSandboxTimeoutOutput) SetSandboxId(v string) *SetSandboxTimeoutOutput {
	s.SandboxId = &v
	return s
}
