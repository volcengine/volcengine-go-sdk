// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vefaasdev

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opWriteFilesCommon = "WriteFiles"

// WriteFilesCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the WriteFilesCommon operation. The "output" return
// value will be populated with the WriteFilesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned WriteFilesCommon Request to send the API call to the service.
// the "output" return value is not valid until after WriteFilesCommon Send returns without error.
//
// See WriteFilesCommon for more information on using the WriteFilesCommon
// API call, and error handling.
//
//    // Example sending a request using the WriteFilesCommonRequest method.
//    req, resp := client.WriteFilesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VEFAASDEV) WriteFilesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opWriteFilesCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// WriteFilesCommon API operation for VEFAAS_DEV.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VEFAAS_DEV's
// API operation WriteFilesCommon for usage and error information.
func (c *VEFAASDEV) WriteFilesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.WriteFilesCommonRequest(input)
	return out, req.Send()
}

// WriteFilesCommonWithContext is the same as WriteFilesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See WriteFilesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VEFAASDEV) WriteFilesCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.WriteFilesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opWriteFiles = "WriteFiles"

// WriteFilesRequest generates a "volcengine/request.Request" representing the
// client's request for the WriteFiles operation. The "output" return
// value will be populated with the WriteFilesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned WriteFilesCommon Request to send the API call to the service.
// the "output" return value is not valid until after WriteFilesCommon Send returns without error.
//
// See WriteFiles for more information on using the WriteFiles
// API call, and error handling.
//
//    // Example sending a request using the WriteFilesRequest method.
//    req, resp := client.WriteFilesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VEFAASDEV) WriteFilesRequest(input *WriteFilesInput) (req *request.Request, output *WriteFilesOutput) {
	op := &request.Operation{
		Name:       opWriteFiles,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &WriteFilesInput{}
	}

	output = &WriteFilesOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// WriteFiles API operation for VEFAAS_DEV.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VEFAAS_DEV's
// API operation WriteFiles for usage and error information.
func (c *VEFAASDEV) WriteFiles(input *WriteFilesInput) (*WriteFilesOutput, error) {
	req, out := c.WriteFilesRequest(input)
	return out, req.Send()
}

// WriteFilesWithContext is the same as WriteFiles with the addition of
// the ability to pass a context and additional request options.
//
// See WriteFiles for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VEFAASDEV) WriteFilesWithContext(ctx volcengine.Context, input *WriteFilesInput, opts ...request.Option) (*WriteFilesOutput, error) {
	req, out := c.WriteFilesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ErrorForWriteFilesOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Error *string `type:"string" json:",omitempty"`

	Path *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ErrorForWriteFilesOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ErrorForWriteFilesOutput) GoString() string {
	return s.String()
}

// SetError sets the Error field's value.
func (s *ErrorForWriteFilesOutput) SetError(v string) *ErrorForWriteFilesOutput {
	s.Error = &v
	return s
}

// SetPath sets the Path field's value.
func (s *ErrorForWriteFilesOutput) SetPath(v string) *ErrorForWriteFilesOutput {
	s.Path = &v
	return s
}

type WriteFileForWriteFilesInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Content *string `type:"string" json:",omitempty"`

	Path *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s WriteFileForWriteFilesInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s WriteFileForWriteFilesInput) GoString() string {
	return s.String()
}

// SetContent sets the Content field's value.
func (s *WriteFileForWriteFilesInput) SetContent(v string) *WriteFileForWriteFilesInput {
	s.Content = &v
	return s
}

// SetPath sets the Path field's value.
func (s *WriteFileForWriteFilesInput) SetPath(v string) *WriteFileForWriteFilesInput {
	s.Path = &v
	return s
}

type WriteFilesInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// FunctionId is a required field
	FunctionId *string `type:"string" json:",omitempty" required:"true"`

	// SandboxId is a required field
	SandboxId *string `type:"string" json:",omitempty" required:"true"`

	WriteFiles []*WriteFileForWriteFilesInput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s WriteFilesInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s WriteFilesInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *WriteFilesInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "WriteFilesInput"}
	if s.FunctionId == nil {
		invalidParams.Add(request.NewErrParamRequired("FunctionId"))
	}
	if s.SandboxId == nil {
		invalidParams.Add(request.NewErrParamRequired("SandboxId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetFunctionId sets the FunctionId field's value.
func (s *WriteFilesInput) SetFunctionId(v string) *WriteFilesInput {
	s.FunctionId = &v
	return s
}

// SetSandboxId sets the SandboxId field's value.
func (s *WriteFilesInput) SetSandboxId(v string) *WriteFilesInput {
	s.SandboxId = &v
	return s
}

// SetWriteFiles sets the WriteFiles field's value.
func (s *WriteFilesInput) SetWriteFiles(v []*WriteFileForWriteFilesInput) *WriteFilesInput {
	s.WriteFiles = v
	return s
}

type WriteFilesOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Errors []*ErrorForWriteFilesOutput `type:"list" json:",omitempty"`

	Success *bool `type:"boolean" json:",omitempty"`
}

// String returns the string representation
func (s WriteFilesOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s WriteFilesOutput) GoString() string {
	return s.String()
}

// SetErrors sets the Errors field's value.
func (s *WriteFilesOutput) SetErrors(v []*ErrorForWriteFilesOutput) *WriteFilesOutput {
	s.Errors = v
	return s
}

// SetSuccess sets the Success field's value.
func (s *WriteFilesOutput) SetSuccess(v bool) *WriteFilesOutput {
	s.Success = &v
	return s
}
