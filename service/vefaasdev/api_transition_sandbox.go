// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vefaasdev

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opTransitionSandboxCommon = "TransitionSandbox"

// TransitionSandboxCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the TransitionSandboxCommon operation. The "output" return
// value will be populated with the TransitionSandboxCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned TransitionSandboxCommon Request to send the API call to the service.
// the "output" return value is not valid until after TransitionSandboxCommon Send returns without error.
//
// See TransitionSandboxCommon for more information on using the TransitionSandboxCommon
// API call, and error handling.
//
//    // Example sending a request using the TransitionSandboxCommonRequest method.
//    req, resp := client.TransitionSandboxCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VEFAASDEV) TransitionSandboxCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opTransitionSandboxCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// TransitionSandboxCommon API operation for VEFAAS_DEV.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VEFAAS_DEV's
// API operation TransitionSandboxCommon for usage and error information.
func (c *VEFAASDEV) TransitionSandboxCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.TransitionSandboxCommonRequest(input)
	return out, req.Send()
}

// TransitionSandboxCommonWithContext is the same as TransitionSandboxCommon with the addition of
// the ability to pass a context and additional request options.
//
// See TransitionSandboxCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VEFAASDEV) TransitionSandboxCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.TransitionSandboxCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opTransitionSandbox = "TransitionSandbox"

// TransitionSandboxRequest generates a "volcengine/request.Request" representing the
// client's request for the TransitionSandbox operation. The "output" return
// value will be populated with the TransitionSandboxCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned TransitionSandboxCommon Request to send the API call to the service.
// the "output" return value is not valid until after TransitionSandboxCommon Send returns without error.
//
// See TransitionSandbox for more information on using the TransitionSandbox
// API call, and error handling.
//
//    // Example sending a request using the TransitionSandboxRequest method.
//    req, resp := client.TransitionSandboxRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VEFAASDEV) TransitionSandboxRequest(input *TransitionSandboxInput) (req *request.Request, output *TransitionSandboxOutput) {
	op := &request.Operation{
		Name:       opTransitionSandbox,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &TransitionSandboxInput{}
	}

	output = &TransitionSandboxOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// TransitionSandbox API operation for VEFAAS_DEV.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VEFAAS_DEV's
// API operation TransitionSandbox for usage and error information.
func (c *VEFAASDEV) TransitionSandbox(input *TransitionSandboxInput) (*TransitionSandboxOutput, error) {
	req, out := c.TransitionSandboxRequest(input)
	return out, req.Send()
}

// TransitionSandboxWithContext is the same as TransitionSandbox with the addition of
// the ability to pass a context and additional request options.
//
// See TransitionSandbox for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VEFAASDEV) TransitionSandboxWithContext(ctx volcengine.Context, input *TransitionSandboxInput, opts ...request.Option) (*TransitionSandboxOutput, error) {
	req, out := c.TransitionSandboxRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type TransitionSandboxInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// Action is a required field
	Action *string `type:"string" json:",omitempty" required:"true"`

	// FunctionId is a required field
	FunctionId *string `type:"string" json:",omitempty" required:"true"`

	// SandboxId is a required field
	SandboxId *string `type:"string" json:",omitempty" required:"true"`

	// Status is a required field
	Status *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s TransitionSandboxInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s TransitionSandboxInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *TransitionSandboxInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "TransitionSandboxInput"}
	if s.Action == nil {
		invalidParams.Add(request.NewErrParamRequired("Action"))
	}
	if s.FunctionId == nil {
		invalidParams.Add(request.NewErrParamRequired("FunctionId"))
	}
	if s.SandboxId == nil {
		invalidParams.Add(request.NewErrParamRequired("SandboxId"))
	}
	if s.Status == nil {
		invalidParams.Add(request.NewErrParamRequired("Status"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAction sets the Action field's value.
func (s *TransitionSandboxInput) SetAction(v string) *TransitionSandboxInput {
	s.Action = &v
	return s
}

// SetFunctionId sets the FunctionId field's value.
func (s *TransitionSandboxInput) SetFunctionId(v string) *TransitionSandboxInput {
	s.FunctionId = &v
	return s
}

// SetSandboxId sets the SandboxId field's value.
func (s *TransitionSandboxInput) SetSandboxId(v string) *TransitionSandboxInput {
	s.SandboxId = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *TransitionSandboxInput) SetStatus(v string) *TransitionSandboxInput {
	s.Status = &v
	return s
}

type TransitionSandboxOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	FunctionId *string `type:"string" json:",omitempty"`

	SandboxId *string `type:"string" json:",omitempty"`

	Status *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s TransitionSandboxOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s TransitionSandboxOutput) GoString() string {
	return s.String()
}

// SetFunctionId sets the FunctionId field's value.
func (s *TransitionSandboxOutput) SetFunctionId(v string) *TransitionSandboxOutput {
	s.FunctionId = &v
	return s
}

// SetSandboxId sets the SandboxId field's value.
func (s *TransitionSandboxOutput) SetSandboxId(v string) *TransitionSandboxOutput {
	s.SandboxId = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *TransitionSandboxOutput) SetStatus(v string) *TransitionSandboxOutput {
	s.Status = &v
	return s
}
