// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package speechsaasprod20250521

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opUsageMonitoringCommon = "UsageMonitoring"

// UsageMonitoringCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the UsageMonitoringCommon operation. The "output" return
// value will be populated with the UsageMonitoringCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UsageMonitoringCommon Request to send the API call to the service.
// the "output" return value is not valid until after UsageMonitoringCommon Send returns without error.
//
// See UsageMonitoringCommon for more information on using the UsageMonitoringCommon
// API call, and error handling.
//
//    // Example sending a request using the UsageMonitoringCommonRequest method.
//    req, resp := client.UsageMonitoringCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SPEECHSAASPROD20250521) UsageMonitoringCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opUsageMonitoringCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UsageMonitoringCommon API operation for SPEECH_SAAS_PROD20250521.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SPEECH_SAAS_PROD20250521's
// API operation UsageMonitoringCommon for usage and error information.
func (c *SPEECHSAASPROD20250521) UsageMonitoringCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.UsageMonitoringCommonRequest(input)
	return out, req.Send()
}

// UsageMonitoringCommonWithContext is the same as UsageMonitoringCommon with the addition of
// the ability to pass a context and additional request options.
//
// See UsageMonitoringCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SPEECHSAASPROD20250521) UsageMonitoringCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.UsageMonitoringCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opUsageMonitoring = "UsageMonitoring"

// UsageMonitoringRequest generates a "volcengine/request.Request" representing the
// client's request for the UsageMonitoring operation. The "output" return
// value will be populated with the UsageMonitoringCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UsageMonitoringCommon Request to send the API call to the service.
// the "output" return value is not valid until after UsageMonitoringCommon Send returns without error.
//
// See UsageMonitoring for more information on using the UsageMonitoring
// API call, and error handling.
//
//    // Example sending a request using the UsageMonitoringRequest method.
//    req, resp := client.UsageMonitoringRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SPEECHSAASPROD20250521) UsageMonitoringRequest(input *UsageMonitoringInput) (req *request.Request, output *UsageMonitoringOutput) {
	op := &request.Operation{
		Name:       opUsageMonitoring,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UsageMonitoringInput{}
	}

	output = &UsageMonitoringOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UsageMonitoring API operation for SPEECH_SAAS_PROD20250521.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SPEECH_SAAS_PROD20250521's
// API operation UsageMonitoring for usage and error information.
func (c *SPEECHSAASPROD20250521) UsageMonitoring(input *UsageMonitoringInput) (*UsageMonitoringOutput, error) {
	req, out := c.UsageMonitoringRequest(input)
	return out, req.Send()
}

// UsageMonitoringWithContext is the same as UsageMonitoring with the addition of
// the ability to pass a context and additional request options.
//
// See UsageMonitoring for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SPEECHSAASPROD20250521) UsageMonitoringWithContext(ctx volcengine.Context, input *UsageMonitoringInput, opts ...request.Option) (*UsageMonitoringOutput, error) {
	req, out := c.UsageMonitoringRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type UsageMonitoringForUsageMonitoringOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Day *string `type:"string" json:",omitempty"`

	UsageType *string `type:"string" json:",omitempty"`

	Value *float64 `type:"float" json:",omitempty"`
}

// String returns the string representation
func (s UsageMonitoringForUsageMonitoringOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UsageMonitoringForUsageMonitoringOutput) GoString() string {
	return s.String()
}

// SetDay sets the Day field's value.
func (s *UsageMonitoringForUsageMonitoringOutput) SetDay(v string) *UsageMonitoringForUsageMonitoringOutput {
	s.Day = &v
	return s
}

// SetUsageType sets the UsageType field's value.
func (s *UsageMonitoringForUsageMonitoringOutput) SetUsageType(v string) *UsageMonitoringForUsageMonitoringOutput {
	s.UsageType = &v
	return s
}

// SetValue sets the Value field's value.
func (s *UsageMonitoringForUsageMonitoringOutput) SetValue(v float64) *UsageMonitoringForUsageMonitoringOutput {
	s.Value = &v
	return s
}

type UsageMonitoringInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// End is a required field
	End *string `type:"string" json:",omitempty" required:"true"`

	// Mode is a required field
	Mode *string `type:"string" json:",omitempty" required:"true"`

	// ProjectName is a required field
	ProjectName *string `type:"string" json:",omitempty" required:"true"`

	// ResourceID is a required field
	ResourceID *string `type:"string" json:",omitempty" required:"true"`

	// Start is a required field
	Start *string `type:"string" json:",omitempty" required:"true"`

	UsageType *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s UsageMonitoringInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UsageMonitoringInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UsageMonitoringInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "UsageMonitoringInput"}
	if s.End == nil {
		invalidParams.Add(request.NewErrParamRequired("End"))
	}
	if s.Mode == nil {
		invalidParams.Add(request.NewErrParamRequired("Mode"))
	}
	if s.ProjectName == nil {
		invalidParams.Add(request.NewErrParamRequired("ProjectName"))
	}
	if s.ResourceID == nil {
		invalidParams.Add(request.NewErrParamRequired("ResourceID"))
	}
	if s.Start == nil {
		invalidParams.Add(request.NewErrParamRequired("Start"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetEnd sets the End field's value.
func (s *UsageMonitoringInput) SetEnd(v string) *UsageMonitoringInput {
	s.End = &v
	return s
}

// SetMode sets the Mode field's value.
func (s *UsageMonitoringInput) SetMode(v string) *UsageMonitoringInput {
	s.Mode = &v
	return s
}

// SetProjectName sets the ProjectName field's value.
func (s *UsageMonitoringInput) SetProjectName(v string) *UsageMonitoringInput {
	s.ProjectName = &v
	return s
}

// SetResourceID sets the ResourceID field's value.
func (s *UsageMonitoringInput) SetResourceID(v string) *UsageMonitoringInput {
	s.ResourceID = &v
	return s
}

// SetStart sets the Start field's value.
func (s *UsageMonitoringInput) SetStart(v string) *UsageMonitoringInput {
	s.Start = &v
	return s
}

// SetUsageType sets the UsageType field's value.
func (s *UsageMonitoringInput) SetUsageType(v string) *UsageMonitoringInput {
	s.UsageType = &v
	return s
}

type UsageMonitoringOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	UsageMonitoring []*UsageMonitoringForUsageMonitoringOutput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s UsageMonitoringOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UsageMonitoringOutput) GoString() string {
	return s.String()
}

// SetUsageMonitoring sets the UsageMonitoring field's value.
func (s *UsageMonitoringOutput) SetUsageMonitoring(v []*UsageMonitoringForUsageMonitoringOutput) *UsageMonitoringOutput {
	s.UsageMonitoring = v
	return s
}
