// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vpn

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opResetVpnConnectionCommon = "ResetVpnConnection"

// ResetVpnConnectionCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ResetVpnConnectionCommon operation. The "output" return
// value will be populated with the ResetVpnConnectionCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ResetVpnConnectionCommon Request to send the API call to the service.
// the "output" return value is not valid until after ResetVpnConnectionCommon Send returns without error.
//
// See ResetVpnConnectionCommon for more information on using the ResetVpnConnectionCommon
// API call, and error handling.
//
//    // Example sending a request using the ResetVpnConnectionCommonRequest method.
//    req, resp := client.ResetVpnConnectionCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VPN) ResetVpnConnectionCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opResetVpnConnectionCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// ResetVpnConnectionCommon API operation for VPN.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VPN's
// API operation ResetVpnConnectionCommon for usage and error information.
func (c *VPN) ResetVpnConnectionCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ResetVpnConnectionCommonRequest(input)
	return out, req.Send()
}

// ResetVpnConnectionCommonWithContext is the same as ResetVpnConnectionCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ResetVpnConnectionCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VPN) ResetVpnConnectionCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ResetVpnConnectionCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opResetVpnConnection = "ResetVpnConnection"

// ResetVpnConnectionRequest generates a "volcengine/request.Request" representing the
// client's request for the ResetVpnConnection operation. The "output" return
// value will be populated with the ResetVpnConnectionCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ResetVpnConnectionCommon Request to send the API call to the service.
// the "output" return value is not valid until after ResetVpnConnectionCommon Send returns without error.
//
// See ResetVpnConnection for more information on using the ResetVpnConnection
// API call, and error handling.
//
//    // Example sending a request using the ResetVpnConnectionRequest method.
//    req, resp := client.ResetVpnConnectionRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VPN) ResetVpnConnectionRequest(input *ResetVpnConnectionInput) (req *request.Request, output *ResetVpnConnectionOutput) {
	op := &request.Operation{
		Name:       opResetVpnConnection,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ResetVpnConnectionInput{}
	}

	output = &ResetVpnConnectionOutput{}
	req = c.newRequest(op, input, output)

	return
}

// ResetVpnConnection API operation for VPN.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VPN's
// API operation ResetVpnConnection for usage and error information.
func (c *VPN) ResetVpnConnection(input *ResetVpnConnectionInput) (*ResetVpnConnectionOutput, error) {
	req, out := c.ResetVpnConnectionRequest(input)
	return out, req.Send()
}

// ResetVpnConnectionWithContext is the same as ResetVpnConnection with the addition of
// the ability to pass a context and additional request options.
//
// See ResetVpnConnection for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VPN) ResetVpnConnectionWithContext(ctx volcengine.Context, input *ResetVpnConnectionInput, opts ...request.Option) (*ResetVpnConnectionOutput, error) {
	req, out := c.ResetVpnConnectionRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ResetVpnConnectionInput struct {
	_ struct{} `type:"structure"`

	ClientToken *string `type:"string"`

	TunnelId *string `type:"string"`

	// VpnConnectionId is a required field
	VpnConnectionId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s ResetVpnConnectionInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ResetVpnConnectionInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ResetVpnConnectionInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ResetVpnConnectionInput"}
	if s.VpnConnectionId == nil {
		invalidParams.Add(request.NewErrParamRequired("VpnConnectionId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetClientToken sets the ClientToken field's value.
func (s *ResetVpnConnectionInput) SetClientToken(v string) *ResetVpnConnectionInput {
	s.ClientToken = &v
	return s
}

// SetTunnelId sets the TunnelId field's value.
func (s *ResetVpnConnectionInput) SetTunnelId(v string) *ResetVpnConnectionInput {
	s.TunnelId = &v
	return s
}

// SetVpnConnectionId sets the VpnConnectionId field's value.
func (s *ResetVpnConnectionInput) SetVpnConnectionId(v string) *ResetVpnConnectionInput {
	s.VpnConnectionId = &v
	return s
}

type ResetVpnConnectionOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	RequestId *string `type:"string"`
}

// String returns the string representation
func (s ResetVpnConnectionOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ResetVpnConnectionOutput) GoString() string {
	return s.String()
}

// SetRequestId sets the RequestId field's value.
func (s *ResetVpnConnectionOutput) SetRequestId(v string) *ResetVpnConnectionOutput {
	s.RequestId = &v
	return s
}
