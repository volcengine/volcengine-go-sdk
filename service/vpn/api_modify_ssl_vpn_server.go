// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vpn

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opModifySslVpnServerCommon = "ModifySslVpnServer"

// ModifySslVpnServerCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ModifySslVpnServerCommon operation. The "output" return
// value will be populated with the ModifySslVpnServerCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifySslVpnServerCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifySslVpnServerCommon Send returns without error.
//
// See ModifySslVpnServerCommon for more information on using the ModifySslVpnServerCommon
// API call, and error handling.
//
//    // Example sending a request using the ModifySslVpnServerCommonRequest method.
//    req, resp := client.ModifySslVpnServerCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VPN) ModifySslVpnServerCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opModifySslVpnServerCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// ModifySslVpnServerCommon API operation for VPN.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VPN's
// API operation ModifySslVpnServerCommon for usage and error information.
func (c *VPN) ModifySslVpnServerCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ModifySslVpnServerCommonRequest(input)
	return out, req.Send()
}

// ModifySslVpnServerCommonWithContext is the same as ModifySslVpnServerCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ModifySslVpnServerCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VPN) ModifySslVpnServerCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ModifySslVpnServerCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifySslVpnServer = "ModifySslVpnServer"

// ModifySslVpnServerRequest generates a "volcengine/request.Request" representing the
// client's request for the ModifySslVpnServer operation. The "output" return
// value will be populated with the ModifySslVpnServerCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifySslVpnServerCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifySslVpnServerCommon Send returns without error.
//
// See ModifySslVpnServer for more information on using the ModifySslVpnServer
// API call, and error handling.
//
//    // Example sending a request using the ModifySslVpnServerRequest method.
//    req, resp := client.ModifySslVpnServerRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VPN) ModifySslVpnServerRequest(input *ModifySslVpnServerInput) (req *request.Request, output *ModifySslVpnServerOutput) {
	op := &request.Operation{
		Name:       opModifySslVpnServer,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ModifySslVpnServerInput{}
	}

	output = &ModifySslVpnServerOutput{}
	req = c.newRequest(op, input, output)

	return
}

// ModifySslVpnServer API operation for VPN.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VPN's
// API operation ModifySslVpnServer for usage and error information.
func (c *VPN) ModifySslVpnServer(input *ModifySslVpnServerInput) (*ModifySslVpnServerOutput, error) {
	req, out := c.ModifySslVpnServerRequest(input)
	return out, req.Send()
}

// ModifySslVpnServerWithContext is the same as ModifySslVpnServer with the addition of
// the ability to pass a context and additional request options.
//
// See ModifySslVpnServer for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VPN) ModifySslVpnServerWithContext(ctx volcengine.Context, input *ModifySslVpnServerInput, opts ...request.Option) (*ModifySslVpnServerOutput, error) {
	req, out := c.ModifySslVpnServerRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ModifySslVpnServerInput struct {
	_ struct{} `type:"structure"`

	Auth *string `type:"string"`

	Cipher *string `type:"string"`

	ClientCertSessionPolicy *string `type:"string" enum:"ClientCertSessionPolicyForModifySslVpnServerInput"`

	ClientIpPool *string `type:"string"`

	Compress *bool `type:"boolean"`

	Description *string `type:"string"`

	LocalSubnets []*string `type:"list"`

	Port *int64 `type:"integer"`

	Protocol *string `type:"string"`

	// SslVpnServerId is a required field
	SslVpnServerId *string `type:"string" required:"true"`

	SslVpnServerName *string `type:"string"`
}

// String returns the string representation
func (s ModifySslVpnServerInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifySslVpnServerInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ModifySslVpnServerInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ModifySslVpnServerInput"}
	if s.SslVpnServerId == nil {
		invalidParams.Add(request.NewErrParamRequired("SslVpnServerId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAuth sets the Auth field's value.
func (s *ModifySslVpnServerInput) SetAuth(v string) *ModifySslVpnServerInput {
	s.Auth = &v
	return s
}

// SetCipher sets the Cipher field's value.
func (s *ModifySslVpnServerInput) SetCipher(v string) *ModifySslVpnServerInput {
	s.Cipher = &v
	return s
}

// SetClientCertSessionPolicy sets the ClientCertSessionPolicy field's value.
func (s *ModifySslVpnServerInput) SetClientCertSessionPolicy(v string) *ModifySslVpnServerInput {
	s.ClientCertSessionPolicy = &v
	return s
}

// SetClientIpPool sets the ClientIpPool field's value.
func (s *ModifySslVpnServerInput) SetClientIpPool(v string) *ModifySslVpnServerInput {
	s.ClientIpPool = &v
	return s
}

// SetCompress sets the Compress field's value.
func (s *ModifySslVpnServerInput) SetCompress(v bool) *ModifySslVpnServerInput {
	s.Compress = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *ModifySslVpnServerInput) SetDescription(v string) *ModifySslVpnServerInput {
	s.Description = &v
	return s
}

// SetLocalSubnets sets the LocalSubnets field's value.
func (s *ModifySslVpnServerInput) SetLocalSubnets(v []*string) *ModifySslVpnServerInput {
	s.LocalSubnets = v
	return s
}

// SetPort sets the Port field's value.
func (s *ModifySslVpnServerInput) SetPort(v int64) *ModifySslVpnServerInput {
	s.Port = &v
	return s
}

// SetProtocol sets the Protocol field's value.
func (s *ModifySslVpnServerInput) SetProtocol(v string) *ModifySslVpnServerInput {
	s.Protocol = &v
	return s
}

// SetSslVpnServerId sets the SslVpnServerId field's value.
func (s *ModifySslVpnServerInput) SetSslVpnServerId(v string) *ModifySslVpnServerInput {
	s.SslVpnServerId = &v
	return s
}

// SetSslVpnServerName sets the SslVpnServerName field's value.
func (s *ModifySslVpnServerInput) SetSslVpnServerName(v string) *ModifySslVpnServerInput {
	s.SslVpnServerName = &v
	return s
}

type ModifySslVpnServerOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	RequestId *string `type:"string"`
}

// String returns the string representation
func (s ModifySslVpnServerOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifySslVpnServerOutput) GoString() string {
	return s.String()
}

// SetRequestId sets the RequestId field's value.
func (s *ModifySslVpnServerOutput) SetRequestId(v string) *ModifySslVpnServerOutput {
	s.RequestId = &v
	return s
}

const (
	// ClientCertSessionPolicyForModifySslVpnServerInputAllowConcurrent is a ClientCertSessionPolicyForModifySslVpnServerInput enum value
	ClientCertSessionPolicyForModifySslVpnServerInputAllowConcurrent = "AllowConcurrent"

	// ClientCertSessionPolicyForModifySslVpnServerInputPreemptExisting is a ClientCertSessionPolicyForModifySslVpnServerInput enum value
	ClientCertSessionPolicyForModifySslVpnServerInputPreemptExisting = "PreemptExisting"
)
