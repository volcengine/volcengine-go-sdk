// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package aiotvideo

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDeleteStreamRecordCommon = "DeleteStreamRecord"

// DeleteStreamRecordCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteStreamRecordCommon operation. The "output" return
// value will be populated with the DeleteStreamRecordCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteStreamRecordCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteStreamRecordCommon Send returns without error.
//
// See DeleteStreamRecordCommon for more information on using the DeleteStreamRecordCommon
// API call, and error handling.
//
//    // Example sending a request using the DeleteStreamRecordCommonRequest method.
//    req, resp := client.DeleteStreamRecordCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *AIOTVIDEO) DeleteStreamRecordCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteStreamRecordCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteStreamRecordCommon API operation for AIOTVIDEO.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for AIOTVIDEO's
// API operation DeleteStreamRecordCommon for usage and error information.
func (c *AIOTVIDEO) DeleteStreamRecordCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteStreamRecordCommonRequest(input)
	return out, req.Send()
}

// DeleteStreamRecordCommonWithContext is the same as DeleteStreamRecordCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteStreamRecordCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *AIOTVIDEO) DeleteStreamRecordCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteStreamRecordCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteStreamRecord = "DeleteStreamRecord"

// DeleteStreamRecordRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteStreamRecord operation. The "output" return
// value will be populated with the DeleteStreamRecordCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteStreamRecordCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteStreamRecordCommon Send returns without error.
//
// See DeleteStreamRecord for more information on using the DeleteStreamRecord
// API call, and error handling.
//
//    // Example sending a request using the DeleteStreamRecordRequest method.
//    req, resp := client.DeleteStreamRecordRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *AIOTVIDEO) DeleteStreamRecordRequest(input *DeleteStreamRecordInput) (req *request.Request, output *DeleteStreamRecordOutput) {
	op := &request.Operation{
		Name:       opDeleteStreamRecord,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteStreamRecordInput{}
	}

	output = &DeleteStreamRecordOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteStreamRecord API operation for AIOTVIDEO.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for AIOTVIDEO's
// API operation DeleteStreamRecord for usage and error information.
func (c *AIOTVIDEO) DeleteStreamRecord(input *DeleteStreamRecordInput) (*DeleteStreamRecordOutput, error) {
	req, out := c.DeleteStreamRecordRequest(input)
	return out, req.Send()
}

// DeleteStreamRecordWithContext is the same as DeleteStreamRecord with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteStreamRecord for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *AIOTVIDEO) DeleteStreamRecordWithContext(ctx volcengine.Context, input *DeleteStreamRecordInput, opts ...request.Option) (*DeleteStreamRecordOutput, error) {
	req, out := c.DeleteStreamRecordRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DeleteStreamRecordInput struct {
	_ struct{} `type:"structure"`

	// RecordID is a required field
	RecordID *string `type:"string" required:"true"`
}

// String returns the string representation
func (s DeleteStreamRecordInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteStreamRecordInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeleteStreamRecordInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DeleteStreamRecordInput"}
	if s.RecordID == nil {
		invalidParams.Add(request.NewErrParamRequired("RecordID"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetRecordID sets the RecordID field's value.
func (s *DeleteStreamRecordInput) SetRecordID(v string) *DeleteStreamRecordInput {
	s.RecordID = &v
	return s
}

type DeleteStreamRecordOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	DelResult *int32 `type:"int32"`
}

// String returns the string representation
func (s DeleteStreamRecordOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteStreamRecordOutput) GoString() string {
	return s.String()
}

// SetDelResult sets the DelResult field's value.
func (s *DeleteStreamRecordOutput) SetDelResult(v int32) *DeleteStreamRecordOutput {
	s.DelResult = &v
	return s
}
