// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package aiotvideo

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opListRecordPlanChannelsCommon = "ListRecordPlanChannels"

// ListRecordPlanChannelsCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ListRecordPlanChannelsCommon operation. The "output" return
// value will be populated with the ListRecordPlanChannelsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListRecordPlanChannelsCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListRecordPlanChannelsCommon Send returns without error.
//
// See ListRecordPlanChannelsCommon for more information on using the ListRecordPlanChannelsCommon
// API call, and error handling.
//
//    // Example sending a request using the ListRecordPlanChannelsCommonRequest method.
//    req, resp := client.ListRecordPlanChannelsCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *AIOTVIDEO) ListRecordPlanChannelsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opListRecordPlanChannelsCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// ListRecordPlanChannelsCommon API operation for AIOTVIDEO.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for AIOTVIDEO's
// API operation ListRecordPlanChannelsCommon for usage and error information.
func (c *AIOTVIDEO) ListRecordPlanChannelsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ListRecordPlanChannelsCommonRequest(input)
	return out, req.Send()
}

// ListRecordPlanChannelsCommonWithContext is the same as ListRecordPlanChannelsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ListRecordPlanChannelsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *AIOTVIDEO) ListRecordPlanChannelsCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ListRecordPlanChannelsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListRecordPlanChannels = "ListRecordPlanChannels"

// ListRecordPlanChannelsRequest generates a "volcengine/request.Request" representing the
// client's request for the ListRecordPlanChannels operation. The "output" return
// value will be populated with the ListRecordPlanChannelsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListRecordPlanChannelsCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListRecordPlanChannelsCommon Send returns without error.
//
// See ListRecordPlanChannels for more information on using the ListRecordPlanChannels
// API call, and error handling.
//
//    // Example sending a request using the ListRecordPlanChannelsRequest method.
//    req, resp := client.ListRecordPlanChannelsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *AIOTVIDEO) ListRecordPlanChannelsRequest(input *ListRecordPlanChannelsInput) (req *request.Request, output *ListRecordPlanChannelsOutput) {
	op := &request.Operation{
		Name:       opListRecordPlanChannels,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListRecordPlanChannelsInput{}
	}

	output = &ListRecordPlanChannelsOutput{}
	req = c.newRequest(op, input, output)

	return
}

// ListRecordPlanChannels API operation for AIOTVIDEO.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for AIOTVIDEO's
// API operation ListRecordPlanChannels for usage and error information.
func (c *AIOTVIDEO) ListRecordPlanChannels(input *ListRecordPlanChannelsInput) (*ListRecordPlanChannelsOutput, error) {
	req, out := c.ListRecordPlanChannelsRequest(input)
	return out, req.Send()
}

// ListRecordPlanChannelsWithContext is the same as ListRecordPlanChannels with the addition of
// the ability to pass a context and additional request options.
//
// See ListRecordPlanChannels for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *AIOTVIDEO) ListRecordPlanChannelsWithContext(ctx volcengine.Context, input *ListRecordPlanChannelsInput, opts ...request.Option) (*ListRecordPlanChannelsOutput, error) {
	req, out := c.ListRecordPlanChannelsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ListForListRecordPlanChannelsOutput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s ListForListRecordPlanChannelsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListForListRecordPlanChannelsOutput) GoString() string {
	return s.String()
}

type ListRecordPlanChannelsInput struct {
	_ struct{} `type:"structure"`

	PageNumber *int32 `type:"int32"`

	PageSize *int32 `type:"int32"`

	// PlanID is a required field
	PlanID *string `type:"string" required:"true"`
}

// String returns the string representation
func (s ListRecordPlanChannelsInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListRecordPlanChannelsInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ListRecordPlanChannelsInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ListRecordPlanChannelsInput"}
	if s.PlanID == nil {
		invalidParams.Add(request.NewErrParamRequired("PlanID"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetPageNumber sets the PageNumber field's value.
func (s *ListRecordPlanChannelsInput) SetPageNumber(v int32) *ListRecordPlanChannelsInput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *ListRecordPlanChannelsInput) SetPageSize(v int32) *ListRecordPlanChannelsInput {
	s.PageSize = &v
	return s
}

// SetPlanID sets the PlanID field's value.
func (s *ListRecordPlanChannelsInput) SetPlanID(v string) *ListRecordPlanChannelsInput {
	s.PlanID = &v
	return s
}

type ListRecordPlanChannelsOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	List *ListForListRecordPlanChannelsOutput `type:"structure"`

	PageNumber *int32 `type:"int32"`

	PageSize *int32 `type:"int32"`

	TotalCount *int32 `type:"int32"`
}

// String returns the string representation
func (s ListRecordPlanChannelsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListRecordPlanChannelsOutput) GoString() string {
	return s.String()
}

// SetList sets the List field's value.
func (s *ListRecordPlanChannelsOutput) SetList(v *ListForListRecordPlanChannelsOutput) *ListRecordPlanChannelsOutput {
	s.List = v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *ListRecordPlanChannelsOutput) SetPageNumber(v int32) *ListRecordPlanChannelsOutput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *ListRecordPlanChannelsOutput) SetPageSize(v int32) *ListRecordPlanChannelsOutput {
	s.PageSize = &v
	return s
}

// SetTotalCount sets the TotalCount field's value.
func (s *ListRecordPlanChannelsOutput) SetTotalCount(v int32) *ListRecordPlanChannelsOutput {
	s.TotalCount = &v
	return s
}
