// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package aiotvideo

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opStopStreamCommon = "StopStream"

// StopStreamCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the StopStreamCommon operation. The "output" return
// value will be populated with the StopStreamCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned StopStreamCommon Request to send the API call to the service.
// the "output" return value is not valid until after StopStreamCommon Send returns without error.
//
// See StopStreamCommon for more information on using the StopStreamCommon
// API call, and error handling.
//
//    // Example sending a request using the StopStreamCommonRequest method.
//    req, resp := client.StopStreamCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *AIOTVIDEO) StopStreamCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opStopStreamCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// StopStreamCommon API operation for AIOTVIDEO.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for AIOTVIDEO's
// API operation StopStreamCommon for usage and error information.
func (c *AIOTVIDEO) StopStreamCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.StopStreamCommonRequest(input)
	return out, req.Send()
}

// StopStreamCommonWithContext is the same as StopStreamCommon with the addition of
// the ability to pass a context and additional request options.
//
// See StopStreamCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *AIOTVIDEO) StopStreamCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.StopStreamCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opStopStream = "StopStream"

// StopStreamRequest generates a "volcengine/request.Request" representing the
// client's request for the StopStream operation. The "output" return
// value will be populated with the StopStreamCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned StopStreamCommon Request to send the API call to the service.
// the "output" return value is not valid until after StopStreamCommon Send returns without error.
//
// See StopStream for more information on using the StopStream
// API call, and error handling.
//
//    // Example sending a request using the StopStreamRequest method.
//    req, resp := client.StopStreamRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *AIOTVIDEO) StopStreamRequest(input *StopStreamInput) (req *request.Request, output *StopStreamOutput) {
	op := &request.Operation{
		Name:       opStopStream,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &StopStreamInput{}
	}

	output = &StopStreamOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// StopStream API operation for AIOTVIDEO.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for AIOTVIDEO's
// API operation StopStream for usage and error information.
func (c *AIOTVIDEO) StopStream(input *StopStreamInput) (*StopStreamOutput, error) {
	req, out := c.StopStreamRequest(input)
	return out, req.Send()
}

// StopStreamWithContext is the same as StopStream with the addition of
// the ability to pass a context and additional request options.
//
// See StopStream for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *AIOTVIDEO) StopStreamWithContext(ctx volcengine.Context, input *StopStreamInput, opts ...request.Option) (*StopStreamOutput, error) {
	req, out := c.StopStreamRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type StopStreamInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	IsSmart *bool `type:"boolean" json:",omitempty"`

	Resolution *string `type:"string" json:",omitempty"`

	SpaceID *string `type:"string" json:",omitempty"`

	// StreamID is a required field
	StreamID *string `type:"string" json:",omitempty" required:"true"`

	StreamingIndex *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s StopStreamInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s StopStreamInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *StopStreamInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "StopStreamInput"}
	if s.StreamID == nil {
		invalidParams.Add(request.NewErrParamRequired("StreamID"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetIsSmart sets the IsSmart field's value.
func (s *StopStreamInput) SetIsSmart(v bool) *StopStreamInput {
	s.IsSmart = &v
	return s
}

// SetResolution sets the Resolution field's value.
func (s *StopStreamInput) SetResolution(v string) *StopStreamInput {
	s.Resolution = &v
	return s
}

// SetSpaceID sets the SpaceID field's value.
func (s *StopStreamInput) SetSpaceID(v string) *StopStreamInput {
	s.SpaceID = &v
	return s
}

// SetStreamID sets the StreamID field's value.
func (s *StopStreamInput) SetStreamID(v string) *StopStreamInput {
	s.StreamID = &v
	return s
}

// SetStreamingIndex sets the StreamingIndex field's value.
func (s *StopStreamInput) SetStreamingIndex(v int32) *StopStreamInput {
	s.StreamingIndex = &v
	return s
}

type StopStreamOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	ID *string `type:"string" json:",omitempty"`

	StopRes *bool `type:"boolean" json:",omitempty"`
}

// String returns the string representation
func (s StopStreamOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s StopStreamOutput) GoString() string {
	return s.String()
}

// SetID sets the ID field's value.
func (s *StopStreamOutput) SetID(v string) *StopStreamOutput {
	s.ID = &v
	return s
}

// SetStopRes sets the StopRes field's value.
func (s *StopStreamOutput) SetStopRes(v bool) *StopStreamOutput {
	s.StopRes = &v
	return s
}
