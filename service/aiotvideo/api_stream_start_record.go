// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package aiotvideo

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opStreamStartRecordCommon = "StreamStartRecord"

// StreamStartRecordCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the StreamStartRecordCommon operation. The "output" return
// value will be populated with the StreamStartRecordCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned StreamStartRecordCommon Request to send the API call to the service.
// the "output" return value is not valid until after StreamStartRecordCommon Send returns without error.
//
// See StreamStartRecordCommon for more information on using the StreamStartRecordCommon
// API call, and error handling.
//
//    // Example sending a request using the StreamStartRecordCommonRequest method.
//    req, resp := client.StreamStartRecordCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *AIOTVIDEO) StreamStartRecordCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opStreamStartRecordCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// StreamStartRecordCommon API operation for AIOTVIDEO.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for AIOTVIDEO's
// API operation StreamStartRecordCommon for usage and error information.
func (c *AIOTVIDEO) StreamStartRecordCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.StreamStartRecordCommonRequest(input)
	return out, req.Send()
}

// StreamStartRecordCommonWithContext is the same as StreamStartRecordCommon with the addition of
// the ability to pass a context and additional request options.
//
// See StreamStartRecordCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *AIOTVIDEO) StreamStartRecordCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.StreamStartRecordCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opStreamStartRecord = "StreamStartRecord"

// StreamStartRecordRequest generates a "volcengine/request.Request" representing the
// client's request for the StreamStartRecord operation. The "output" return
// value will be populated with the StreamStartRecordCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned StreamStartRecordCommon Request to send the API call to the service.
// the "output" return value is not valid until after StreamStartRecordCommon Send returns without error.
//
// See StreamStartRecord for more information on using the StreamStartRecord
// API call, and error handling.
//
//    // Example sending a request using the StreamStartRecordRequest method.
//    req, resp := client.StreamStartRecordRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *AIOTVIDEO) StreamStartRecordRequest(input *StreamStartRecordInput) (req *request.Request, output *StreamStartRecordOutput) {
	op := &request.Operation{
		Name:       opStreamStartRecord,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &StreamStartRecordInput{}
	}

	output = &StreamStartRecordOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// StreamStartRecord API operation for AIOTVIDEO.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for AIOTVIDEO's
// API operation StreamStartRecord for usage and error information.
func (c *AIOTVIDEO) StreamStartRecord(input *StreamStartRecordInput) (*StreamStartRecordOutput, error) {
	req, out := c.StreamStartRecordRequest(input)
	return out, req.Send()
}

// StreamStartRecordWithContext is the same as StreamStartRecord with the addition of
// the ability to pass a context and additional request options.
//
// See StreamStartRecord for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *AIOTVIDEO) StreamStartRecordWithContext(ctx volcengine.Context, input *StreamStartRecordInput, opts ...request.Option) (*StreamStartRecordOutput, error) {
	req, out := c.StreamStartRecordRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type StreamStartRecordInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// AutoPull is a required field
	AutoPull *bool `type:"boolean" json:",omitempty" required:"true"`

	Expire *int32 `type:"int32" json:",omitempty"`

	RecordTime *int32 `type:"int32" json:",omitempty"`

	Remux *string `type:"string" json:",omitempty"`

	SpaceID *string `type:"string" json:",omitempty"`

	// StreamID is a required field
	StreamID *string `type:"string" json:",omitempty" required:"true"`

	// Timeout is a required field
	Timeout *int32 `type:"int32" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s StreamStartRecordInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s StreamStartRecordInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *StreamStartRecordInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "StreamStartRecordInput"}
	if s.AutoPull == nil {
		invalidParams.Add(request.NewErrParamRequired("AutoPull"))
	}
	if s.StreamID == nil {
		invalidParams.Add(request.NewErrParamRequired("StreamID"))
	}
	if s.Timeout == nil {
		invalidParams.Add(request.NewErrParamRequired("Timeout"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAutoPull sets the AutoPull field's value.
func (s *StreamStartRecordInput) SetAutoPull(v bool) *StreamStartRecordInput {
	s.AutoPull = &v
	return s
}

// SetExpire sets the Expire field's value.
func (s *StreamStartRecordInput) SetExpire(v int32) *StreamStartRecordInput {
	s.Expire = &v
	return s
}

// SetRecordTime sets the RecordTime field's value.
func (s *StreamStartRecordInput) SetRecordTime(v int32) *StreamStartRecordInput {
	s.RecordTime = &v
	return s
}

// SetRemux sets the Remux field's value.
func (s *StreamStartRecordInput) SetRemux(v string) *StreamStartRecordInput {
	s.Remux = &v
	return s
}

// SetSpaceID sets the SpaceID field's value.
func (s *StreamStartRecordInput) SetSpaceID(v string) *StreamStartRecordInput {
	s.SpaceID = &v
	return s
}

// SetStreamID sets the StreamID field's value.
func (s *StreamStartRecordInput) SetStreamID(v string) *StreamStartRecordInput {
	s.StreamID = &v
	return s
}

// SetTimeout sets the Timeout field's value.
func (s *StreamStartRecordInput) SetTimeout(v int32) *StreamStartRecordInput {
	s.Timeout = &v
	return s
}

type StreamStartRecordOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	ID *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s StreamStartRecordOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s StreamStartRecordOutput) GoString() string {
	return s.String()
}

// SetID sets the ID field's value.
func (s *StreamStartRecordOutput) SetID(v string) *StreamStartRecordOutput {
	s.ID = &v
	return s
}
