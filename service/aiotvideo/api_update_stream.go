// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package aiotvideo

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opUpdateStreamCommon = "UpdateStream"

// UpdateStreamCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateStreamCommon operation. The "output" return
// value will be populated with the UpdateStreamCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateStreamCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateStreamCommon Send returns without error.
//
// See UpdateStreamCommon for more information on using the UpdateStreamCommon
// API call, and error handling.
//
//    // Example sending a request using the UpdateStreamCommonRequest method.
//    req, resp := client.UpdateStreamCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *AIOTVIDEO) UpdateStreamCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opUpdateStreamCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateStreamCommon API operation for AIOTVIDEO.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for AIOTVIDEO's
// API operation UpdateStreamCommon for usage and error information.
func (c *AIOTVIDEO) UpdateStreamCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.UpdateStreamCommonRequest(input)
	return out, req.Send()
}

// UpdateStreamCommonWithContext is the same as UpdateStreamCommon with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateStreamCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *AIOTVIDEO) UpdateStreamCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.UpdateStreamCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opUpdateStream = "UpdateStream"

// UpdateStreamRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateStream operation. The "output" return
// value will be populated with the UpdateStreamCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateStreamCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateStreamCommon Send returns without error.
//
// See UpdateStream for more information on using the UpdateStream
// API call, and error handling.
//
//    // Example sending a request using the UpdateStreamRequest method.
//    req, resp := client.UpdateStreamRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *AIOTVIDEO) UpdateStreamRequest(input *UpdateStreamInput) (req *request.Request, output *UpdateStreamOutput) {
	op := &request.Operation{
		Name:       opUpdateStream,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UpdateStreamInput{}
	}

	output = &UpdateStreamOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateStream API operation for AIOTVIDEO.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for AIOTVIDEO's
// API operation UpdateStream for usage and error information.
func (c *AIOTVIDEO) UpdateStream(input *UpdateStreamInput) (*UpdateStreamOutput, error) {
	req, out := c.UpdateStreamRequest(input)
	return out, req.Send()
}

// UpdateStreamWithContext is the same as UpdateStream with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateStream for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *AIOTVIDEO) UpdateStreamWithContext(ctx volcengine.Context, input *UpdateStreamInput, opts ...request.Option) (*UpdateStreamOutput, error) {
	req, out := c.UpdateStreamRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type UpdateStreamInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Description *string `type:"string" json:",omitempty"`

	PullSource *string `type:"string" json:",omitempty"`

	SpaceID *string `type:"string" json:",omitempty"`

	// StreamID is a required field
	StreamID *string `type:"string" json:",omitempty" required:"true"`

	StreamName *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s UpdateStreamInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateStreamInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UpdateStreamInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "UpdateStreamInput"}
	if s.StreamID == nil {
		invalidParams.Add(request.NewErrParamRequired("StreamID"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDescription sets the Description field's value.
func (s *UpdateStreamInput) SetDescription(v string) *UpdateStreamInput {
	s.Description = &v
	return s
}

// SetPullSource sets the PullSource field's value.
func (s *UpdateStreamInput) SetPullSource(v string) *UpdateStreamInput {
	s.PullSource = &v
	return s
}

// SetSpaceID sets the SpaceID field's value.
func (s *UpdateStreamInput) SetSpaceID(v string) *UpdateStreamInput {
	s.SpaceID = &v
	return s
}

// SetStreamID sets the StreamID field's value.
func (s *UpdateStreamInput) SetStreamID(v string) *UpdateStreamInput {
	s.StreamID = &v
	return s
}

// SetStreamName sets the StreamName field's value.
func (s *UpdateStreamInput) SetStreamName(v string) *UpdateStreamInput {
	s.StreamName = &v
	return s
}

type UpdateStreamOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	ID *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s UpdateStreamOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateStreamOutput) GoString() string {
	return s.String()
}

// SetID sets the ID field's value.
func (s *UpdateStreamOutput) SetID(v string) *UpdateStreamOutput {
	s.ID = &v
	return s
}
