// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package aiotvideo

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opGenSipIDCommon = "GenSipID"

// GenSipIDCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the GenSipIDCommon operation. The "output" return
// value will be populated with the GenSipIDCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GenSipIDCommon Request to send the API call to the service.
// the "output" return value is not valid until after GenSipIDCommon Send returns without error.
//
// See GenSipIDCommon for more information on using the GenSipIDCommon
// API call, and error handling.
//
//    // Example sending a request using the GenSipIDCommonRequest method.
//    req, resp := client.GenSipIDCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *AIOTVIDEO) GenSipIDCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opGenSipIDCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// GenSipIDCommon API operation for AIOTVIDEO.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for AIOTVIDEO's
// API operation GenSipIDCommon for usage and error information.
func (c *AIOTVIDEO) GenSipIDCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.GenSipIDCommonRequest(input)
	return out, req.Send()
}

// GenSipIDCommonWithContext is the same as GenSipIDCommon with the addition of
// the ability to pass a context and additional request options.
//
// See GenSipIDCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *AIOTVIDEO) GenSipIDCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.GenSipIDCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opGenSipID = "GenSipID"

// GenSipIDRequest generates a "volcengine/request.Request" representing the
// client's request for the GenSipID operation. The "output" return
// value will be populated with the GenSipIDCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GenSipIDCommon Request to send the API call to the service.
// the "output" return value is not valid until after GenSipIDCommon Send returns without error.
//
// See GenSipID for more information on using the GenSipID
// API call, and error handling.
//
//    // Example sending a request using the GenSipIDRequest method.
//    req, resp := client.GenSipIDRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *AIOTVIDEO) GenSipIDRequest(input *GenSipIDInput) (req *request.Request, output *GenSipIDOutput) {
	op := &request.Operation{
		Name:       opGenSipID,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &GenSipIDInput{}
	}

	output = &GenSipIDOutput{}
	req = c.newRequest(op, input, output)

	return
}

// GenSipID API operation for AIOTVIDEO.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for AIOTVIDEO's
// API operation GenSipID for usage and error information.
func (c *AIOTVIDEO) GenSipID(input *GenSipIDInput) (*GenSipIDOutput, error) {
	req, out := c.GenSipIDRequest(input)
	return out, req.Send()
}

// GenSipIDWithContext is the same as GenSipID with the addition of
// the ability to pass a context and additional request options.
//
// See GenSipID for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *AIOTVIDEO) GenSipIDWithContext(ctx volcengine.Context, input *GenSipIDInput, opts ...request.Option) (*GenSipIDOutput, error) {
	req, out := c.GenSipIDRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type GenSipIDInput struct {
	_ struct{} `type:"structure"`

	// DeviceType is a required field
	DeviceType *string `type:"string" required:"true"`

	SipServerID *string `type:"string"`

	SpaceID *string `type:"string"`
}

// String returns the string representation
func (s GenSipIDInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GenSipIDInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *GenSipIDInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "GenSipIDInput"}
	if s.DeviceType == nil {
		invalidParams.Add(request.NewErrParamRequired("DeviceType"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDeviceType sets the DeviceType field's value.
func (s *GenSipIDInput) SetDeviceType(v string) *GenSipIDInput {
	s.DeviceType = &v
	return s
}

// SetSipServerID sets the SipServerID field's value.
func (s *GenSipIDInput) SetSipServerID(v string) *GenSipIDInput {
	s.SipServerID = &v
	return s
}

// SetSpaceID sets the SpaceID field's value.
func (s *GenSipIDInput) SetSpaceID(v string) *GenSipIDInput {
	s.SpaceID = &v
	return s
}

type GenSipIDOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	ID *string `type:"string"`
}

// String returns the string representation
func (s GenSipIDOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GenSipIDOutput) GoString() string {
	return s.String()
}

// SetID sets the ID field's value.
func (s *GenSipIDOutput) SetID(v string) *GenSipIDOutput {
	s.ID = &v
	return s
}
