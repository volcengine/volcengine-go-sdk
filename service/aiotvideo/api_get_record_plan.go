// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package aiotvideo

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opGetRecordPlanCommon = "GetRecordPlan"

// GetRecordPlanCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the GetRecordPlanCommon operation. The "output" return
// value will be populated with the GetRecordPlanCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetRecordPlanCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetRecordPlanCommon Send returns without error.
//
// See GetRecordPlanCommon for more information on using the GetRecordPlanCommon
// API call, and error handling.
//
//    // Example sending a request using the GetRecordPlanCommonRequest method.
//    req, resp := client.GetRecordPlanCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *AIOTVIDEO) GetRecordPlanCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opGetRecordPlanCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// GetRecordPlanCommon API operation for AIOTVIDEO.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for AIOTVIDEO's
// API operation GetRecordPlanCommon for usage and error information.
func (c *AIOTVIDEO) GetRecordPlanCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.GetRecordPlanCommonRequest(input)
	return out, req.Send()
}

// GetRecordPlanCommonWithContext is the same as GetRecordPlanCommon with the addition of
// the ability to pass a context and additional request options.
//
// See GetRecordPlanCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *AIOTVIDEO) GetRecordPlanCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.GetRecordPlanCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opGetRecordPlan = "GetRecordPlan"

// GetRecordPlanRequest generates a "volcengine/request.Request" representing the
// client's request for the GetRecordPlan operation. The "output" return
// value will be populated with the GetRecordPlanCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetRecordPlanCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetRecordPlanCommon Send returns without error.
//
// See GetRecordPlan for more information on using the GetRecordPlan
// API call, and error handling.
//
//    // Example sending a request using the GetRecordPlanRequest method.
//    req, resp := client.GetRecordPlanRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *AIOTVIDEO) GetRecordPlanRequest(input *GetRecordPlanInput) (req *request.Request, output *GetRecordPlanOutput) {
	op := &request.Operation{
		Name:       opGetRecordPlan,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &GetRecordPlanInput{}
	}

	output = &GetRecordPlanOutput{}
	req = c.newRequest(op, input, output)

	return
}

// GetRecordPlan API operation for AIOTVIDEO.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for AIOTVIDEO's
// API operation GetRecordPlan for usage and error information.
func (c *AIOTVIDEO) GetRecordPlan(input *GetRecordPlanInput) (*GetRecordPlanOutput, error) {
	req, out := c.GetRecordPlanRequest(input)
	return out, req.Send()
}

// GetRecordPlanWithContext is the same as GetRecordPlan with the addition of
// the ability to pass a context and additional request options.
//
// See GetRecordPlan for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *AIOTVIDEO) GetRecordPlanWithContext(ctx volcengine.Context, input *GetRecordPlanInput, opts ...request.Option) (*GetRecordPlanOutput, error) {
	req, out := c.GetRecordPlanRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type GetRecordPlanInput struct {
	_ struct{} `type:"structure"`

	// PlanID is a required field
	PlanID *string `type:"string" required:"true"`
}

// String returns the string representation
func (s GetRecordPlanInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetRecordPlanInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *GetRecordPlanInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "GetRecordPlanInput"}
	if s.PlanID == nil {
		invalidParams.Add(request.NewErrParamRequired("PlanID"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetPlanID sets the PlanID field's value.
func (s *GetRecordPlanInput) SetPlanID(v string) *GetRecordPlanInput {
	s.PlanID = &v
	return s
}

type GetRecordPlanOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	BindStreamNum *int32 `type:"int32"`

	BindTemplate *string `type:"string"`

	CreatedAt *int32 `type:"int32"`

	Description *string `type:"string"`

	PlanID *string `type:"string"`

	PlanName *string `type:"string"`

	Status *string `type:"string"`

	TemplateInfo *TemplateInfoForGetRecordPlanOutput `type:"structure"`

	UpdatedAt *int32 `type:"int32"`
}

// String returns the string representation
func (s GetRecordPlanOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetRecordPlanOutput) GoString() string {
	return s.String()
}

// SetBindStreamNum sets the BindStreamNum field's value.
func (s *GetRecordPlanOutput) SetBindStreamNum(v int32) *GetRecordPlanOutput {
	s.BindStreamNum = &v
	return s
}

// SetBindTemplate sets the BindTemplate field's value.
func (s *GetRecordPlanOutput) SetBindTemplate(v string) *GetRecordPlanOutput {
	s.BindTemplate = &v
	return s
}

// SetCreatedAt sets the CreatedAt field's value.
func (s *GetRecordPlanOutput) SetCreatedAt(v int32) *GetRecordPlanOutput {
	s.CreatedAt = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *GetRecordPlanOutput) SetDescription(v string) *GetRecordPlanOutput {
	s.Description = &v
	return s
}

// SetPlanID sets the PlanID field's value.
func (s *GetRecordPlanOutput) SetPlanID(v string) *GetRecordPlanOutput {
	s.PlanID = &v
	return s
}

// SetPlanName sets the PlanName field's value.
func (s *GetRecordPlanOutput) SetPlanName(v string) *GetRecordPlanOutput {
	s.PlanName = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *GetRecordPlanOutput) SetStatus(v string) *GetRecordPlanOutput {
	s.Status = &v
	return s
}

// SetTemplateInfo sets the TemplateInfo field's value.
func (s *GetRecordPlanOutput) SetTemplateInfo(v *TemplateInfoForGetRecordPlanOutput) *GetRecordPlanOutput {
	s.TemplateInfo = v
	return s
}

// SetUpdatedAt sets the UpdatedAt field's value.
func (s *GetRecordPlanOutput) SetUpdatedAt(v int32) *GetRecordPlanOutput {
	s.UpdatedAt = &v
	return s
}

type TTLForGetRecordPlanOutput struct {
	_ struct{} `type:"structure"`

	Days *int32 `type:"int32"`

	TransConfig []*TransConfigForGetRecordPlanOutput `type:"list"`
}

// String returns the string representation
func (s TTLForGetRecordPlanOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s TTLForGetRecordPlanOutput) GoString() string {
	return s.String()
}

// SetDays sets the Days field's value.
func (s *TTLForGetRecordPlanOutput) SetDays(v int32) *TTLForGetRecordPlanOutput {
	s.Days = &v
	return s
}

// SetTransConfig sets the TransConfig field's value.
func (s *TTLForGetRecordPlanOutput) SetTransConfig(v []*TransConfigForGetRecordPlanOutput) *TTLForGetRecordPlanOutput {
	s.TransConfig = v
	return s
}

type TemplateInfoForGetRecordPlanOutput struct {
	_ struct{} `type:"structure"`

	Format *string `type:"string"`

	TTL *TTLForGetRecordPlanOutput `type:"structure"`
}

// String returns the string representation
func (s TemplateInfoForGetRecordPlanOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s TemplateInfoForGetRecordPlanOutput) GoString() string {
	return s.String()
}

// SetFormat sets the Format field's value.
func (s *TemplateInfoForGetRecordPlanOutput) SetFormat(v string) *TemplateInfoForGetRecordPlanOutput {
	s.Format = &v
	return s
}

// SetTTL sets the TTL field's value.
func (s *TemplateInfoForGetRecordPlanOutput) SetTTL(v *TTLForGetRecordPlanOutput) *TemplateInfoForGetRecordPlanOutput {
	s.TTL = v
	return s
}

type TransConfigForGetRecordPlanOutput struct {
	_ struct{} `type:"structure"`

	Days *int32 `type:"int32"`

	StorageClass *string `type:"string"`
}

// String returns the string representation
func (s TransConfigForGetRecordPlanOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s TransConfigForGetRecordPlanOutput) GoString() string {
	return s.String()
}

// SetDays sets the Days field's value.
func (s *TransConfigForGetRecordPlanOutput) SetDays(v int32) *TransConfigForGetRecordPlanOutput {
	s.Days = &v
	return s
}

// SetStorageClass sets the StorageClass field's value.
func (s *TransConfigForGetRecordPlanOutput) SetStorageClass(v string) *TransConfigForGetRecordPlanOutput {
	s.StorageClass = &v
	return s
}
