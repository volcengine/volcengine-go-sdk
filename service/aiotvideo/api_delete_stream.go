// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package aiotvideo

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDeleteStreamCommon = "DeleteStream"

// DeleteStreamCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteStreamCommon operation. The "output" return
// value will be populated with the DeleteStreamCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteStreamCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteStreamCommon Send returns without error.
//
// See DeleteStreamCommon for more information on using the DeleteStreamCommon
// API call, and error handling.
//
//    // Example sending a request using the DeleteStreamCommonRequest method.
//    req, resp := client.DeleteStreamCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *AIOTVIDEO) DeleteStreamCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteStreamCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteStreamCommon API operation for AIOTVIDEO.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for AIOTVIDEO's
// API operation DeleteStreamCommon for usage and error information.
func (c *AIOTVIDEO) DeleteStreamCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteStreamCommonRequest(input)
	return out, req.Send()
}

// DeleteStreamCommonWithContext is the same as DeleteStreamCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteStreamCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *AIOTVIDEO) DeleteStreamCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteStreamCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteStream = "DeleteStream"

// DeleteStreamRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteStream operation. The "output" return
// value will be populated with the DeleteStreamCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteStreamCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteStreamCommon Send returns without error.
//
// See DeleteStream for more information on using the DeleteStream
// API call, and error handling.
//
//    // Example sending a request using the DeleteStreamRequest method.
//    req, resp := client.DeleteStreamRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *AIOTVIDEO) DeleteStreamRequest(input *DeleteStreamInput) (req *request.Request, output *DeleteStreamOutput) {
	op := &request.Operation{
		Name:       opDeleteStream,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteStreamInput{}
	}

	output = &DeleteStreamOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteStream API operation for AIOTVIDEO.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for AIOTVIDEO's
// API operation DeleteStream for usage and error information.
func (c *AIOTVIDEO) DeleteStream(input *DeleteStreamInput) (*DeleteStreamOutput, error) {
	req, out := c.DeleteStreamRequest(input)
	return out, req.Send()
}

// DeleteStreamWithContext is the same as DeleteStream with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteStream for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *AIOTVIDEO) DeleteStreamWithContext(ctx volcengine.Context, input *DeleteStreamInput, opts ...request.Option) (*DeleteStreamOutput, error) {
	req, out := c.DeleteStreamRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DeleteStreamInput struct {
	_ struct{} `type:"structure"`

	SpaceID *string `type:"string"`

	// StreamID is a required field
	StreamID *string `type:"string" required:"true"`
}

// String returns the string representation
func (s DeleteStreamInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteStreamInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeleteStreamInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DeleteStreamInput"}
	if s.StreamID == nil {
		invalidParams.Add(request.NewErrParamRequired("StreamID"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetSpaceID sets the SpaceID field's value.
func (s *DeleteStreamInput) SetSpaceID(v string) *DeleteStreamInput {
	s.SpaceID = &v
	return s
}

// SetStreamID sets the StreamID field's value.
func (s *DeleteStreamInput) SetStreamID(v string) *DeleteStreamInput {
	s.StreamID = &v
	return s
}

type DeleteStreamOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	ID *string `type:"string"`
}

// String returns the string representation
func (s DeleteStreamOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteStreamOutput) GoString() string {
	return s.String()
}

// SetID sets the ID field's value.
func (s *DeleteStreamOutput) SetID(v string) *DeleteStreamOutput {
	s.ID = &v
	return s
}
