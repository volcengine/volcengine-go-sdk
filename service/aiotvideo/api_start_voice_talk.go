// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package aiotvideo

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opStartVoiceTalkCommon = "StartVoiceTalk"

// StartVoiceTalkCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the StartVoiceTalkCommon operation. The "output" return
// value will be populated with the StartVoiceTalkCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned StartVoiceTalkCommon Request to send the API call to the service.
// the "output" return value is not valid until after StartVoiceTalkCommon Send returns without error.
//
// See StartVoiceTalkCommon for more information on using the StartVoiceTalkCommon
// API call, and error handling.
//
//    // Example sending a request using the StartVoiceTalkCommonRequest method.
//    req, resp := client.StartVoiceTalkCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *AIOTVIDEO) StartVoiceTalkCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opStartVoiceTalkCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// StartVoiceTalkCommon API operation for AIOTVIDEO.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for AIOTVIDEO's
// API operation StartVoiceTalkCommon for usage and error information.
func (c *AIOTVIDEO) StartVoiceTalkCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.StartVoiceTalkCommonRequest(input)
	return out, req.Send()
}

// StartVoiceTalkCommonWithContext is the same as StartVoiceTalkCommon with the addition of
// the ability to pass a context and additional request options.
//
// See StartVoiceTalkCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *AIOTVIDEO) StartVoiceTalkCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.StartVoiceTalkCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opStartVoiceTalk = "StartVoiceTalk"

// StartVoiceTalkRequest generates a "volcengine/request.Request" representing the
// client's request for the StartVoiceTalk operation. The "output" return
// value will be populated with the StartVoiceTalkCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned StartVoiceTalkCommon Request to send the API call to the service.
// the "output" return value is not valid until after StartVoiceTalkCommon Send returns without error.
//
// See StartVoiceTalk for more information on using the StartVoiceTalk
// API call, and error handling.
//
//    // Example sending a request using the StartVoiceTalkRequest method.
//    req, resp := client.StartVoiceTalkRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *AIOTVIDEO) StartVoiceTalkRequest(input *StartVoiceTalkInput) (req *request.Request, output *StartVoiceTalkOutput) {
	op := &request.Operation{
		Name:       opStartVoiceTalk,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &StartVoiceTalkInput{}
	}

	output = &StartVoiceTalkOutput{}
	req = c.newRequest(op, input, output)

	return
}

// StartVoiceTalk API operation for AIOTVIDEO.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for AIOTVIDEO's
// API operation StartVoiceTalk for usage and error information.
func (c *AIOTVIDEO) StartVoiceTalk(input *StartVoiceTalkInput) (*StartVoiceTalkOutput, error) {
	req, out := c.StartVoiceTalkRequest(input)
	return out, req.Send()
}

// StartVoiceTalkWithContext is the same as StartVoiceTalk with the addition of
// the ability to pass a context and additional request options.
//
// See StartVoiceTalk for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *AIOTVIDEO) StartVoiceTalkWithContext(ctx volcengine.Context, input *StartVoiceTalkInput, opts ...request.Option) (*StartVoiceTalkOutput, error) {
	req, out := c.StartVoiceTalkRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type StartVoiceTalkInput struct {
	_ struct{} `type:"structure"`

	// DeviceNSID is a required field
	DeviceNSID *string `type:"string" required:"true"`

	// SpaceID is a required field
	SpaceID *string `type:"string" required:"true"`

	Transport *string `type:"string"`
}

// String returns the string representation
func (s StartVoiceTalkInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s StartVoiceTalkInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *StartVoiceTalkInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "StartVoiceTalkInput"}
	if s.DeviceNSID == nil {
		invalidParams.Add(request.NewErrParamRequired("DeviceNSID"))
	}
	if s.SpaceID == nil {
		invalidParams.Add(request.NewErrParamRequired("SpaceID"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDeviceNSID sets the DeviceNSID field's value.
func (s *StartVoiceTalkInput) SetDeviceNSID(v string) *StartVoiceTalkInput {
	s.DeviceNSID = &v
	return s
}

// SetSpaceID sets the SpaceID field's value.
func (s *StartVoiceTalkInput) SetSpaceID(v string) *StartVoiceTalkInput {
	s.SpaceID = &v
	return s
}

// SetTransport sets the Transport field's value.
func (s *StartVoiceTalkInput) SetTransport(v string) *StartVoiceTalkInput {
	s.Transport = &v
	return s
}

type StartVoiceTalkOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	AudioSendUrl *string `type:"string"`
}

// String returns the string representation
func (s StartVoiceTalkOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s StartVoiceTalkOutput) GoString() string {
	return s.String()
}

// SetAudioSendUrl sets the AudioSendUrl field's value.
func (s *StartVoiceTalkOutput) SetAudioSendUrl(v string) *StartVoiceTalkOutput {
	s.AudioSendUrl = &v
	return s
}
