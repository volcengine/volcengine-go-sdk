// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package aiotvideo

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opListRecordPlansCommon = "ListRecordPlans"

// ListRecordPlansCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ListRecordPlansCommon operation. The "output" return
// value will be populated with the ListRecordPlansCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListRecordPlansCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListRecordPlansCommon Send returns without error.
//
// See ListRecordPlansCommon for more information on using the ListRecordPlansCommon
// API call, and error handling.
//
//    // Example sending a request using the ListRecordPlansCommonRequest method.
//    req, resp := client.ListRecordPlansCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *AIOTVIDEO) ListRecordPlansCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opListRecordPlansCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// ListRecordPlansCommon API operation for AIOTVIDEO.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for AIOTVIDEO's
// API operation ListRecordPlansCommon for usage and error information.
func (c *AIOTVIDEO) ListRecordPlansCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ListRecordPlansCommonRequest(input)
	return out, req.Send()
}

// ListRecordPlansCommonWithContext is the same as ListRecordPlansCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ListRecordPlansCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *AIOTVIDEO) ListRecordPlansCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ListRecordPlansCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListRecordPlans = "ListRecordPlans"

// ListRecordPlansRequest generates a "volcengine/request.Request" representing the
// client's request for the ListRecordPlans operation. The "output" return
// value will be populated with the ListRecordPlansCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListRecordPlansCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListRecordPlansCommon Send returns without error.
//
// See ListRecordPlans for more information on using the ListRecordPlans
// API call, and error handling.
//
//    // Example sending a request using the ListRecordPlansRequest method.
//    req, resp := client.ListRecordPlansRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *AIOTVIDEO) ListRecordPlansRequest(input *ListRecordPlansInput) (req *request.Request, output *ListRecordPlansOutput) {
	op := &request.Operation{
		Name:       opListRecordPlans,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListRecordPlansInput{}
	}

	output = &ListRecordPlansOutput{}
	req = c.newRequest(op, input, output)

	return
}

// ListRecordPlans API operation for AIOTVIDEO.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for AIOTVIDEO's
// API operation ListRecordPlans for usage and error information.
func (c *AIOTVIDEO) ListRecordPlans(input *ListRecordPlansInput) (*ListRecordPlansOutput, error) {
	req, out := c.ListRecordPlansRequest(input)
	return out, req.Send()
}

// ListRecordPlansWithContext is the same as ListRecordPlans with the addition of
// the ability to pass a context and additional request options.
//
// See ListRecordPlans for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *AIOTVIDEO) ListRecordPlansWithContext(ctx volcengine.Context, input *ListRecordPlansInput, opts ...request.Option) (*ListRecordPlansOutput, error) {
	req, out := c.ListRecordPlansRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ListForListRecordPlansOutput struct {
	_ struct{} `type:"structure"`

	BindStreamNum *int32 `type:"int32"`

	BindTemplate *string `type:"string"`

	CreatedAt *int32 `type:"int32"`

	Description *string `type:"string"`

	PlanID *string `type:"string"`

	PlanName *string `type:"string"`

	Status *string `type:"string"`

	TemplateInfo *TemplateInfoForListRecordPlansOutput `type:"structure"`

	UpdatedAt *int32 `type:"int32"`
}

// String returns the string representation
func (s ListForListRecordPlansOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListForListRecordPlansOutput) GoString() string {
	return s.String()
}

// SetBindStreamNum sets the BindStreamNum field's value.
func (s *ListForListRecordPlansOutput) SetBindStreamNum(v int32) *ListForListRecordPlansOutput {
	s.BindStreamNum = &v
	return s
}

// SetBindTemplate sets the BindTemplate field's value.
func (s *ListForListRecordPlansOutput) SetBindTemplate(v string) *ListForListRecordPlansOutput {
	s.BindTemplate = &v
	return s
}

// SetCreatedAt sets the CreatedAt field's value.
func (s *ListForListRecordPlansOutput) SetCreatedAt(v int32) *ListForListRecordPlansOutput {
	s.CreatedAt = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *ListForListRecordPlansOutput) SetDescription(v string) *ListForListRecordPlansOutput {
	s.Description = &v
	return s
}

// SetPlanID sets the PlanID field's value.
func (s *ListForListRecordPlansOutput) SetPlanID(v string) *ListForListRecordPlansOutput {
	s.PlanID = &v
	return s
}

// SetPlanName sets the PlanName field's value.
func (s *ListForListRecordPlansOutput) SetPlanName(v string) *ListForListRecordPlansOutput {
	s.PlanName = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *ListForListRecordPlansOutput) SetStatus(v string) *ListForListRecordPlansOutput {
	s.Status = &v
	return s
}

// SetTemplateInfo sets the TemplateInfo field's value.
func (s *ListForListRecordPlansOutput) SetTemplateInfo(v *TemplateInfoForListRecordPlansOutput) *ListForListRecordPlansOutput {
	s.TemplateInfo = v
	return s
}

// SetUpdatedAt sets the UpdatedAt field's value.
func (s *ListForListRecordPlansOutput) SetUpdatedAt(v int32) *ListForListRecordPlansOutput {
	s.UpdatedAt = &v
	return s
}

type ListRecordPlansInput struct {
	_ struct{} `type:"structure"`

	// FilterName is a required field
	FilterName *string `type:"string" required:"true"`
}

// String returns the string representation
func (s ListRecordPlansInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListRecordPlansInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ListRecordPlansInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ListRecordPlansInput"}
	if s.FilterName == nil {
		invalidParams.Add(request.NewErrParamRequired("FilterName"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetFilterName sets the FilterName field's value.
func (s *ListRecordPlansInput) SetFilterName(v string) *ListRecordPlansInput {
	s.FilterName = &v
	return s
}

type ListRecordPlansOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	List []*ListForListRecordPlansOutput `type:"list"`
}

// String returns the string representation
func (s ListRecordPlansOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListRecordPlansOutput) GoString() string {
	return s.String()
}

// SetList sets the List field's value.
func (s *ListRecordPlansOutput) SetList(v []*ListForListRecordPlansOutput) *ListRecordPlansOutput {
	s.List = v
	return s
}

type TTLForListRecordPlansOutput struct {
	_ struct{} `type:"structure"`

	Days *int32 `type:"int32"`

	TransConfig []*TransConfigForListRecordPlansOutput `type:"list"`
}

// String returns the string representation
func (s TTLForListRecordPlansOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s TTLForListRecordPlansOutput) GoString() string {
	return s.String()
}

// SetDays sets the Days field's value.
func (s *TTLForListRecordPlansOutput) SetDays(v int32) *TTLForListRecordPlansOutput {
	s.Days = &v
	return s
}

// SetTransConfig sets the TransConfig field's value.
func (s *TTLForListRecordPlansOutput) SetTransConfig(v []*TransConfigForListRecordPlansOutput) *TTLForListRecordPlansOutput {
	s.TransConfig = v
	return s
}

type TemplateInfoForListRecordPlansOutput struct {
	_ struct{} `type:"structure"`

	Format *string `type:"string"`

	TTL *TTLForListRecordPlansOutput `type:"structure"`
}

// String returns the string representation
func (s TemplateInfoForListRecordPlansOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s TemplateInfoForListRecordPlansOutput) GoString() string {
	return s.String()
}

// SetFormat sets the Format field's value.
func (s *TemplateInfoForListRecordPlansOutput) SetFormat(v string) *TemplateInfoForListRecordPlansOutput {
	s.Format = &v
	return s
}

// SetTTL sets the TTL field's value.
func (s *TemplateInfoForListRecordPlansOutput) SetTTL(v *TTLForListRecordPlansOutput) *TemplateInfoForListRecordPlansOutput {
	s.TTL = v
	return s
}

type TransConfigForListRecordPlansOutput struct {
	_ struct{} `type:"structure"`

	Days *int32 `type:"int32"`

	StorageClass *string `type:"string"`
}

// String returns the string representation
func (s TransConfigForListRecordPlansOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s TransConfigForListRecordPlansOutput) GoString() string {
	return s.String()
}

// SetDays sets the Days field's value.
func (s *TransConfigForListRecordPlansOutput) SetDays(v int32) *TransConfigForListRecordPlansOutput {
	s.Days = &v
	return s
}

// SetStorageClass sets the StorageClass field's value.
func (s *TransConfigForListRecordPlansOutput) SetStorageClass(v string) *TransConfigForListRecordPlansOutput {
	s.StorageClass = &v
	return s
}
