// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package aiotvideo

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDeleteRecordPlanCommon = "DeleteRecordPlan"

// DeleteRecordPlanCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteRecordPlanCommon operation. The "output" return
// value will be populated with the DeleteRecordPlanCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteRecordPlanCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteRecordPlanCommon Send returns without error.
//
// See DeleteRecordPlanCommon for more information on using the DeleteRecordPlanCommon
// API call, and error handling.
//
//    // Example sending a request using the DeleteRecordPlanCommonRequest method.
//    req, resp := client.DeleteRecordPlanCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *AIOTVIDEO) DeleteRecordPlanCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteRecordPlanCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteRecordPlanCommon API operation for AIOTVIDEO.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for AIOTVIDEO's
// API operation DeleteRecordPlanCommon for usage and error information.
func (c *AIOTVIDEO) DeleteRecordPlanCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteRecordPlanCommonRequest(input)
	return out, req.Send()
}

// DeleteRecordPlanCommonWithContext is the same as DeleteRecordPlanCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteRecordPlanCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *AIOTVIDEO) DeleteRecordPlanCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteRecordPlanCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteRecordPlan = "DeleteRecordPlan"

// DeleteRecordPlanRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteRecordPlan operation. The "output" return
// value will be populated with the DeleteRecordPlanCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteRecordPlanCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteRecordPlanCommon Send returns without error.
//
// See DeleteRecordPlan for more information on using the DeleteRecordPlan
// API call, and error handling.
//
//    // Example sending a request using the DeleteRecordPlanRequest method.
//    req, resp := client.DeleteRecordPlanRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *AIOTVIDEO) DeleteRecordPlanRequest(input *DeleteRecordPlanInput) (req *request.Request, output *DeleteRecordPlanOutput) {
	op := &request.Operation{
		Name:       opDeleteRecordPlan,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteRecordPlanInput{}
	}

	output = &DeleteRecordPlanOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteRecordPlan API operation for AIOTVIDEO.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for AIOTVIDEO's
// API operation DeleteRecordPlan for usage and error information.
func (c *AIOTVIDEO) DeleteRecordPlan(input *DeleteRecordPlanInput) (*DeleteRecordPlanOutput, error) {
	req, out := c.DeleteRecordPlanRequest(input)
	return out, req.Send()
}

// DeleteRecordPlanWithContext is the same as DeleteRecordPlan with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteRecordPlan for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *AIOTVIDEO) DeleteRecordPlanWithContext(ctx volcengine.Context, input *DeleteRecordPlanInput, opts ...request.Option) (*DeleteRecordPlanOutput, error) {
	req, out := c.DeleteRecordPlanRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DeleteRecordPlanInput struct {
	_ struct{} `type:"structure"`

	// PlanID is a required field
	PlanID *string `type:"string" required:"true"`
}

// String returns the string representation
func (s DeleteRecordPlanInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteRecordPlanInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeleteRecordPlanInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DeleteRecordPlanInput"}
	if s.PlanID == nil {
		invalidParams.Add(request.NewErrParamRequired("PlanID"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetPlanID sets the PlanID field's value.
func (s *DeleteRecordPlanInput) SetPlanID(v string) *DeleteRecordPlanInput {
	s.PlanID = &v
	return s
}

type DeleteRecordPlanOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	ID *string `type:"string"`
}

// String returns the string representation
func (s DeleteRecordPlanOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteRecordPlanOutput) GoString() string {
	return s.String()
}

// SetID sets the ID field's value.
func (s *DeleteRecordPlanOutput) SetID(v string) *DeleteRecordPlanOutput {
	s.ID = &v
	return s
}
