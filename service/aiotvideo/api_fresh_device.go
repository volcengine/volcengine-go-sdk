// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package aiotvideo

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opFreshDeviceCommon = "FreshDevice"

// FreshDeviceCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the FreshDeviceCommon operation. The "output" return
// value will be populated with the FreshDeviceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned FreshDeviceCommon Request to send the API call to the service.
// the "output" return value is not valid until after FreshDeviceCommon Send returns without error.
//
// See FreshDeviceCommon for more information on using the FreshDeviceCommon
// API call, and error handling.
//
//    // Example sending a request using the FreshDeviceCommonRequest method.
//    req, resp := client.FreshDeviceCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *AIOTVIDEO) FreshDeviceCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opFreshDeviceCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// FreshDeviceCommon API operation for AIOTVIDEO.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for AIOTVIDEO's
// API operation FreshDeviceCommon for usage and error information.
func (c *AIOTVIDEO) FreshDeviceCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.FreshDeviceCommonRequest(input)
	return out, req.Send()
}

// FreshDeviceCommonWithContext is the same as FreshDeviceCommon with the addition of
// the ability to pass a context and additional request options.
//
// See FreshDeviceCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *AIOTVIDEO) FreshDeviceCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.FreshDeviceCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opFreshDevice = "FreshDevice"

// FreshDeviceRequest generates a "volcengine/request.Request" representing the
// client's request for the FreshDevice operation. The "output" return
// value will be populated with the FreshDeviceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned FreshDeviceCommon Request to send the API call to the service.
// the "output" return value is not valid until after FreshDeviceCommon Send returns without error.
//
// See FreshDevice for more information on using the FreshDevice
// API call, and error handling.
//
//    // Example sending a request using the FreshDeviceRequest method.
//    req, resp := client.FreshDeviceRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *AIOTVIDEO) FreshDeviceRequest(input *FreshDeviceInput) (req *request.Request, output *FreshDeviceOutput) {
	op := &request.Operation{
		Name:       opFreshDevice,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &FreshDeviceInput{}
	}

	output = &FreshDeviceOutput{}
	req = c.newRequest(op, input, output)

	return
}

// FreshDevice API operation for AIOTVIDEO.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for AIOTVIDEO's
// API operation FreshDevice for usage and error information.
func (c *AIOTVIDEO) FreshDevice(input *FreshDeviceInput) (*FreshDeviceOutput, error) {
	req, out := c.FreshDeviceRequest(input)
	return out, req.Send()
}

// FreshDeviceWithContext is the same as FreshDevice with the addition of
// the ability to pass a context and additional request options.
//
// See FreshDevice for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *AIOTVIDEO) FreshDeviceWithContext(ctx volcengine.Context, input *FreshDeviceInput, opts ...request.Option) (*FreshDeviceOutput, error) {
	req, out := c.FreshDeviceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type FreshDeviceInput struct {
	_ struct{} `type:"structure"`

	// DeviceID is a required field
	DeviceID *string `type:"string" required:"true"`

	DeviceNSID *string `type:"string"`

	// SpaceID is a required field
	SpaceID *string `type:"string" required:"true"`
}

// String returns the string representation
func (s FreshDeviceInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s FreshDeviceInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *FreshDeviceInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "FreshDeviceInput"}
	if s.DeviceID == nil {
		invalidParams.Add(request.NewErrParamRequired("DeviceID"))
	}
	if s.SpaceID == nil {
		invalidParams.Add(request.NewErrParamRequired("SpaceID"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDeviceID sets the DeviceID field's value.
func (s *FreshDeviceInput) SetDeviceID(v string) *FreshDeviceInput {
	s.DeviceID = &v
	return s
}

// SetDeviceNSID sets the DeviceNSID field's value.
func (s *FreshDeviceInput) SetDeviceNSID(v string) *FreshDeviceInput {
	s.DeviceNSID = &v
	return s
}

// SetSpaceID sets the SpaceID field's value.
func (s *FreshDeviceInput) SetSpaceID(v string) *FreshDeviceInput {
	s.SpaceID = &v
	return s
}

type FreshDeviceOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	ID *string `type:"string"`
}

// String returns the string representation
func (s FreshDeviceOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s FreshDeviceOutput) GoString() string {
	return s.String()
}

// SetID sets the ID field's value.
func (s *FreshDeviceOutput) SetID(v string) *FreshDeviceOutput {
	s.ID = &v
	return s
}
