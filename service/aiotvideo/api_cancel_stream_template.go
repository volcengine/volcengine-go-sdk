// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package aiotvideo

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opCancelStreamTemplateCommon = "CancelStreamTemplate"

// CancelStreamTemplateCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the CancelStreamTemplateCommon operation. The "output" return
// value will be populated with the CancelStreamTemplateCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CancelStreamTemplateCommon Request to send the API call to the service.
// the "output" return value is not valid until after CancelStreamTemplateCommon Send returns without error.
//
// See CancelStreamTemplateCommon for more information on using the CancelStreamTemplateCommon
// API call, and error handling.
//
//    // Example sending a request using the CancelStreamTemplateCommonRequest method.
//    req, resp := client.CancelStreamTemplateCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *AIOTVIDEO) CancelStreamTemplateCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCancelStreamTemplateCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// CancelStreamTemplateCommon API operation for AIOTVIDEO.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for AIOTVIDEO's
// API operation CancelStreamTemplateCommon for usage and error information.
func (c *AIOTVIDEO) CancelStreamTemplateCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CancelStreamTemplateCommonRequest(input)
	return out, req.Send()
}

// CancelStreamTemplateCommonWithContext is the same as CancelStreamTemplateCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CancelStreamTemplateCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *AIOTVIDEO) CancelStreamTemplateCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CancelStreamTemplateCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCancelStreamTemplate = "CancelStreamTemplate"

// CancelStreamTemplateRequest generates a "volcengine/request.Request" representing the
// client's request for the CancelStreamTemplate operation. The "output" return
// value will be populated with the CancelStreamTemplateCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CancelStreamTemplateCommon Request to send the API call to the service.
// the "output" return value is not valid until after CancelStreamTemplateCommon Send returns without error.
//
// See CancelStreamTemplate for more information on using the CancelStreamTemplate
// API call, and error handling.
//
//    // Example sending a request using the CancelStreamTemplateRequest method.
//    req, resp := client.CancelStreamTemplateRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *AIOTVIDEO) CancelStreamTemplateRequest(input *CancelStreamTemplateInput) (req *request.Request, output *CancelStreamTemplateOutput) {
	op := &request.Operation{
		Name:       opCancelStreamTemplate,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CancelStreamTemplateInput{}
	}

	output = &CancelStreamTemplateOutput{}
	req = c.newRequest(op, input, output)

	return
}

// CancelStreamTemplate API operation for AIOTVIDEO.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for AIOTVIDEO's
// API operation CancelStreamTemplate for usage and error information.
func (c *AIOTVIDEO) CancelStreamTemplate(input *CancelStreamTemplateInput) (*CancelStreamTemplateOutput, error) {
	req, out := c.CancelStreamTemplateRequest(input)
	return out, req.Send()
}

// CancelStreamTemplateWithContext is the same as CancelStreamTemplate with the addition of
// the ability to pass a context and additional request options.
//
// See CancelStreamTemplate for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *AIOTVIDEO) CancelStreamTemplateWithContext(ctx volcengine.Context, input *CancelStreamTemplateInput, opts ...request.Option) (*CancelStreamTemplateOutput, error) {
	req, out := c.CancelStreamTemplateRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type CancelStreamTemplateInput struct {
	_ struct{} `type:"structure"`

	SpaceID *string `type:"string"`

	// StreamID is a required field
	StreamID *string `type:"string" required:"true"`

	// TemplateType is a required field
	TemplateType *string `type:"string" required:"true"`
}

// String returns the string representation
func (s CancelStreamTemplateInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CancelStreamTemplateInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CancelStreamTemplateInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CancelStreamTemplateInput"}
	if s.StreamID == nil {
		invalidParams.Add(request.NewErrParamRequired("StreamID"))
	}
	if s.TemplateType == nil {
		invalidParams.Add(request.NewErrParamRequired("TemplateType"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetSpaceID sets the SpaceID field's value.
func (s *CancelStreamTemplateInput) SetSpaceID(v string) *CancelStreamTemplateInput {
	s.SpaceID = &v
	return s
}

// SetStreamID sets the StreamID field's value.
func (s *CancelStreamTemplateInput) SetStreamID(v string) *CancelStreamTemplateInput {
	s.StreamID = &v
	return s
}

// SetTemplateType sets the TemplateType field's value.
func (s *CancelStreamTemplateInput) SetTemplateType(v string) *CancelStreamTemplateInput {
	s.TemplateType = &v
	return s
}

type CancelStreamTemplateOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s CancelStreamTemplateOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CancelStreamTemplateOutput) GoString() string {
	return s.String()
}
