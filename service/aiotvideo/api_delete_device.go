// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package aiotvideo

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDeleteDeviceCommon = "DeleteDevice"

// DeleteDeviceCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteDeviceCommon operation. The "output" return
// value will be populated with the DeleteDeviceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteDeviceCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteDeviceCommon Send returns without error.
//
// See DeleteDeviceCommon for more information on using the DeleteDeviceCommon
// API call, and error handling.
//
//    // Example sending a request using the DeleteDeviceCommonRequest method.
//    req, resp := client.DeleteDeviceCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *AIOTVIDEO) DeleteDeviceCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteDeviceCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteDeviceCommon API operation for AIOTVIDEO.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for AIOTVIDEO's
// API operation DeleteDeviceCommon for usage and error information.
func (c *AIOTVIDEO) DeleteDeviceCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteDeviceCommonRequest(input)
	return out, req.Send()
}

// DeleteDeviceCommonWithContext is the same as DeleteDeviceCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteDeviceCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *AIOTVIDEO) DeleteDeviceCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteDeviceCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteDevice = "DeleteDevice"

// DeleteDeviceRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteDevice operation. The "output" return
// value will be populated with the DeleteDeviceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteDeviceCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteDeviceCommon Send returns without error.
//
// See DeleteDevice for more information on using the DeleteDevice
// API call, and error handling.
//
//    // Example sending a request using the DeleteDeviceRequest method.
//    req, resp := client.DeleteDeviceRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *AIOTVIDEO) DeleteDeviceRequest(input *DeleteDeviceInput) (req *request.Request, output *DeleteDeviceOutput) {
	op := &request.Operation{
		Name:       opDeleteDevice,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteDeviceInput{}
	}

	output = &DeleteDeviceOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteDevice API operation for AIOTVIDEO.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for AIOTVIDEO's
// API operation DeleteDevice for usage and error information.
func (c *AIOTVIDEO) DeleteDevice(input *DeleteDeviceInput) (*DeleteDeviceOutput, error) {
	req, out := c.DeleteDeviceRequest(input)
	return out, req.Send()
}

// DeleteDeviceWithContext is the same as DeleteDevice with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteDevice for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *AIOTVIDEO) DeleteDeviceWithContext(ctx volcengine.Context, input *DeleteDeviceInput, opts ...request.Option) (*DeleteDeviceOutput, error) {
	req, out := c.DeleteDeviceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DeleteDeviceInput struct {
	_ struct{} `type:"structure"`

	// DeviceID is a required field
	DeviceID *string `type:"string" required:"true"`

	SpaceID *string `type:"string"`
}

// String returns the string representation
func (s DeleteDeviceInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteDeviceInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeleteDeviceInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DeleteDeviceInput"}
	if s.DeviceID == nil {
		invalidParams.Add(request.NewErrParamRequired("DeviceID"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDeviceID sets the DeviceID field's value.
func (s *DeleteDeviceInput) SetDeviceID(v string) *DeleteDeviceInput {
	s.DeviceID = &v
	return s
}

// SetSpaceID sets the SpaceID field's value.
func (s *DeleteDeviceInput) SetSpaceID(v string) *DeleteDeviceInput {
	s.SpaceID = &v
	return s
}

type DeleteDeviceOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	ID *string `type:"string"`
}

// String returns the string representation
func (s DeleteDeviceOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteDeviceOutput) GoString() string {
	return s.String()
}

// SetID sets the ID field's value.
func (s *DeleteDeviceOutput) SetID(v string) *DeleteDeviceOutput {
	s.ID = &v
	return s
}
