// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package aiotvideo

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opCreateRecordPlanCommon = "CreateRecordPlan"

// CreateRecordPlanCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateRecordPlanCommon operation. The "output" return
// value will be populated with the CreateRecordPlanCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateRecordPlanCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateRecordPlanCommon Send returns without error.
//
// See CreateRecordPlanCommon for more information on using the CreateRecordPlanCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateRecordPlanCommonRequest method.
//    req, resp := client.CreateRecordPlanCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *AIOTVIDEO) CreateRecordPlanCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateRecordPlanCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateRecordPlanCommon API operation for AIOTVIDEO.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for AIOTVIDEO's
// API operation CreateRecordPlanCommon for usage and error information.
func (c *AIOTVIDEO) CreateRecordPlanCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateRecordPlanCommonRequest(input)
	return out, req.Send()
}

// CreateRecordPlanCommonWithContext is the same as CreateRecordPlanCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateRecordPlanCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *AIOTVIDEO) CreateRecordPlanCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateRecordPlanCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateRecordPlan = "CreateRecordPlan"

// CreateRecordPlanRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateRecordPlan operation. The "output" return
// value will be populated with the CreateRecordPlanCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateRecordPlanCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateRecordPlanCommon Send returns without error.
//
// See CreateRecordPlan for more information on using the CreateRecordPlan
// API call, and error handling.
//
//    // Example sending a request using the CreateRecordPlanRequest method.
//    req, resp := client.CreateRecordPlanRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *AIOTVIDEO) CreateRecordPlanRequest(input *CreateRecordPlanInput) (req *request.Request, output *CreateRecordPlanOutput) {
	op := &request.Operation{
		Name:       opCreateRecordPlan,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateRecordPlanInput{}
	}

	output = &CreateRecordPlanOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateRecordPlan API operation for AIOTVIDEO.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for AIOTVIDEO's
// API operation CreateRecordPlan for usage and error information.
func (c *AIOTVIDEO) CreateRecordPlan(input *CreateRecordPlanInput) (*CreateRecordPlanOutput, error) {
	req, out := c.CreateRecordPlanRequest(input)
	return out, req.Send()
}

// CreateRecordPlanWithContext is the same as CreateRecordPlan with the addition of
// the ability to pass a context and additional request options.
//
// See CreateRecordPlan for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *AIOTVIDEO) CreateRecordPlanWithContext(ctx volcengine.Context, input *CreateRecordPlanInput, opts ...request.Option) (*CreateRecordPlanOutput, error) {
	req, out := c.CreateRecordPlanRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type BindChannelsForCreateRecordPlanInput struct {
	_ struct{} `type:"structure" json:",omitempty"`
}

// String returns the string representation
func (s BindChannelsForCreateRecordPlanInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s BindChannelsForCreateRecordPlanInput) GoString() string {
	return s.String()
}

type CreateRecordPlanInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	BindChannels *BindChannelsForCreateRecordPlanInput `type:"structure" json:",omitempty"`

	BindStreams []*string `type:"list" json:",omitempty"`

	// BindTemplate is a required field
	BindTemplate *string `type:"string" json:",omitempty" required:"true"`

	Description *string `type:"string" json:",omitempty"`

	MainStreams []*string `type:"list" json:",omitempty"`

	// PlanName is a required field
	PlanName *string `type:"string" json:",omitempty" required:"true"`

	Resolution *string `type:"string" json:",omitempty"`

	// Status is a required field
	Status *string `type:"string" json:",omitempty" required:"true"`

	StreamingIndex *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s CreateRecordPlanInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateRecordPlanInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateRecordPlanInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CreateRecordPlanInput"}
	if s.BindTemplate == nil {
		invalidParams.Add(request.NewErrParamRequired("BindTemplate"))
	}
	if s.PlanName == nil {
		invalidParams.Add(request.NewErrParamRequired("PlanName"))
	}
	if s.Status == nil {
		invalidParams.Add(request.NewErrParamRequired("Status"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetBindChannels sets the BindChannels field's value.
func (s *CreateRecordPlanInput) SetBindChannels(v *BindChannelsForCreateRecordPlanInput) *CreateRecordPlanInput {
	s.BindChannels = v
	return s
}

// SetBindStreams sets the BindStreams field's value.
func (s *CreateRecordPlanInput) SetBindStreams(v []*string) *CreateRecordPlanInput {
	s.BindStreams = v
	return s
}

// SetBindTemplate sets the BindTemplate field's value.
func (s *CreateRecordPlanInput) SetBindTemplate(v string) *CreateRecordPlanInput {
	s.BindTemplate = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *CreateRecordPlanInput) SetDescription(v string) *CreateRecordPlanInput {
	s.Description = &v
	return s
}

// SetMainStreams sets the MainStreams field's value.
func (s *CreateRecordPlanInput) SetMainStreams(v []*string) *CreateRecordPlanInput {
	s.MainStreams = v
	return s
}

// SetPlanName sets the PlanName field's value.
func (s *CreateRecordPlanInput) SetPlanName(v string) *CreateRecordPlanInput {
	s.PlanName = &v
	return s
}

// SetResolution sets the Resolution field's value.
func (s *CreateRecordPlanInput) SetResolution(v string) *CreateRecordPlanInput {
	s.Resolution = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *CreateRecordPlanInput) SetStatus(v string) *CreateRecordPlanInput {
	s.Status = &v
	return s
}

// SetStreamingIndex sets the StreamingIndex field's value.
func (s *CreateRecordPlanInput) SetStreamingIndex(v int32) *CreateRecordPlanInput {
	s.StreamingIndex = &v
	return s
}

type CreateRecordPlanOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	ID *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s CreateRecordPlanOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateRecordPlanOutput) GoString() string {
	return s.String()
}

// SetID sets the ID field's value.
func (s *CreateRecordPlanOutput) SetID(v string) *CreateRecordPlanOutput {
	s.ID = &v
	return s
}
