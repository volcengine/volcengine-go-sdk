// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package aiotvideo

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opStreamStopRecordCommon = "StreamStopRecord"

// StreamStopRecordCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the StreamStopRecordCommon operation. The "output" return
// value will be populated with the StreamStopRecordCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned StreamStopRecordCommon Request to send the API call to the service.
// the "output" return value is not valid until after StreamStopRecordCommon Send returns without error.
//
// See StreamStopRecordCommon for more information on using the StreamStopRecordCommon
// API call, and error handling.
//
//    // Example sending a request using the StreamStopRecordCommonRequest method.
//    req, resp := client.StreamStopRecordCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *AIOTVIDEO) StreamStopRecordCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opStreamStopRecordCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// StreamStopRecordCommon API operation for AIOTVIDEO.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for AIOTVIDEO's
// API operation StreamStopRecordCommon for usage and error information.
func (c *AIOTVIDEO) StreamStopRecordCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.StreamStopRecordCommonRequest(input)
	return out, req.Send()
}

// StreamStopRecordCommonWithContext is the same as StreamStopRecordCommon with the addition of
// the ability to pass a context and additional request options.
//
// See StreamStopRecordCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *AIOTVIDEO) StreamStopRecordCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.StreamStopRecordCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opStreamStopRecord = "StreamStopRecord"

// StreamStopRecordRequest generates a "volcengine/request.Request" representing the
// client's request for the StreamStopRecord operation. The "output" return
// value will be populated with the StreamStopRecordCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned StreamStopRecordCommon Request to send the API call to the service.
// the "output" return value is not valid until after StreamStopRecordCommon Send returns without error.
//
// See StreamStopRecord for more information on using the StreamStopRecord
// API call, and error handling.
//
//    // Example sending a request using the StreamStopRecordRequest method.
//    req, resp := client.StreamStopRecordRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *AIOTVIDEO) StreamStopRecordRequest(input *StreamStopRecordInput) (req *request.Request, output *StreamStopRecordOutput) {
	op := &request.Operation{
		Name:       opStreamStopRecord,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &StreamStopRecordInput{}
	}

	output = &StreamStopRecordOutput{}
	req = c.newRequest(op, input, output)

	return
}

// StreamStopRecord API operation for AIOTVIDEO.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for AIOTVIDEO's
// API operation StreamStopRecord for usage and error information.
func (c *AIOTVIDEO) StreamStopRecord(input *StreamStopRecordInput) (*StreamStopRecordOutput, error) {
	req, out := c.StreamStopRecordRequest(input)
	return out, req.Send()
}

// StreamStopRecordWithContext is the same as StreamStopRecord with the addition of
// the ability to pass a context and additional request options.
//
// See StreamStopRecord for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *AIOTVIDEO) StreamStopRecordWithContext(ctx volcengine.Context, input *StreamStopRecordInput, opts ...request.Option) (*StreamStopRecordOutput, error) {
	req, out := c.StreamStopRecordRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type StreamStopRecordInput struct {
	_ struct{} `type:"structure"`

	// RecordID is a required field
	RecordID *string `type:"string" required:"true"`
}

// String returns the string representation
func (s StreamStopRecordInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s StreamStopRecordInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *StreamStopRecordInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "StreamStopRecordInput"}
	if s.RecordID == nil {
		invalidParams.Add(request.NewErrParamRequired("RecordID"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetRecordID sets the RecordID field's value.
func (s *StreamStopRecordInput) SetRecordID(v string) *StreamStopRecordInput {
	s.RecordID = &v
	return s
}

type StreamStopRecordOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s StreamStopRecordOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s StreamStopRecordOutput) GoString() string {
	return s.String()
}
