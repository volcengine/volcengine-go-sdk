// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package aiotvideo

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opSetStreamTemplateCommon = "SetStreamTemplate"

// SetStreamTemplateCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the SetStreamTemplateCommon operation. The "output" return
// value will be populated with the SetStreamTemplateCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned SetStreamTemplateCommon Request to send the API call to the service.
// the "output" return value is not valid until after SetStreamTemplateCommon Send returns without error.
//
// See SetStreamTemplateCommon for more information on using the SetStreamTemplateCommon
// API call, and error handling.
//
//    // Example sending a request using the SetStreamTemplateCommonRequest method.
//    req, resp := client.SetStreamTemplateCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *AIOTVIDEO) SetStreamTemplateCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opSetStreamTemplateCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// SetStreamTemplateCommon API operation for AIOTVIDEO.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for AIOTVIDEO's
// API operation SetStreamTemplateCommon for usage and error information.
func (c *AIOTVIDEO) SetStreamTemplateCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.SetStreamTemplateCommonRequest(input)
	return out, req.Send()
}

// SetStreamTemplateCommonWithContext is the same as SetStreamTemplateCommon with the addition of
// the ability to pass a context and additional request options.
//
// See SetStreamTemplateCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *AIOTVIDEO) SetStreamTemplateCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.SetStreamTemplateCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opSetStreamTemplate = "SetStreamTemplate"

// SetStreamTemplateRequest generates a "volcengine/request.Request" representing the
// client's request for the SetStreamTemplate operation. The "output" return
// value will be populated with the SetStreamTemplateCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned SetStreamTemplateCommon Request to send the API call to the service.
// the "output" return value is not valid until after SetStreamTemplateCommon Send returns without error.
//
// See SetStreamTemplate for more information on using the SetStreamTemplate
// API call, and error handling.
//
//    // Example sending a request using the SetStreamTemplateRequest method.
//    req, resp := client.SetStreamTemplateRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *AIOTVIDEO) SetStreamTemplateRequest(input *SetStreamTemplateInput) (req *request.Request, output *SetStreamTemplateOutput) {
	op := &request.Operation{
		Name:       opSetStreamTemplate,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &SetStreamTemplateInput{}
	}

	output = &SetStreamTemplateOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// SetStreamTemplate API operation for AIOTVIDEO.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for AIOTVIDEO's
// API operation SetStreamTemplate for usage and error information.
func (c *AIOTVIDEO) SetStreamTemplate(input *SetStreamTemplateInput) (*SetStreamTemplateOutput, error) {
	req, out := c.SetStreamTemplateRequest(input)
	return out, req.Send()
}

// SetStreamTemplateWithContext is the same as SetStreamTemplate with the addition of
// the ability to pass a context and additional request options.
//
// See SetStreamTemplate for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *AIOTVIDEO) SetStreamTemplateWithContext(ctx volcengine.Context, input *SetStreamTemplateInput, opts ...request.Option) (*SetStreamTemplateOutput, error) {
	req, out := c.SetStreamTemplateRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type SetStreamTemplateInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	SpaceID *string `type:"string" json:",omitempty"`

	// StreamID is a required field
	StreamID *string `type:"string" json:",omitempty" required:"true"`

	// TemplateID is a required field
	TemplateID *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s SetStreamTemplateInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s SetStreamTemplateInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *SetStreamTemplateInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "SetStreamTemplateInput"}
	if s.StreamID == nil {
		invalidParams.Add(request.NewErrParamRequired("StreamID"))
	}
	if s.TemplateID == nil {
		invalidParams.Add(request.NewErrParamRequired("TemplateID"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetSpaceID sets the SpaceID field's value.
func (s *SetStreamTemplateInput) SetSpaceID(v string) *SetStreamTemplateInput {
	s.SpaceID = &v
	return s
}

// SetStreamID sets the StreamID field's value.
func (s *SetStreamTemplateInput) SetStreamID(v string) *SetStreamTemplateInput {
	s.StreamID = &v
	return s
}

// SetTemplateID sets the TemplateID field's value.
func (s *SetStreamTemplateInput) SetTemplateID(v string) *SetStreamTemplateInput {
	s.TemplateID = &v
	return s
}

type SetStreamTemplateOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s SetStreamTemplateOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s SetStreamTemplateOutput) GoString() string {
	return s.String()
}
