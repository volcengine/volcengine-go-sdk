// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package aiotvideo

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opGetStreamRecordCommon = "GetStreamRecord"

// GetStreamRecordCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the GetStreamRecordCommon operation. The "output" return
// value will be populated with the GetStreamRecordCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetStreamRecordCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetStreamRecordCommon Send returns without error.
//
// See GetStreamRecordCommon for more information on using the GetStreamRecordCommon
// API call, and error handling.
//
//    // Example sending a request using the GetStreamRecordCommonRequest method.
//    req, resp := client.GetStreamRecordCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *AIOTVIDEO) GetStreamRecordCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opGetStreamRecordCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// GetStreamRecordCommon API operation for AIOTVIDEO.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for AIOTVIDEO's
// API operation GetStreamRecordCommon for usage and error information.
func (c *AIOTVIDEO) GetStreamRecordCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.GetStreamRecordCommonRequest(input)
	return out, req.Send()
}

// GetStreamRecordCommonWithContext is the same as GetStreamRecordCommon with the addition of
// the ability to pass a context and additional request options.
//
// See GetStreamRecordCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *AIOTVIDEO) GetStreamRecordCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.GetStreamRecordCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opGetStreamRecord = "GetStreamRecord"

// GetStreamRecordRequest generates a "volcengine/request.Request" representing the
// client's request for the GetStreamRecord operation. The "output" return
// value will be populated with the GetStreamRecordCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetStreamRecordCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetStreamRecordCommon Send returns without error.
//
// See GetStreamRecord for more information on using the GetStreamRecord
// API call, and error handling.
//
//    // Example sending a request using the GetStreamRecordRequest method.
//    req, resp := client.GetStreamRecordRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *AIOTVIDEO) GetStreamRecordRequest(input *GetStreamRecordInput) (req *request.Request, output *GetStreamRecordOutput) {
	op := &request.Operation{
		Name:       opGetStreamRecord,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &GetStreamRecordInput{}
	}

	output = &GetStreamRecordOutput{}
	req = c.newRequest(op, input, output)

	return
}

// GetStreamRecord API operation for AIOTVIDEO.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for AIOTVIDEO's
// API operation GetStreamRecord for usage and error information.
func (c *AIOTVIDEO) GetStreamRecord(input *GetStreamRecordInput) (*GetStreamRecordOutput, error) {
	req, out := c.GetStreamRecordRequest(input)
	return out, req.Send()
}

// GetStreamRecordWithContext is the same as GetStreamRecord with the addition of
// the ability to pass a context and additional request options.
//
// See GetStreamRecord for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *AIOTVIDEO) GetStreamRecordWithContext(ctx volcengine.Context, input *GetStreamRecordInput, opts ...request.Option) (*GetStreamRecordOutput, error) {
	req, out := c.GetStreamRecordRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ExtraForGetStreamRecordOutput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s ExtraForGetStreamRecordOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ExtraForGetStreamRecordOutput) GoString() string {
	return s.String()
}

type GetStreamRecordInput struct {
	_ struct{} `type:"structure"`

	// RecordID is a required field
	RecordID *string `type:"string" required:"true"`
}

// String returns the string representation
func (s GetStreamRecordInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetStreamRecordInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *GetStreamRecordInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "GetStreamRecordInput"}
	if s.RecordID == nil {
		invalidParams.Add(request.NewErrParamRequired("RecordID"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetRecordID sets the RecordID field's value.
func (s *GetStreamRecordInput) SetRecordID(v string) *GetStreamRecordInput {
	s.RecordID = &v
	return s
}

type GetStreamRecordOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	CreatedAt *int32 `type:"int32"`

	ID *string `type:"string"`

	Msg *string `type:"string"`

	Res *ResForGetStreamRecordOutput `type:"structure"`

	Status *string `type:"string"`

	StoppedAt *int32 `type:"int32"`

	UpdatedAt *int32 `type:"int32"`
}

// String returns the string representation
func (s GetStreamRecordOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetStreamRecordOutput) GoString() string {
	return s.String()
}

// SetCreatedAt sets the CreatedAt field's value.
func (s *GetStreamRecordOutput) SetCreatedAt(v int32) *GetStreamRecordOutput {
	s.CreatedAt = &v
	return s
}

// SetID sets the ID field's value.
func (s *GetStreamRecordOutput) SetID(v string) *GetStreamRecordOutput {
	s.ID = &v
	return s
}

// SetMsg sets the Msg field's value.
func (s *GetStreamRecordOutput) SetMsg(v string) *GetStreamRecordOutput {
	s.Msg = &v
	return s
}

// SetRes sets the Res field's value.
func (s *GetStreamRecordOutput) SetRes(v *ResForGetStreamRecordOutput) *GetStreamRecordOutput {
	s.Res = v
	return s
}

// SetStatus sets the Status field's value.
func (s *GetStreamRecordOutput) SetStatus(v string) *GetStreamRecordOutput {
	s.Status = &v
	return s
}

// SetStoppedAt sets the StoppedAt field's value.
func (s *GetStreamRecordOutput) SetStoppedAt(v int32) *GetStreamRecordOutput {
	s.StoppedAt = &v
	return s
}

// SetUpdatedAt sets the UpdatedAt field's value.
func (s *GetStreamRecordOutput) SetUpdatedAt(v int32) *GetStreamRecordOutput {
	s.UpdatedAt = &v
	return s
}

type ResForGetStreamRecordOutput struct {
	_ struct{} `type:"structure"`

	Extra *ExtraForGetStreamRecordOutput `type:"structure"`

	RemuxUrl *string `type:"string"`

	Url *string `type:"string"`
}

// String returns the string representation
func (s ResForGetStreamRecordOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ResForGetStreamRecordOutput) GoString() string {
	return s.String()
}

// SetExtra sets the Extra field's value.
func (s *ResForGetStreamRecordOutput) SetExtra(v *ExtraForGetStreamRecordOutput) *ResForGetStreamRecordOutput {
	s.Extra = v
	return s
}

// SetRemuxUrl sets the RemuxUrl field's value.
func (s *ResForGetStreamRecordOutput) SetRemuxUrl(v string) *ResForGetStreamRecordOutput {
	s.RemuxUrl = &v
	return s
}

// SetUrl sets the Url field's value.
func (s *ResForGetStreamRecordOutput) SetUrl(v string) *ResForGetStreamRecordOutput {
	s.Url = &v
	return s
}
