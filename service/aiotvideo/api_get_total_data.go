// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package aiotvideo

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opGetTotalDataCommon = "GetTotalData"

// GetTotalDataCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the GetTotalDataCommon operation. The "output" return
// value will be populated with the GetTotalDataCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetTotalDataCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetTotalDataCommon Send returns without error.
//
// See GetTotalDataCommon for more information on using the GetTotalDataCommon
// API call, and error handling.
//
//    // Example sending a request using the GetTotalDataCommonRequest method.
//    req, resp := client.GetTotalDataCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *AIOTVIDEO) GetTotalDataCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opGetTotalDataCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// GetTotalDataCommon API operation for AIOTVIDEO.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for AIOTVIDEO's
// API operation GetTotalDataCommon for usage and error information.
func (c *AIOTVIDEO) GetTotalDataCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.GetTotalDataCommonRequest(input)
	return out, req.Send()
}

// GetTotalDataCommonWithContext is the same as GetTotalDataCommon with the addition of
// the ability to pass a context and additional request options.
//
// See GetTotalDataCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *AIOTVIDEO) GetTotalDataCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.GetTotalDataCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opGetTotalData = "GetTotalData"

// GetTotalDataRequest generates a "volcengine/request.Request" representing the
// client's request for the GetTotalData operation. The "output" return
// value will be populated with the GetTotalDataCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetTotalDataCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetTotalDataCommon Send returns without error.
//
// See GetTotalData for more information on using the GetTotalData
// API call, and error handling.
//
//    // Example sending a request using the GetTotalDataRequest method.
//    req, resp := client.GetTotalDataRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *AIOTVIDEO) GetTotalDataRequest(input *GetTotalDataInput) (req *request.Request, output *GetTotalDataOutput) {
	op := &request.Operation{
		Name:       opGetTotalData,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &GetTotalDataInput{}
	}

	output = &GetTotalDataOutput{}
	req = c.newRequest(op, input, output)

	return
}

// GetTotalData API operation for AIOTVIDEO.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for AIOTVIDEO's
// API operation GetTotalData for usage and error information.
func (c *AIOTVIDEO) GetTotalData(input *GetTotalDataInput) (*GetTotalDataOutput, error) {
	req, out := c.GetTotalDataRequest(input)
	return out, req.Send()
}

// GetTotalDataWithContext is the same as GetTotalData with the addition of
// the ability to pass a context and additional request options.
//
// See GetTotalData for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *AIOTVIDEO) GetTotalDataWithContext(ctx volcengine.Context, input *GetTotalDataInput, opts ...request.Option) (*GetTotalDataOutput, error) {
	req, out := c.GetTotalDataRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type GetTotalDataInput struct {
	_ struct{} `type:"structure"`

	// Time is a required field
	Time *string `type:"string" required:"true"`
}

// String returns the string representation
func (s GetTotalDataInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetTotalDataInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *GetTotalDataInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "GetTotalDataInput"}
	if s.Time == nil {
		invalidParams.Add(request.NewErrParamRequired("Time"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetTime sets the Time field's value.
func (s *GetTotalDataInput) SetTime(v string) *GetTotalDataInput {
	s.Time = &v
	return s
}

type GetTotalDataOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	DownChainGrowth *string `type:"string"`

	MaxDown *float64 `type:"float"`

	MaxUp *float64 `type:"float"`

	UpChainGrowth *string `type:"string"`
}

// String returns the string representation
func (s GetTotalDataOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetTotalDataOutput) GoString() string {
	return s.String()
}

// SetDownChainGrowth sets the DownChainGrowth field's value.
func (s *GetTotalDataOutput) SetDownChainGrowth(v string) *GetTotalDataOutput {
	s.DownChainGrowth = &v
	return s
}

// SetMaxDown sets the MaxDown field's value.
func (s *GetTotalDataOutput) SetMaxDown(v float64) *GetTotalDataOutput {
	s.MaxDown = &v
	return s
}

// SetMaxUp sets the MaxUp field's value.
func (s *GetTotalDataOutput) SetMaxUp(v float64) *GetTotalDataOutput {
	s.MaxUp = &v
	return s
}

// SetUpChainGrowth sets the UpChainGrowth field's value.
func (s *GetTotalDataOutput) SetUpChainGrowth(v string) *GetTotalDataOutput {
	s.UpChainGrowth = &v
	return s
}
