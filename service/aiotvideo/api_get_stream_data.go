// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package aiotvideo

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opGetStreamDataCommon = "GetStreamData"

// GetStreamDataCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the GetStreamDataCommon operation. The "output" return
// value will be populated with the GetStreamDataCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetStreamDataCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetStreamDataCommon Send returns without error.
//
// See GetStreamDataCommon for more information on using the GetStreamDataCommon
// API call, and error handling.
//
//    // Example sending a request using the GetStreamDataCommonRequest method.
//    req, resp := client.GetStreamDataCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *AIOTVIDEO) GetStreamDataCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opGetStreamDataCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetStreamDataCommon API operation for AIOTVIDEO.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for AIOTVIDEO's
// API operation GetStreamDataCommon for usage and error information.
func (c *AIOTVIDEO) GetStreamDataCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.GetStreamDataCommonRequest(input)
	return out, req.Send()
}

// GetStreamDataCommonWithContext is the same as GetStreamDataCommon with the addition of
// the ability to pass a context and additional request options.
//
// See GetStreamDataCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *AIOTVIDEO) GetStreamDataCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.GetStreamDataCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opGetStreamData = "GetStreamData"

// GetStreamDataRequest generates a "volcengine/request.Request" representing the
// client's request for the GetStreamData operation. The "output" return
// value will be populated with the GetStreamDataCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetStreamDataCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetStreamDataCommon Send returns without error.
//
// See GetStreamData for more information on using the GetStreamData
// API call, and error handling.
//
//    // Example sending a request using the GetStreamDataRequest method.
//    req, resp := client.GetStreamDataRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *AIOTVIDEO) GetStreamDataRequest(input *GetStreamDataInput) (req *request.Request, output *GetStreamDataOutput) {
	op := &request.Operation{
		Name:       opGetStreamData,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &GetStreamDataInput{}
	}

	output = &GetStreamDataOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetStreamData API operation for AIOTVIDEO.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for AIOTVIDEO's
// API operation GetStreamData for usage and error information.
func (c *AIOTVIDEO) GetStreamData(input *GetStreamDataInput) (*GetStreamDataOutput, error) {
	req, out := c.GetStreamDataRequest(input)
	return out, req.Send()
}

// GetStreamDataWithContext is the same as GetStreamData with the addition of
// the ability to pass a context and additional request options.
//
// See GetStreamData for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *AIOTVIDEO) GetStreamDataWithContext(ctx volcengine.Context, input *GetStreamDataInput, opts ...request.Option) (*GetStreamDataOutput, error) {
	req, out := c.GetStreamDataRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type BAudioForGetStreamDataOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	TimeStamp *string `type:"string" json:",omitempty"`

	Value *float64 `type:"float" json:",omitempty"`
}

// String returns the string representation
func (s BAudioForGetStreamDataOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s BAudioForGetStreamDataOutput) GoString() string {
	return s.String()
}

// SetTimeStamp sets the TimeStamp field's value.
func (s *BAudioForGetStreamDataOutput) SetTimeStamp(v string) *BAudioForGetStreamDataOutput {
	s.TimeStamp = &v
	return s
}

// SetValue sets the Value field's value.
func (s *BAudioForGetStreamDataOutput) SetValue(v float64) *BAudioForGetStreamDataOutput {
	s.Value = &v
	return s
}

type BVideoForGetStreamDataOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	TimeStamp *string `type:"string" json:",omitempty"`

	Value *float64 `type:"float" json:",omitempty"`
}

// String returns the string representation
func (s BVideoForGetStreamDataOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s BVideoForGetStreamDataOutput) GoString() string {
	return s.String()
}

// SetTimeStamp sets the TimeStamp field's value.
func (s *BVideoForGetStreamDataOutput) SetTimeStamp(v string) *BVideoForGetStreamDataOutput {
	s.TimeStamp = &v
	return s
}

// SetValue sets the Value field's value.
func (s *BVideoForGetStreamDataOutput) SetValue(v float64) *BVideoForGetStreamDataOutput {
	s.Value = &v
	return s
}

type FPForGetStreamDataOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	TimeStamp *string `type:"string" json:",omitempty"`

	Value *float64 `type:"float" json:",omitempty"`
}

// String returns the string representation
func (s FPForGetStreamDataOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s FPForGetStreamDataOutput) GoString() string {
	return s.String()
}

// SetTimeStamp sets the TimeStamp field's value.
func (s *FPForGetStreamDataOutput) SetTimeStamp(v string) *FPForGetStreamDataOutput {
	s.TimeStamp = &v
	return s
}

// SetValue sets the Value field's value.
func (s *FPForGetStreamDataOutput) SetValue(v float64) *FPForGetStreamDataOutput {
	s.Value = &v
	return s
}

type FrameForGetStreamDataOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	TimeStamp *string `type:"string" json:",omitempty"`

	Value *float64 `type:"float" json:",omitempty"`
}

// String returns the string representation
func (s FrameForGetStreamDataOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s FrameForGetStreamDataOutput) GoString() string {
	return s.String()
}

// SetTimeStamp sets the TimeStamp field's value.
func (s *FrameForGetStreamDataOutput) SetTimeStamp(v string) *FrameForGetStreamDataOutput {
	s.TimeStamp = &v
	return s
}

// SetValue sets the Value field's value.
func (s *FrameForGetStreamDataOutput) SetValue(v float64) *FrameForGetStreamDataOutput {
	s.Value = &v
	return s
}

type GetStreamDataInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// EndTime is a required field
	EndTime *int32 `type:"int32" json:",omitempty" required:"true"`

	Resolution *string `type:"string" json:",omitempty"`

	SpaceID *string `type:"string" json:",omitempty"`

	// StartTime is a required field
	StartTime *int32 `type:"int32" json:",omitempty" required:"true"`

	// StreamID is a required field
	StreamID *string `type:"string" json:",omitempty" required:"true"`

	StreamingIndex *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s GetStreamDataInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetStreamDataInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *GetStreamDataInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "GetStreamDataInput"}
	if s.EndTime == nil {
		invalidParams.Add(request.NewErrParamRequired("EndTime"))
	}
	if s.StartTime == nil {
		invalidParams.Add(request.NewErrParamRequired("StartTime"))
	}
	if s.StreamID == nil {
		invalidParams.Add(request.NewErrParamRequired("StreamID"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetEndTime sets the EndTime field's value.
func (s *GetStreamDataInput) SetEndTime(v int32) *GetStreamDataInput {
	s.EndTime = &v
	return s
}

// SetResolution sets the Resolution field's value.
func (s *GetStreamDataInput) SetResolution(v string) *GetStreamDataInput {
	s.Resolution = &v
	return s
}

// SetSpaceID sets the SpaceID field's value.
func (s *GetStreamDataInput) SetSpaceID(v string) *GetStreamDataInput {
	s.SpaceID = &v
	return s
}

// SetStartTime sets the StartTime field's value.
func (s *GetStreamDataInput) SetStartTime(v int32) *GetStreamDataInput {
	s.StartTime = &v
	return s
}

// SetStreamID sets the StreamID field's value.
func (s *GetStreamDataInput) SetStreamID(v string) *GetStreamDataInput {
	s.StreamID = &v
	return s
}

// SetStreamingIndex sets the StreamingIndex field's value.
func (s *GetStreamDataInput) SetStreamingIndex(v int32) *GetStreamDataInput {
	s.StreamingIndex = &v
	return s
}

type GetStreamDataOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	BAudio []*BAudioForGetStreamDataOutput `type:"list" json:",omitempty"`

	BVideo []*BVideoForGetStreamDataOutput `type:"list" json:",omitempty"`

	FPS []*FPForGetStreamDataOutput `type:"list" json:",omitempty"`

	Frame []*FrameForGetStreamDataOutput `type:"list" json:",omitempty"`

	Height *int32 `type:"int32" json:",omitempty"`

	VCodec *string `type:"string" json:",omitempty"`

	Width *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s GetStreamDataOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetStreamDataOutput) GoString() string {
	return s.String()
}

// SetBAudio sets the BAudio field's value.
func (s *GetStreamDataOutput) SetBAudio(v []*BAudioForGetStreamDataOutput) *GetStreamDataOutput {
	s.BAudio = v
	return s
}

// SetBVideo sets the BVideo field's value.
func (s *GetStreamDataOutput) SetBVideo(v []*BVideoForGetStreamDataOutput) *GetStreamDataOutput {
	s.BVideo = v
	return s
}

// SetFPS sets the FPS field's value.
func (s *GetStreamDataOutput) SetFPS(v []*FPForGetStreamDataOutput) *GetStreamDataOutput {
	s.FPS = v
	return s
}

// SetFrame sets the Frame field's value.
func (s *GetStreamDataOutput) SetFrame(v []*FrameForGetStreamDataOutput) *GetStreamDataOutput {
	s.Frame = v
	return s
}

// SetHeight sets the Height field's value.
func (s *GetStreamDataOutput) SetHeight(v int32) *GetStreamDataOutput {
	s.Height = &v
	return s
}

// SetVCodec sets the VCodec field's value.
func (s *GetStreamDataOutput) SetVCodec(v string) *GetStreamDataOutput {
	s.VCodec = &v
	return s
}

// SetWidth sets the Width field's value.
func (s *GetStreamDataOutput) SetWidth(v int32) *GetStreamDataOutput {
	s.Width = &v
	return s
}
