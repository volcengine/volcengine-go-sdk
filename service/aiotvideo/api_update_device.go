// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package aiotvideo

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opUpdateDeviceCommon = "UpdateDevice"

// UpdateDeviceCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateDeviceCommon operation. The "output" return
// value will be populated with the UpdateDeviceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateDeviceCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateDeviceCommon Send returns without error.
//
// See UpdateDeviceCommon for more information on using the UpdateDeviceCommon
// API call, and error handling.
//
//    // Example sending a request using the UpdateDeviceCommonRequest method.
//    req, resp := client.UpdateDeviceCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *AIOTVIDEO) UpdateDeviceCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opUpdateDeviceCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateDeviceCommon API operation for AIOTVIDEO.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for AIOTVIDEO's
// API operation UpdateDeviceCommon for usage and error information.
func (c *AIOTVIDEO) UpdateDeviceCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.UpdateDeviceCommonRequest(input)
	return out, req.Send()
}

// UpdateDeviceCommonWithContext is the same as UpdateDeviceCommon with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateDeviceCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *AIOTVIDEO) UpdateDeviceCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.UpdateDeviceCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opUpdateDevice = "UpdateDevice"

// UpdateDeviceRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateDevice operation. The "output" return
// value will be populated with the UpdateDeviceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateDeviceCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateDeviceCommon Send returns without error.
//
// See UpdateDevice for more information on using the UpdateDevice
// API call, and error handling.
//
//    // Example sending a request using the UpdateDeviceRequest method.
//    req, resp := client.UpdateDeviceRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *AIOTVIDEO) UpdateDeviceRequest(input *UpdateDeviceInput) (req *request.Request, output *UpdateDeviceOutput) {
	op := &request.Operation{
		Name:       opUpdateDevice,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UpdateDeviceInput{}
	}

	output = &UpdateDeviceOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateDevice API operation for AIOTVIDEO.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for AIOTVIDEO's
// API operation UpdateDevice for usage and error information.
func (c *AIOTVIDEO) UpdateDevice(input *UpdateDeviceInput) (*UpdateDeviceOutput, error) {
	req, out := c.UpdateDeviceRequest(input)
	return out, req.Send()
}

// UpdateDeviceWithContext is the same as UpdateDevice with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateDevice for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *AIOTVIDEO) UpdateDeviceWithContext(ctx volcengine.Context, input *UpdateDeviceInput, opts ...request.Option) (*UpdateDeviceOutput, error) {
	req, out := c.UpdateDeviceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type AlertNotificationForUpdateDeviceInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Device *bool `type:"boolean" json:",omitempty"`

	DeviceFault *bool `type:"boolean" json:",omitempty"`

	Enabled *bool `type:"boolean" json:",omitempty"`

	GPS *bool `type:"boolean" json:",omitempty"`

	Other *bool `type:"boolean" json:",omitempty"`

	Phone *bool `type:"boolean" json:",omitempty"`

	SMS *bool `type:"boolean" json:",omitempty"`

	Video *bool `type:"boolean" json:",omitempty"`
}

// String returns the string representation
func (s AlertNotificationForUpdateDeviceInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s AlertNotificationForUpdateDeviceInput) GoString() string {
	return s.String()
}

// SetDevice sets the Device field's value.
func (s *AlertNotificationForUpdateDeviceInput) SetDevice(v bool) *AlertNotificationForUpdateDeviceInput {
	s.Device = &v
	return s
}

// SetDeviceFault sets the DeviceFault field's value.
func (s *AlertNotificationForUpdateDeviceInput) SetDeviceFault(v bool) *AlertNotificationForUpdateDeviceInput {
	s.DeviceFault = &v
	return s
}

// SetEnabled sets the Enabled field's value.
func (s *AlertNotificationForUpdateDeviceInput) SetEnabled(v bool) *AlertNotificationForUpdateDeviceInput {
	s.Enabled = &v
	return s
}

// SetGPS sets the GPS field's value.
func (s *AlertNotificationForUpdateDeviceInput) SetGPS(v bool) *AlertNotificationForUpdateDeviceInput {
	s.GPS = &v
	return s
}

// SetOther sets the Other field's value.
func (s *AlertNotificationForUpdateDeviceInput) SetOther(v bool) *AlertNotificationForUpdateDeviceInput {
	s.Other = &v
	return s
}

// SetPhone sets the Phone field's value.
func (s *AlertNotificationForUpdateDeviceInput) SetPhone(v bool) *AlertNotificationForUpdateDeviceInput {
	s.Phone = &v
	return s
}

// SetSMS sets the SMS field's value.
func (s *AlertNotificationForUpdateDeviceInput) SetSMS(v bool) *AlertNotificationForUpdateDeviceInput {
	s.SMS = &v
	return s
}

// SetVideo sets the Video field's value.
func (s *AlertNotificationForUpdateDeviceInput) SetVideo(v bool) *AlertNotificationForUpdateDeviceInput {
	s.Video = &v
	return s
}

type UpdateDeviceInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	AlertNotification *AlertNotificationForUpdateDeviceInput `type:"structure" json:",omitempty"`

	AutoPullAfterRegister *bool `type:"boolean" json:",omitempty"`

	Description *string `type:"string" json:",omitempty"`

	// DeviceID is a required field
	DeviceID *string `type:"string" json:",omitempty" required:"true"`

	DeviceNSID *string `type:"string" json:",omitempty"`

	DeviceName *string `type:"string" json:",omitempty"`

	Password *string `type:"string" json:",omitempty"`

	SpaceID *string `type:"string" json:",omitempty"`

	UseSubStream *bool `type:"boolean" json:",omitempty"`

	Username *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s UpdateDeviceInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateDeviceInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UpdateDeviceInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "UpdateDeviceInput"}
	if s.DeviceID == nil {
		invalidParams.Add(request.NewErrParamRequired("DeviceID"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAlertNotification sets the AlertNotification field's value.
func (s *UpdateDeviceInput) SetAlertNotification(v *AlertNotificationForUpdateDeviceInput) *UpdateDeviceInput {
	s.AlertNotification = v
	return s
}

// SetAutoPullAfterRegister sets the AutoPullAfterRegister field's value.
func (s *UpdateDeviceInput) SetAutoPullAfterRegister(v bool) *UpdateDeviceInput {
	s.AutoPullAfterRegister = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *UpdateDeviceInput) SetDescription(v string) *UpdateDeviceInput {
	s.Description = &v
	return s
}

// SetDeviceID sets the DeviceID field's value.
func (s *UpdateDeviceInput) SetDeviceID(v string) *UpdateDeviceInput {
	s.DeviceID = &v
	return s
}

// SetDeviceNSID sets the DeviceNSID field's value.
func (s *UpdateDeviceInput) SetDeviceNSID(v string) *UpdateDeviceInput {
	s.DeviceNSID = &v
	return s
}

// SetDeviceName sets the DeviceName field's value.
func (s *UpdateDeviceInput) SetDeviceName(v string) *UpdateDeviceInput {
	s.DeviceName = &v
	return s
}

// SetPassword sets the Password field's value.
func (s *UpdateDeviceInput) SetPassword(v string) *UpdateDeviceInput {
	s.Password = &v
	return s
}

// SetSpaceID sets the SpaceID field's value.
func (s *UpdateDeviceInput) SetSpaceID(v string) *UpdateDeviceInput {
	s.SpaceID = &v
	return s
}

// SetUseSubStream sets the UseSubStream field's value.
func (s *UpdateDeviceInput) SetUseSubStream(v bool) *UpdateDeviceInput {
	s.UseSubStream = &v
	return s
}

// SetUsername sets the Username field's value.
func (s *UpdateDeviceInput) SetUsername(v string) *UpdateDeviceInput {
	s.Username = &v
	return s
}

type UpdateDeviceOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	ID *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s UpdateDeviceOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateDeviceOutput) GoString() string {
	return s.String()
}

// SetID sets the ID field's value.
func (s *UpdateDeviceOutput) SetID(v string) *UpdateDeviceOutput {
	s.ID = &v
	return s
}
