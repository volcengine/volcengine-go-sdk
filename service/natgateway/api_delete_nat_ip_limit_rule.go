// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package natgateway

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDeleteNatIpLimitRuleCommon = "DeleteNatIpLimitRule"

// DeleteNatIpLimitRuleCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteNatIpLimitRuleCommon operation. The "output" return
// value will be populated with the DeleteNatIpLimitRuleCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteNatIpLimitRuleCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteNatIpLimitRuleCommon Send returns without error.
//
// See DeleteNatIpLimitRuleCommon for more information on using the DeleteNatIpLimitRuleCommon
// API call, and error handling.
//
//    // Example sending a request using the DeleteNatIpLimitRuleCommonRequest method.
//    req, resp := client.DeleteNatIpLimitRuleCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *NATGATEWAY) DeleteNatIpLimitRuleCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteNatIpLimitRuleCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteNatIpLimitRuleCommon API operation for NATGATEWAY.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for NATGATEWAY's
// API operation DeleteNatIpLimitRuleCommon for usage and error information.
func (c *NATGATEWAY) DeleteNatIpLimitRuleCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteNatIpLimitRuleCommonRequest(input)
	return out, req.Send()
}

// DeleteNatIpLimitRuleCommonWithContext is the same as DeleteNatIpLimitRuleCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteNatIpLimitRuleCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *NATGATEWAY) DeleteNatIpLimitRuleCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteNatIpLimitRuleCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteNatIpLimitRule = "DeleteNatIpLimitRule"

// DeleteNatIpLimitRuleRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteNatIpLimitRule operation. The "output" return
// value will be populated with the DeleteNatIpLimitRuleCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteNatIpLimitRuleCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteNatIpLimitRuleCommon Send returns without error.
//
// See DeleteNatIpLimitRule for more information on using the DeleteNatIpLimitRule
// API call, and error handling.
//
//    // Example sending a request using the DeleteNatIpLimitRuleRequest method.
//    req, resp := client.DeleteNatIpLimitRuleRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *NATGATEWAY) DeleteNatIpLimitRuleRequest(input *DeleteNatIpLimitRuleInput) (req *request.Request, output *DeleteNatIpLimitRuleOutput) {
	op := &request.Operation{
		Name:       opDeleteNatIpLimitRule,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteNatIpLimitRuleInput{}
	}

	output = &DeleteNatIpLimitRuleOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteNatIpLimitRule API operation for NATGATEWAY.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for NATGATEWAY's
// API operation DeleteNatIpLimitRule for usage and error information.
func (c *NATGATEWAY) DeleteNatIpLimitRule(input *DeleteNatIpLimitRuleInput) (*DeleteNatIpLimitRuleOutput, error) {
	req, out := c.DeleteNatIpLimitRuleRequest(input)
	return out, req.Send()
}

// DeleteNatIpLimitRuleWithContext is the same as DeleteNatIpLimitRule with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteNatIpLimitRule for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *NATGATEWAY) DeleteNatIpLimitRuleWithContext(ctx volcengine.Context, input *DeleteNatIpLimitRuleInput, opts ...request.Option) (*DeleteNatIpLimitRuleOutput, error) {
	req, out := c.DeleteNatIpLimitRuleRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DeleteNatIpLimitRuleInput struct {
	_ struct{} `type:"structure"`

	// LimitRuleId is a required field
	LimitRuleId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s DeleteNatIpLimitRuleInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteNatIpLimitRuleInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeleteNatIpLimitRuleInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DeleteNatIpLimitRuleInput"}
	if s.LimitRuleId == nil {
		invalidParams.Add(request.NewErrParamRequired("LimitRuleId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetLimitRuleId sets the LimitRuleId field's value.
func (s *DeleteNatIpLimitRuleInput) SetLimitRuleId(v string) *DeleteNatIpLimitRuleInput {
	s.LimitRuleId = &v
	return s
}

type DeleteNatIpLimitRuleOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	RequestId *string `type:"string"`
}

// String returns the string representation
func (s DeleteNatIpLimitRuleOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteNatIpLimitRuleOutput) GoString() string {
	return s.String()
}

// SetRequestId sets the RequestId field's value.
func (s *DeleteNatIpLimitRuleOutput) SetRequestId(v string) *DeleteNatIpLimitRuleOutput {
	s.RequestId = &v
	return s
}
