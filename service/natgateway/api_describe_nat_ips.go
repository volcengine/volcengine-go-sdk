// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package natgateway

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDescribeNatIpsCommon = "DescribeNatIps"

// DescribeNatIpsCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeNatIpsCommon operation. The "output" return
// value will be populated with the DescribeNatIpsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeNatIpsCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeNatIpsCommon Send returns without error.
//
// See DescribeNatIpsCommon for more information on using the DescribeNatIpsCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeNatIpsCommonRequest method.
//    req, resp := client.DescribeNatIpsCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *NATGATEWAY) DescribeNatIpsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeNatIpsCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeNatIpsCommon API operation for NATGATEWAY.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for NATGATEWAY's
// API operation DescribeNatIpsCommon for usage and error information.
func (c *NATGATEWAY) DescribeNatIpsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeNatIpsCommonRequest(input)
	return out, req.Send()
}

// DescribeNatIpsCommonWithContext is the same as DescribeNatIpsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeNatIpsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *NATGATEWAY) DescribeNatIpsCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeNatIpsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeNatIps = "DescribeNatIps"

// DescribeNatIpsRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeNatIps operation. The "output" return
// value will be populated with the DescribeNatIpsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeNatIpsCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeNatIpsCommon Send returns without error.
//
// See DescribeNatIps for more information on using the DescribeNatIps
// API call, and error handling.
//
//    // Example sending a request using the DescribeNatIpsRequest method.
//    req, resp := client.DescribeNatIpsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *NATGATEWAY) DescribeNatIpsRequest(input *DescribeNatIpsInput) (req *request.Request, output *DescribeNatIpsOutput) {
	op := &request.Operation{
		Name:       opDescribeNatIps,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeNatIpsInput{}
	}

	output = &DescribeNatIpsOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeNatIps API operation for NATGATEWAY.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for NATGATEWAY's
// API operation DescribeNatIps for usage and error information.
func (c *NATGATEWAY) DescribeNatIps(input *DescribeNatIpsInput) (*DescribeNatIpsOutput, error) {
	req, out := c.DescribeNatIpsRequest(input)
	return out, req.Send()
}

// DescribeNatIpsWithContext is the same as DescribeNatIps with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeNatIps for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *NATGATEWAY) DescribeNatIpsWithContext(ctx volcengine.Context, input *DescribeNatIpsInput, opts ...request.Option) (*DescribeNatIpsOutput, error) {
	req, out := c.DescribeNatIpsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DescribeNatIpsInput struct {
	_ struct{} `type:"structure"`

	// NatGatewayId is a required field
	NatGatewayId *string `type:"string" required:"true"`

	NatIpIds []*string `type:"list"`

	NatIpName *string `type:"string"`

	PageNumber *int64 `type:"integer"`

	PageSize *int64 `type:"integer"`
}

// String returns the string representation
func (s DescribeNatIpsInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeNatIpsInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeNatIpsInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DescribeNatIpsInput"}
	if s.NatGatewayId == nil {
		invalidParams.Add(request.NewErrParamRequired("NatGatewayId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetNatGatewayId sets the NatGatewayId field's value.
func (s *DescribeNatIpsInput) SetNatGatewayId(v string) *DescribeNatIpsInput {
	s.NatGatewayId = &v
	return s
}

// SetNatIpIds sets the NatIpIds field's value.
func (s *DescribeNatIpsInput) SetNatIpIds(v []*string) *DescribeNatIpsInput {
	s.NatIpIds = v
	return s
}

// SetNatIpName sets the NatIpName field's value.
func (s *DescribeNatIpsInput) SetNatIpName(v string) *DescribeNatIpsInput {
	s.NatIpName = &v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *DescribeNatIpsInput) SetPageNumber(v int64) *DescribeNatIpsInput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *DescribeNatIpsInput) SetPageSize(v int64) *DescribeNatIpsInput {
	s.PageSize = &v
	return s
}

type DescribeNatIpsOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	NatIps []*NatIpForDescribeNatIpsOutput `type:"list"`

	PageNumber *int64 `type:"integer"`

	PageSize *int64 `type:"integer"`

	RequestId *string `type:"string"`

	TotalCount *int64 `type:"integer"`
}

// String returns the string representation
func (s DescribeNatIpsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeNatIpsOutput) GoString() string {
	return s.String()
}

// SetNatIps sets the NatIps field's value.
func (s *DescribeNatIpsOutput) SetNatIps(v []*NatIpForDescribeNatIpsOutput) *DescribeNatIpsOutput {
	s.NatIps = v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *DescribeNatIpsOutput) SetPageNumber(v int64) *DescribeNatIpsOutput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *DescribeNatIpsOutput) SetPageSize(v int64) *DescribeNatIpsOutput {
	s.PageSize = &v
	return s
}

// SetRequestId sets the RequestId field's value.
func (s *DescribeNatIpsOutput) SetRequestId(v string) *DescribeNatIpsOutput {
	s.RequestId = &v
	return s
}

// SetTotalCount sets the TotalCount field's value.
func (s *DescribeNatIpsOutput) SetTotalCount(v int64) *DescribeNatIpsOutput {
	s.TotalCount = &v
	return s
}

type NatIpForDescribeNatIpsOutput struct {
	_ struct{} `type:"structure"`

	IsDefault *bool `type:"boolean"`

	NatGatewayId *string `type:"string"`

	NatIp *string `type:"string"`

	NatIpDescription *string `type:"string"`

	NatIpId *string `type:"string"`

	NatIpName *string `type:"string"`

	Status *string `type:"string"`

	UsingStatus *string `type:"string" enum:"UsingStatusForDescribeNatIpsOutput"`
}

// String returns the string representation
func (s NatIpForDescribeNatIpsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s NatIpForDescribeNatIpsOutput) GoString() string {
	return s.String()
}

// SetIsDefault sets the IsDefault field's value.
func (s *NatIpForDescribeNatIpsOutput) SetIsDefault(v bool) *NatIpForDescribeNatIpsOutput {
	s.IsDefault = &v
	return s
}

// SetNatGatewayId sets the NatGatewayId field's value.
func (s *NatIpForDescribeNatIpsOutput) SetNatGatewayId(v string) *NatIpForDescribeNatIpsOutput {
	s.NatGatewayId = &v
	return s
}

// SetNatIp sets the NatIp field's value.
func (s *NatIpForDescribeNatIpsOutput) SetNatIp(v string) *NatIpForDescribeNatIpsOutput {
	s.NatIp = &v
	return s
}

// SetNatIpDescription sets the NatIpDescription field's value.
func (s *NatIpForDescribeNatIpsOutput) SetNatIpDescription(v string) *NatIpForDescribeNatIpsOutput {
	s.NatIpDescription = &v
	return s
}

// SetNatIpId sets the NatIpId field's value.
func (s *NatIpForDescribeNatIpsOutput) SetNatIpId(v string) *NatIpForDescribeNatIpsOutput {
	s.NatIpId = &v
	return s
}

// SetNatIpName sets the NatIpName field's value.
func (s *NatIpForDescribeNatIpsOutput) SetNatIpName(v string) *NatIpForDescribeNatIpsOutput {
	s.NatIpName = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *NatIpForDescribeNatIpsOutput) SetStatus(v string) *NatIpForDescribeNatIpsOutput {
	s.Status = &v
	return s
}

// SetUsingStatus sets the UsingStatus field's value.
func (s *NatIpForDescribeNatIpsOutput) SetUsingStatus(v string) *NatIpForDescribeNatIpsOutput {
	s.UsingStatus = &v
	return s
}

const (
	// UsingStatusForDescribeNatIpsOutputIdle is a UsingStatusForDescribeNatIpsOutput enum value
	UsingStatusForDescribeNatIpsOutputIdle = "Idle"

	// UsingStatusForDescribeNatIpsOutputUsedBySnat is a UsingStatusForDescribeNatIpsOutput enum value
	UsingStatusForDescribeNatIpsOutputUsedBySnat = "UsedBySnat"

	// UsingStatusForDescribeNatIpsOutputUsedByDnat is a UsingStatusForDescribeNatIpsOutput enum value
	UsingStatusForDescribeNatIpsOutputUsedByDnat = "UsedByDnat"

	// UsingStatusForDescribeNatIpsOutputUsedByNat is a UsingStatusForDescribeNatIpsOutput enum value
	UsingStatusForDescribeNatIpsOutputUsedByNat = "UsedByNat"
)
