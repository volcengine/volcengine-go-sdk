// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package cbr

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opCreateBackupPlanCommon = "CreateBackupPlan"

// CreateBackupPlanCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateBackupPlanCommon operation. The "output" return
// value will be populated with the CreateBackupPlanCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateBackupPlanCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateBackupPlanCommon Send returns without error.
//
// See CreateBackupPlanCommon for more information on using the CreateBackupPlanCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateBackupPlanCommonRequest method.
//    req, resp := client.CreateBackupPlanCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CBR) CreateBackupPlanCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateBackupPlanCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateBackupPlanCommon API operation for CBR.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for CBR's
// API operation CreateBackupPlanCommon for usage and error information.
func (c *CBR) CreateBackupPlanCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateBackupPlanCommonRequest(input)
	return out, req.Send()
}

// CreateBackupPlanCommonWithContext is the same as CreateBackupPlanCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateBackupPlanCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CBR) CreateBackupPlanCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateBackupPlanCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateBackupPlan = "CreateBackupPlan"

// CreateBackupPlanRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateBackupPlan operation. The "output" return
// value will be populated with the CreateBackupPlanCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateBackupPlanCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateBackupPlanCommon Send returns without error.
//
// See CreateBackupPlan for more information on using the CreateBackupPlan
// API call, and error handling.
//
//    // Example sending a request using the CreateBackupPlanRequest method.
//    req, resp := client.CreateBackupPlanRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CBR) CreateBackupPlanRequest(input *CreateBackupPlanInput) (req *request.Request, output *CreateBackupPlanOutput) {
	op := &request.Operation{
		Name:       opCreateBackupPlan,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateBackupPlanInput{}
	}

	output = &CreateBackupPlanOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateBackupPlan API operation for CBR.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for CBR's
// API operation CreateBackupPlan for usage and error information.
func (c *CBR) CreateBackupPlan(input *CreateBackupPlanInput) (*CreateBackupPlanOutput, error) {
	req, out := c.CreateBackupPlanRequest(input)
	return out, req.Send()
}

// CreateBackupPlanWithContext is the same as CreateBackupPlan with the addition of
// the ability to pass a context and additional request options.
//
// See CreateBackupPlan for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CBR) CreateBackupPlanWithContext(ctx volcengine.Context, input *CreateBackupPlanInput, opts ...request.Option) (*CreateBackupPlanOutput, error) {
	req, out := c.CreateBackupPlanRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type CreateBackupPlanInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// Name is a required field
	Name *string `type:"string" json:",omitempty" required:"true"`

	PolicyId *string `type:"string" json:",omitempty"`

	ResourceList []*ResourceListForCreateBackupPlanInput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s CreateBackupPlanInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateBackupPlanInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateBackupPlanInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CreateBackupPlanInput"}
	if s.Name == nil {
		invalidParams.Add(request.NewErrParamRequired("Name"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetName sets the Name field's value.
func (s *CreateBackupPlanInput) SetName(v string) *CreateBackupPlanInput {
	s.Name = &v
	return s
}

// SetPolicyId sets the PolicyId field's value.
func (s *CreateBackupPlanInput) SetPolicyId(v string) *CreateBackupPlanInput {
	s.PolicyId = &v
	return s
}

// SetResourceList sets the ResourceList field's value.
func (s *CreateBackupPlanInput) SetResourceList(v []*ResourceListForCreateBackupPlanInput) *CreateBackupPlanInput {
	s.ResourceList = v
	return s
}

type CreateBackupPlanOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	PlanId *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s CreateBackupPlanOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateBackupPlanOutput) GoString() string {
	return s.String()
}

// SetPlanId sets the PlanId field's value.
func (s *CreateBackupPlanOutput) SetPlanId(v string) *CreateBackupPlanOutput {
	s.PlanId = &v
	return s
}

type MetaInformationForCreateBackupPlanInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	EcsMeta *string `type:"string" json:",omitempty"`

	VepfsMeta *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s MetaInformationForCreateBackupPlanInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s MetaInformationForCreateBackupPlanInput) GoString() string {
	return s.String()
}

// SetEcsMeta sets the EcsMeta field's value.
func (s *MetaInformationForCreateBackupPlanInput) SetEcsMeta(v string) *MetaInformationForCreateBackupPlanInput {
	s.EcsMeta = &v
	return s
}

// SetVepfsMeta sets the VepfsMeta field's value.
func (s *MetaInformationForCreateBackupPlanInput) SetVepfsMeta(v string) *MetaInformationForCreateBackupPlanInput {
	s.VepfsMeta = &v
	return s
}

type ResourceListForCreateBackupPlanInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	MetaInformation *MetaInformationForCreateBackupPlanInput `type:"structure" json:",omitempty"`

	ResourceId *string `type:"string" json:",omitempty"`

	ResourceType *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ResourceListForCreateBackupPlanInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ResourceListForCreateBackupPlanInput) GoString() string {
	return s.String()
}

// SetMetaInformation sets the MetaInformation field's value.
func (s *ResourceListForCreateBackupPlanInput) SetMetaInformation(v *MetaInformationForCreateBackupPlanInput) *ResourceListForCreateBackupPlanInput {
	s.MetaInformation = v
	return s
}

// SetResourceId sets the ResourceId field's value.
func (s *ResourceListForCreateBackupPlanInput) SetResourceId(v string) *ResourceListForCreateBackupPlanInput {
	s.ResourceId = &v
	return s
}

// SetResourceType sets the ResourceType field's value.
func (s *ResourceListForCreateBackupPlanInput) SetResourceType(v string) *ResourceListForCreateBackupPlanInput {
	s.ResourceType = &v
	return s
}
