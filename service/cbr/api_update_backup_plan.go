// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package cbr

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opUpdateBackupPlanCommon = "UpdateBackupPlan"

// UpdateBackupPlanCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateBackupPlanCommon operation. The "output" return
// value will be populated with the UpdateBackupPlanCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateBackupPlanCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateBackupPlanCommon Send returns without error.
//
// See UpdateBackupPlanCommon for more information on using the UpdateBackupPlanCommon
// API call, and error handling.
//
//    // Example sending a request using the UpdateBackupPlanCommonRequest method.
//    req, resp := client.UpdateBackupPlanCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CBR) UpdateBackupPlanCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opUpdateBackupPlanCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateBackupPlanCommon API operation for CBR.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for CBR's
// API operation UpdateBackupPlanCommon for usage and error information.
func (c *CBR) UpdateBackupPlanCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.UpdateBackupPlanCommonRequest(input)
	return out, req.Send()
}

// UpdateBackupPlanCommonWithContext is the same as UpdateBackupPlanCommon with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateBackupPlanCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CBR) UpdateBackupPlanCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.UpdateBackupPlanCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opUpdateBackupPlan = "UpdateBackupPlan"

// UpdateBackupPlanRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateBackupPlan operation. The "output" return
// value will be populated with the UpdateBackupPlanCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateBackupPlanCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateBackupPlanCommon Send returns without error.
//
// See UpdateBackupPlan for more information on using the UpdateBackupPlan
// API call, and error handling.
//
//    // Example sending a request using the UpdateBackupPlanRequest method.
//    req, resp := client.UpdateBackupPlanRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CBR) UpdateBackupPlanRequest(input *UpdateBackupPlanInput) (req *request.Request, output *UpdateBackupPlanOutput) {
	op := &request.Operation{
		Name:       opUpdateBackupPlan,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UpdateBackupPlanInput{}
	}

	output = &UpdateBackupPlanOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateBackupPlan API operation for CBR.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for CBR's
// API operation UpdateBackupPlan for usage and error information.
func (c *CBR) UpdateBackupPlan(input *UpdateBackupPlanInput) (*UpdateBackupPlanOutput, error) {
	req, out := c.UpdateBackupPlanRequest(input)
	return out, req.Send()
}

// UpdateBackupPlanWithContext is the same as UpdateBackupPlan with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateBackupPlan for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CBR) UpdateBackupPlanWithContext(ctx volcengine.Context, input *UpdateBackupPlanInput, opts ...request.Option) (*UpdateBackupPlanOutput, error) {
	req, out := c.UpdateBackupPlanRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type MetaInformationForUpdateBackupPlanInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	EcsMeta *string `type:"string" json:",omitempty"`

	VepfsMeta *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s MetaInformationForUpdateBackupPlanInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s MetaInformationForUpdateBackupPlanInput) GoString() string {
	return s.String()
}

// SetEcsMeta sets the EcsMeta field's value.
func (s *MetaInformationForUpdateBackupPlanInput) SetEcsMeta(v string) *MetaInformationForUpdateBackupPlanInput {
	s.EcsMeta = &v
	return s
}

// SetVepfsMeta sets the VepfsMeta field's value.
func (s *MetaInformationForUpdateBackupPlanInput) SetVepfsMeta(v string) *MetaInformationForUpdateBackupPlanInput {
	s.VepfsMeta = &v
	return s
}

type ResourceListForUpdateBackupPlanInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	MetaInformation *MetaInformationForUpdateBackupPlanInput `type:"structure" json:",omitempty"`

	ResourceId *string `type:"string" json:",omitempty"`

	ResourceType *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ResourceListForUpdateBackupPlanInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ResourceListForUpdateBackupPlanInput) GoString() string {
	return s.String()
}

// SetMetaInformation sets the MetaInformation field's value.
func (s *ResourceListForUpdateBackupPlanInput) SetMetaInformation(v *MetaInformationForUpdateBackupPlanInput) *ResourceListForUpdateBackupPlanInput {
	s.MetaInformation = v
	return s
}

// SetResourceId sets the ResourceId field's value.
func (s *ResourceListForUpdateBackupPlanInput) SetResourceId(v string) *ResourceListForUpdateBackupPlanInput {
	s.ResourceId = &v
	return s
}

// SetResourceType sets the ResourceType field's value.
func (s *ResourceListForUpdateBackupPlanInput) SetResourceType(v string) *ResourceListForUpdateBackupPlanInput {
	s.ResourceType = &v
	return s
}

type UpdateBackupPlanInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Name *string `type:"string" json:",omitempty"`

	// PlanId is a required field
	PlanId *string `type:"string" json:",omitempty" required:"true"`

	PolicyId *string `type:"string" json:",omitempty"`

	ResourceList []*ResourceListForUpdateBackupPlanInput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s UpdateBackupPlanInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateBackupPlanInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UpdateBackupPlanInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "UpdateBackupPlanInput"}
	if s.PlanId == nil {
		invalidParams.Add(request.NewErrParamRequired("PlanId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetName sets the Name field's value.
func (s *UpdateBackupPlanInput) SetName(v string) *UpdateBackupPlanInput {
	s.Name = &v
	return s
}

// SetPlanId sets the PlanId field's value.
func (s *UpdateBackupPlanInput) SetPlanId(v string) *UpdateBackupPlanInput {
	s.PlanId = &v
	return s
}

// SetPolicyId sets the PolicyId field's value.
func (s *UpdateBackupPlanInput) SetPolicyId(v string) *UpdateBackupPlanInput {
	s.PolicyId = &v
	return s
}

// SetResourceList sets the ResourceList field's value.
func (s *UpdateBackupPlanInput) SetResourceList(v []*ResourceListForUpdateBackupPlanInput) *UpdateBackupPlanInput {
	s.ResourceList = v
	return s
}

type UpdateBackupPlanOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s UpdateBackupPlanOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateBackupPlanOutput) GoString() string {
	return s.String()
}
