// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package cbr

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opCreateVaultCommon = "CreateVault"

// CreateVaultCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateVaultCommon operation. The "output" return
// value will be populated with the CreateVaultCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateVaultCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateVaultCommon Send returns without error.
//
// See CreateVaultCommon for more information on using the CreateVaultCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateVaultCommonRequest method.
//    req, resp := client.CreateVaultCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CBR) CreateVaultCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateVaultCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateVaultCommon API operation for CBR.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for CBR's
// API operation CreateVaultCommon for usage and error information.
func (c *CBR) CreateVaultCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateVaultCommonRequest(input)
	return out, req.Send()
}

// CreateVaultCommonWithContext is the same as CreateVaultCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateVaultCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CBR) CreateVaultCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateVaultCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateVault = "CreateVault"

// CreateVaultRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateVault operation. The "output" return
// value will be populated with the CreateVaultCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateVaultCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateVaultCommon Send returns without error.
//
// See CreateVault for more information on using the CreateVault
// API call, and error handling.
//
//    // Example sending a request using the CreateVaultRequest method.
//    req, resp := client.CreateVaultRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CBR) CreateVaultRequest(input *CreateVaultInput) (req *request.Request, output *CreateVaultOutput) {
	op := &request.Operation{
		Name:       opCreateVault,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateVaultInput{}
	}

	output = &CreateVaultOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateVault API operation for CBR.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for CBR's
// API operation CreateVault for usage and error information.
func (c *CBR) CreateVault(input *CreateVaultInput) (*CreateVaultOutput, error) {
	req, out := c.CreateVaultRequest(input)
	return out, req.Send()
}

// CreateVaultWithContext is the same as CreateVault with the addition of
// the ability to pass a context and additional request options.
//
// See CreateVault for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CBR) CreateVaultWithContext(ctx volcengine.Context, input *CreateVaultInput, opts ...request.Option) (*CreateVaultOutput, error) {
	req, out := c.CreateVaultRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type CreateVaultInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	ProjectName *string `type:"string" json:",omitempty"`

	// VaultName is a required field
	VaultName *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s CreateVaultInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateVaultInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateVaultInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CreateVaultInput"}
	if s.VaultName == nil {
		invalidParams.Add(request.NewErrParamRequired("VaultName"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetProjectName sets the ProjectName field's value.
func (s *CreateVaultInput) SetProjectName(v string) *CreateVaultInput {
	s.ProjectName = &v
	return s
}

// SetVaultName sets the VaultName field's value.
func (s *CreateVaultInput) SetVaultName(v string) *CreateVaultInput {
	s.VaultName = &v
	return s
}

type CreateVaultOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	VaultId *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s CreateVaultOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateVaultOutput) GoString() string {
	return s.String()
}

// SetVaultId sets the VaultId field's value.
func (s *CreateVaultOutput) SetVaultId(v string) *CreateVaultOutput {
	s.VaultId = &v
	return s
}
