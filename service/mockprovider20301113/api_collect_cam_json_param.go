// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package mockprovider20301113

import (
	"fmt"

	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opCollectCamJsonParamCommon = "CollectCamJsonParam"

// CollectCamJsonParamCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the CollectCamJsonParamCommon operation. The "output" return
// value will be populated with the CollectCamJsonParamCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CollectCamJsonParamCommon Request to send the API call to the service.
// the "output" return value is not valid until after CollectCamJsonParamCommon Send returns without error.
//
// See CollectCamJsonParamCommon for more information on using the CollectCamJsonParamCommon
// API call, and error handling.
//
//    // Example sending a request using the CollectCamJsonParamCommonRequest method.
//    req, resp := client.CollectCamJsonParamCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *MOCKPROVIDER20301113) CollectCamJsonParamCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCollectCamJsonParamCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// CollectCamJsonParamCommon API operation for MOCK_PROVIDER20301113.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for MOCK_PROVIDER20301113's
// API operation CollectCamJsonParamCommon for usage and error information.
func (c *MOCKPROVIDER20301113) CollectCamJsonParamCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CollectCamJsonParamCommonRequest(input)
	return out, req.Send()
}

// CollectCamJsonParamCommonWithContext is the same as CollectCamJsonParamCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CollectCamJsonParamCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *MOCKPROVIDER20301113) CollectCamJsonParamCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CollectCamJsonParamCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCollectCamJsonParam = "CollectCamJsonParam"

// CollectCamJsonParamRequest generates a "volcengine/request.Request" representing the
// client's request for the CollectCamJsonParam operation. The "output" return
// value will be populated with the CollectCamJsonParamCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CollectCamJsonParamCommon Request to send the API call to the service.
// the "output" return value is not valid until after CollectCamJsonParamCommon Send returns without error.
//
// See CollectCamJsonParam for more information on using the CollectCamJsonParam
// API call, and error handling.
//
//    // Example sending a request using the CollectCamJsonParamRequest method.
//    req, resp := client.CollectCamJsonParamRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *MOCKPROVIDER20301113) CollectCamJsonParamRequest(input *CollectCamJsonParamInput) (req *request.Request, output *CollectCamJsonParamOutput) {
	op := &request.Operation{
		Name:       opCollectCamJsonParam,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CollectCamJsonParamInput{}
	}

	output = &CollectCamJsonParamOutput{}
	req = c.newRequest(op, input, output)

	return
}

// CollectCamJsonParam API operation for MOCK_PROVIDER20301113.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for MOCK_PROVIDER20301113's
// API operation CollectCamJsonParam for usage and error information.
func (c *MOCKPROVIDER20301113) CollectCamJsonParam(input *CollectCamJsonParamInput) (*CollectCamJsonParamOutput, error) {
	req, out := c.CollectCamJsonParamRequest(input)
	return out, req.Send()
}

// CollectCamJsonParamWithContext is the same as CollectCamJsonParam with the addition of
// the ability to pass a context and additional request options.
//
// See CollectCamJsonParam for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *MOCKPROVIDER20301113) CollectCamJsonParamWithContext(ctx volcengine.Context, input *CollectCamJsonParamInput, opts ...request.Option) (*CollectCamJsonParamOutput, error) {
	req, out := c.CollectCamJsonParamRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type AForCollectCamJsonParamInput struct {
	_ struct{} `type:"structure"`

	// B is a required field
	B *string `locationName:"b" type:"string" required:"true"`
}

// String returns the string representation
func (s AForCollectCamJsonParamInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s AForCollectCamJsonParamInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *AForCollectCamJsonParamInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "AForCollectCamJsonParamInput"}
	if s.B == nil {
		invalidParams.Add(request.NewErrParamRequired("B"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetB sets the B field's value.
func (s *AForCollectCamJsonParamInput) SetB(v string) *AForCollectCamJsonParamInput {
	s.B = &v
	return s
}

type AppleForCollectCamJsonParamOutput struct {
	_ struct{} `type:"structure"`

	Body *BodyForCollectCamJsonParamOutput `type:"structure" json:"body"`

	Color *string `type:"string"`

	From *string `type:"string"`

	Name *string `type:"string"`
}

// String returns the string representation
func (s AppleForCollectCamJsonParamOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s AppleForCollectCamJsonParamOutput) GoString() string {
	return s.String()
}

// SetBody sets the Body field's value.
func (s *AppleForCollectCamJsonParamOutput) SetBody(v *BodyForCollectCamJsonParamOutput) *AppleForCollectCamJsonParamOutput {
	s.Body = v
	return s
}

// SetColor sets the Color field's value.
func (s *AppleForCollectCamJsonParamOutput) SetColor(v string) *AppleForCollectCamJsonParamOutput {
	s.Color = &v
	return s
}

// SetFrom sets the From field's value.
func (s *AppleForCollectCamJsonParamOutput) SetFrom(v string) *AppleForCollectCamJsonParamOutput {
	s.From = &v
	return s
}

// SetName sets the Name field's value.
func (s *AppleForCollectCamJsonParamOutput) SetName(v string) *AppleForCollectCamJsonParamOutput {
	s.Name = &v
	return s
}

type AppleParentForCollectCamJsonParamOutput struct {
	_ struct{} `type:"structure"`

	Children *ChildrenForCollectCamJsonParamOutput `type:"structure"`

	ParentId *int32 `type:"int32"`
}

// String returns the string representation
func (s AppleParentForCollectCamJsonParamOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s AppleParentForCollectCamJsonParamOutput) GoString() string {
	return s.String()
}

// SetChildren sets the Children field's value.
func (s *AppleParentForCollectCamJsonParamOutput) SetChildren(v *ChildrenForCollectCamJsonParamOutput) *AppleParentForCollectCamJsonParamOutput {
	s.Children = v
	return s
}

// SetParentId sets the ParentId field's value.
func (s *AppleParentForCollectCamJsonParamOutput) SetParentId(v int32) *AppleParentForCollectCamJsonParamOutput {
	s.ParentId = &v
	return s
}

type AppleVendorsForCollectCamJsonParamOutput struct {
	_ struct{} `type:"structure"`

	Bobobo []*BoboboForCollectCamJsonParamOutput `type:"list" json:"bobobo"`

	Id *int32 `type:"int32"`

	Vendor []*string `type:"list"`
}

// String returns the string representation
func (s AppleVendorsForCollectCamJsonParamOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s AppleVendorsForCollectCamJsonParamOutput) GoString() string {
	return s.String()
}

// SetBobobo sets the Bobobo field's value.
func (s *AppleVendorsForCollectCamJsonParamOutput) SetBobobo(v []*BoboboForCollectCamJsonParamOutput) *AppleVendorsForCollectCamJsonParamOutput {
	s.Bobobo = v
	return s
}

// SetId sets the Id field's value.
func (s *AppleVendorsForCollectCamJsonParamOutput) SetId(v int32) *AppleVendorsForCollectCamJsonParamOutput {
	s.Id = &v
	return s
}

// SetVendor sets the Vendor field's value.
func (s *AppleVendorsForCollectCamJsonParamOutput) SetVendor(v []*string) *AppleVendorsForCollectCamJsonParamOutput {
	s.Vendor = v
	return s
}

type BoboboForCollectCamJsonParamOutput struct {
	_ struct{} `type:"structure"`

	Bbbb []*string `type:"list" json:"bbbb"`
}

// String returns the string representation
func (s BoboboForCollectCamJsonParamOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s BoboboForCollectCamJsonParamOutput) GoString() string {
	return s.String()
}

// SetBbbb sets the Bbbb field's value.
func (s *BoboboForCollectCamJsonParamOutput) SetBbbb(v []*string) *BoboboForCollectCamJsonParamOutput {
	s.Bbbb = v
	return s
}

type BodyForCollectCamJsonParamOutput struct {
	_ struct{} `type:"structure"`

	Bobo1 *string `type:"string" json:"bobo1"`

	Bobo2 *int32 `type:"int32" json:"bobo2"`
}

// String returns the string representation
func (s BodyForCollectCamJsonParamOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s BodyForCollectCamJsonParamOutput) GoString() string {
	return s.String()
}

// SetBobo1 sets the Bobo1 field's value.
func (s *BodyForCollectCamJsonParamOutput) SetBobo1(v string) *BodyForCollectCamJsonParamOutput {
	s.Bobo1 = &v
	return s
}

// SetBobo2 sets the Bobo2 field's value.
func (s *BodyForCollectCamJsonParamOutput) SetBobo2(v int32) *BodyForCollectCamJsonParamOutput {
	s.Bobo2 = &v
	return s
}

type ChildrenForCollectCamJsonParamOutput struct {
	_ struct{} `type:"structure"`

	Body *BodyForCollectCamJsonParamOutput `type:"structure" json:"body"`

	Color *string `type:"string"`

	From *string `type:"string"`

	Name *string `type:"string"`
}

// String returns the string representation
func (s ChildrenForCollectCamJsonParamOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ChildrenForCollectCamJsonParamOutput) GoString() string {
	return s.String()
}

// SetBody sets the Body field's value.
func (s *ChildrenForCollectCamJsonParamOutput) SetBody(v *BodyForCollectCamJsonParamOutput) *ChildrenForCollectCamJsonParamOutput {
	s.Body = v
	return s
}

// SetColor sets the Color field's value.
func (s *ChildrenForCollectCamJsonParamOutput) SetColor(v string) *ChildrenForCollectCamJsonParamOutput {
	s.Color = &v
	return s
}

// SetFrom sets the From field's value.
func (s *ChildrenForCollectCamJsonParamOutput) SetFrom(v string) *ChildrenForCollectCamJsonParamOutput {
	s.From = &v
	return s
}

// SetName sets the Name field's value.
func (s *ChildrenForCollectCamJsonParamOutput) SetName(v string) *ChildrenForCollectCamJsonParamOutput {
	s.Name = &v
	return s
}

type CollectCamJsonParamInput struct {
	_ struct{} `type:"structure"`

	A []*AForCollectCamJsonParamInput `locationName:"a" type:"list"`

	// ReqParam is a required field
	ReqParam *int32 `locationName:"reqParam" type:"int32" required:"true"`

	// ReqParamOne is a required field
	ReqParamOne *string `locationName:"reqParamOne" type:"string" required:"true"`

	ReqParamThree *string `locationName:"reqParamThree" type:"string"`

	// ReqParamTwo is a required field
	ReqParamTwo *string `locationName:"reqParamTwo" type:"string" required:"true"`
}

// String returns the string representation
func (s CollectCamJsonParamInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CollectCamJsonParamInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CollectCamJsonParamInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CollectCamJsonParamInput"}
	if s.ReqParam == nil {
		invalidParams.Add(request.NewErrParamRequired("ReqParam"))
	}
	if s.ReqParamOne == nil {
		invalidParams.Add(request.NewErrParamRequired("ReqParamOne"))
	}
	if s.ReqParamTwo == nil {
		invalidParams.Add(request.NewErrParamRequired("ReqParamTwo"))
	}
	if s.A != nil {
		for i, v := range s.A {
			if v == nil {
				continue
			}
			if err := v.Validate(); err != nil {
				invalidParams.AddNested(fmt.Sprintf("%s[%v]", "A", i), err.(request.ErrInvalidParams))
			}
		}
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetA sets the A field's value.
func (s *CollectCamJsonParamInput) SetA(v []*AForCollectCamJsonParamInput) *CollectCamJsonParamInput {
	s.A = v
	return s
}

// SetReqParam sets the ReqParam field's value.
func (s *CollectCamJsonParamInput) SetReqParam(v int32) *CollectCamJsonParamInput {
	s.ReqParam = &v
	return s
}

// SetReqParamOne sets the ReqParamOne field's value.
func (s *CollectCamJsonParamInput) SetReqParamOne(v string) *CollectCamJsonParamInput {
	s.ReqParamOne = &v
	return s
}

// SetReqParamThree sets the ReqParamThree field's value.
func (s *CollectCamJsonParamInput) SetReqParamThree(v string) *CollectCamJsonParamInput {
	s.ReqParamThree = &v
	return s
}

// SetReqParamTwo sets the ReqParamTwo field's value.
func (s *CollectCamJsonParamInput) SetReqParamTwo(v string) *CollectCamJsonParamInput {
	s.ReqParamTwo = &v
	return s
}

type CollectCamJsonParamOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	AppleParent *AppleParentForCollectCamJsonParamOutput `type:"structure" json:"appleParent"`

	AppleVendors *AppleVendorsForCollectCamJsonParamOutput `type:"structure" json:"appleVendors"`

	Apples []*AppleForCollectCamJsonParamOutput `type:"list" json:"apples"`

	Success *bool `type:"boolean" json:"success"`
}

// String returns the string representation
func (s CollectCamJsonParamOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CollectCamJsonParamOutput) GoString() string {
	return s.String()
}

// SetAppleParent sets the AppleParent field's value.
func (s *CollectCamJsonParamOutput) SetAppleParent(v *AppleParentForCollectCamJsonParamOutput) *CollectCamJsonParamOutput {
	s.AppleParent = v
	return s
}

// SetAppleVendors sets the AppleVendors field's value.
func (s *CollectCamJsonParamOutput) SetAppleVendors(v *AppleVendorsForCollectCamJsonParamOutput) *CollectCamJsonParamOutput {
	s.AppleVendors = v
	return s
}

// SetApples sets the Apples field's value.
func (s *CollectCamJsonParamOutput) SetApples(v []*AppleForCollectCamJsonParamOutput) *CollectCamJsonParamOutput {
	s.Apples = v
	return s
}

// SetSuccess sets the Success field's value.
func (s *CollectCamJsonParamOutput) SetSuccess(v bool) *CollectCamJsonParamOutput {
	s.Success = &v
	return s
}
