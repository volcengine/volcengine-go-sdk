// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package bytehousece20240831

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opGrantPrivilegesToUserByNameCommon = "GrantPrivilegesToUserByName"

// GrantPrivilegesToUserByNameCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the GrantPrivilegesToUserByNameCommon operation. The "output" return
// value will be populated with the GrantPrivilegesToUserByNameCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GrantPrivilegesToUserByNameCommon Request to send the API call to the service.
// the "output" return value is not valid until after GrantPrivilegesToUserByNameCommon Send returns without error.
//
// See GrantPrivilegesToUserByNameCommon for more information on using the GrantPrivilegesToUserByNameCommon
// API call, and error handling.
//
//    // Example sending a request using the GrantPrivilegesToUserByNameCommonRequest method.
//    req, resp := client.GrantPrivilegesToUserByNameCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BYTEHOUSECE20240831) GrantPrivilegesToUserByNameCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opGrantPrivilegesToUserByNameCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GrantPrivilegesToUserByNameCommon API operation for BYTEHOUSE_CE20240831.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BYTEHOUSE_CE20240831's
// API operation GrantPrivilegesToUserByNameCommon for usage and error information.
func (c *BYTEHOUSECE20240831) GrantPrivilegesToUserByNameCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.GrantPrivilegesToUserByNameCommonRequest(input)
	return out, req.Send()
}

// GrantPrivilegesToUserByNameCommonWithContext is the same as GrantPrivilegesToUserByNameCommon with the addition of
// the ability to pass a context and additional request options.
//
// See GrantPrivilegesToUserByNameCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BYTEHOUSECE20240831) GrantPrivilegesToUserByNameCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.GrantPrivilegesToUserByNameCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opGrantPrivilegesToUserByName = "GrantPrivilegesToUserByName"

// GrantPrivilegesToUserByNameRequest generates a "volcengine/request.Request" representing the
// client's request for the GrantPrivilegesToUserByName operation. The "output" return
// value will be populated with the GrantPrivilegesToUserByNameCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GrantPrivilegesToUserByNameCommon Request to send the API call to the service.
// the "output" return value is not valid until after GrantPrivilegesToUserByNameCommon Send returns without error.
//
// See GrantPrivilegesToUserByName for more information on using the GrantPrivilegesToUserByName
// API call, and error handling.
//
//    // Example sending a request using the GrantPrivilegesToUserByNameRequest method.
//    req, resp := client.GrantPrivilegesToUserByNameRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BYTEHOUSECE20240831) GrantPrivilegesToUserByNameRequest(input *GrantPrivilegesToUserByNameInput) (req *request.Request, output *GrantPrivilegesToUserByNameOutput) {
	op := &request.Operation{
		Name:       opGrantPrivilegesToUserByName,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &GrantPrivilegesToUserByNameInput{}
	}

	output = &GrantPrivilegesToUserByNameOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GrantPrivilegesToUserByName API operation for BYTEHOUSE_CE20240831.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BYTEHOUSE_CE20240831's
// API operation GrantPrivilegesToUserByName for usage and error information.
func (c *BYTEHOUSECE20240831) GrantPrivilegesToUserByName(input *GrantPrivilegesToUserByNameInput) (*GrantPrivilegesToUserByNameOutput, error) {
	req, out := c.GrantPrivilegesToUserByNameRequest(input)
	return out, req.Send()
}

// GrantPrivilegesToUserByNameWithContext is the same as GrantPrivilegesToUserByName with the addition of
// the ability to pass a context and additional request options.
//
// See GrantPrivilegesToUserByName for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BYTEHOUSECE20240831) GrantPrivilegesToUserByNameWithContext(ctx volcengine.Context, input *GrantPrivilegesToUserByNameInput, opts ...request.Option) (*GrantPrivilegesToUserByNameOutput, error) {
	req, out := c.GrantPrivilegesToUserByNameRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DataForGrantPrivilegesToUserByNameOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Message *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s DataForGrantPrivilegesToUserByNameOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DataForGrantPrivilegesToUserByNameOutput) GoString() string {
	return s.String()
}

// SetMessage sets the Message field's value.
func (s *DataForGrantPrivilegesToUserByNameOutput) SetMessage(v string) *DataForGrantPrivilegesToUserByNameOutput {
	s.Message = &v
	return s
}

type GrantForGrantPrivilegesToUserByNameInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	ClusterID *int32 `type:"int32" json:",omitempty"`

	GrantOption *bool `type:"boolean" json:",omitempty"`

	GrantTo *string `type:"string" json:",omitempty"`

	OnCluster *string `type:"string" json:",omitempty"`

	Privileges []*PrivilegeForGrantPrivilegesToUserByNameInput `type:"list" json:",omitempty"`

	RawSql *string `type:"string" json:",omitempty"`

	Targets []*TargetForGrantPrivilegesToUserByNameInput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s GrantForGrantPrivilegesToUserByNameInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GrantForGrantPrivilegesToUserByNameInput) GoString() string {
	return s.String()
}

// SetClusterID sets the ClusterID field's value.
func (s *GrantForGrantPrivilegesToUserByNameInput) SetClusterID(v int32) *GrantForGrantPrivilegesToUserByNameInput {
	s.ClusterID = &v
	return s
}

// SetGrantOption sets the GrantOption field's value.
func (s *GrantForGrantPrivilegesToUserByNameInput) SetGrantOption(v bool) *GrantForGrantPrivilegesToUserByNameInput {
	s.GrantOption = &v
	return s
}

// SetGrantTo sets the GrantTo field's value.
func (s *GrantForGrantPrivilegesToUserByNameInput) SetGrantTo(v string) *GrantForGrantPrivilegesToUserByNameInput {
	s.GrantTo = &v
	return s
}

// SetOnCluster sets the OnCluster field's value.
func (s *GrantForGrantPrivilegesToUserByNameInput) SetOnCluster(v string) *GrantForGrantPrivilegesToUserByNameInput {
	s.OnCluster = &v
	return s
}

// SetPrivileges sets the Privileges field's value.
func (s *GrantForGrantPrivilegesToUserByNameInput) SetPrivileges(v []*PrivilegeForGrantPrivilegesToUserByNameInput) *GrantForGrantPrivilegesToUserByNameInput {
	s.Privileges = v
	return s
}

// SetRawSql sets the RawSql field's value.
func (s *GrantForGrantPrivilegesToUserByNameInput) SetRawSql(v string) *GrantForGrantPrivilegesToUserByNameInput {
	s.RawSql = &v
	return s
}

// SetTargets sets the Targets field's value.
func (s *GrantForGrantPrivilegesToUserByNameInput) SetTargets(v []*TargetForGrantPrivilegesToUserByNameInput) *GrantForGrantPrivilegesToUserByNameInput {
	s.Targets = v
	return s
}

type GrantPrivilegesToUserByNameInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Grants []*GrantForGrantPrivilegesToUserByNameInput `type:"list" json:",omitempty"`

	// Username is a required field
	Username *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s GrantPrivilegesToUserByNameInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GrantPrivilegesToUserByNameInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *GrantPrivilegesToUserByNameInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "GrantPrivilegesToUserByNameInput"}
	if s.Username == nil {
		invalidParams.Add(request.NewErrParamRequired("Username"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetGrants sets the Grants field's value.
func (s *GrantPrivilegesToUserByNameInput) SetGrants(v []*GrantForGrantPrivilegesToUserByNameInput) *GrantPrivilegesToUserByNameInput {
	s.Grants = v
	return s
}

// SetUsername sets the Username field's value.
func (s *GrantPrivilegesToUserByNameInput) SetUsername(v string) *GrantPrivilegesToUserByNameInput {
	s.Username = &v
	return s
}

type GrantPrivilegesToUserByNameOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Data *DataForGrantPrivilegesToUserByNameOutput `type:"structure" json:",omitempty"`

	Message *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s GrantPrivilegesToUserByNameOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GrantPrivilegesToUserByNameOutput) GoString() string {
	return s.String()
}

// SetData sets the Data field's value.
func (s *GrantPrivilegesToUserByNameOutput) SetData(v *DataForGrantPrivilegesToUserByNameOutput) *GrantPrivilegesToUserByNameOutput {
	s.Data = v
	return s
}

// SetMessage sets the Message field's value.
func (s *GrantPrivilegesToUserByNameOutput) SetMessage(v string) *GrantPrivilegesToUserByNameOutput {
	s.Message = &v
	return s
}

type PrivilegeForGrantPrivilegesToUserByNameInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Columns []*string `type:"list" json:",omitempty"`

	Name *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s PrivilegeForGrantPrivilegesToUserByNameInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s PrivilegeForGrantPrivilegesToUserByNameInput) GoString() string {
	return s.String()
}

// SetColumns sets the Columns field's value.
func (s *PrivilegeForGrantPrivilegesToUserByNameInput) SetColumns(v []*string) *PrivilegeForGrantPrivilegesToUserByNameInput {
	s.Columns = v
	return s
}

// SetName sets the Name field's value.
func (s *PrivilegeForGrantPrivilegesToUserByNameInput) SetName(v string) *PrivilegeForGrantPrivilegesToUserByNameInput {
	s.Name = &v
	return s
}

type TargetForGrantPrivilegesToUserByNameInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Database *string `type:"string" json:",omitempty"`

	Table *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s TargetForGrantPrivilegesToUserByNameInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s TargetForGrantPrivilegesToUserByNameInput) GoString() string {
	return s.String()
}

// SetDatabase sets the Database field's value.
func (s *TargetForGrantPrivilegesToUserByNameInput) SetDatabase(v string) *TargetForGrantPrivilegesToUserByNameInput {
	s.Database = &v
	return s
}

// SetTable sets the Table field's value.
func (s *TargetForGrantPrivilegesToUserByNameInput) SetTable(v string) *TargetForGrantPrivilegesToUserByNameInput {
	s.Table = &v
	return s
}
