// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package bytehousece20240831

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opListUsersCommon = "ListUsers"

// ListUsersCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ListUsersCommon operation. The "output" return
// value will be populated with the ListUsersCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListUsersCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListUsersCommon Send returns without error.
//
// See ListUsersCommon for more information on using the ListUsersCommon
// API call, and error handling.
//
//    // Example sending a request using the ListUsersCommonRequest method.
//    req, resp := client.ListUsersCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BYTEHOUSECE20240831) ListUsersCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opListUsersCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListUsersCommon API operation for BYTEHOUSE_CE20240831.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BYTEHOUSE_CE20240831's
// API operation ListUsersCommon for usage and error information.
func (c *BYTEHOUSECE20240831) ListUsersCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ListUsersCommonRequest(input)
	return out, req.Send()
}

// ListUsersCommonWithContext is the same as ListUsersCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ListUsersCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BYTEHOUSECE20240831) ListUsersCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ListUsersCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListUsers = "ListUsers"

// ListUsersRequest generates a "volcengine/request.Request" representing the
// client's request for the ListUsers operation. The "output" return
// value will be populated with the ListUsersCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListUsersCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListUsersCommon Send returns without error.
//
// See ListUsers for more information on using the ListUsers
// API call, and error handling.
//
//    // Example sending a request using the ListUsersRequest method.
//    req, resp := client.ListUsersRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BYTEHOUSECE20240831) ListUsersRequest(input *ListUsersInput) (req *request.Request, output *ListUsersOutput) {
	op := &request.Operation{
		Name:       opListUsers,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListUsersInput{}
	}

	output = &ListUsersOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListUsers API operation for BYTEHOUSE_CE20240831.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BYTEHOUSE_CE20240831's
// API operation ListUsers for usage and error information.
func (c *BYTEHOUSECE20240831) ListUsers(input *ListUsersInput) (*ListUsersOutput, error) {
	req, out := c.ListUsersRequest(input)
	return out, req.Send()
}

// ListUsersWithContext is the same as ListUsers with the addition of
// the ability to pass a context and additional request options.
//
// See ListUsers for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BYTEHOUSECE20240831) ListUsersWithContext(ctx volcengine.Context, input *ListUsersInput, opts ...request.Option) (*ListUsersOutput, error) {
	req, out := c.ListUsersRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DataForListUsersOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Users []*UserForListUsersOutput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s DataForListUsersOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DataForListUsersOutput) GoString() string {
	return s.String()
}

// SetUsers sets the Users field's value.
func (s *DataForListUsersOutput) SetUsers(v []*UserForListUsersOutput) *DataForListUsersOutput {
	s.Users = v
	return s
}

type ListUsersInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Limit *int32 `type:"int32" json:",omitempty"`

	Offset *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s ListUsersInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListUsersInput) GoString() string {
	return s.String()
}

// SetLimit sets the Limit field's value.
func (s *ListUsersInput) SetLimit(v int32) *ListUsersInput {
	s.Limit = &v
	return s
}

// SetOffset sets the Offset field's value.
func (s *ListUsersInput) SetOffset(v int32) *ListUsersInput {
	s.Offset = &v
	return s
}

type ListUsersOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Data *DataForListUsersOutput `type:"structure" json:",omitempty"`

	Message *string `type:"string" json:",omitempty"`

	Meta *MetaForListUsersOutput `type:"structure" json:",omitempty"`
}

// String returns the string representation
func (s ListUsersOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListUsersOutput) GoString() string {
	return s.String()
}

// SetData sets the Data field's value.
func (s *ListUsersOutput) SetData(v *DataForListUsersOutput) *ListUsersOutput {
	s.Data = v
	return s
}

// SetMessage sets the Message field's value.
func (s *ListUsersOutput) SetMessage(v string) *ListUsersOutput {
	s.Message = &v
	return s
}

// SetMeta sets the Meta field's value.
func (s *ListUsersOutput) SetMeta(v *MetaForListUsersOutput) *ListUsersOutput {
	s.Meta = v
	return s
}

type MetaForListUsersOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Offset *int32 `type:"int32" json:",omitempty"`

	Total *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s MetaForListUsersOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s MetaForListUsersOutput) GoString() string {
	return s.String()
}

// SetOffset sets the Offset field's value.
func (s *MetaForListUsersOutput) SetOffset(v int32) *MetaForListUsersOutput {
	s.Offset = &v
	return s
}

// SetTotal sets the Total field's value.
func (s *MetaForListUsersOutput) SetTotal(v int32) *MetaForListUsersOutput {
	s.Total = &v
	return s
}

type UserForListUsersOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	AccountID *int32 `type:"int32" json:",omitempty"`

	CloudName *string `type:"string" json:",omitempty"`

	Clusters []*string `type:"list" json:",omitempty"`

	CreatedAt *int64 `type:"int64" json:",omitempty"`

	Description *string `type:"string" json:",omitempty"`

	Email *string `type:"string" json:",omitempty"`

	ID *int32 `type:"int32" json:",omitempty"`

	Immutable *bool `type:"boolean" json:",omitempty"`

	IsSystemAdmin *bool `type:"boolean" json:",omitempty"`

	LastLoginAt *int64 `type:"int64" json:",omitempty"`

	Name *string `type:"string" json:",omitempty"`

	Readonly *bool `type:"boolean" json:",omitempty"`

	Status *string `type:"string" json:",omitempty" enum:"EnumOfStatusForListUsersOutput"`

	UpdatedAt *int64 `type:"int64" json:",omitempty"`

	UserID *int32 `type:"int32" json:",omitempty"`

	UserType *string `type:"string" json:",omitempty" enum:"EnumOfUserTypeForListUsersOutput"`

	Username *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s UserForListUsersOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UserForListUsersOutput) GoString() string {
	return s.String()
}

// SetAccountID sets the AccountID field's value.
func (s *UserForListUsersOutput) SetAccountID(v int32) *UserForListUsersOutput {
	s.AccountID = &v
	return s
}

// SetCloudName sets the CloudName field's value.
func (s *UserForListUsersOutput) SetCloudName(v string) *UserForListUsersOutput {
	s.CloudName = &v
	return s
}

// SetClusters sets the Clusters field's value.
func (s *UserForListUsersOutput) SetClusters(v []*string) *UserForListUsersOutput {
	s.Clusters = v
	return s
}

// SetCreatedAt sets the CreatedAt field's value.
func (s *UserForListUsersOutput) SetCreatedAt(v int64) *UserForListUsersOutput {
	s.CreatedAt = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *UserForListUsersOutput) SetDescription(v string) *UserForListUsersOutput {
	s.Description = &v
	return s
}

// SetEmail sets the Email field's value.
func (s *UserForListUsersOutput) SetEmail(v string) *UserForListUsersOutput {
	s.Email = &v
	return s
}

// SetID sets the ID field's value.
func (s *UserForListUsersOutput) SetID(v int32) *UserForListUsersOutput {
	s.ID = &v
	return s
}

// SetImmutable sets the Immutable field's value.
func (s *UserForListUsersOutput) SetImmutable(v bool) *UserForListUsersOutput {
	s.Immutable = &v
	return s
}

// SetIsSystemAdmin sets the IsSystemAdmin field's value.
func (s *UserForListUsersOutput) SetIsSystemAdmin(v bool) *UserForListUsersOutput {
	s.IsSystemAdmin = &v
	return s
}

// SetLastLoginAt sets the LastLoginAt field's value.
func (s *UserForListUsersOutput) SetLastLoginAt(v int64) *UserForListUsersOutput {
	s.LastLoginAt = &v
	return s
}

// SetName sets the Name field's value.
func (s *UserForListUsersOutput) SetName(v string) *UserForListUsersOutput {
	s.Name = &v
	return s
}

// SetReadonly sets the Readonly field's value.
func (s *UserForListUsersOutput) SetReadonly(v bool) *UserForListUsersOutput {
	s.Readonly = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *UserForListUsersOutput) SetStatus(v string) *UserForListUsersOutput {
	s.Status = &v
	return s
}

// SetUpdatedAt sets the UpdatedAt field's value.
func (s *UserForListUsersOutput) SetUpdatedAt(v int64) *UserForListUsersOutput {
	s.UpdatedAt = &v
	return s
}

// SetUserID sets the UserID field's value.
func (s *UserForListUsersOutput) SetUserID(v int32) *UserForListUsersOutput {
	s.UserID = &v
	return s
}

// SetUserType sets the UserType field's value.
func (s *UserForListUsersOutput) SetUserType(v string) *UserForListUsersOutput {
	s.UserType = &v
	return s
}

// SetUsername sets the Username field's value.
func (s *UserForListUsersOutput) SetUsername(v string) *UserForListUsersOutput {
	s.Username = &v
	return s
}

const (
	// EnumOfStatusForListUsersOutputActiveRemoved is a EnumOfStatusForListUsersOutput enum value
	EnumOfStatusForListUsersOutputActiveRemoved = "ACTIVE_REMOVED"

	// EnumOfStatusForListUsersOutputInactiveRemoved is a EnumOfStatusForListUsersOutput enum value
	EnumOfStatusForListUsersOutputInactiveRemoved = "INACTIVE_REMOVED"

	// EnumOfStatusForListUsersOutputInactive is a EnumOfStatusForListUsersOutput enum value
	EnumOfStatusForListUsersOutputInactive = "INACTIVE"

	// EnumOfStatusForListUsersOutputActive is a EnumOfStatusForListUsersOutput enum value
	EnumOfStatusForListUsersOutputActive = "ACTIVE"
)

const (
	// EnumOfUserTypeForListUsersOutputSystem is a EnumOfUserTypeForListUsersOutput enum value
	EnumOfUserTypeForListUsersOutputSystem = "SYSTEM"

	// EnumOfUserTypeForListUsersOutputMain is a EnumOfUserTypeForListUsersOutput enum value
	EnumOfUserTypeForListUsersOutputMain = "MAIN"

	// EnumOfUserTypeForListUsersOutputNormal is a EnumOfUserTypeForListUsersOutput enum value
	EnumOfUserTypeForListUsersOutputNormal = "NORMAL"

	// EnumOfUserTypeForListUsersOutputAssumedRole is a EnumOfUserTypeForListUsersOutput enum value
	EnumOfUserTypeForListUsersOutputAssumedRole = "ASSUMED_ROLE"
)
