// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package bytehousece20240831

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opShowPrivilegesForRoleCommon = "ShowPrivilegesForRole"

// ShowPrivilegesForRoleCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ShowPrivilegesForRoleCommon operation. The "output" return
// value will be populated with the ShowPrivilegesForRoleCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ShowPrivilegesForRoleCommon Request to send the API call to the service.
// the "output" return value is not valid until after ShowPrivilegesForRoleCommon Send returns without error.
//
// See ShowPrivilegesForRoleCommon for more information on using the ShowPrivilegesForRoleCommon
// API call, and error handling.
//
//    // Example sending a request using the ShowPrivilegesForRoleCommonRequest method.
//    req, resp := client.ShowPrivilegesForRoleCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BYTEHOUSECE20240831) ShowPrivilegesForRoleCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opShowPrivilegesForRoleCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ShowPrivilegesForRoleCommon API operation for BYTEHOUSE_CE20240831.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BYTEHOUSE_CE20240831's
// API operation ShowPrivilegesForRoleCommon for usage and error information.
func (c *BYTEHOUSECE20240831) ShowPrivilegesForRoleCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ShowPrivilegesForRoleCommonRequest(input)
	return out, req.Send()
}

// ShowPrivilegesForRoleCommonWithContext is the same as ShowPrivilegesForRoleCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ShowPrivilegesForRoleCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BYTEHOUSECE20240831) ShowPrivilegesForRoleCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ShowPrivilegesForRoleCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opShowPrivilegesForRole = "ShowPrivilegesForRole"

// ShowPrivilegesForRoleRequest generates a "volcengine/request.Request" representing the
// client's request for the ShowPrivilegesForRole operation. The "output" return
// value will be populated with the ShowPrivilegesForRoleCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ShowPrivilegesForRoleCommon Request to send the API call to the service.
// the "output" return value is not valid until after ShowPrivilegesForRoleCommon Send returns without error.
//
// See ShowPrivilegesForRole for more information on using the ShowPrivilegesForRole
// API call, and error handling.
//
//    // Example sending a request using the ShowPrivilegesForRoleRequest method.
//    req, resp := client.ShowPrivilegesForRoleRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BYTEHOUSECE20240831) ShowPrivilegesForRoleRequest(input *ShowPrivilegesForRoleInput) (req *request.Request, output *ShowPrivilegesForRoleOutput) {
	op := &request.Operation{
		Name:       opShowPrivilegesForRole,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ShowPrivilegesForRoleInput{}
	}

	output = &ShowPrivilegesForRoleOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ShowPrivilegesForRole API operation for BYTEHOUSE_CE20240831.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BYTEHOUSE_CE20240831's
// API operation ShowPrivilegesForRole for usage and error information.
func (c *BYTEHOUSECE20240831) ShowPrivilegesForRole(input *ShowPrivilegesForRoleInput) (*ShowPrivilegesForRoleOutput, error) {
	req, out := c.ShowPrivilegesForRoleRequest(input)
	return out, req.Send()
}

// ShowPrivilegesForRoleWithContext is the same as ShowPrivilegesForRole with the addition of
// the ability to pass a context and additional request options.
//
// See ShowPrivilegesForRole for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BYTEHOUSECE20240831) ShowPrivilegesForRoleWithContext(ctx volcengine.Context, input *ShowPrivilegesForRoleInput, opts ...request.Option) (*ShowPrivilegesForRoleOutput, error) {
	req, out := c.ShowPrivilegesForRoleRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DataForShowPrivilegesForRoleOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Grants []*GrantForShowPrivilegesForRoleOutput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s DataForShowPrivilegesForRoleOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DataForShowPrivilegesForRoleOutput) GoString() string {
	return s.String()
}

// SetGrants sets the Grants field's value.
func (s *DataForShowPrivilegesForRoleOutput) SetGrants(v []*GrantForShowPrivilegesForRoleOutput) *DataForShowPrivilegesForRoleOutput {
	s.Grants = v
	return s
}

type GrantForShowPrivilegesForRoleOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Action *string `type:"string" json:",omitempty" enum:"EnumOfActionForShowPrivilegesForRoleOutput"`

	ClusterID *int32 `type:"int32" json:",omitempty"`

	ClusterName *string `type:"string" json:",omitempty"`

	DatabaseName *string `type:"string" json:",omitempty"`

	Privileges []*PrivilegeForShowPrivilegesForRoleOutput `type:"list" json:",omitempty"`

	TableName *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s GrantForShowPrivilegesForRoleOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GrantForShowPrivilegesForRoleOutput) GoString() string {
	return s.String()
}

// SetAction sets the Action field's value.
func (s *GrantForShowPrivilegesForRoleOutput) SetAction(v string) *GrantForShowPrivilegesForRoleOutput {
	s.Action = &v
	return s
}

// SetClusterID sets the ClusterID field's value.
func (s *GrantForShowPrivilegesForRoleOutput) SetClusterID(v int32) *GrantForShowPrivilegesForRoleOutput {
	s.ClusterID = &v
	return s
}

// SetClusterName sets the ClusterName field's value.
func (s *GrantForShowPrivilegesForRoleOutput) SetClusterName(v string) *GrantForShowPrivilegesForRoleOutput {
	s.ClusterName = &v
	return s
}

// SetDatabaseName sets the DatabaseName field's value.
func (s *GrantForShowPrivilegesForRoleOutput) SetDatabaseName(v string) *GrantForShowPrivilegesForRoleOutput {
	s.DatabaseName = &v
	return s
}

// SetPrivileges sets the Privileges field's value.
func (s *GrantForShowPrivilegesForRoleOutput) SetPrivileges(v []*PrivilegeForShowPrivilegesForRoleOutput) *GrantForShowPrivilegesForRoleOutput {
	s.Privileges = v
	return s
}

// SetTableName sets the TableName field's value.
func (s *GrantForShowPrivilegesForRoleOutput) SetTableName(v string) *GrantForShowPrivilegesForRoleOutput {
	s.TableName = &v
	return s
}

type PrivilegeForShowPrivilegesForRoleOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Columns []*string `type:"list" json:",omitempty"`

	Name *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s PrivilegeForShowPrivilegesForRoleOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s PrivilegeForShowPrivilegesForRoleOutput) GoString() string {
	return s.String()
}

// SetColumns sets the Columns field's value.
func (s *PrivilegeForShowPrivilegesForRoleOutput) SetColumns(v []*string) *PrivilegeForShowPrivilegesForRoleOutput {
	s.Columns = v
	return s
}

// SetName sets the Name field's value.
func (s *PrivilegeForShowPrivilegesForRoleOutput) SetName(v string) *PrivilegeForShowPrivilegesForRoleOutput {
	s.Name = &v
	return s
}

type ShowPrivilegesForRoleInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// RoleID is a required field
	RoleID *int32 `type:"int32" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s ShowPrivilegesForRoleInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ShowPrivilegesForRoleInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ShowPrivilegesForRoleInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ShowPrivilegesForRoleInput"}
	if s.RoleID == nil {
		invalidParams.Add(request.NewErrParamRequired("RoleID"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetRoleID sets the RoleID field's value.
func (s *ShowPrivilegesForRoleInput) SetRoleID(v int32) *ShowPrivilegesForRoleInput {
	s.RoleID = &v
	return s
}

type ShowPrivilegesForRoleOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Data *DataForShowPrivilegesForRoleOutput `type:"structure" json:",omitempty"`

	Message *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ShowPrivilegesForRoleOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ShowPrivilegesForRoleOutput) GoString() string {
	return s.String()
}

// SetData sets the Data field's value.
func (s *ShowPrivilegesForRoleOutput) SetData(v *DataForShowPrivilegesForRoleOutput) *ShowPrivilegesForRoleOutput {
	s.Data = v
	return s
}

// SetMessage sets the Message field's value.
func (s *ShowPrivilegesForRoleOutput) SetMessage(v string) *ShowPrivilegesForRoleOutput {
	s.Message = &v
	return s
}

const (
	// EnumOfActionForShowPrivilegesForRoleOutputGrant is a EnumOfActionForShowPrivilegesForRoleOutput enum value
	EnumOfActionForShowPrivilegesForRoleOutputGrant = "GRANT"

	// EnumOfActionForShowPrivilegesForRoleOutputRevoke is a EnumOfActionForShowPrivilegesForRoleOutput enum value
	EnumOfActionForShowPrivilegesForRoleOutputRevoke = "REVOKE"
)
