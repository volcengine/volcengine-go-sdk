// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package bytehousece20240831

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opRevokePrivilegesForUserByIDCommon = "RevokePrivilegesForUserByID"

// RevokePrivilegesForUserByIDCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the RevokePrivilegesForUserByIDCommon operation. The "output" return
// value will be populated with the RevokePrivilegesForUserByIDCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned RevokePrivilegesForUserByIDCommon Request to send the API call to the service.
// the "output" return value is not valid until after RevokePrivilegesForUserByIDCommon Send returns without error.
//
// See RevokePrivilegesForUserByIDCommon for more information on using the RevokePrivilegesForUserByIDCommon
// API call, and error handling.
//
//    // Example sending a request using the RevokePrivilegesForUserByIDCommonRequest method.
//    req, resp := client.RevokePrivilegesForUserByIDCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BYTEHOUSECE20240831) RevokePrivilegesForUserByIDCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opRevokePrivilegesForUserByIDCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// RevokePrivilegesForUserByIDCommon API operation for BYTEHOUSE_CE20240831.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BYTEHOUSE_CE20240831's
// API operation RevokePrivilegesForUserByIDCommon for usage and error information.
func (c *BYTEHOUSECE20240831) RevokePrivilegesForUserByIDCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.RevokePrivilegesForUserByIDCommonRequest(input)
	return out, req.Send()
}

// RevokePrivilegesForUserByIDCommonWithContext is the same as RevokePrivilegesForUserByIDCommon with the addition of
// the ability to pass a context and additional request options.
//
// See RevokePrivilegesForUserByIDCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BYTEHOUSECE20240831) RevokePrivilegesForUserByIDCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.RevokePrivilegesForUserByIDCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opRevokePrivilegesForUserByID = "RevokePrivilegesForUserByID"

// RevokePrivilegesForUserByIDRequest generates a "volcengine/request.Request" representing the
// client's request for the RevokePrivilegesForUserByID operation. The "output" return
// value will be populated with the RevokePrivilegesForUserByIDCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned RevokePrivilegesForUserByIDCommon Request to send the API call to the service.
// the "output" return value is not valid until after RevokePrivilegesForUserByIDCommon Send returns without error.
//
// See RevokePrivilegesForUserByID for more information on using the RevokePrivilegesForUserByID
// API call, and error handling.
//
//    // Example sending a request using the RevokePrivilegesForUserByIDRequest method.
//    req, resp := client.RevokePrivilegesForUserByIDRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BYTEHOUSECE20240831) RevokePrivilegesForUserByIDRequest(input *RevokePrivilegesForUserByIDInput) (req *request.Request, output *RevokePrivilegesForUserByIDOutput) {
	op := &request.Operation{
		Name:       opRevokePrivilegesForUserByID,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &RevokePrivilegesForUserByIDInput{}
	}

	output = &RevokePrivilegesForUserByIDOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// RevokePrivilegesForUserByID API operation for BYTEHOUSE_CE20240831.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BYTEHOUSE_CE20240831's
// API operation RevokePrivilegesForUserByID for usage and error information.
func (c *BYTEHOUSECE20240831) RevokePrivilegesForUserByID(input *RevokePrivilegesForUserByIDInput) (*RevokePrivilegesForUserByIDOutput, error) {
	req, out := c.RevokePrivilegesForUserByIDRequest(input)
	return out, req.Send()
}

// RevokePrivilegesForUserByIDWithContext is the same as RevokePrivilegesForUserByID with the addition of
// the ability to pass a context and additional request options.
//
// See RevokePrivilegesForUserByID for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BYTEHOUSECE20240831) RevokePrivilegesForUserByIDWithContext(ctx volcengine.Context, input *RevokePrivilegesForUserByIDInput, opts ...request.Option) (*RevokePrivilegesForUserByIDOutput, error) {
	req, out := c.RevokePrivilegesForUserByIDRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DataForRevokePrivilegesForUserByIDOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Message *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s DataForRevokePrivilegesForUserByIDOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DataForRevokePrivilegesForUserByIDOutput) GoString() string {
	return s.String()
}

// SetMessage sets the Message field's value.
func (s *DataForRevokePrivilegesForUserByIDOutput) SetMessage(v string) *DataForRevokePrivilegesForUserByIDOutput {
	s.Message = &v
	return s
}

type GrantForRevokePrivilegesForUserByIDInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	ClusterID *int32 `type:"int32" json:",omitempty"`

	GrantOption *bool `type:"boolean" json:",omitempty"`

	GrantTo *string `type:"string" json:",omitempty"`

	OnCluster *string `type:"string" json:",omitempty"`

	Privileges []*PrivilegeForRevokePrivilegesForUserByIDInput `type:"list" json:",omitempty"`

	RawSql *string `type:"string" json:",omitempty"`

	Targets []*TargetForRevokePrivilegesForUserByIDInput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s GrantForRevokePrivilegesForUserByIDInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GrantForRevokePrivilegesForUserByIDInput) GoString() string {
	return s.String()
}

// SetClusterID sets the ClusterID field's value.
func (s *GrantForRevokePrivilegesForUserByIDInput) SetClusterID(v int32) *GrantForRevokePrivilegesForUserByIDInput {
	s.ClusterID = &v
	return s
}

// SetGrantOption sets the GrantOption field's value.
func (s *GrantForRevokePrivilegesForUserByIDInput) SetGrantOption(v bool) *GrantForRevokePrivilegesForUserByIDInput {
	s.GrantOption = &v
	return s
}

// SetGrantTo sets the GrantTo field's value.
func (s *GrantForRevokePrivilegesForUserByIDInput) SetGrantTo(v string) *GrantForRevokePrivilegesForUserByIDInput {
	s.GrantTo = &v
	return s
}

// SetOnCluster sets the OnCluster field's value.
func (s *GrantForRevokePrivilegesForUserByIDInput) SetOnCluster(v string) *GrantForRevokePrivilegesForUserByIDInput {
	s.OnCluster = &v
	return s
}

// SetPrivileges sets the Privileges field's value.
func (s *GrantForRevokePrivilegesForUserByIDInput) SetPrivileges(v []*PrivilegeForRevokePrivilegesForUserByIDInput) *GrantForRevokePrivilegesForUserByIDInput {
	s.Privileges = v
	return s
}

// SetRawSql sets the RawSql field's value.
func (s *GrantForRevokePrivilegesForUserByIDInput) SetRawSql(v string) *GrantForRevokePrivilegesForUserByIDInput {
	s.RawSql = &v
	return s
}

// SetTargets sets the Targets field's value.
func (s *GrantForRevokePrivilegesForUserByIDInput) SetTargets(v []*TargetForRevokePrivilegesForUserByIDInput) *GrantForRevokePrivilegesForUserByIDInput {
	s.Targets = v
	return s
}

type PrivilegeForRevokePrivilegesForUserByIDInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Columns []*string `type:"list" json:",omitempty"`

	Name *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s PrivilegeForRevokePrivilegesForUserByIDInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s PrivilegeForRevokePrivilegesForUserByIDInput) GoString() string {
	return s.String()
}

// SetColumns sets the Columns field's value.
func (s *PrivilegeForRevokePrivilegesForUserByIDInput) SetColumns(v []*string) *PrivilegeForRevokePrivilegesForUserByIDInput {
	s.Columns = v
	return s
}

// SetName sets the Name field's value.
func (s *PrivilegeForRevokePrivilegesForUserByIDInput) SetName(v string) *PrivilegeForRevokePrivilegesForUserByIDInput {
	s.Name = &v
	return s
}

type RevokePrivilegesForUserByIDInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Grants []*GrantForRevokePrivilegesForUserByIDInput `type:"list" json:",omitempty"`

	// UserID is a required field
	UserID *int64 `type:"int64" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s RevokePrivilegesForUserByIDInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s RevokePrivilegesForUserByIDInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *RevokePrivilegesForUserByIDInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "RevokePrivilegesForUserByIDInput"}
	if s.UserID == nil {
		invalidParams.Add(request.NewErrParamRequired("UserID"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetGrants sets the Grants field's value.
func (s *RevokePrivilegesForUserByIDInput) SetGrants(v []*GrantForRevokePrivilegesForUserByIDInput) *RevokePrivilegesForUserByIDInput {
	s.Grants = v
	return s
}

// SetUserID sets the UserID field's value.
func (s *RevokePrivilegesForUserByIDInput) SetUserID(v int64) *RevokePrivilegesForUserByIDInput {
	s.UserID = &v
	return s
}

type RevokePrivilegesForUserByIDOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Data *DataForRevokePrivilegesForUserByIDOutput `type:"structure" json:",omitempty"`

	Message *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s RevokePrivilegesForUserByIDOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s RevokePrivilegesForUserByIDOutput) GoString() string {
	return s.String()
}

// SetData sets the Data field's value.
func (s *RevokePrivilegesForUserByIDOutput) SetData(v *DataForRevokePrivilegesForUserByIDOutput) *RevokePrivilegesForUserByIDOutput {
	s.Data = v
	return s
}

// SetMessage sets the Message field's value.
func (s *RevokePrivilegesForUserByIDOutput) SetMessage(v string) *RevokePrivilegesForUserByIDOutput {
	s.Message = &v
	return s
}

type TargetForRevokePrivilegesForUserByIDInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Database *string `type:"string" json:",omitempty"`

	Table *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s TargetForRevokePrivilegesForUserByIDInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s TargetForRevokePrivilegesForUserByIDInput) GoString() string {
	return s.String()
}

// SetDatabase sets the Database field's value.
func (s *TargetForRevokePrivilegesForUserByIDInput) SetDatabase(v string) *TargetForRevokePrivilegesForUserByIDInput {
	s.Database = &v
	return s
}

// SetTable sets the Table field's value.
func (s *TargetForRevokePrivilegesForUserByIDInput) SetTable(v string) *TargetForRevokePrivilegesForUserByIDInput {
	s.Table = &v
	return s
}
