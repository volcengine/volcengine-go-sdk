// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package bytehousece20240831

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opShowPrivilegesForUserByIDCommon = "ShowPrivilegesForUserByID"

// ShowPrivilegesForUserByIDCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ShowPrivilegesForUserByIDCommon operation. The "output" return
// value will be populated with the ShowPrivilegesForUserByIDCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ShowPrivilegesForUserByIDCommon Request to send the API call to the service.
// the "output" return value is not valid until after ShowPrivilegesForUserByIDCommon Send returns without error.
//
// See ShowPrivilegesForUserByIDCommon for more information on using the ShowPrivilegesForUserByIDCommon
// API call, and error handling.
//
//    // Example sending a request using the ShowPrivilegesForUserByIDCommonRequest method.
//    req, resp := client.ShowPrivilegesForUserByIDCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BYTEHOUSECE20240831) ShowPrivilegesForUserByIDCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opShowPrivilegesForUserByIDCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ShowPrivilegesForUserByIDCommon API operation for BYTEHOUSE_CE20240831.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BYTEHOUSE_CE20240831's
// API operation ShowPrivilegesForUserByIDCommon for usage and error information.
func (c *BYTEHOUSECE20240831) ShowPrivilegesForUserByIDCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ShowPrivilegesForUserByIDCommonRequest(input)
	return out, req.Send()
}

// ShowPrivilegesForUserByIDCommonWithContext is the same as ShowPrivilegesForUserByIDCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ShowPrivilegesForUserByIDCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BYTEHOUSECE20240831) ShowPrivilegesForUserByIDCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ShowPrivilegesForUserByIDCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opShowPrivilegesForUserByID = "ShowPrivilegesForUserByID"

// ShowPrivilegesForUserByIDRequest generates a "volcengine/request.Request" representing the
// client's request for the ShowPrivilegesForUserByID operation. The "output" return
// value will be populated with the ShowPrivilegesForUserByIDCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ShowPrivilegesForUserByIDCommon Request to send the API call to the service.
// the "output" return value is not valid until after ShowPrivilegesForUserByIDCommon Send returns without error.
//
// See ShowPrivilegesForUserByID for more information on using the ShowPrivilegesForUserByID
// API call, and error handling.
//
//    // Example sending a request using the ShowPrivilegesForUserByIDRequest method.
//    req, resp := client.ShowPrivilegesForUserByIDRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BYTEHOUSECE20240831) ShowPrivilegesForUserByIDRequest(input *ShowPrivilegesForUserByIDInput) (req *request.Request, output *ShowPrivilegesForUserByIDOutput) {
	op := &request.Operation{
		Name:       opShowPrivilegesForUserByID,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ShowPrivilegesForUserByIDInput{}
	}

	output = &ShowPrivilegesForUserByIDOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ShowPrivilegesForUserByID API operation for BYTEHOUSE_CE20240831.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BYTEHOUSE_CE20240831's
// API operation ShowPrivilegesForUserByID for usage and error information.
func (c *BYTEHOUSECE20240831) ShowPrivilegesForUserByID(input *ShowPrivilegesForUserByIDInput) (*ShowPrivilegesForUserByIDOutput, error) {
	req, out := c.ShowPrivilegesForUserByIDRequest(input)
	return out, req.Send()
}

// ShowPrivilegesForUserByIDWithContext is the same as ShowPrivilegesForUserByID with the addition of
// the ability to pass a context and additional request options.
//
// See ShowPrivilegesForUserByID for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BYTEHOUSECE20240831) ShowPrivilegesForUserByIDWithContext(ctx volcengine.Context, input *ShowPrivilegesForUserByIDInput, opts ...request.Option) (*ShowPrivilegesForUserByIDOutput, error) {
	req, out := c.ShowPrivilegesForUserByIDRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DataForShowPrivilegesForUserByIDOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Grants []*GrantForShowPrivilegesForUserByIDOutput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s DataForShowPrivilegesForUserByIDOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DataForShowPrivilegesForUserByIDOutput) GoString() string {
	return s.String()
}

// SetGrants sets the Grants field's value.
func (s *DataForShowPrivilegesForUserByIDOutput) SetGrants(v []*GrantForShowPrivilegesForUserByIDOutput) *DataForShowPrivilegesForUserByIDOutput {
	s.Grants = v
	return s
}

type GrantForShowPrivilegesForUserByIDOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Action *string `type:"string" json:",omitempty" enum:"EnumOfActionForShowPrivilegesForUserByIDOutput"`

	ClusterID *int32 `type:"int32" json:",omitempty"`

	ClusterName *string `type:"string" json:",omitempty"`

	DatabaseName *string `type:"string" json:",omitempty"`

	Privileges []*PrivilegeForShowPrivilegesForUserByIDOutput `type:"list" json:",omitempty"`

	TableName *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s GrantForShowPrivilegesForUserByIDOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GrantForShowPrivilegesForUserByIDOutput) GoString() string {
	return s.String()
}

// SetAction sets the Action field's value.
func (s *GrantForShowPrivilegesForUserByIDOutput) SetAction(v string) *GrantForShowPrivilegesForUserByIDOutput {
	s.Action = &v
	return s
}

// SetClusterID sets the ClusterID field's value.
func (s *GrantForShowPrivilegesForUserByIDOutput) SetClusterID(v int32) *GrantForShowPrivilegesForUserByIDOutput {
	s.ClusterID = &v
	return s
}

// SetClusterName sets the ClusterName field's value.
func (s *GrantForShowPrivilegesForUserByIDOutput) SetClusterName(v string) *GrantForShowPrivilegesForUserByIDOutput {
	s.ClusterName = &v
	return s
}

// SetDatabaseName sets the DatabaseName field's value.
func (s *GrantForShowPrivilegesForUserByIDOutput) SetDatabaseName(v string) *GrantForShowPrivilegesForUserByIDOutput {
	s.DatabaseName = &v
	return s
}

// SetPrivileges sets the Privileges field's value.
func (s *GrantForShowPrivilegesForUserByIDOutput) SetPrivileges(v []*PrivilegeForShowPrivilegesForUserByIDOutput) *GrantForShowPrivilegesForUserByIDOutput {
	s.Privileges = v
	return s
}

// SetTableName sets the TableName field's value.
func (s *GrantForShowPrivilegesForUserByIDOutput) SetTableName(v string) *GrantForShowPrivilegesForUserByIDOutput {
	s.TableName = &v
	return s
}

type PrivilegeForShowPrivilegesForUserByIDOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Columns []*string `type:"list" json:",omitempty"`

	Name *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s PrivilegeForShowPrivilegesForUserByIDOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s PrivilegeForShowPrivilegesForUserByIDOutput) GoString() string {
	return s.String()
}

// SetColumns sets the Columns field's value.
func (s *PrivilegeForShowPrivilegesForUserByIDOutput) SetColumns(v []*string) *PrivilegeForShowPrivilegesForUserByIDOutput {
	s.Columns = v
	return s
}

// SetName sets the Name field's value.
func (s *PrivilegeForShowPrivilegesForUserByIDOutput) SetName(v string) *PrivilegeForShowPrivilegesForUserByIDOutput {
	s.Name = &v
	return s
}

type ShowPrivilegesForUserByIDInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// UserID is a required field
	UserID *int64 `type:"int64" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s ShowPrivilegesForUserByIDInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ShowPrivilegesForUserByIDInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ShowPrivilegesForUserByIDInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ShowPrivilegesForUserByIDInput"}
	if s.UserID == nil {
		invalidParams.Add(request.NewErrParamRequired("UserID"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetUserID sets the UserID field's value.
func (s *ShowPrivilegesForUserByIDInput) SetUserID(v int64) *ShowPrivilegesForUserByIDInput {
	s.UserID = &v
	return s
}

type ShowPrivilegesForUserByIDOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Data *DataForShowPrivilegesForUserByIDOutput `type:"structure" json:",omitempty"`

	Message *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ShowPrivilegesForUserByIDOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ShowPrivilegesForUserByIDOutput) GoString() string {
	return s.String()
}

// SetData sets the Data field's value.
func (s *ShowPrivilegesForUserByIDOutput) SetData(v *DataForShowPrivilegesForUserByIDOutput) *ShowPrivilegesForUserByIDOutput {
	s.Data = v
	return s
}

// SetMessage sets the Message field's value.
func (s *ShowPrivilegesForUserByIDOutput) SetMessage(v string) *ShowPrivilegesForUserByIDOutput {
	s.Message = &v
	return s
}

const (
	// EnumOfActionForShowPrivilegesForUserByIDOutputGrant is a EnumOfActionForShowPrivilegesForUserByIDOutput enum value
	EnumOfActionForShowPrivilegesForUserByIDOutputGrant = "GRANT"

	// EnumOfActionForShowPrivilegesForUserByIDOutputRevoke is a EnumOfActionForShowPrivilegesForUserByIDOutput enum value
	EnumOfActionForShowPrivilegesForUserByIDOutputRevoke = "REVOKE"
)
