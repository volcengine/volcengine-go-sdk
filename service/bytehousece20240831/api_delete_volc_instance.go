// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package bytehousece20240831

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDeleteVolcInstanceCommon = "DeleteVolcInstance"

// DeleteVolcInstanceCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteVolcInstanceCommon operation. The "output" return
// value will be populated with the DeleteVolcInstanceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteVolcInstanceCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteVolcInstanceCommon Send returns without error.
//
// See DeleteVolcInstanceCommon for more information on using the DeleteVolcInstanceCommon
// API call, and error handling.
//
//    // Example sending a request using the DeleteVolcInstanceCommonRequest method.
//    req, resp := client.DeleteVolcInstanceCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BYTEHOUSECE20240831) DeleteVolcInstanceCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteVolcInstanceCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteVolcInstanceCommon API operation for BYTEHOUSE_CE20240831.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BYTEHOUSE_CE20240831's
// API operation DeleteVolcInstanceCommon for usage and error information.
func (c *BYTEHOUSECE20240831) DeleteVolcInstanceCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteVolcInstanceCommonRequest(input)
	return out, req.Send()
}

// DeleteVolcInstanceCommonWithContext is the same as DeleteVolcInstanceCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteVolcInstanceCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BYTEHOUSECE20240831) DeleteVolcInstanceCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteVolcInstanceCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteVolcInstance = "DeleteVolcInstance"

// DeleteVolcInstanceRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteVolcInstance operation. The "output" return
// value will be populated with the DeleteVolcInstanceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteVolcInstanceCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteVolcInstanceCommon Send returns without error.
//
// See DeleteVolcInstance for more information on using the DeleteVolcInstance
// API call, and error handling.
//
//    // Example sending a request using the DeleteVolcInstanceRequest method.
//    req, resp := client.DeleteVolcInstanceRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BYTEHOUSECE20240831) DeleteVolcInstanceRequest(input *DeleteVolcInstanceInput) (req *request.Request, output *DeleteVolcInstanceOutput) {
	op := &request.Operation{
		Name:       opDeleteVolcInstance,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteVolcInstanceInput{}
	}

	output = &DeleteVolcInstanceOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteVolcInstance API operation for BYTEHOUSE_CE20240831.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BYTEHOUSE_CE20240831's
// API operation DeleteVolcInstance for usage and error information.
func (c *BYTEHOUSECE20240831) DeleteVolcInstance(input *DeleteVolcInstanceInput) (*DeleteVolcInstanceOutput, error) {
	req, out := c.DeleteVolcInstanceRequest(input)
	return out, req.Send()
}

// DeleteVolcInstanceWithContext is the same as DeleteVolcInstance with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteVolcInstance for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BYTEHOUSECE20240831) DeleteVolcInstanceWithContext(ctx volcengine.Context, input *DeleteVolcInstanceInput, opts ...request.Option) (*DeleteVolcInstanceOutput, error) {
	req, out := c.DeleteVolcInstanceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DeleteVolcInstanceInput struct {
	_ struct{} `type:"structure"`

	// Cluster is a required field
	Cluster *string `locationName:"cluster" type:"string" required:"true"`
}

// String returns the string representation
func (s DeleteVolcInstanceInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteVolcInstanceInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeleteVolcInstanceInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DeleteVolcInstanceInput"}
	if s.Cluster == nil {
		invalidParams.Add(request.NewErrParamRequired("Cluster"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetCluster sets the Cluster field's value.
func (s *DeleteVolcInstanceInput) SetCluster(v string) *DeleteVolcInstanceInput {
	s.Cluster = &v
	return s
}

type DeleteVolcInstanceOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s DeleteVolcInstanceOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteVolcInstanceOutput) GoString() string {
	return s.String()
}
