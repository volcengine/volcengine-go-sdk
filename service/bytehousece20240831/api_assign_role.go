// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package bytehousece20240831

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opAssignRoleCommon = "AssignRole"

// AssignRoleCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the AssignRoleCommon operation. The "output" return
// value will be populated with the AssignRoleCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned AssignRoleCommon Request to send the API call to the service.
// the "output" return value is not valid until after AssignRoleCommon Send returns without error.
//
// See AssignRoleCommon for more information on using the AssignRoleCommon
// API call, and error handling.
//
//    // Example sending a request using the AssignRoleCommonRequest method.
//    req, resp := client.AssignRoleCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BYTEHOUSECE20240831) AssignRoleCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opAssignRoleCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// AssignRoleCommon API operation for BYTEHOUSE_CE20240831.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BYTEHOUSE_CE20240831's
// API operation AssignRoleCommon for usage and error information.
func (c *BYTEHOUSECE20240831) AssignRoleCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.AssignRoleCommonRequest(input)
	return out, req.Send()
}

// AssignRoleCommonWithContext is the same as AssignRoleCommon with the addition of
// the ability to pass a context and additional request options.
//
// See AssignRoleCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BYTEHOUSECE20240831) AssignRoleCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.AssignRoleCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opAssignRole = "AssignRole"

// AssignRoleRequest generates a "volcengine/request.Request" representing the
// client's request for the AssignRole operation. The "output" return
// value will be populated with the AssignRoleCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned AssignRoleCommon Request to send the API call to the service.
// the "output" return value is not valid until after AssignRoleCommon Send returns without error.
//
// See AssignRole for more information on using the AssignRole
// API call, and error handling.
//
//    // Example sending a request using the AssignRoleRequest method.
//    req, resp := client.AssignRoleRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BYTEHOUSECE20240831) AssignRoleRequest(input *AssignRoleInput) (req *request.Request, output *AssignRoleOutput) {
	op := &request.Operation{
		Name:       opAssignRole,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &AssignRoleInput{}
	}

	output = &AssignRoleOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// AssignRole API operation for BYTEHOUSE_CE20240831.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BYTEHOUSE_CE20240831's
// API operation AssignRole for usage and error information.
func (c *BYTEHOUSECE20240831) AssignRole(input *AssignRoleInput) (*AssignRoleOutput, error) {
	req, out := c.AssignRoleRequest(input)
	return out, req.Send()
}

// AssignRoleWithContext is the same as AssignRole with the addition of
// the ability to pass a context and additional request options.
//
// See AssignRole for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BYTEHOUSECE20240831) AssignRoleWithContext(ctx volcengine.Context, input *AssignRoleInput, opts ...request.Option) (*AssignRoleOutput, error) {
	req, out := c.AssignRoleRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type AssignRoleInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// RoleID is a required field
	RoleID *int32 `type:"int32" json:",omitempty" required:"true"`

	Users []*UserForAssignRoleInput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s AssignRoleInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s AssignRoleInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *AssignRoleInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "AssignRoleInput"}
	if s.RoleID == nil {
		invalidParams.Add(request.NewErrParamRequired("RoleID"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetRoleID sets the RoleID field's value.
func (s *AssignRoleInput) SetRoleID(v int32) *AssignRoleInput {
	s.RoleID = &v
	return s
}

// SetUsers sets the Users field's value.
func (s *AssignRoleInput) SetUsers(v []*UserForAssignRoleInput) *AssignRoleInput {
	s.Users = v
	return s
}

type AssignRoleOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Data *DataForAssignRoleOutput `type:"structure" json:",omitempty"`

	Message *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s AssignRoleOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s AssignRoleOutput) GoString() string {
	return s.String()
}

// SetData sets the Data field's value.
func (s *AssignRoleOutput) SetData(v *DataForAssignRoleOutput) *AssignRoleOutput {
	s.Data = v
	return s
}

// SetMessage sets the Message field's value.
func (s *AssignRoleOutput) SetMessage(v string) *AssignRoleOutput {
	s.Message = &v
	return s
}

type DataForAssignRoleOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Message *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s DataForAssignRoleOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DataForAssignRoleOutput) GoString() string {
	return s.String()
}

// SetMessage sets the Message field's value.
func (s *DataForAssignRoleOutput) SetMessage(v string) *DataForAssignRoleOutput {
	s.Message = &v
	return s
}

type UserForAssignRoleInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	AdminOption *bool `type:"boolean" json:",omitempty"`

	CreatedAt *int64 `type:"int64" json:",omitempty"`

	Username *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s UserForAssignRoleInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UserForAssignRoleInput) GoString() string {
	return s.String()
}

// SetAdminOption sets the AdminOption field's value.
func (s *UserForAssignRoleInput) SetAdminOption(v bool) *UserForAssignRoleInput {
	s.AdminOption = &v
	return s
}

// SetCreatedAt sets the CreatedAt field's value.
func (s *UserForAssignRoleInput) SetCreatedAt(v int64) *UserForAssignRoleInput {
	s.CreatedAt = &v
	return s
}

// SetUsername sets the Username field's value.
func (s *UserForAssignRoleInput) SetUsername(v string) *UserForAssignRoleInput {
	s.Username = &v
	return s
}
