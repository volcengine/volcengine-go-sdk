// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package bytehousece20240831

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opGetUserInitialPasswordCommon = "GetUserInitialPassword"

// GetUserInitialPasswordCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the GetUserInitialPasswordCommon operation. The "output" return
// value will be populated with the GetUserInitialPasswordCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetUserInitialPasswordCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetUserInitialPasswordCommon Send returns without error.
//
// See GetUserInitialPasswordCommon for more information on using the GetUserInitialPasswordCommon
// API call, and error handling.
//
//    // Example sending a request using the GetUserInitialPasswordCommonRequest method.
//    req, resp := client.GetUserInitialPasswordCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BYTEHOUSECE20240831) GetUserInitialPasswordCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opGetUserInitialPasswordCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetUserInitialPasswordCommon API operation for BYTEHOUSE_CE20240831.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BYTEHOUSE_CE20240831's
// API operation GetUserInitialPasswordCommon for usage and error information.
func (c *BYTEHOUSECE20240831) GetUserInitialPasswordCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.GetUserInitialPasswordCommonRequest(input)
	return out, req.Send()
}

// GetUserInitialPasswordCommonWithContext is the same as GetUserInitialPasswordCommon with the addition of
// the ability to pass a context and additional request options.
//
// See GetUserInitialPasswordCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BYTEHOUSECE20240831) GetUserInitialPasswordCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.GetUserInitialPasswordCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opGetUserInitialPassword = "GetUserInitialPassword"

// GetUserInitialPasswordRequest generates a "volcengine/request.Request" representing the
// client's request for the GetUserInitialPassword operation. The "output" return
// value will be populated with the GetUserInitialPasswordCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetUserInitialPasswordCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetUserInitialPasswordCommon Send returns without error.
//
// See GetUserInitialPassword for more information on using the GetUserInitialPassword
// API call, and error handling.
//
//    // Example sending a request using the GetUserInitialPasswordRequest method.
//    req, resp := client.GetUserInitialPasswordRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BYTEHOUSECE20240831) GetUserInitialPasswordRequest(input *GetUserInitialPasswordInput) (req *request.Request, output *GetUserInitialPasswordOutput) {
	op := &request.Operation{
		Name:       opGetUserInitialPassword,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &GetUserInitialPasswordInput{}
	}

	output = &GetUserInitialPasswordOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetUserInitialPassword API operation for BYTEHOUSE_CE20240831.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BYTEHOUSE_CE20240831's
// API operation GetUserInitialPassword for usage and error information.
func (c *BYTEHOUSECE20240831) GetUserInitialPassword(input *GetUserInitialPasswordInput) (*GetUserInitialPasswordOutput, error) {
	req, out := c.GetUserInitialPasswordRequest(input)
	return out, req.Send()
}

// GetUserInitialPasswordWithContext is the same as GetUserInitialPassword with the addition of
// the ability to pass a context and additional request options.
//
// See GetUserInitialPassword for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BYTEHOUSECE20240831) GetUserInitialPasswordWithContext(ctx volcengine.Context, input *GetUserInitialPasswordInput, opts ...request.Option) (*GetUserInitialPasswordOutput, error) {
	req, out := c.GetUserInitialPasswordRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DataForGetUserInitialPasswordOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	User *UserForGetUserInitialPasswordOutput `type:"structure" json:",omitempty"`
}

// String returns the string representation
func (s DataForGetUserInitialPasswordOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DataForGetUserInitialPasswordOutput) GoString() string {
	return s.String()
}

// SetUser sets the User field's value.
func (s *DataForGetUserInitialPasswordOutput) SetUser(v *UserForGetUserInitialPasswordOutput) *DataForGetUserInitialPasswordOutput {
	s.User = v
	return s
}

type GetUserInitialPasswordInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// Username is a required field
	Username *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s GetUserInitialPasswordInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetUserInitialPasswordInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *GetUserInitialPasswordInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "GetUserInitialPasswordInput"}
	if s.Username == nil {
		invalidParams.Add(request.NewErrParamRequired("Username"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetUsername sets the Username field's value.
func (s *GetUserInitialPasswordInput) SetUsername(v string) *GetUserInitialPasswordInput {
	s.Username = &v
	return s
}

type GetUserInitialPasswordOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Data *DataForGetUserInitialPasswordOutput `type:"structure" json:",omitempty"`

	Message *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s GetUserInitialPasswordOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetUserInitialPasswordOutput) GoString() string {
	return s.String()
}

// SetData sets the Data field's value.
func (s *GetUserInitialPasswordOutput) SetData(v *DataForGetUserInitialPasswordOutput) *GetUserInitialPasswordOutput {
	s.Data = v
	return s
}

// SetMessage sets the Message field's value.
func (s *GetUserInitialPasswordOutput) SetMessage(v string) *GetUserInitialPasswordOutput {
	s.Message = &v
	return s
}

type UserForGetUserInitialPasswordOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Message *string `type:"string" json:",omitempty"`

	PasswordIsDefault *bool `type:"boolean" json:",omitempty"`
}

// String returns the string representation
func (s UserForGetUserInitialPasswordOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UserForGetUserInitialPasswordOutput) GoString() string {
	return s.String()
}

// SetMessage sets the Message field's value.
func (s *UserForGetUserInitialPasswordOutput) SetMessage(v string) *UserForGetUserInitialPasswordOutput {
	s.Message = &v
	return s
}

// SetPasswordIsDefault sets the PasswordIsDefault field's value.
func (s *UserForGetUserInitialPasswordOutput) SetPasswordIsDefault(v bool) *UserForGetUserInitialPasswordOutput {
	s.PasswordIsDefault = &v
	return s
}
