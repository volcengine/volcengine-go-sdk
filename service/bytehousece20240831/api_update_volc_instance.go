// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package bytehousece20240831

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opUpdateVolcInstanceCommon = "UpdateVolcInstance"

// UpdateVolcInstanceCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateVolcInstanceCommon operation. The "output" return
// value will be populated with the UpdateVolcInstanceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateVolcInstanceCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateVolcInstanceCommon Send returns without error.
//
// See UpdateVolcInstanceCommon for more information on using the UpdateVolcInstanceCommon
// API call, and error handling.
//
//    // Example sending a request using the UpdateVolcInstanceCommonRequest method.
//    req, resp := client.UpdateVolcInstanceCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BYTEHOUSECE20240831) UpdateVolcInstanceCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opUpdateVolcInstanceCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// UpdateVolcInstanceCommon API operation for BYTEHOUSE_CE20240831.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BYTEHOUSE_CE20240831's
// API operation UpdateVolcInstanceCommon for usage and error information.
func (c *BYTEHOUSECE20240831) UpdateVolcInstanceCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.UpdateVolcInstanceCommonRequest(input)
	return out, req.Send()
}

// UpdateVolcInstanceCommonWithContext is the same as UpdateVolcInstanceCommon with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateVolcInstanceCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BYTEHOUSECE20240831) UpdateVolcInstanceCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.UpdateVolcInstanceCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opUpdateVolcInstance = "UpdateVolcInstance"

// UpdateVolcInstanceRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateVolcInstance operation. The "output" return
// value will be populated with the UpdateVolcInstanceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateVolcInstanceCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateVolcInstanceCommon Send returns without error.
//
// See UpdateVolcInstance for more information on using the UpdateVolcInstance
// API call, and error handling.
//
//    // Example sending a request using the UpdateVolcInstanceRequest method.
//    req, resp := client.UpdateVolcInstanceRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BYTEHOUSECE20240831) UpdateVolcInstanceRequest(input *UpdateVolcInstanceInput) (req *request.Request, output *UpdateVolcInstanceOutput) {
	op := &request.Operation{
		Name:       opUpdateVolcInstance,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UpdateVolcInstanceInput{}
	}

	output = &UpdateVolcInstanceOutput{}
	req = c.newRequest(op, input, output)

	return
}

// UpdateVolcInstance API operation for BYTEHOUSE_CE20240831.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BYTEHOUSE_CE20240831's
// API operation UpdateVolcInstance for usage and error information.
func (c *BYTEHOUSECE20240831) UpdateVolcInstance(input *UpdateVolcInstanceInput) (*UpdateVolcInstanceOutput, error) {
	req, out := c.UpdateVolcInstanceRequest(input)
	return out, req.Send()
}

// UpdateVolcInstanceWithContext is the same as UpdateVolcInstance with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateVolcInstance for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BYTEHOUSECE20240831) UpdateVolcInstanceWithContext(ctx volcengine.Context, input *UpdateVolcInstanceInput, opts ...request.Option) (*UpdateVolcInstanceOutput, error) {
	req, out := c.UpdateVolcInstanceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type UpdateVolcInstanceInput struct {
	_ struct{} `type:"structure"`

	// Cluster is a required field
	Cluster *string `locationName:"cluster" type:"string" required:"true"`
}

// String returns the string representation
func (s UpdateVolcInstanceInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateVolcInstanceInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UpdateVolcInstanceInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "UpdateVolcInstanceInput"}
	if s.Cluster == nil {
		invalidParams.Add(request.NewErrParamRequired("Cluster"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetCluster sets the Cluster field's value.
func (s *UpdateVolcInstanceInput) SetCluster(v string) *UpdateVolcInstanceInput {
	s.Cluster = &v
	return s
}

type UpdateVolcInstanceOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s UpdateVolcInstanceOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateVolcInstanceOutput) GoString() string {
	return s.String()
}
