// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vmp

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDeleteIntegrationTaskCommon = "DeleteIntegrationTask"

// DeleteIntegrationTaskCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteIntegrationTaskCommon operation. The "output" return
// value will be populated with the DeleteIntegrationTaskCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteIntegrationTaskCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteIntegrationTaskCommon Send returns without error.
//
// See DeleteIntegrationTaskCommon for more information on using the DeleteIntegrationTaskCommon
// API call, and error handling.
//
//    // Example sending a request using the DeleteIntegrationTaskCommonRequest method.
//    req, resp := client.DeleteIntegrationTaskCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VMP) DeleteIntegrationTaskCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteIntegrationTaskCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DeleteIntegrationTaskCommon API operation for VMP.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VMP's
// API operation DeleteIntegrationTaskCommon for usage and error information.
func (c *VMP) DeleteIntegrationTaskCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteIntegrationTaskCommonRequest(input)
	return out, req.Send()
}

// DeleteIntegrationTaskCommonWithContext is the same as DeleteIntegrationTaskCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteIntegrationTaskCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VMP) DeleteIntegrationTaskCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteIntegrationTaskCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteIntegrationTask = "DeleteIntegrationTask"

// DeleteIntegrationTaskRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteIntegrationTask operation. The "output" return
// value will be populated with the DeleteIntegrationTaskCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteIntegrationTaskCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteIntegrationTaskCommon Send returns without error.
//
// See DeleteIntegrationTask for more information on using the DeleteIntegrationTask
// API call, and error handling.
//
//    // Example sending a request using the DeleteIntegrationTaskRequest method.
//    req, resp := client.DeleteIntegrationTaskRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VMP) DeleteIntegrationTaskRequest(input *DeleteIntegrationTaskInput) (req *request.Request, output *DeleteIntegrationTaskOutput) {
	op := &request.Operation{
		Name:       opDeleteIntegrationTask,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteIntegrationTaskInput{}
	}

	output = &DeleteIntegrationTaskOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DeleteIntegrationTask API operation for VMP.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VMP's
// API operation DeleteIntegrationTask for usage and error information.
func (c *VMP) DeleteIntegrationTask(input *DeleteIntegrationTaskInput) (*DeleteIntegrationTaskOutput, error) {
	req, out := c.DeleteIntegrationTaskRequest(input)
	return out, req.Send()
}

// DeleteIntegrationTaskWithContext is the same as DeleteIntegrationTask with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteIntegrationTask for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VMP) DeleteIntegrationTaskWithContext(ctx volcengine.Context, input *DeleteIntegrationTaskInput, opts ...request.Option) (*DeleteIntegrationTaskOutput, error) {
	req, out := c.DeleteIntegrationTaskRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DeleteIntegrationTaskInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// Id is a required field
	Id *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s DeleteIntegrationTaskInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteIntegrationTaskInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeleteIntegrationTaskInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DeleteIntegrationTaskInput"}
	if s.Id == nil {
		invalidParams.Add(request.NewErrParamRequired("Id"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetId sets the Id field's value.
func (s *DeleteIntegrationTaskInput) SetId(v string) *DeleteIntegrationTaskInput {
	s.Id = &v
	return s
}

type DeleteIntegrationTaskOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Id *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s DeleteIntegrationTaskOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteIntegrationTaskOutput) GoString() string {
	return s.String()
}

// SetId sets the Id field's value.
func (s *DeleteIntegrationTaskOutput) SetId(v string) *DeleteIntegrationTaskOutput {
	s.Id = &v
	return s
}
