// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vmp

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opUpdateRuleFileCommon = "UpdateRuleFile"

// UpdateRuleFileCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateRuleFileCommon operation. The "output" return
// value will be populated with the UpdateRuleFileCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateRuleFileCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateRuleFileCommon Send returns without error.
//
// See UpdateRuleFileCommon for more information on using the UpdateRuleFileCommon
// API call, and error handling.
//
//    // Example sending a request using the UpdateRuleFileCommonRequest method.
//    req, resp := client.UpdateRuleFileCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VMP) UpdateRuleFileCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opUpdateRuleFileCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateRuleFileCommon API operation for VMP.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VMP's
// API operation UpdateRuleFileCommon for usage and error information.
func (c *VMP) UpdateRuleFileCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.UpdateRuleFileCommonRequest(input)
	return out, req.Send()
}

// UpdateRuleFileCommonWithContext is the same as UpdateRuleFileCommon with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateRuleFileCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VMP) UpdateRuleFileCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.UpdateRuleFileCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opUpdateRuleFile = "UpdateRuleFile"

// UpdateRuleFileRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateRuleFile operation. The "output" return
// value will be populated with the UpdateRuleFileCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateRuleFileCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateRuleFileCommon Send returns without error.
//
// See UpdateRuleFile for more information on using the UpdateRuleFile
// API call, and error handling.
//
//    // Example sending a request using the UpdateRuleFileRequest method.
//    req, resp := client.UpdateRuleFileRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VMP) UpdateRuleFileRequest(input *UpdateRuleFileInput) (req *request.Request, output *UpdateRuleFileOutput) {
	op := &request.Operation{
		Name:       opUpdateRuleFile,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UpdateRuleFileInput{}
	}

	output = &UpdateRuleFileOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateRuleFile API operation for VMP.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VMP's
// API operation UpdateRuleFile for usage and error information.
func (c *VMP) UpdateRuleFile(input *UpdateRuleFileInput) (*UpdateRuleFileOutput, error) {
	req, out := c.UpdateRuleFileRequest(input)
	return out, req.Send()
}

// UpdateRuleFileWithContext is the same as UpdateRuleFile with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateRuleFile for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VMP) UpdateRuleFileWithContext(ctx volcengine.Context, input *UpdateRuleFileInput, opts ...request.Option) (*UpdateRuleFileOutput, error) {
	req, out := c.UpdateRuleFileRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type UpdateRuleFileInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Content *string `type:"string" json:",omitempty"`

	Description *string `type:"string" json:",omitempty"`

	Id *string `type:"string" json:",omitempty"`

	Name *string `type:"string" json:",omitempty"`

	TargetWorkspaceId *string `type:"string" json:",omitempty"`

	WorkspaceId *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s UpdateRuleFileInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateRuleFileInput) GoString() string {
	return s.String()
}

// SetContent sets the Content field's value.
func (s *UpdateRuleFileInput) SetContent(v string) *UpdateRuleFileInput {
	s.Content = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *UpdateRuleFileInput) SetDescription(v string) *UpdateRuleFileInput {
	s.Description = &v
	return s
}

// SetId sets the Id field's value.
func (s *UpdateRuleFileInput) SetId(v string) *UpdateRuleFileInput {
	s.Id = &v
	return s
}

// SetName sets the Name field's value.
func (s *UpdateRuleFileInput) SetName(v string) *UpdateRuleFileInput {
	s.Name = &v
	return s
}

// SetTargetWorkspaceId sets the TargetWorkspaceId field's value.
func (s *UpdateRuleFileInput) SetTargetWorkspaceId(v string) *UpdateRuleFileInput {
	s.TargetWorkspaceId = &v
	return s
}

// SetWorkspaceId sets the WorkspaceId field's value.
func (s *UpdateRuleFileInput) SetWorkspaceId(v string) *UpdateRuleFileInput {
	s.WorkspaceId = &v
	return s
}

type UpdateRuleFileOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Id *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s UpdateRuleFileOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateRuleFileOutput) GoString() string {
	return s.String()
}

// SetId sets the Id field's value.
func (s *UpdateRuleFileOutput) SetId(v string) *UpdateRuleFileOutput {
	s.Id = &v
	return s
}
