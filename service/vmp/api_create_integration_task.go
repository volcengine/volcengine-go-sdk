// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vmp

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opCreateIntegrationTaskCommon = "CreateIntegrationTask"

// CreateIntegrationTaskCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateIntegrationTaskCommon operation. The "output" return
// value will be populated with the CreateIntegrationTaskCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateIntegrationTaskCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateIntegrationTaskCommon Send returns without error.
//
// See CreateIntegrationTaskCommon for more information on using the CreateIntegrationTaskCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateIntegrationTaskCommonRequest method.
//    req, resp := client.CreateIntegrationTaskCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VMP) CreateIntegrationTaskCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateIntegrationTaskCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateIntegrationTaskCommon API operation for VMP.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VMP's
// API operation CreateIntegrationTaskCommon for usage and error information.
func (c *VMP) CreateIntegrationTaskCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateIntegrationTaskCommonRequest(input)
	return out, req.Send()
}

// CreateIntegrationTaskCommonWithContext is the same as CreateIntegrationTaskCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateIntegrationTaskCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VMP) CreateIntegrationTaskCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateIntegrationTaskCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateIntegrationTask = "CreateIntegrationTask"

// CreateIntegrationTaskRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateIntegrationTask operation. The "output" return
// value will be populated with the CreateIntegrationTaskCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateIntegrationTaskCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateIntegrationTaskCommon Send returns without error.
//
// See CreateIntegrationTask for more information on using the CreateIntegrationTask
// API call, and error handling.
//
//    // Example sending a request using the CreateIntegrationTaskRequest method.
//    req, resp := client.CreateIntegrationTaskRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VMP) CreateIntegrationTaskRequest(input *CreateIntegrationTaskInput) (req *request.Request, output *CreateIntegrationTaskOutput) {
	op := &request.Operation{
		Name:       opCreateIntegrationTask,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateIntegrationTaskInput{}
	}

	output = &CreateIntegrationTaskOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateIntegrationTask API operation for VMP.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VMP's
// API operation CreateIntegrationTask for usage and error information.
func (c *VMP) CreateIntegrationTask(input *CreateIntegrationTaskInput) (*CreateIntegrationTaskOutput, error) {
	req, out := c.CreateIntegrationTaskRequest(input)
	return out, req.Send()
}

// CreateIntegrationTaskWithContext is the same as CreateIntegrationTask with the addition of
// the ability to pass a context and additional request options.
//
// See CreateIntegrationTask for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VMP) CreateIntegrationTaskWithContext(ctx volcengine.Context, input *CreateIntegrationTaskInput, opts ...request.Option) (*CreateIntegrationTaskOutput, error) {
	req, out := c.CreateIntegrationTaskRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type CreateIntegrationTaskInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Environment *string `type:"string" json:",omitempty"`

	// Name is a required field
	Name *string `type:"string" json:",omitempty" required:"true"`

	// Params is a required field
	Params *string `type:"string" json:",omitempty" required:"true"`

	ProjectName *string `type:"string" json:",omitempty"`

	SubType *string `type:"string" json:",omitempty"`

	Tags []*TagForCreateIntegrationTaskInput `type:"list" json:",omitempty"`

	// Type is a required field
	Type *string `type:"string" json:",omitempty" required:"true"`

	VkeClusterId *string `type:"string" json:",omitempty"`

	WorkspaceId *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s CreateIntegrationTaskInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateIntegrationTaskInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateIntegrationTaskInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CreateIntegrationTaskInput"}
	if s.Name == nil {
		invalidParams.Add(request.NewErrParamRequired("Name"))
	}
	if s.Params == nil {
		invalidParams.Add(request.NewErrParamRequired("Params"))
	}
	if s.Type == nil {
		invalidParams.Add(request.NewErrParamRequired("Type"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetEnvironment sets the Environment field's value.
func (s *CreateIntegrationTaskInput) SetEnvironment(v string) *CreateIntegrationTaskInput {
	s.Environment = &v
	return s
}

// SetName sets the Name field's value.
func (s *CreateIntegrationTaskInput) SetName(v string) *CreateIntegrationTaskInput {
	s.Name = &v
	return s
}

// SetParams sets the Params field's value.
func (s *CreateIntegrationTaskInput) SetParams(v string) *CreateIntegrationTaskInput {
	s.Params = &v
	return s
}

// SetProjectName sets the ProjectName field's value.
func (s *CreateIntegrationTaskInput) SetProjectName(v string) *CreateIntegrationTaskInput {
	s.ProjectName = &v
	return s
}

// SetSubType sets the SubType field's value.
func (s *CreateIntegrationTaskInput) SetSubType(v string) *CreateIntegrationTaskInput {
	s.SubType = &v
	return s
}

// SetTags sets the Tags field's value.
func (s *CreateIntegrationTaskInput) SetTags(v []*TagForCreateIntegrationTaskInput) *CreateIntegrationTaskInput {
	s.Tags = v
	return s
}

// SetType sets the Type field's value.
func (s *CreateIntegrationTaskInput) SetType(v string) *CreateIntegrationTaskInput {
	s.Type = &v
	return s
}

// SetVkeClusterId sets the VkeClusterId field's value.
func (s *CreateIntegrationTaskInput) SetVkeClusterId(v string) *CreateIntegrationTaskInput {
	s.VkeClusterId = &v
	return s
}

// SetWorkspaceId sets the WorkspaceId field's value.
func (s *CreateIntegrationTaskInput) SetWorkspaceId(v string) *CreateIntegrationTaskInput {
	s.WorkspaceId = &v
	return s
}

type CreateIntegrationTaskOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Id *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s CreateIntegrationTaskOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateIntegrationTaskOutput) GoString() string {
	return s.String()
}

// SetId sets the Id field's value.
func (s *CreateIntegrationTaskOutput) SetId(v string) *CreateIntegrationTaskOutput {
	s.Id = &v
	return s
}

type TagForCreateIntegrationTaskInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Key *string `type:"string" json:",omitempty"`

	Value *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s TagForCreateIntegrationTaskInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s TagForCreateIntegrationTaskInput) GoString() string {
	return s.String()
}

// SetKey sets the Key field's value.
func (s *TagForCreateIntegrationTaskInput) SetKey(v string) *TagForCreateIntegrationTaskInput {
	s.Key = &v
	return s
}

// SetValue sets the Value field's value.
func (s *TagForCreateIntegrationTaskInput) SetValue(v string) *TagForCreateIntegrationTaskInput {
	s.Value = &v
	return s
}
