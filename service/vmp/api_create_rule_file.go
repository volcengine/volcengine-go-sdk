// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vmp

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opCreateRuleFileCommon = "CreateRuleFile"

// CreateRuleFileCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateRuleFileCommon operation. The "output" return
// value will be populated with the CreateRuleFileCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateRuleFileCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateRuleFileCommon Send returns without error.
//
// See CreateRuleFileCommon for more information on using the CreateRuleFileCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateRuleFileCommonRequest method.
//    req, resp := client.CreateRuleFileCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VMP) CreateRuleFileCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateRuleFileCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateRuleFileCommon API operation for VMP.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VMP's
// API operation CreateRuleFileCommon for usage and error information.
func (c *VMP) CreateRuleFileCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateRuleFileCommonRequest(input)
	return out, req.Send()
}

// CreateRuleFileCommonWithContext is the same as CreateRuleFileCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateRuleFileCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VMP) CreateRuleFileCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateRuleFileCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateRuleFile = "CreateRuleFile"

// CreateRuleFileRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateRuleFile operation. The "output" return
// value will be populated with the CreateRuleFileCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateRuleFileCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateRuleFileCommon Send returns without error.
//
// See CreateRuleFile for more information on using the CreateRuleFile
// API call, and error handling.
//
//    // Example sending a request using the CreateRuleFileRequest method.
//    req, resp := client.CreateRuleFileRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VMP) CreateRuleFileRequest(input *CreateRuleFileInput) (req *request.Request, output *CreateRuleFileOutput) {
	op := &request.Operation{
		Name:       opCreateRuleFile,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateRuleFileInput{}
	}

	output = &CreateRuleFileOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateRuleFile API operation for VMP.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VMP's
// API operation CreateRuleFile for usage and error information.
func (c *VMP) CreateRuleFile(input *CreateRuleFileInput) (*CreateRuleFileOutput, error) {
	req, out := c.CreateRuleFileRequest(input)
	return out, req.Send()
}

// CreateRuleFileWithContext is the same as CreateRuleFile with the addition of
// the ability to pass a context and additional request options.
//
// See CreateRuleFile for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VMP) CreateRuleFileWithContext(ctx volcengine.Context, input *CreateRuleFileInput, opts ...request.Option) (*CreateRuleFileOutput, error) {
	req, out := c.CreateRuleFileRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type CreateRuleFileInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// Content is a required field
	Content *string `type:"string" json:",omitempty" required:"true"`

	Description *string `type:"string" json:",omitempty"`

	// Name is a required field
	Name *string `type:"string" json:",omitempty" required:"true"`

	TargetWorkspaceId *string `type:"string" json:",omitempty"`

	// WorkspaceId is a required field
	WorkspaceId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s CreateRuleFileInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateRuleFileInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateRuleFileInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CreateRuleFileInput"}
	if s.Content == nil {
		invalidParams.Add(request.NewErrParamRequired("Content"))
	}
	if s.Name == nil {
		invalidParams.Add(request.NewErrParamRequired("Name"))
	}
	if s.WorkspaceId == nil {
		invalidParams.Add(request.NewErrParamRequired("WorkspaceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetContent sets the Content field's value.
func (s *CreateRuleFileInput) SetContent(v string) *CreateRuleFileInput {
	s.Content = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *CreateRuleFileInput) SetDescription(v string) *CreateRuleFileInput {
	s.Description = &v
	return s
}

// SetName sets the Name field's value.
func (s *CreateRuleFileInput) SetName(v string) *CreateRuleFileInput {
	s.Name = &v
	return s
}

// SetTargetWorkspaceId sets the TargetWorkspaceId field's value.
func (s *CreateRuleFileInput) SetTargetWorkspaceId(v string) *CreateRuleFileInput {
	s.TargetWorkspaceId = &v
	return s
}

// SetWorkspaceId sets the WorkspaceId field's value.
func (s *CreateRuleFileInput) SetWorkspaceId(v string) *CreateRuleFileInput {
	s.WorkspaceId = &v
	return s
}

type CreateRuleFileOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Id *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s CreateRuleFileOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateRuleFileOutput) GoString() string {
	return s.String()
}

// SetId sets the Id field's value.
func (s *CreateRuleFileOutput) SetId(v string) *CreateRuleFileOutput {
	s.Id = &v
	return s
}
