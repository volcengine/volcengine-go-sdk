// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vmp

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opEnableSilencePoliciesCommon = "EnableSilencePolicies"

// EnableSilencePoliciesCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the EnableSilencePoliciesCommon operation. The "output" return
// value will be populated with the EnableSilencePoliciesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned EnableSilencePoliciesCommon Request to send the API call to the service.
// the "output" return value is not valid until after EnableSilencePoliciesCommon Send returns without error.
//
// See EnableSilencePoliciesCommon for more information on using the EnableSilencePoliciesCommon
// API call, and error handling.
//
//    // Example sending a request using the EnableSilencePoliciesCommonRequest method.
//    req, resp := client.EnableSilencePoliciesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VMP) EnableSilencePoliciesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opEnableSilencePoliciesCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// EnableSilencePoliciesCommon API operation for VMP.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VMP's
// API operation EnableSilencePoliciesCommon for usage and error information.
func (c *VMP) EnableSilencePoliciesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.EnableSilencePoliciesCommonRequest(input)
	return out, req.Send()
}

// EnableSilencePoliciesCommonWithContext is the same as EnableSilencePoliciesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See EnableSilencePoliciesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VMP) EnableSilencePoliciesCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.EnableSilencePoliciesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opEnableSilencePolicies = "EnableSilencePolicies"

// EnableSilencePoliciesRequest generates a "volcengine/request.Request" representing the
// client's request for the EnableSilencePolicies operation. The "output" return
// value will be populated with the EnableSilencePoliciesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned EnableSilencePoliciesCommon Request to send the API call to the service.
// the "output" return value is not valid until after EnableSilencePoliciesCommon Send returns without error.
//
// See EnableSilencePolicies for more information on using the EnableSilencePolicies
// API call, and error handling.
//
//    // Example sending a request using the EnableSilencePoliciesRequest method.
//    req, resp := client.EnableSilencePoliciesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VMP) EnableSilencePoliciesRequest(input *EnableSilencePoliciesInput) (req *request.Request, output *EnableSilencePoliciesOutput) {
	op := &request.Operation{
		Name:       opEnableSilencePolicies,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &EnableSilencePoliciesInput{}
	}

	output = &EnableSilencePoliciesOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// EnableSilencePolicies API operation for VMP.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VMP's
// API operation EnableSilencePolicies for usage and error information.
func (c *VMP) EnableSilencePolicies(input *EnableSilencePoliciesInput) (*EnableSilencePoliciesOutput, error) {
	req, out := c.EnableSilencePoliciesRequest(input)
	return out, req.Send()
}

// EnableSilencePoliciesWithContext is the same as EnableSilencePolicies with the addition of
// the ability to pass a context and additional request options.
//
// See EnableSilencePolicies for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VMP) EnableSilencePoliciesWithContext(ctx volcengine.Context, input *EnableSilencePoliciesInput, opts ...request.Option) (*EnableSilencePoliciesOutput, error) {
	req, out := c.EnableSilencePoliciesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DataForEnableSilencePoliciesOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`
}

// String returns the string representation
func (s DataForEnableSilencePoliciesOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DataForEnableSilencePoliciesOutput) GoString() string {
	return s.String()
}

type EnableSilencePoliciesInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Ids []*string `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s EnableSilencePoliciesInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s EnableSilencePoliciesInput) GoString() string {
	return s.String()
}

// SetIds sets the Ids field's value.
func (s *EnableSilencePoliciesInput) SetIds(v []*string) *EnableSilencePoliciesInput {
	s.Ids = v
	return s
}

type EnableSilencePoliciesOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	SuccessfulItems []*string `type:"list" json:",omitempty"`

	UnsuccessfulItems []*UnsuccessfulItemForEnableSilencePoliciesOutput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s EnableSilencePoliciesOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s EnableSilencePoliciesOutput) GoString() string {
	return s.String()
}

// SetSuccessfulItems sets the SuccessfulItems field's value.
func (s *EnableSilencePoliciesOutput) SetSuccessfulItems(v []*string) *EnableSilencePoliciesOutput {
	s.SuccessfulItems = v
	return s
}

// SetUnsuccessfulItems sets the UnsuccessfulItems field's value.
func (s *EnableSilencePoliciesOutput) SetUnsuccessfulItems(v []*UnsuccessfulItemForEnableSilencePoliciesOutput) *EnableSilencePoliciesOutput {
	s.UnsuccessfulItems = v
	return s
}

type ErrorForEnableSilencePoliciesOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Code *string `type:"string" json:",omitempty"`

	Data *DataForEnableSilencePoliciesOutput `type:"structure" json:",omitempty"`

	Message *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ErrorForEnableSilencePoliciesOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ErrorForEnableSilencePoliciesOutput) GoString() string {
	return s.String()
}

// SetCode sets the Code field's value.
func (s *ErrorForEnableSilencePoliciesOutput) SetCode(v string) *ErrorForEnableSilencePoliciesOutput {
	s.Code = &v
	return s
}

// SetData sets the Data field's value.
func (s *ErrorForEnableSilencePoliciesOutput) SetData(v *DataForEnableSilencePoliciesOutput) *ErrorForEnableSilencePoliciesOutput {
	s.Data = v
	return s
}

// SetMessage sets the Message field's value.
func (s *ErrorForEnableSilencePoliciesOutput) SetMessage(v string) *ErrorForEnableSilencePoliciesOutput {
	s.Message = &v
	return s
}

type UnsuccessfulItemForEnableSilencePoliciesOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Error *ErrorForEnableSilencePoliciesOutput `type:"structure" json:",omitempty"`

	Id *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s UnsuccessfulItemForEnableSilencePoliciesOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UnsuccessfulItemForEnableSilencePoliciesOutput) GoString() string {
	return s.String()
}

// SetError sets the Error field's value.
func (s *UnsuccessfulItemForEnableSilencePoliciesOutput) SetError(v *ErrorForEnableSilencePoliciesOutput) *UnsuccessfulItemForEnableSilencePoliciesOutput {
	s.Error = v
	return s
}

// SetId sets the Id field's value.
func (s *UnsuccessfulItemForEnableSilencePoliciesOutput) SetId(v string) *UnsuccessfulItemForEnableSilencePoliciesOutput {
	s.Id = &v
	return s
}
