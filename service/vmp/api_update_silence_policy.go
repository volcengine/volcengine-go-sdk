// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vmp

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opUpdateSilencePolicyCommon = "UpdateSilencePolicy"

// UpdateSilencePolicyCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateSilencePolicyCommon operation. The "output" return
// value will be populated with the UpdateSilencePolicyCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateSilencePolicyCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateSilencePolicyCommon Send returns without error.
//
// See UpdateSilencePolicyCommon for more information on using the UpdateSilencePolicyCommon
// API call, and error handling.
//
//    // Example sending a request using the UpdateSilencePolicyCommonRequest method.
//    req, resp := client.UpdateSilencePolicyCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VMP) UpdateSilencePolicyCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opUpdateSilencePolicyCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateSilencePolicyCommon API operation for VMP.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VMP's
// API operation UpdateSilencePolicyCommon for usage and error information.
func (c *VMP) UpdateSilencePolicyCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.UpdateSilencePolicyCommonRequest(input)
	return out, req.Send()
}

// UpdateSilencePolicyCommonWithContext is the same as UpdateSilencePolicyCommon with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateSilencePolicyCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VMP) UpdateSilencePolicyCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.UpdateSilencePolicyCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opUpdateSilencePolicy = "UpdateSilencePolicy"

// UpdateSilencePolicyRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateSilencePolicy operation. The "output" return
// value will be populated with the UpdateSilencePolicyCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateSilencePolicyCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateSilencePolicyCommon Send returns without error.
//
// See UpdateSilencePolicy for more information on using the UpdateSilencePolicy
// API call, and error handling.
//
//    // Example sending a request using the UpdateSilencePolicyRequest method.
//    req, resp := client.UpdateSilencePolicyRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VMP) UpdateSilencePolicyRequest(input *UpdateSilencePolicyInput) (req *request.Request, output *UpdateSilencePolicyOutput) {
	op := &request.Operation{
		Name:       opUpdateSilencePolicy,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UpdateSilencePolicyInput{}
	}

	output = &UpdateSilencePolicyOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateSilencePolicy API operation for VMP.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VMP's
// API operation UpdateSilencePolicy for usage and error information.
func (c *VMP) UpdateSilencePolicy(input *UpdateSilencePolicyInput) (*UpdateSilencePolicyOutput, error) {
	req, out := c.UpdateSilencePolicyRequest(input)
	return out, req.Send()
}

// UpdateSilencePolicyWithContext is the same as UpdateSilencePolicy with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateSilencePolicy for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VMP) UpdateSilencePolicyWithContext(ctx volcengine.Context, input *UpdateSilencePolicyInput, opts ...request.Option) (*UpdateSilencePolicyOutput, error) {
	req, out := c.UpdateSilencePolicyRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type MatcherForUpdateSilencePolicyInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Label *string `type:"string" json:",omitempty"`

	Operator *string `type:"string" json:",omitempty"`

	Value *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s MatcherForUpdateSilencePolicyInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s MatcherForUpdateSilencePolicyInput) GoString() string {
	return s.String()
}

// SetLabel sets the Label field's value.
func (s *MatcherForUpdateSilencePolicyInput) SetLabel(v string) *MatcherForUpdateSilencePolicyInput {
	s.Label = &v
	return s
}

// SetOperator sets the Operator field's value.
func (s *MatcherForUpdateSilencePolicyInput) SetOperator(v string) *MatcherForUpdateSilencePolicyInput {
	s.Operator = &v
	return s
}

// SetValue sets the Value field's value.
func (s *MatcherForUpdateSilencePolicyInput) SetValue(v string) *MatcherForUpdateSilencePolicyInput {
	s.Value = &v
	return s
}

type MetricLabelMatcherForUpdateSilencePolicyInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Matchers []*MatcherForUpdateSilencePolicyInput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s MetricLabelMatcherForUpdateSilencePolicyInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s MetricLabelMatcherForUpdateSilencePolicyInput) GoString() string {
	return s.String()
}

// SetMatchers sets the Matchers field's value.
func (s *MetricLabelMatcherForUpdateSilencePolicyInput) SetMatchers(v []*MatcherForUpdateSilencePolicyInput) *MetricLabelMatcherForUpdateSilencePolicyInput {
	s.Matchers = v
	return s
}

type PeriodicDateForUpdateSilencePolicyInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	DayOfMonth *string `type:"string" json:",omitempty"`

	Time *string `type:"string" json:",omitempty"`

	Weekday *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s PeriodicDateForUpdateSilencePolicyInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s PeriodicDateForUpdateSilencePolicyInput) GoString() string {
	return s.String()
}

// SetDayOfMonth sets the DayOfMonth field's value.
func (s *PeriodicDateForUpdateSilencePolicyInput) SetDayOfMonth(v string) *PeriodicDateForUpdateSilencePolicyInput {
	s.DayOfMonth = &v
	return s
}

// SetTime sets the Time field's value.
func (s *PeriodicDateForUpdateSilencePolicyInput) SetTime(v string) *PeriodicDateForUpdateSilencePolicyInput {
	s.Time = &v
	return s
}

// SetWeekday sets the Weekday field's value.
func (s *PeriodicDateForUpdateSilencePolicyInput) SetWeekday(v string) *PeriodicDateForUpdateSilencePolicyInput {
	s.Weekday = &v
	return s
}

type TimeRangeMatcherForUpdateSilencePolicyInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Date *string `type:"string" json:",omitempty"`

	Location *string `type:"string" json:",omitempty"`

	PeriodicDate *PeriodicDateForUpdateSilencePolicyInput `type:"structure" json:",omitempty"`
}

// String returns the string representation
func (s TimeRangeMatcherForUpdateSilencePolicyInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s TimeRangeMatcherForUpdateSilencePolicyInput) GoString() string {
	return s.String()
}

// SetDate sets the Date field's value.
func (s *TimeRangeMatcherForUpdateSilencePolicyInput) SetDate(v string) *TimeRangeMatcherForUpdateSilencePolicyInput {
	s.Date = &v
	return s
}

// SetLocation sets the Location field's value.
func (s *TimeRangeMatcherForUpdateSilencePolicyInput) SetLocation(v string) *TimeRangeMatcherForUpdateSilencePolicyInput {
	s.Location = &v
	return s
}

// SetPeriodicDate sets the PeriodicDate field's value.
func (s *TimeRangeMatcherForUpdateSilencePolicyInput) SetPeriodicDate(v *PeriodicDateForUpdateSilencePolicyInput) *TimeRangeMatcherForUpdateSilencePolicyInput {
	s.PeriodicDate = v
	return s
}

type UpdateSilencePolicyInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Description *string `type:"string" json:",omitempty"`

	// Id is a required field
	Id *string `type:"string" json:",omitempty" required:"true"`

	MetricLabelMatchers []*MetricLabelMatcherForUpdateSilencePolicyInput `type:"list" json:",omitempty"`

	Name *string `type:"string" json:",omitempty"`

	TimeRangeMatchers []*TimeRangeMatcherForUpdateSilencePolicyInput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s UpdateSilencePolicyInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateSilencePolicyInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UpdateSilencePolicyInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "UpdateSilencePolicyInput"}
	if s.Id == nil {
		invalidParams.Add(request.NewErrParamRequired("Id"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDescription sets the Description field's value.
func (s *UpdateSilencePolicyInput) SetDescription(v string) *UpdateSilencePolicyInput {
	s.Description = &v
	return s
}

// SetId sets the Id field's value.
func (s *UpdateSilencePolicyInput) SetId(v string) *UpdateSilencePolicyInput {
	s.Id = &v
	return s
}

// SetMetricLabelMatchers sets the MetricLabelMatchers field's value.
func (s *UpdateSilencePolicyInput) SetMetricLabelMatchers(v []*MetricLabelMatcherForUpdateSilencePolicyInput) *UpdateSilencePolicyInput {
	s.MetricLabelMatchers = v
	return s
}

// SetName sets the Name field's value.
func (s *UpdateSilencePolicyInput) SetName(v string) *UpdateSilencePolicyInput {
	s.Name = &v
	return s
}

// SetTimeRangeMatchers sets the TimeRangeMatchers field's value.
func (s *UpdateSilencePolicyInput) SetTimeRangeMatchers(v []*TimeRangeMatcherForUpdateSilencePolicyInput) *UpdateSilencePolicyInput {
	s.TimeRangeMatchers = v
	return s
}

type UpdateSilencePolicyOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Id *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s UpdateSilencePolicyOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateSilencePolicyOutput) GoString() string {
	return s.String()
}

// SetId sets the Id field's value.
func (s *UpdateSilencePolicyOutput) SetId(v string) *UpdateSilencePolicyOutput {
	s.Id = &v
	return s
}
