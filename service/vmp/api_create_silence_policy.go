// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vmp

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opCreateSilencePolicyCommon = "CreateSilencePolicy"

// CreateSilencePolicyCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateSilencePolicyCommon operation. The "output" return
// value will be populated with the CreateSilencePolicyCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateSilencePolicyCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateSilencePolicyCommon Send returns without error.
//
// See CreateSilencePolicyCommon for more information on using the CreateSilencePolicyCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateSilencePolicyCommonRequest method.
//    req, resp := client.CreateSilencePolicyCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VMP) CreateSilencePolicyCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateSilencePolicyCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateSilencePolicyCommon API operation for VMP.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VMP's
// API operation CreateSilencePolicyCommon for usage and error information.
func (c *VMP) CreateSilencePolicyCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateSilencePolicyCommonRequest(input)
	return out, req.Send()
}

// CreateSilencePolicyCommonWithContext is the same as CreateSilencePolicyCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateSilencePolicyCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VMP) CreateSilencePolicyCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateSilencePolicyCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateSilencePolicy = "CreateSilencePolicy"

// CreateSilencePolicyRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateSilencePolicy operation. The "output" return
// value will be populated with the CreateSilencePolicyCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateSilencePolicyCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateSilencePolicyCommon Send returns without error.
//
// See CreateSilencePolicy for more information on using the CreateSilencePolicy
// API call, and error handling.
//
//    // Example sending a request using the CreateSilencePolicyRequest method.
//    req, resp := client.CreateSilencePolicyRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VMP) CreateSilencePolicyRequest(input *CreateSilencePolicyInput) (req *request.Request, output *CreateSilencePolicyOutput) {
	op := &request.Operation{
		Name:       opCreateSilencePolicy,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateSilencePolicyInput{}
	}

	output = &CreateSilencePolicyOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateSilencePolicy API operation for VMP.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VMP's
// API operation CreateSilencePolicy for usage and error information.
func (c *VMP) CreateSilencePolicy(input *CreateSilencePolicyInput) (*CreateSilencePolicyOutput, error) {
	req, out := c.CreateSilencePolicyRequest(input)
	return out, req.Send()
}

// CreateSilencePolicyWithContext is the same as CreateSilencePolicy with the addition of
// the ability to pass a context and additional request options.
//
// See CreateSilencePolicy for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VMP) CreateSilencePolicyWithContext(ctx volcengine.Context, input *CreateSilencePolicyInput, opts ...request.Option) (*CreateSilencePolicyOutput, error) {
	req, out := c.CreateSilencePolicyRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type CreateSilencePolicyInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Description *string `type:"string" json:",omitempty"`

	MetricLabelMatchers []*MetricLabelMatcherForCreateSilencePolicyInput `type:"list" json:",omitempty"`

	// Name is a required field
	Name *string `type:"string" json:",omitempty" required:"true"`

	TimeRangeMatchers []*TimeRangeMatcherForCreateSilencePolicyInput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s CreateSilencePolicyInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateSilencePolicyInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateSilencePolicyInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CreateSilencePolicyInput"}
	if s.Name == nil {
		invalidParams.Add(request.NewErrParamRequired("Name"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDescription sets the Description field's value.
func (s *CreateSilencePolicyInput) SetDescription(v string) *CreateSilencePolicyInput {
	s.Description = &v
	return s
}

// SetMetricLabelMatchers sets the MetricLabelMatchers field's value.
func (s *CreateSilencePolicyInput) SetMetricLabelMatchers(v []*MetricLabelMatcherForCreateSilencePolicyInput) *CreateSilencePolicyInput {
	s.MetricLabelMatchers = v
	return s
}

// SetName sets the Name field's value.
func (s *CreateSilencePolicyInput) SetName(v string) *CreateSilencePolicyInput {
	s.Name = &v
	return s
}

// SetTimeRangeMatchers sets the TimeRangeMatchers field's value.
func (s *CreateSilencePolicyInput) SetTimeRangeMatchers(v []*TimeRangeMatcherForCreateSilencePolicyInput) *CreateSilencePolicyInput {
	s.TimeRangeMatchers = v
	return s
}

type CreateSilencePolicyOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Id *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s CreateSilencePolicyOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateSilencePolicyOutput) GoString() string {
	return s.String()
}

// SetId sets the Id field's value.
func (s *CreateSilencePolicyOutput) SetId(v string) *CreateSilencePolicyOutput {
	s.Id = &v
	return s
}

type MatcherForCreateSilencePolicyInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Label *string `type:"string" json:",omitempty"`

	Operator *string `type:"string" json:",omitempty"`

	Value *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s MatcherForCreateSilencePolicyInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s MatcherForCreateSilencePolicyInput) GoString() string {
	return s.String()
}

// SetLabel sets the Label field's value.
func (s *MatcherForCreateSilencePolicyInput) SetLabel(v string) *MatcherForCreateSilencePolicyInput {
	s.Label = &v
	return s
}

// SetOperator sets the Operator field's value.
func (s *MatcherForCreateSilencePolicyInput) SetOperator(v string) *MatcherForCreateSilencePolicyInput {
	s.Operator = &v
	return s
}

// SetValue sets the Value field's value.
func (s *MatcherForCreateSilencePolicyInput) SetValue(v string) *MatcherForCreateSilencePolicyInput {
	s.Value = &v
	return s
}

type MetricLabelMatcherForCreateSilencePolicyInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Matchers []*MatcherForCreateSilencePolicyInput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s MetricLabelMatcherForCreateSilencePolicyInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s MetricLabelMatcherForCreateSilencePolicyInput) GoString() string {
	return s.String()
}

// SetMatchers sets the Matchers field's value.
func (s *MetricLabelMatcherForCreateSilencePolicyInput) SetMatchers(v []*MatcherForCreateSilencePolicyInput) *MetricLabelMatcherForCreateSilencePolicyInput {
	s.Matchers = v
	return s
}

type PeriodicDateForCreateSilencePolicyInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	DayOfMonth *string `type:"string" json:",omitempty"`

	Time *string `type:"string" json:",omitempty"`

	Weekday *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s PeriodicDateForCreateSilencePolicyInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s PeriodicDateForCreateSilencePolicyInput) GoString() string {
	return s.String()
}

// SetDayOfMonth sets the DayOfMonth field's value.
func (s *PeriodicDateForCreateSilencePolicyInput) SetDayOfMonth(v string) *PeriodicDateForCreateSilencePolicyInput {
	s.DayOfMonth = &v
	return s
}

// SetTime sets the Time field's value.
func (s *PeriodicDateForCreateSilencePolicyInput) SetTime(v string) *PeriodicDateForCreateSilencePolicyInput {
	s.Time = &v
	return s
}

// SetWeekday sets the Weekday field's value.
func (s *PeriodicDateForCreateSilencePolicyInput) SetWeekday(v string) *PeriodicDateForCreateSilencePolicyInput {
	s.Weekday = &v
	return s
}

type TimeRangeMatcherForCreateSilencePolicyInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Date *string `type:"string" json:",omitempty"`

	Location *string `type:"string" json:",omitempty"`

	PeriodicDate *PeriodicDateForCreateSilencePolicyInput `type:"structure" json:",omitempty"`
}

// String returns the string representation
func (s TimeRangeMatcherForCreateSilencePolicyInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s TimeRangeMatcherForCreateSilencePolicyInput) GoString() string {
	return s.String()
}

// SetDate sets the Date field's value.
func (s *TimeRangeMatcherForCreateSilencePolicyInput) SetDate(v string) *TimeRangeMatcherForCreateSilencePolicyInput {
	s.Date = &v
	return s
}

// SetLocation sets the Location field's value.
func (s *TimeRangeMatcherForCreateSilencePolicyInput) SetLocation(v string) *TimeRangeMatcherForCreateSilencePolicyInput {
	s.Location = &v
	return s
}

// SetPeriodicDate sets the PeriodicDate field's value.
func (s *TimeRangeMatcherForCreateSilencePolicyInput) SetPeriodicDate(v *PeriodicDateForCreateSilencePolicyInput) *TimeRangeMatcherForCreateSilencePolicyInput {
	s.PeriodicDate = v
	return s
}
