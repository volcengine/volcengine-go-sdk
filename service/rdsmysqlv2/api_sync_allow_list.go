// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package rdsmysqlv2

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opSyncAllowListCommon = "SyncAllowList"

// SyncAllowListCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the SyncAllowListCommon operation. The "output" return
// value will be populated with the SyncAllowListCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned SyncAllowListCommon Request to send the API call to the service.
// the "output" return value is not valid until after SyncAllowListCommon Send returns without error.
//
// See SyncAllowListCommon for more information on using the SyncAllowListCommon
// API call, and error handling.
//
//    // Example sending a request using the SyncAllowListCommonRequest method.
//    req, resp := client.SyncAllowListCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) SyncAllowListCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opSyncAllowListCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// SyncAllowListCommon API operation for RDS_MYSQL_V2.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for RDS_MYSQL_V2's
// API operation SyncAllowListCommon for usage and error information.
func (c *RDSMYSQLV2) SyncAllowListCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.SyncAllowListCommonRequest(input)
	return out, req.Send()
}

// SyncAllowListCommonWithContext is the same as SyncAllowListCommon with the addition of
// the ability to pass a context and additional request options.
//
// See SyncAllowListCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) SyncAllowListCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.SyncAllowListCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opSyncAllowList = "SyncAllowList"

// SyncAllowListRequest generates a "volcengine/request.Request" representing the
// client's request for the SyncAllowList operation. The "output" return
// value will be populated with the SyncAllowListCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned SyncAllowListCommon Request to send the API call to the service.
// the "output" return value is not valid until after SyncAllowListCommon Send returns without error.
//
// See SyncAllowList for more information on using the SyncAllowList
// API call, and error handling.
//
//    // Example sending a request using the SyncAllowListRequest method.
//    req, resp := client.SyncAllowListRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) SyncAllowListRequest(input *SyncAllowListInput) (req *request.Request, output *SyncAllowListOutput) {
	op := &request.Operation{
		Name:       opSyncAllowList,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &SyncAllowListInput{}
	}

	output = &SyncAllowListOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// SyncAllowList API operation for RDS_MYSQL_V2.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for RDS_MYSQL_V2's
// API operation SyncAllowList for usage and error information.
func (c *RDSMYSQLV2) SyncAllowList(input *SyncAllowListInput) (*SyncAllowListOutput, error) {
	req, out := c.SyncAllowListRequest(input)
	return out, req.Send()
}

// SyncAllowListWithContext is the same as SyncAllowList with the addition of
// the ability to pass a context and additional request options.
//
// See SyncAllowList for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) SyncAllowListWithContext(ctx volcengine.Context, input *SyncAllowListInput, opts ...request.Option) (*SyncAllowListOutput, error) {
	req, out := c.SyncAllowListRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ChangeObjectForSyncAllowListOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	AddedIpList []*string `type:"list" json:",omitempty"`

	BindMode *string `type:"string" json:",omitempty"`

	HasChanged *bool `type:"boolean" json:",omitempty"`

	HasDeleted *bool `type:"boolean" json:",omitempty"`

	NewIpList []*string `type:"list" json:",omitempty"`

	OldIpList []*string `type:"list" json:",omitempty"`

	RemovedIpList []*string `type:"list" json:",omitempty"`

	SecurityGroupId *string `type:"string" json:",omitempty"`

	SecurityGroupName *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ChangeObjectForSyncAllowListOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ChangeObjectForSyncAllowListOutput) GoString() string {
	return s.String()
}

// SetAddedIpList sets the AddedIpList field's value.
func (s *ChangeObjectForSyncAllowListOutput) SetAddedIpList(v []*string) *ChangeObjectForSyncAllowListOutput {
	s.AddedIpList = v
	return s
}

// SetBindMode sets the BindMode field's value.
func (s *ChangeObjectForSyncAllowListOutput) SetBindMode(v string) *ChangeObjectForSyncAllowListOutput {
	s.BindMode = &v
	return s
}

// SetHasChanged sets the HasChanged field's value.
func (s *ChangeObjectForSyncAllowListOutput) SetHasChanged(v bool) *ChangeObjectForSyncAllowListOutput {
	s.HasChanged = &v
	return s
}

// SetHasDeleted sets the HasDeleted field's value.
func (s *ChangeObjectForSyncAllowListOutput) SetHasDeleted(v bool) *ChangeObjectForSyncAllowListOutput {
	s.HasDeleted = &v
	return s
}

// SetNewIpList sets the NewIpList field's value.
func (s *ChangeObjectForSyncAllowListOutput) SetNewIpList(v []*string) *ChangeObjectForSyncAllowListOutput {
	s.NewIpList = v
	return s
}

// SetOldIpList sets the OldIpList field's value.
func (s *ChangeObjectForSyncAllowListOutput) SetOldIpList(v []*string) *ChangeObjectForSyncAllowListOutput {
	s.OldIpList = v
	return s
}

// SetRemovedIpList sets the RemovedIpList field's value.
func (s *ChangeObjectForSyncAllowListOutput) SetRemovedIpList(v []*string) *ChangeObjectForSyncAllowListOutput {
	s.RemovedIpList = v
	return s
}

// SetSecurityGroupId sets the SecurityGroupId field's value.
func (s *ChangeObjectForSyncAllowListOutput) SetSecurityGroupId(v string) *ChangeObjectForSyncAllowListOutput {
	s.SecurityGroupId = &v
	return s
}

// SetSecurityGroupName sets the SecurityGroupName field's value.
func (s *ChangeObjectForSyncAllowListOutput) SetSecurityGroupName(v string) *ChangeObjectForSyncAllowListOutput {
	s.SecurityGroupName = &v
	return s
}

type SyncAllowListInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// AllowListId is a required field
	AllowListId *string `type:"string" json:",omitempty" required:"true"`

	DryRun *bool `type:"boolean" json:",omitempty"`
}

// String returns the string representation
func (s SyncAllowListInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s SyncAllowListInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *SyncAllowListInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "SyncAllowListInput"}
	if s.AllowListId == nil {
		invalidParams.Add(request.NewErrParamRequired("AllowListId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAllowListId sets the AllowListId field's value.
func (s *SyncAllowListInput) SetAllowListId(v string) *SyncAllowListInput {
	s.AllowListId = &v
	return s
}

// SetDryRun sets the DryRun field's value.
func (s *SyncAllowListInput) SetDryRun(v bool) *SyncAllowListInput {
	s.DryRun = &v
	return s
}

type SyncAllowListOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	ChangeObjects []*ChangeObjectForSyncAllowListOutput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s SyncAllowListOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s SyncAllowListOutput) GoString() string {
	return s.String()
}

// SetChangeObjects sets the ChangeObjects field's value.
func (s *SyncAllowListOutput) SetChangeObjects(v []*ChangeObjectForSyncAllowListOutput) *SyncAllowListOutput {
	s.ChangeObjects = v
	return s
}
