// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package rdsmysqlv2

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDescribeDBInstanceHAConfigCommon = "DescribeDBInstanceHAConfig"

// DescribeDBInstanceHAConfigCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeDBInstanceHAConfigCommon operation. The "output" return
// value will be populated with the DescribeDBInstanceHAConfigCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeDBInstanceHAConfigCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeDBInstanceHAConfigCommon Send returns without error.
//
// See DescribeDBInstanceHAConfigCommon for more information on using the DescribeDBInstanceHAConfigCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeDBInstanceHAConfigCommonRequest method.
//    req, resp := client.DescribeDBInstanceHAConfigCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) DescribeDBInstanceHAConfigCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeDBInstanceHAConfigCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeDBInstanceHAConfigCommon API operation for RDS_MYSQL_V2.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for RDS_MYSQL_V2's
// API operation DescribeDBInstanceHAConfigCommon for usage and error information.
func (c *RDSMYSQLV2) DescribeDBInstanceHAConfigCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeDBInstanceHAConfigCommonRequest(input)
	return out, req.Send()
}

// DescribeDBInstanceHAConfigCommonWithContext is the same as DescribeDBInstanceHAConfigCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeDBInstanceHAConfigCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) DescribeDBInstanceHAConfigCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeDBInstanceHAConfigCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeDBInstanceHAConfig = "DescribeDBInstanceHAConfig"

// DescribeDBInstanceHAConfigRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeDBInstanceHAConfig operation. The "output" return
// value will be populated with the DescribeDBInstanceHAConfigCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeDBInstanceHAConfigCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeDBInstanceHAConfigCommon Send returns without error.
//
// See DescribeDBInstanceHAConfig for more information on using the DescribeDBInstanceHAConfig
// API call, and error handling.
//
//    // Example sending a request using the DescribeDBInstanceHAConfigRequest method.
//    req, resp := client.DescribeDBInstanceHAConfigRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) DescribeDBInstanceHAConfigRequest(input *DescribeDBInstanceHAConfigInput) (req *request.Request, output *DescribeDBInstanceHAConfigOutput) {
	op := &request.Operation{
		Name:       opDescribeDBInstanceHAConfig,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeDBInstanceHAConfigInput{}
	}

	output = &DescribeDBInstanceHAConfigOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeDBInstanceHAConfig API operation for RDS_MYSQL_V2.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for RDS_MYSQL_V2's
// API operation DescribeDBInstanceHAConfig for usage and error information.
func (c *RDSMYSQLV2) DescribeDBInstanceHAConfig(input *DescribeDBInstanceHAConfigInput) (*DescribeDBInstanceHAConfigOutput, error) {
	req, out := c.DescribeDBInstanceHAConfigRequest(input)
	return out, req.Send()
}

// DescribeDBInstanceHAConfigWithContext is the same as DescribeDBInstanceHAConfig with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeDBInstanceHAConfig for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) DescribeDBInstanceHAConfigWithContext(ctx volcengine.Context, input *DescribeDBInstanceHAConfigInput, opts ...request.Option) (*DescribeDBInstanceHAConfigOutput, error) {
	req, out := c.DescribeDBInstanceHAConfigRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DescribeDBInstanceHAConfigInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s DescribeDBInstanceHAConfigInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeDBInstanceHAConfigInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeDBInstanceHAConfigInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DescribeDBInstanceHAConfigInput"}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetInstanceId sets the InstanceId field's value.
func (s *DescribeDBInstanceHAConfigInput) SetInstanceId(v string) *DescribeDBInstanceHAConfigInput {
	s.InstanceId = &v
	return s
}

type DescribeDBInstanceHAConfigOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	DataSyncMode *string `type:"string" json:",omitempty"`

	Nodes []*NodeForDescribeDBInstanceHAConfigOutput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s DescribeDBInstanceHAConfigOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeDBInstanceHAConfigOutput) GoString() string {
	return s.String()
}

// SetDataSyncMode sets the DataSyncMode field's value.
func (s *DescribeDBInstanceHAConfigOutput) SetDataSyncMode(v string) *DescribeDBInstanceHAConfigOutput {
	s.DataSyncMode = &v
	return s
}

// SetNodes sets the Nodes field's value.
func (s *DescribeDBInstanceHAConfigOutput) SetNodes(v []*NodeForDescribeDBInstanceHAConfigOutput) *DescribeDBInstanceHAConfigOutput {
	s.Nodes = v
	return s
}

type NodeForDescribeDBInstanceHAConfigOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	CreateTime *string `type:"string" json:",omitempty"`

	DelayReplicationTime *int64 `type:"int64" json:",omitempty"`

	InstanceId *string `type:"string" json:",omitempty"`

	Memory *int32 `type:"int32" json:",omitempty"`

	NodeId *string `type:"string" json:",omitempty"`

	NodeSpec *string `type:"string" json:",omitempty"`

	NodeStatus *string `type:"string" json:",omitempty"`

	NodeType *string `type:"string" json:",omitempty"`

	RegionId *string `type:"string" json:",omitempty"`

	SyncDelay *int64 `type:"int64" json:",omitempty"`

	UpdateTime *string `type:"string" json:",omitempty"`

	VCPU *int32 `type:"int32" json:",omitempty"`

	ZoneId *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s NodeForDescribeDBInstanceHAConfigOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s NodeForDescribeDBInstanceHAConfigOutput) GoString() string {
	return s.String()
}

// SetCreateTime sets the CreateTime field's value.
func (s *NodeForDescribeDBInstanceHAConfigOutput) SetCreateTime(v string) *NodeForDescribeDBInstanceHAConfigOutput {
	s.CreateTime = &v
	return s
}

// SetDelayReplicationTime sets the DelayReplicationTime field's value.
func (s *NodeForDescribeDBInstanceHAConfigOutput) SetDelayReplicationTime(v int64) *NodeForDescribeDBInstanceHAConfigOutput {
	s.DelayReplicationTime = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *NodeForDescribeDBInstanceHAConfigOutput) SetInstanceId(v string) *NodeForDescribeDBInstanceHAConfigOutput {
	s.InstanceId = &v
	return s
}

// SetMemory sets the Memory field's value.
func (s *NodeForDescribeDBInstanceHAConfigOutput) SetMemory(v int32) *NodeForDescribeDBInstanceHAConfigOutput {
	s.Memory = &v
	return s
}

// SetNodeId sets the NodeId field's value.
func (s *NodeForDescribeDBInstanceHAConfigOutput) SetNodeId(v string) *NodeForDescribeDBInstanceHAConfigOutput {
	s.NodeId = &v
	return s
}

// SetNodeSpec sets the NodeSpec field's value.
func (s *NodeForDescribeDBInstanceHAConfigOutput) SetNodeSpec(v string) *NodeForDescribeDBInstanceHAConfigOutput {
	s.NodeSpec = &v
	return s
}

// SetNodeStatus sets the NodeStatus field's value.
func (s *NodeForDescribeDBInstanceHAConfigOutput) SetNodeStatus(v string) *NodeForDescribeDBInstanceHAConfigOutput {
	s.NodeStatus = &v
	return s
}

// SetNodeType sets the NodeType field's value.
func (s *NodeForDescribeDBInstanceHAConfigOutput) SetNodeType(v string) *NodeForDescribeDBInstanceHAConfigOutput {
	s.NodeType = &v
	return s
}

// SetRegionId sets the RegionId field's value.
func (s *NodeForDescribeDBInstanceHAConfigOutput) SetRegionId(v string) *NodeForDescribeDBInstanceHAConfigOutput {
	s.RegionId = &v
	return s
}

// SetSyncDelay sets the SyncDelay field's value.
func (s *NodeForDescribeDBInstanceHAConfigOutput) SetSyncDelay(v int64) *NodeForDescribeDBInstanceHAConfigOutput {
	s.SyncDelay = &v
	return s
}

// SetUpdateTime sets the UpdateTime field's value.
func (s *NodeForDescribeDBInstanceHAConfigOutput) SetUpdateTime(v string) *NodeForDescribeDBInstanceHAConfigOutput {
	s.UpdateTime = &v
	return s
}

// SetVCPU sets the VCPU field's value.
func (s *NodeForDescribeDBInstanceHAConfigOutput) SetVCPU(v int32) *NodeForDescribeDBInstanceHAConfigOutput {
	s.VCPU = &v
	return s
}

// SetZoneId sets the ZoneId field's value.
func (s *NodeForDescribeDBInstanceHAConfigOutput) SetZoneId(v string) *NodeForDescribeDBInstanceHAConfigOutput {
	s.ZoneId = &v
	return s
}
