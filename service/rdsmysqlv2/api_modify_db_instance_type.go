// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package rdsmysqlv2

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opModifyDBInstanceTypeCommon = "ModifyDBInstanceType"

// ModifyDBInstanceTypeCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ModifyDBInstanceTypeCommon operation. The "output" return
// value will be populated with the ModifyDBInstanceTypeCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyDBInstanceTypeCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyDBInstanceTypeCommon Send returns without error.
//
// See ModifyDBInstanceTypeCommon for more information on using the ModifyDBInstanceTypeCommon
// API call, and error handling.
//
//    // Example sending a request using the ModifyDBInstanceTypeCommonRequest method.
//    req, resp := client.ModifyDBInstanceTypeCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) ModifyDBInstanceTypeCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opModifyDBInstanceTypeCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ModifyDBInstanceTypeCommon API operation for RDS_MYSQL_V2.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for RDS_MYSQL_V2's
// API operation ModifyDBInstanceTypeCommon for usage and error information.
func (c *RDSMYSQLV2) ModifyDBInstanceTypeCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ModifyDBInstanceTypeCommonRequest(input)
	return out, req.Send()
}

// ModifyDBInstanceTypeCommonWithContext is the same as ModifyDBInstanceTypeCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyDBInstanceTypeCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) ModifyDBInstanceTypeCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ModifyDBInstanceTypeCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyDBInstanceType = "ModifyDBInstanceType"

// ModifyDBInstanceTypeRequest generates a "volcengine/request.Request" representing the
// client's request for the ModifyDBInstanceType operation. The "output" return
// value will be populated with the ModifyDBInstanceTypeCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyDBInstanceTypeCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyDBInstanceTypeCommon Send returns without error.
//
// See ModifyDBInstanceType for more information on using the ModifyDBInstanceType
// API call, and error handling.
//
//    // Example sending a request using the ModifyDBInstanceTypeRequest method.
//    req, resp := client.ModifyDBInstanceTypeRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) ModifyDBInstanceTypeRequest(input *ModifyDBInstanceTypeInput) (req *request.Request, output *ModifyDBInstanceTypeOutput) {
	op := &request.Operation{
		Name:       opModifyDBInstanceType,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ModifyDBInstanceTypeInput{}
	}

	output = &ModifyDBInstanceTypeOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ModifyDBInstanceType API operation for RDS_MYSQL_V2.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for RDS_MYSQL_V2's
// API operation ModifyDBInstanceType for usage and error information.
func (c *RDSMYSQLV2) ModifyDBInstanceType(input *ModifyDBInstanceTypeInput) (*ModifyDBInstanceTypeOutput, error) {
	req, out := c.ModifyDBInstanceTypeRequest(input)
	return out, req.Send()
}

// ModifyDBInstanceTypeWithContext is the same as ModifyDBInstanceType with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyDBInstanceType for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) ModifyDBInstanceTypeWithContext(ctx volcengine.Context, input *ModifyDBInstanceTypeInput, opts ...request.Option) (*ModifyDBInstanceTypeOutput, error) {
	req, out := c.ModifyDBInstanceTypeRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ModifyDBInstanceTypeInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:",omitempty" required:"true"`

	NodeInfo []*NodeInfoForModifyDBInstanceTypeInput `type:"list" json:",omitempty"`

	SwitchType *string `type:"string" json:",omitempty"`

	// TypeConvertPath is a required field
	TypeConvertPath *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s ModifyDBInstanceTypeInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyDBInstanceTypeInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ModifyDBInstanceTypeInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ModifyDBInstanceTypeInput"}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}
	if s.TypeConvertPath == nil {
		invalidParams.Add(request.NewErrParamRequired("TypeConvertPath"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetInstanceId sets the InstanceId field's value.
func (s *ModifyDBInstanceTypeInput) SetInstanceId(v string) *ModifyDBInstanceTypeInput {
	s.InstanceId = &v
	return s
}

// SetNodeInfo sets the NodeInfo field's value.
func (s *ModifyDBInstanceTypeInput) SetNodeInfo(v []*NodeInfoForModifyDBInstanceTypeInput) *ModifyDBInstanceTypeInput {
	s.NodeInfo = v
	return s
}

// SetSwitchType sets the SwitchType field's value.
func (s *ModifyDBInstanceTypeInput) SetSwitchType(v string) *ModifyDBInstanceTypeInput {
	s.SwitchType = &v
	return s
}

// SetTypeConvertPath sets the TypeConvertPath field's value.
func (s *ModifyDBInstanceTypeInput) SetTypeConvertPath(v string) *ModifyDBInstanceTypeInput {
	s.TypeConvertPath = &v
	return s
}

type ModifyDBInstanceTypeOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	InstanceId *string `type:"string" json:",omitempty"`

	OrderId *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ModifyDBInstanceTypeOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyDBInstanceTypeOutput) GoString() string {
	return s.String()
}

// SetInstanceId sets the InstanceId field's value.
func (s *ModifyDBInstanceTypeOutput) SetInstanceId(v string) *ModifyDBInstanceTypeOutput {
	s.InstanceId = &v
	return s
}

// SetOrderId sets the OrderId field's value.
func (s *ModifyDBInstanceTypeOutput) SetOrderId(v string) *ModifyDBInstanceTypeOutput {
	s.OrderId = &v
	return s
}

type NodeInfoForModifyDBInstanceTypeInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	NodeId *string `type:"string" json:",omitempty"`

	NodeOperateType *string `type:"string" json:",omitempty"`

	NodeSpec *string `type:"string" json:",omitempty"`

	NodeType *string `type:"string" json:",omitempty"`

	ZoneId *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s NodeInfoForModifyDBInstanceTypeInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s NodeInfoForModifyDBInstanceTypeInput) GoString() string {
	return s.String()
}

// SetNodeId sets the NodeId field's value.
func (s *NodeInfoForModifyDBInstanceTypeInput) SetNodeId(v string) *NodeInfoForModifyDBInstanceTypeInput {
	s.NodeId = &v
	return s
}

// SetNodeOperateType sets the NodeOperateType field's value.
func (s *NodeInfoForModifyDBInstanceTypeInput) SetNodeOperateType(v string) *NodeInfoForModifyDBInstanceTypeInput {
	s.NodeOperateType = &v
	return s
}

// SetNodeSpec sets the NodeSpec field's value.
func (s *NodeInfoForModifyDBInstanceTypeInput) SetNodeSpec(v string) *NodeInfoForModifyDBInstanceTypeInput {
	s.NodeSpec = &v
	return s
}

// SetNodeType sets the NodeType field's value.
func (s *NodeInfoForModifyDBInstanceTypeInput) SetNodeType(v string) *NodeInfoForModifyDBInstanceTypeInput {
	s.NodeType = &v
	return s
}

// SetZoneId sets the ZoneId field's value.
func (s *NodeInfoForModifyDBInstanceTypeInput) SetZoneId(v string) *NodeInfoForModifyDBInstanceTypeInput {
	s.ZoneId = &v
	return s
}
