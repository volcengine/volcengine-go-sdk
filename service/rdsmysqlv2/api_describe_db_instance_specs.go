// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package rdsmysqlv2

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDescribeDBInstanceSpecsCommon = "DescribeDBInstanceSpecs"

// DescribeDBInstanceSpecsCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeDBInstanceSpecsCommon operation. The "output" return
// value will be populated with the DescribeDBInstanceSpecsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeDBInstanceSpecsCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeDBInstanceSpecsCommon Send returns without error.
//
// See DescribeDBInstanceSpecsCommon for more information on using the DescribeDBInstanceSpecsCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeDBInstanceSpecsCommonRequest method.
//    req, resp := client.DescribeDBInstanceSpecsCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) DescribeDBInstanceSpecsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeDBInstanceSpecsCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeDBInstanceSpecsCommon API operation for RDS_MYSQL_V2.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for RDS_MYSQL_V2's
// API operation DescribeDBInstanceSpecsCommon for usage and error information.
func (c *RDSMYSQLV2) DescribeDBInstanceSpecsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeDBInstanceSpecsCommonRequest(input)
	return out, req.Send()
}

// DescribeDBInstanceSpecsCommonWithContext is the same as DescribeDBInstanceSpecsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeDBInstanceSpecsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) DescribeDBInstanceSpecsCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeDBInstanceSpecsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeDBInstanceSpecs = "DescribeDBInstanceSpecs"

// DescribeDBInstanceSpecsRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeDBInstanceSpecs operation. The "output" return
// value will be populated with the DescribeDBInstanceSpecsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeDBInstanceSpecsCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeDBInstanceSpecsCommon Send returns without error.
//
// See DescribeDBInstanceSpecs for more information on using the DescribeDBInstanceSpecs
// API call, and error handling.
//
//    // Example sending a request using the DescribeDBInstanceSpecsRequest method.
//    req, resp := client.DescribeDBInstanceSpecsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) DescribeDBInstanceSpecsRequest(input *DescribeDBInstanceSpecsInput) (req *request.Request, output *DescribeDBInstanceSpecsOutput) {
	op := &request.Operation{
		Name:       opDescribeDBInstanceSpecs,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeDBInstanceSpecsInput{}
	}

	output = &DescribeDBInstanceSpecsOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeDBInstanceSpecs API operation for RDS_MYSQL_V2.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for RDS_MYSQL_V2's
// API operation DescribeDBInstanceSpecs for usage and error information.
func (c *RDSMYSQLV2) DescribeDBInstanceSpecs(input *DescribeDBInstanceSpecsInput) (*DescribeDBInstanceSpecsOutput, error) {
	req, out := c.DescribeDBInstanceSpecsRequest(input)
	return out, req.Send()
}

// DescribeDBInstanceSpecsWithContext is the same as DescribeDBInstanceSpecs with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeDBInstanceSpecs for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) DescribeDBInstanceSpecsWithContext(ctx volcengine.Context, input *DescribeDBInstanceSpecsInput, opts ...request.Option) (*DescribeDBInstanceSpecsOutput, error) {
	req, out := c.DescribeDBInstanceSpecsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DescribeDBInstanceSpecsInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	DBEngineVersion *string `type:"string" json:",omitempty"`

	InstanceType *string `type:"string" json:",omitempty"`

	SpecCode *string `type:"string" json:",omitempty"`

	SpecFamily *string `type:"string" json:",omitempty"`

	StorageType *string `type:"string" json:",omitempty"`

	ZoneId *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s DescribeDBInstanceSpecsInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeDBInstanceSpecsInput) GoString() string {
	return s.String()
}

// SetDBEngineVersion sets the DBEngineVersion field's value.
func (s *DescribeDBInstanceSpecsInput) SetDBEngineVersion(v string) *DescribeDBInstanceSpecsInput {
	s.DBEngineVersion = &v
	return s
}

// SetInstanceType sets the InstanceType field's value.
func (s *DescribeDBInstanceSpecsInput) SetInstanceType(v string) *DescribeDBInstanceSpecsInput {
	s.InstanceType = &v
	return s
}

// SetSpecCode sets the SpecCode field's value.
func (s *DescribeDBInstanceSpecsInput) SetSpecCode(v string) *DescribeDBInstanceSpecsInput {
	s.SpecCode = &v
	return s
}

// SetSpecFamily sets the SpecFamily field's value.
func (s *DescribeDBInstanceSpecsInput) SetSpecFamily(v string) *DescribeDBInstanceSpecsInput {
	s.SpecFamily = &v
	return s
}

// SetStorageType sets the StorageType field's value.
func (s *DescribeDBInstanceSpecsInput) SetStorageType(v string) *DescribeDBInstanceSpecsInput {
	s.StorageType = &v
	return s
}

// SetZoneId sets the ZoneId field's value.
func (s *DescribeDBInstanceSpecsInput) SetZoneId(v string) *DescribeDBInstanceSpecsInput {
	s.ZoneId = &v
	return s
}

type DescribeDBInstanceSpecsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	InstanceSpecsInfo []*InstanceSpecsInfoForDescribeDBInstanceSpecsOutput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s DescribeDBInstanceSpecsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeDBInstanceSpecsOutput) GoString() string {
	return s.String()
}

// SetInstanceSpecsInfo sets the InstanceSpecsInfo field's value.
func (s *DescribeDBInstanceSpecsOutput) SetInstanceSpecsInfo(v []*InstanceSpecsInfoForDescribeDBInstanceSpecsOutput) *DescribeDBInstanceSpecsOutput {
	s.InstanceSpecsInfo = v
	return s
}

type InstanceSpecsInfoForDescribeDBInstanceSpecsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Connection *int32 `type:"int32" json:",omitempty"`

	DBEngineVersion *string `type:"string" json:",omitempty"`

	IOPS *int32 `type:"int32" json:",omitempty"`

	InstanceType *string `type:"string" json:",omitempty"`

	Memory *int32 `type:"int32" json:",omitempty"`

	QPS *int32 `type:"int32" json:",omitempty"`

	RegionId *string `type:"string" json:",omitempty"`

	SpecCode *string `type:"string" json:",omitempty"`

	SpecFamily *string `type:"string" json:",omitempty"`

	SpecStatus *string `type:"string" json:",omitempty"`

	StorageMax *int32 `type:"int32" json:",omitempty"`

	StorageMin *int32 `type:"int32" json:",omitempty"`

	StorageStep *int32 `type:"int32" json:",omitempty"`

	StorageType *string `type:"string" json:",omitempty"`

	VCPU *int32 `type:"int32" json:",omitempty"`

	ZoneId *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s InstanceSpecsInfoForDescribeDBInstanceSpecsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s InstanceSpecsInfoForDescribeDBInstanceSpecsOutput) GoString() string {
	return s.String()
}

// SetConnection sets the Connection field's value.
func (s *InstanceSpecsInfoForDescribeDBInstanceSpecsOutput) SetConnection(v int32) *InstanceSpecsInfoForDescribeDBInstanceSpecsOutput {
	s.Connection = &v
	return s
}

// SetDBEngineVersion sets the DBEngineVersion field's value.
func (s *InstanceSpecsInfoForDescribeDBInstanceSpecsOutput) SetDBEngineVersion(v string) *InstanceSpecsInfoForDescribeDBInstanceSpecsOutput {
	s.DBEngineVersion = &v
	return s
}

// SetIOPS sets the IOPS field's value.
func (s *InstanceSpecsInfoForDescribeDBInstanceSpecsOutput) SetIOPS(v int32) *InstanceSpecsInfoForDescribeDBInstanceSpecsOutput {
	s.IOPS = &v
	return s
}

// SetInstanceType sets the InstanceType field's value.
func (s *InstanceSpecsInfoForDescribeDBInstanceSpecsOutput) SetInstanceType(v string) *InstanceSpecsInfoForDescribeDBInstanceSpecsOutput {
	s.InstanceType = &v
	return s
}

// SetMemory sets the Memory field's value.
func (s *InstanceSpecsInfoForDescribeDBInstanceSpecsOutput) SetMemory(v int32) *InstanceSpecsInfoForDescribeDBInstanceSpecsOutput {
	s.Memory = &v
	return s
}

// SetQPS sets the QPS field's value.
func (s *InstanceSpecsInfoForDescribeDBInstanceSpecsOutput) SetQPS(v int32) *InstanceSpecsInfoForDescribeDBInstanceSpecsOutput {
	s.QPS = &v
	return s
}

// SetRegionId sets the RegionId field's value.
func (s *InstanceSpecsInfoForDescribeDBInstanceSpecsOutput) SetRegionId(v string) *InstanceSpecsInfoForDescribeDBInstanceSpecsOutput {
	s.RegionId = &v
	return s
}

// SetSpecCode sets the SpecCode field's value.
func (s *InstanceSpecsInfoForDescribeDBInstanceSpecsOutput) SetSpecCode(v string) *InstanceSpecsInfoForDescribeDBInstanceSpecsOutput {
	s.SpecCode = &v
	return s
}

// SetSpecFamily sets the SpecFamily field's value.
func (s *InstanceSpecsInfoForDescribeDBInstanceSpecsOutput) SetSpecFamily(v string) *InstanceSpecsInfoForDescribeDBInstanceSpecsOutput {
	s.SpecFamily = &v
	return s
}

// SetSpecStatus sets the SpecStatus field's value.
func (s *InstanceSpecsInfoForDescribeDBInstanceSpecsOutput) SetSpecStatus(v string) *InstanceSpecsInfoForDescribeDBInstanceSpecsOutput {
	s.SpecStatus = &v
	return s
}

// SetStorageMax sets the StorageMax field's value.
func (s *InstanceSpecsInfoForDescribeDBInstanceSpecsOutput) SetStorageMax(v int32) *InstanceSpecsInfoForDescribeDBInstanceSpecsOutput {
	s.StorageMax = &v
	return s
}

// SetStorageMin sets the StorageMin field's value.
func (s *InstanceSpecsInfoForDescribeDBInstanceSpecsOutput) SetStorageMin(v int32) *InstanceSpecsInfoForDescribeDBInstanceSpecsOutput {
	s.StorageMin = &v
	return s
}

// SetStorageStep sets the StorageStep field's value.
func (s *InstanceSpecsInfoForDescribeDBInstanceSpecsOutput) SetStorageStep(v int32) *InstanceSpecsInfoForDescribeDBInstanceSpecsOutput {
	s.StorageStep = &v
	return s
}

// SetStorageType sets the StorageType field's value.
func (s *InstanceSpecsInfoForDescribeDBInstanceSpecsOutput) SetStorageType(v string) *InstanceSpecsInfoForDescribeDBInstanceSpecsOutput {
	s.StorageType = &v
	return s
}

// SetVCPU sets the VCPU field's value.
func (s *InstanceSpecsInfoForDescribeDBInstanceSpecsOutput) SetVCPU(v int32) *InstanceSpecsInfoForDescribeDBInstanceSpecsOutput {
	s.VCPU = &v
	return s
}

// SetZoneId sets the ZoneId field's value.
func (s *InstanceSpecsInfoForDescribeDBInstanceSpecsOutput) SetZoneId(v string) *InstanceSpecsInfoForDescribeDBInstanceSpecsOutput {
	s.ZoneId = &v
	return s
}
