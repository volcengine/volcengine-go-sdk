// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package rdsmysqlv2

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opCreateDBEndpointCommon = "CreateDBEndpoint"

// CreateDBEndpointCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateDBEndpointCommon operation. The "output" return
// value will be populated with the CreateDBEndpointCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateDBEndpointCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateDBEndpointCommon Send returns without error.
//
// See CreateDBEndpointCommon for more information on using the CreateDBEndpointCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateDBEndpointCommonRequest method.
//    req, resp := client.CreateDBEndpointCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) CreateDBEndpointCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateDBEndpointCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateDBEndpointCommon API operation for RDS_MYSQL_V2.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for RDS_MYSQL_V2's
// API operation CreateDBEndpointCommon for usage and error information.
func (c *RDSMYSQLV2) CreateDBEndpointCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateDBEndpointCommonRequest(input)
	return out, req.Send()
}

// CreateDBEndpointCommonWithContext is the same as CreateDBEndpointCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateDBEndpointCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) CreateDBEndpointCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateDBEndpointCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateDBEndpoint = "CreateDBEndpoint"

// CreateDBEndpointRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateDBEndpoint operation. The "output" return
// value will be populated with the CreateDBEndpointCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateDBEndpointCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateDBEndpointCommon Send returns without error.
//
// See CreateDBEndpoint for more information on using the CreateDBEndpoint
// API call, and error handling.
//
//    // Example sending a request using the CreateDBEndpointRequest method.
//    req, resp := client.CreateDBEndpointRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) CreateDBEndpointRequest(input *CreateDBEndpointInput) (req *request.Request, output *CreateDBEndpointOutput) {
	op := &request.Operation{
		Name:       opCreateDBEndpoint,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateDBEndpointInput{}
	}

	output = &CreateDBEndpointOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateDBEndpoint API operation for RDS_MYSQL_V2.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for RDS_MYSQL_V2's
// API operation CreateDBEndpoint for usage and error information.
func (c *RDSMYSQLV2) CreateDBEndpoint(input *CreateDBEndpointInput) (*CreateDBEndpointOutput, error) {
	req, out := c.CreateDBEndpointRequest(input)
	return out, req.Send()
}

// CreateDBEndpointWithContext is the same as CreateDBEndpoint with the addition of
// the ability to pass a context and additional request options.
//
// See CreateDBEndpoint for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) CreateDBEndpointWithContext(ctx volcengine.Context, input *CreateDBEndpointInput, opts ...request.Option) (*CreateDBEndpointOutput, error) {
	req, out := c.CreateDBEndpointRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type CreateDBEndpointInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	AutoAddNewNodes *bool `type:"boolean" json:",omitempty"`

	ConnectionMode *string `type:"string" json:",omitempty"`

	ConnectionPoolType *string `type:"string" json:",omitempty"`

	Description *string `type:"string" json:",omitempty"`

	EndpointName *string `type:"string" json:",omitempty"`

	// EndpointType is a required field
	EndpointType *string `type:"string" json:",omitempty" required:"true"`

	IdleConnectionReclaim *bool `type:"boolean" json:",omitempty"`

	ImplicitTransSplit *bool `type:"boolean" json:",omitempty"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:",omitempty" required:"true"`

	MasterNodeRouting *bool `type:"boolean" json:",omitempty"`

	MasterProtectorTimeout *int32 `type:"int32" json:",omitempty"`

	MultiStatementsMode *string `type:"string" json:",omitempty"`

	Nodes *string `type:"string" json:",omitempty"`

	OverloadProtection *bool `type:"boolean" json:",omitempty"`

	ReadOnlyNodeDistributionType *string `type:"string" json:",omitempty"`

	ReadOnlyNodeMaxDelayTime *int32 `type:"int32" json:",omitempty"`

	ReadOnlyNodeWeight []*ReadOnlyNodeWeightForCreateDBEndpointInput `type:"list" json:",omitempty"`

	ReadWriteMode *string `type:"string" json:",omitempty"`

	ReadWriteSpliting *bool `type:"boolean" json:",omitempty"`
}

// String returns the string representation
func (s CreateDBEndpointInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateDBEndpointInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateDBEndpointInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CreateDBEndpointInput"}
	if s.EndpointType == nil {
		invalidParams.Add(request.NewErrParamRequired("EndpointType"))
	}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAutoAddNewNodes sets the AutoAddNewNodes field's value.
func (s *CreateDBEndpointInput) SetAutoAddNewNodes(v bool) *CreateDBEndpointInput {
	s.AutoAddNewNodes = &v
	return s
}

// SetConnectionMode sets the ConnectionMode field's value.
func (s *CreateDBEndpointInput) SetConnectionMode(v string) *CreateDBEndpointInput {
	s.ConnectionMode = &v
	return s
}

// SetConnectionPoolType sets the ConnectionPoolType field's value.
func (s *CreateDBEndpointInput) SetConnectionPoolType(v string) *CreateDBEndpointInput {
	s.ConnectionPoolType = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *CreateDBEndpointInput) SetDescription(v string) *CreateDBEndpointInput {
	s.Description = &v
	return s
}

// SetEndpointName sets the EndpointName field's value.
func (s *CreateDBEndpointInput) SetEndpointName(v string) *CreateDBEndpointInput {
	s.EndpointName = &v
	return s
}

// SetEndpointType sets the EndpointType field's value.
func (s *CreateDBEndpointInput) SetEndpointType(v string) *CreateDBEndpointInput {
	s.EndpointType = &v
	return s
}

// SetIdleConnectionReclaim sets the IdleConnectionReclaim field's value.
func (s *CreateDBEndpointInput) SetIdleConnectionReclaim(v bool) *CreateDBEndpointInput {
	s.IdleConnectionReclaim = &v
	return s
}

// SetImplicitTransSplit sets the ImplicitTransSplit field's value.
func (s *CreateDBEndpointInput) SetImplicitTransSplit(v bool) *CreateDBEndpointInput {
	s.ImplicitTransSplit = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *CreateDBEndpointInput) SetInstanceId(v string) *CreateDBEndpointInput {
	s.InstanceId = &v
	return s
}

// SetMasterNodeRouting sets the MasterNodeRouting field's value.
func (s *CreateDBEndpointInput) SetMasterNodeRouting(v bool) *CreateDBEndpointInput {
	s.MasterNodeRouting = &v
	return s
}

// SetMasterProtectorTimeout sets the MasterProtectorTimeout field's value.
func (s *CreateDBEndpointInput) SetMasterProtectorTimeout(v int32) *CreateDBEndpointInput {
	s.MasterProtectorTimeout = &v
	return s
}

// SetMultiStatementsMode sets the MultiStatementsMode field's value.
func (s *CreateDBEndpointInput) SetMultiStatementsMode(v string) *CreateDBEndpointInput {
	s.MultiStatementsMode = &v
	return s
}

// SetNodes sets the Nodes field's value.
func (s *CreateDBEndpointInput) SetNodes(v string) *CreateDBEndpointInput {
	s.Nodes = &v
	return s
}

// SetOverloadProtection sets the OverloadProtection field's value.
func (s *CreateDBEndpointInput) SetOverloadProtection(v bool) *CreateDBEndpointInput {
	s.OverloadProtection = &v
	return s
}

// SetReadOnlyNodeDistributionType sets the ReadOnlyNodeDistributionType field's value.
func (s *CreateDBEndpointInput) SetReadOnlyNodeDistributionType(v string) *CreateDBEndpointInput {
	s.ReadOnlyNodeDistributionType = &v
	return s
}

// SetReadOnlyNodeMaxDelayTime sets the ReadOnlyNodeMaxDelayTime field's value.
func (s *CreateDBEndpointInput) SetReadOnlyNodeMaxDelayTime(v int32) *CreateDBEndpointInput {
	s.ReadOnlyNodeMaxDelayTime = &v
	return s
}

// SetReadOnlyNodeWeight sets the ReadOnlyNodeWeight field's value.
func (s *CreateDBEndpointInput) SetReadOnlyNodeWeight(v []*ReadOnlyNodeWeightForCreateDBEndpointInput) *CreateDBEndpointInput {
	s.ReadOnlyNodeWeight = v
	return s
}

// SetReadWriteMode sets the ReadWriteMode field's value.
func (s *CreateDBEndpointInput) SetReadWriteMode(v string) *CreateDBEndpointInput {
	s.ReadWriteMode = &v
	return s
}

// SetReadWriteSpliting sets the ReadWriteSpliting field's value.
func (s *CreateDBEndpointInput) SetReadWriteSpliting(v bool) *CreateDBEndpointInput {
	s.ReadWriteSpliting = &v
	return s
}

type CreateDBEndpointOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	EndpointId *string `type:"string" json:",omitempty"`

	InstanceId *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s CreateDBEndpointOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateDBEndpointOutput) GoString() string {
	return s.String()
}

// SetEndpointId sets the EndpointId field's value.
func (s *CreateDBEndpointOutput) SetEndpointId(v string) *CreateDBEndpointOutput {
	s.EndpointId = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *CreateDBEndpointOutput) SetInstanceId(v string) *CreateDBEndpointOutput {
	s.InstanceId = &v
	return s
}

type ReadOnlyNodeWeightForCreateDBEndpointInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	NodeId *string `type:"string" json:",omitempty"`

	NodeType *string `type:"string" json:",omitempty"`

	Weight *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s ReadOnlyNodeWeightForCreateDBEndpointInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ReadOnlyNodeWeightForCreateDBEndpointInput) GoString() string {
	return s.String()
}

// SetNodeId sets the NodeId field's value.
func (s *ReadOnlyNodeWeightForCreateDBEndpointInput) SetNodeId(v string) *ReadOnlyNodeWeightForCreateDBEndpointInput {
	s.NodeId = &v
	return s
}

// SetNodeType sets the NodeType field's value.
func (s *ReadOnlyNodeWeightForCreateDBEndpointInput) SetNodeType(v string) *ReadOnlyNodeWeightForCreateDBEndpointInput {
	s.NodeType = &v
	return s
}

// SetWeight sets the Weight field's value.
func (s *ReadOnlyNodeWeightForCreateDBEndpointInput) SetWeight(v int32) *ReadOnlyNodeWeightForCreateDBEndpointInput {
	s.Weight = &v
	return s
}
