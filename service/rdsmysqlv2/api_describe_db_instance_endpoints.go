// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package rdsmysqlv2

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDescribeDBInstanceEndpointsCommon = "DescribeDBInstanceEndpoints"

// DescribeDBInstanceEndpointsCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeDBInstanceEndpointsCommon operation. The "output" return
// value will be populated with the DescribeDBInstanceEndpointsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeDBInstanceEndpointsCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeDBInstanceEndpointsCommon Send returns without error.
//
// See DescribeDBInstanceEndpointsCommon for more information on using the DescribeDBInstanceEndpointsCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeDBInstanceEndpointsCommonRequest method.
//    req, resp := client.DescribeDBInstanceEndpointsCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) DescribeDBInstanceEndpointsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeDBInstanceEndpointsCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeDBInstanceEndpointsCommon API operation for RDS_MYSQL_V2.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for RDS_MYSQL_V2's
// API operation DescribeDBInstanceEndpointsCommon for usage and error information.
func (c *RDSMYSQLV2) DescribeDBInstanceEndpointsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeDBInstanceEndpointsCommonRequest(input)
	return out, req.Send()
}

// DescribeDBInstanceEndpointsCommonWithContext is the same as DescribeDBInstanceEndpointsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeDBInstanceEndpointsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) DescribeDBInstanceEndpointsCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeDBInstanceEndpointsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeDBInstanceEndpoints = "DescribeDBInstanceEndpoints"

// DescribeDBInstanceEndpointsRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeDBInstanceEndpoints operation. The "output" return
// value will be populated with the DescribeDBInstanceEndpointsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeDBInstanceEndpointsCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeDBInstanceEndpointsCommon Send returns without error.
//
// See DescribeDBInstanceEndpoints for more information on using the DescribeDBInstanceEndpoints
// API call, and error handling.
//
//    // Example sending a request using the DescribeDBInstanceEndpointsRequest method.
//    req, resp := client.DescribeDBInstanceEndpointsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) DescribeDBInstanceEndpointsRequest(input *DescribeDBInstanceEndpointsInput) (req *request.Request, output *DescribeDBInstanceEndpointsOutput) {
	op := &request.Operation{
		Name:       opDescribeDBInstanceEndpoints,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeDBInstanceEndpointsInput{}
	}

	output = &DescribeDBInstanceEndpointsOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeDBInstanceEndpoints API operation for RDS_MYSQL_V2.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for RDS_MYSQL_V2's
// API operation DescribeDBInstanceEndpoints for usage and error information.
func (c *RDSMYSQLV2) DescribeDBInstanceEndpoints(input *DescribeDBInstanceEndpointsInput) (*DescribeDBInstanceEndpointsOutput, error) {
	req, out := c.DescribeDBInstanceEndpointsRequest(input)
	return out, req.Send()
}

// DescribeDBInstanceEndpointsWithContext is the same as DescribeDBInstanceEndpoints with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeDBInstanceEndpoints for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) DescribeDBInstanceEndpointsWithContext(ctx volcengine.Context, input *DescribeDBInstanceEndpointsInput, opts ...request.Option) (*DescribeDBInstanceEndpointsOutput, error) {
	req, out := c.DescribeDBInstanceEndpointsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type AddressForDescribeDBInstanceEndpointsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	DNSVisibility *bool `type:"boolean" json:",omitempty"`

	Domain *string `type:"string" json:",omitempty"`

	EipId *string `type:"string" json:",omitempty"`

	IPAddress *string `type:"string" json:",omitempty"`

	InternetProtocol *string `type:"string" json:",omitempty"`

	NetworkType *string `type:"string" json:",omitempty"`

	Port *string `type:"string" json:",omitempty"`

	SubnetId *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s AddressForDescribeDBInstanceEndpointsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s AddressForDescribeDBInstanceEndpointsOutput) GoString() string {
	return s.String()
}

// SetDNSVisibility sets the DNSVisibility field's value.
func (s *AddressForDescribeDBInstanceEndpointsOutput) SetDNSVisibility(v bool) *AddressForDescribeDBInstanceEndpointsOutput {
	s.DNSVisibility = &v
	return s
}

// SetDomain sets the Domain field's value.
func (s *AddressForDescribeDBInstanceEndpointsOutput) SetDomain(v string) *AddressForDescribeDBInstanceEndpointsOutput {
	s.Domain = &v
	return s
}

// SetEipId sets the EipId field's value.
func (s *AddressForDescribeDBInstanceEndpointsOutput) SetEipId(v string) *AddressForDescribeDBInstanceEndpointsOutput {
	s.EipId = &v
	return s
}

// SetIPAddress sets the IPAddress field's value.
func (s *AddressForDescribeDBInstanceEndpointsOutput) SetIPAddress(v string) *AddressForDescribeDBInstanceEndpointsOutput {
	s.IPAddress = &v
	return s
}

// SetInternetProtocol sets the InternetProtocol field's value.
func (s *AddressForDescribeDBInstanceEndpointsOutput) SetInternetProtocol(v string) *AddressForDescribeDBInstanceEndpointsOutput {
	s.InternetProtocol = &v
	return s
}

// SetNetworkType sets the NetworkType field's value.
func (s *AddressForDescribeDBInstanceEndpointsOutput) SetNetworkType(v string) *AddressForDescribeDBInstanceEndpointsOutput {
	s.NetworkType = &v
	return s
}

// SetPort sets the Port field's value.
func (s *AddressForDescribeDBInstanceEndpointsOutput) SetPort(v string) *AddressForDescribeDBInstanceEndpointsOutput {
	s.Port = &v
	return s
}

// SetSubnetId sets the SubnetId field's value.
func (s *AddressForDescribeDBInstanceEndpointsOutput) SetSubnetId(v string) *AddressForDescribeDBInstanceEndpointsOutput {
	s.SubnetId = &v
	return s
}

type DescribeDBInstanceEndpointsInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s DescribeDBInstanceEndpointsInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeDBInstanceEndpointsInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeDBInstanceEndpointsInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DescribeDBInstanceEndpointsInput"}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetInstanceId sets the InstanceId field's value.
func (s *DescribeDBInstanceEndpointsInput) SetInstanceId(v string) *DescribeDBInstanceEndpointsInput {
	s.InstanceId = &v
	return s
}

type DescribeDBInstanceEndpointsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Endpoints []*EndpointForDescribeDBInstanceEndpointsOutput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s DescribeDBInstanceEndpointsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeDBInstanceEndpointsOutput) GoString() string {
	return s.String()
}

// SetEndpoints sets the Endpoints field's value.
func (s *DescribeDBInstanceEndpointsOutput) SetEndpoints(v []*EndpointForDescribeDBInstanceEndpointsOutput) *DescribeDBInstanceEndpointsOutput {
	s.Endpoints = v
	return s
}

type EndpointForDescribeDBInstanceEndpointsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Addresses []*AddressForDescribeDBInstanceEndpointsOutput `type:"list" json:",omitempty"`

	AutoAddNewNodes *string `type:"string" json:",omitempty"`

	ConnectionInfoTags []*string `type:"list" json:",omitempty"`

	ConnectionMode *string `type:"string" json:",omitempty"`

	ConnectionPoolType *string `type:"string" json:",omitempty"`

	Description *string `type:"string" json:",omitempty"`

	EnableConnectionPersistent *bool `type:"boolean" json:",omitempty"`

	EnableReadOnly *string `type:"string" json:",omitempty"`

	EnableReadWriteSplitting *string `type:"string" json:",omitempty"`

	EndpointId *string `type:"string" json:",omitempty"`

	EndpointName *string `type:"string" json:",omitempty"`

	EndpointType *string `type:"string" json:",omitempty"`

	IdleConnectionReclaim *bool `type:"boolean" json:",omitempty"`

	ImplicitTransSplit *bool `type:"boolean" json:",omitempty"`

	MasterNodeRouting *bool `type:"boolean" json:",omitempty"`

	MasterProtectorTimeout *int32 `type:"int32" json:",omitempty"`

	MultiStatementsMode *string `type:"string" json:",omitempty"`

	OverloadProtection *bool `type:"boolean" json:",omitempty"`

	ReadOnlyNodeDistributionType *string `type:"string" json:",omitempty"`

	ReadOnlyNodeMaxDelayTime *int32 `type:"int32" json:",omitempty"`

	ReadOnlyNodeWeight []*ReadOnlyNodeWeightForDescribeDBInstanceEndpointsOutput `type:"list" json:",omitempty"`

	ReadWriteMode *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s EndpointForDescribeDBInstanceEndpointsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s EndpointForDescribeDBInstanceEndpointsOutput) GoString() string {
	return s.String()
}

// SetAddresses sets the Addresses field's value.
func (s *EndpointForDescribeDBInstanceEndpointsOutput) SetAddresses(v []*AddressForDescribeDBInstanceEndpointsOutput) *EndpointForDescribeDBInstanceEndpointsOutput {
	s.Addresses = v
	return s
}

// SetAutoAddNewNodes sets the AutoAddNewNodes field's value.
func (s *EndpointForDescribeDBInstanceEndpointsOutput) SetAutoAddNewNodes(v string) *EndpointForDescribeDBInstanceEndpointsOutput {
	s.AutoAddNewNodes = &v
	return s
}

// SetConnectionInfoTags sets the ConnectionInfoTags field's value.
func (s *EndpointForDescribeDBInstanceEndpointsOutput) SetConnectionInfoTags(v []*string) *EndpointForDescribeDBInstanceEndpointsOutput {
	s.ConnectionInfoTags = v
	return s
}

// SetConnectionMode sets the ConnectionMode field's value.
func (s *EndpointForDescribeDBInstanceEndpointsOutput) SetConnectionMode(v string) *EndpointForDescribeDBInstanceEndpointsOutput {
	s.ConnectionMode = &v
	return s
}

// SetConnectionPoolType sets the ConnectionPoolType field's value.
func (s *EndpointForDescribeDBInstanceEndpointsOutput) SetConnectionPoolType(v string) *EndpointForDescribeDBInstanceEndpointsOutput {
	s.ConnectionPoolType = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *EndpointForDescribeDBInstanceEndpointsOutput) SetDescription(v string) *EndpointForDescribeDBInstanceEndpointsOutput {
	s.Description = &v
	return s
}

// SetEnableConnectionPersistent sets the EnableConnectionPersistent field's value.
func (s *EndpointForDescribeDBInstanceEndpointsOutput) SetEnableConnectionPersistent(v bool) *EndpointForDescribeDBInstanceEndpointsOutput {
	s.EnableConnectionPersistent = &v
	return s
}

// SetEnableReadOnly sets the EnableReadOnly field's value.
func (s *EndpointForDescribeDBInstanceEndpointsOutput) SetEnableReadOnly(v string) *EndpointForDescribeDBInstanceEndpointsOutput {
	s.EnableReadOnly = &v
	return s
}

// SetEnableReadWriteSplitting sets the EnableReadWriteSplitting field's value.
func (s *EndpointForDescribeDBInstanceEndpointsOutput) SetEnableReadWriteSplitting(v string) *EndpointForDescribeDBInstanceEndpointsOutput {
	s.EnableReadWriteSplitting = &v
	return s
}

// SetEndpointId sets the EndpointId field's value.
func (s *EndpointForDescribeDBInstanceEndpointsOutput) SetEndpointId(v string) *EndpointForDescribeDBInstanceEndpointsOutput {
	s.EndpointId = &v
	return s
}

// SetEndpointName sets the EndpointName field's value.
func (s *EndpointForDescribeDBInstanceEndpointsOutput) SetEndpointName(v string) *EndpointForDescribeDBInstanceEndpointsOutput {
	s.EndpointName = &v
	return s
}

// SetEndpointType sets the EndpointType field's value.
func (s *EndpointForDescribeDBInstanceEndpointsOutput) SetEndpointType(v string) *EndpointForDescribeDBInstanceEndpointsOutput {
	s.EndpointType = &v
	return s
}

// SetIdleConnectionReclaim sets the IdleConnectionReclaim field's value.
func (s *EndpointForDescribeDBInstanceEndpointsOutput) SetIdleConnectionReclaim(v bool) *EndpointForDescribeDBInstanceEndpointsOutput {
	s.IdleConnectionReclaim = &v
	return s
}

// SetImplicitTransSplit sets the ImplicitTransSplit field's value.
func (s *EndpointForDescribeDBInstanceEndpointsOutput) SetImplicitTransSplit(v bool) *EndpointForDescribeDBInstanceEndpointsOutput {
	s.ImplicitTransSplit = &v
	return s
}

// SetMasterNodeRouting sets the MasterNodeRouting field's value.
func (s *EndpointForDescribeDBInstanceEndpointsOutput) SetMasterNodeRouting(v bool) *EndpointForDescribeDBInstanceEndpointsOutput {
	s.MasterNodeRouting = &v
	return s
}

// SetMasterProtectorTimeout sets the MasterProtectorTimeout field's value.
func (s *EndpointForDescribeDBInstanceEndpointsOutput) SetMasterProtectorTimeout(v int32) *EndpointForDescribeDBInstanceEndpointsOutput {
	s.MasterProtectorTimeout = &v
	return s
}

// SetMultiStatementsMode sets the MultiStatementsMode field's value.
func (s *EndpointForDescribeDBInstanceEndpointsOutput) SetMultiStatementsMode(v string) *EndpointForDescribeDBInstanceEndpointsOutput {
	s.MultiStatementsMode = &v
	return s
}

// SetOverloadProtection sets the OverloadProtection field's value.
func (s *EndpointForDescribeDBInstanceEndpointsOutput) SetOverloadProtection(v bool) *EndpointForDescribeDBInstanceEndpointsOutput {
	s.OverloadProtection = &v
	return s
}

// SetReadOnlyNodeDistributionType sets the ReadOnlyNodeDistributionType field's value.
func (s *EndpointForDescribeDBInstanceEndpointsOutput) SetReadOnlyNodeDistributionType(v string) *EndpointForDescribeDBInstanceEndpointsOutput {
	s.ReadOnlyNodeDistributionType = &v
	return s
}

// SetReadOnlyNodeMaxDelayTime sets the ReadOnlyNodeMaxDelayTime field's value.
func (s *EndpointForDescribeDBInstanceEndpointsOutput) SetReadOnlyNodeMaxDelayTime(v int32) *EndpointForDescribeDBInstanceEndpointsOutput {
	s.ReadOnlyNodeMaxDelayTime = &v
	return s
}

// SetReadOnlyNodeWeight sets the ReadOnlyNodeWeight field's value.
func (s *EndpointForDescribeDBInstanceEndpointsOutput) SetReadOnlyNodeWeight(v []*ReadOnlyNodeWeightForDescribeDBInstanceEndpointsOutput) *EndpointForDescribeDBInstanceEndpointsOutput {
	s.ReadOnlyNodeWeight = v
	return s
}

// SetReadWriteMode sets the ReadWriteMode field's value.
func (s *EndpointForDescribeDBInstanceEndpointsOutput) SetReadWriteMode(v string) *EndpointForDescribeDBInstanceEndpointsOutput {
	s.ReadWriteMode = &v
	return s
}

type ReadOnlyNodeWeightForDescribeDBInstanceEndpointsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	NodeId *string `type:"string" json:",omitempty"`

	NodeType *string `type:"string" json:",omitempty"`

	Weight *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s ReadOnlyNodeWeightForDescribeDBInstanceEndpointsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ReadOnlyNodeWeightForDescribeDBInstanceEndpointsOutput) GoString() string {
	return s.String()
}

// SetNodeId sets the NodeId field's value.
func (s *ReadOnlyNodeWeightForDescribeDBInstanceEndpointsOutput) SetNodeId(v string) *ReadOnlyNodeWeightForDescribeDBInstanceEndpointsOutput {
	s.NodeId = &v
	return s
}

// SetNodeType sets the NodeType field's value.
func (s *ReadOnlyNodeWeightForDescribeDBInstanceEndpointsOutput) SetNodeType(v string) *ReadOnlyNodeWeightForDescribeDBInstanceEndpointsOutput {
	s.NodeType = &v
	return s
}

// SetWeight sets the Weight field's value.
func (s *ReadOnlyNodeWeightForDescribeDBInstanceEndpointsOutput) SetWeight(v int32) *ReadOnlyNodeWeightForDescribeDBInstanceEndpointsOutput {
	s.Weight = &v
	return s
}
