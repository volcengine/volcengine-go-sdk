// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package rdsmysqlv2

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opModifyDBEndpointCommon = "ModifyDBEndpoint"

// ModifyDBEndpointCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ModifyDBEndpointCommon operation. The "output" return
// value will be populated with the ModifyDBEndpointCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyDBEndpointCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyDBEndpointCommon Send returns without error.
//
// See ModifyDBEndpointCommon for more information on using the ModifyDBEndpointCommon
// API call, and error handling.
//
//    // Example sending a request using the ModifyDBEndpointCommonRequest method.
//    req, resp := client.ModifyDBEndpointCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) ModifyDBEndpointCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opModifyDBEndpointCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ModifyDBEndpointCommon API operation for RDS_MYSQL_V2.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for RDS_MYSQL_V2's
// API operation ModifyDBEndpointCommon for usage and error information.
func (c *RDSMYSQLV2) ModifyDBEndpointCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ModifyDBEndpointCommonRequest(input)
	return out, req.Send()
}

// ModifyDBEndpointCommonWithContext is the same as ModifyDBEndpointCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyDBEndpointCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) ModifyDBEndpointCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ModifyDBEndpointCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyDBEndpoint = "ModifyDBEndpoint"

// ModifyDBEndpointRequest generates a "volcengine/request.Request" representing the
// client's request for the ModifyDBEndpoint operation. The "output" return
// value will be populated with the ModifyDBEndpointCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyDBEndpointCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyDBEndpointCommon Send returns without error.
//
// See ModifyDBEndpoint for more information on using the ModifyDBEndpoint
// API call, and error handling.
//
//    // Example sending a request using the ModifyDBEndpointRequest method.
//    req, resp := client.ModifyDBEndpointRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) ModifyDBEndpointRequest(input *ModifyDBEndpointInput) (req *request.Request, output *ModifyDBEndpointOutput) {
	op := &request.Operation{
		Name:       opModifyDBEndpoint,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ModifyDBEndpointInput{}
	}

	output = &ModifyDBEndpointOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ModifyDBEndpoint API operation for RDS_MYSQL_V2.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for RDS_MYSQL_V2's
// API operation ModifyDBEndpoint for usage and error information.
func (c *RDSMYSQLV2) ModifyDBEndpoint(input *ModifyDBEndpointInput) (*ModifyDBEndpointOutput, error) {
	req, out := c.ModifyDBEndpointRequest(input)
	return out, req.Send()
}

// ModifyDBEndpointWithContext is the same as ModifyDBEndpoint with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyDBEndpoint for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) ModifyDBEndpointWithContext(ctx volcengine.Context, input *ModifyDBEndpointInput, opts ...request.Option) (*ModifyDBEndpointOutput, error) {
	req, out := c.ModifyDBEndpointRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ModifyDBEndpointInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	AutoAddNewNodes *bool `type:"boolean" json:",omitempty"`

	ConnectionPoolType *string `type:"string" json:",omitempty"`

	Description *string `type:"string" json:",omitempty"`

	// EndpointId is a required field
	EndpointId *string `type:"string" json:",omitempty" required:"true"`

	EndpointName *string `type:"string" json:",omitempty"`

	IdleConnectionReclaim *bool `type:"boolean" json:",omitempty"`

	ImplicitTransSplit *bool `type:"boolean" json:",omitempty"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:",omitempty" required:"true"`

	MasterNodeRouting *bool `type:"boolean" json:",omitempty"`

	MasterProtectorTimeout *int32 `type:"int32" json:",omitempty"`

	MultiStatementsMode *string `type:"string" json:",omitempty"`

	Nodes *string `type:"string" json:",omitempty"`

	OverloadProtection *bool `type:"boolean" json:",omitempty"`

	ReadOnlyNodeDistributionType *string `type:"string" json:",omitempty"`

	ReadOnlyNodeMaxDelayTime *int32 `type:"int32" json:",omitempty"`

	ReadOnlyNodeWeight []*ReadOnlyNodeWeightForModifyDBEndpointInput `type:"list" json:",omitempty"`

	ReadWriteMode *string `type:"string" json:",omitempty"`

	ReadWriteSpliting *bool `type:"boolean" json:",omitempty"`
}

// String returns the string representation
func (s ModifyDBEndpointInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyDBEndpointInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ModifyDBEndpointInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ModifyDBEndpointInput"}
	if s.EndpointId == nil {
		invalidParams.Add(request.NewErrParamRequired("EndpointId"))
	}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAutoAddNewNodes sets the AutoAddNewNodes field's value.
func (s *ModifyDBEndpointInput) SetAutoAddNewNodes(v bool) *ModifyDBEndpointInput {
	s.AutoAddNewNodes = &v
	return s
}

// SetConnectionPoolType sets the ConnectionPoolType field's value.
func (s *ModifyDBEndpointInput) SetConnectionPoolType(v string) *ModifyDBEndpointInput {
	s.ConnectionPoolType = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *ModifyDBEndpointInput) SetDescription(v string) *ModifyDBEndpointInput {
	s.Description = &v
	return s
}

// SetEndpointId sets the EndpointId field's value.
func (s *ModifyDBEndpointInput) SetEndpointId(v string) *ModifyDBEndpointInput {
	s.EndpointId = &v
	return s
}

// SetEndpointName sets the EndpointName field's value.
func (s *ModifyDBEndpointInput) SetEndpointName(v string) *ModifyDBEndpointInput {
	s.EndpointName = &v
	return s
}

// SetIdleConnectionReclaim sets the IdleConnectionReclaim field's value.
func (s *ModifyDBEndpointInput) SetIdleConnectionReclaim(v bool) *ModifyDBEndpointInput {
	s.IdleConnectionReclaim = &v
	return s
}

// SetImplicitTransSplit sets the ImplicitTransSplit field's value.
func (s *ModifyDBEndpointInput) SetImplicitTransSplit(v bool) *ModifyDBEndpointInput {
	s.ImplicitTransSplit = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *ModifyDBEndpointInput) SetInstanceId(v string) *ModifyDBEndpointInput {
	s.InstanceId = &v
	return s
}

// SetMasterNodeRouting sets the MasterNodeRouting field's value.
func (s *ModifyDBEndpointInput) SetMasterNodeRouting(v bool) *ModifyDBEndpointInput {
	s.MasterNodeRouting = &v
	return s
}

// SetMasterProtectorTimeout sets the MasterProtectorTimeout field's value.
func (s *ModifyDBEndpointInput) SetMasterProtectorTimeout(v int32) *ModifyDBEndpointInput {
	s.MasterProtectorTimeout = &v
	return s
}

// SetMultiStatementsMode sets the MultiStatementsMode field's value.
func (s *ModifyDBEndpointInput) SetMultiStatementsMode(v string) *ModifyDBEndpointInput {
	s.MultiStatementsMode = &v
	return s
}

// SetNodes sets the Nodes field's value.
func (s *ModifyDBEndpointInput) SetNodes(v string) *ModifyDBEndpointInput {
	s.Nodes = &v
	return s
}

// SetOverloadProtection sets the OverloadProtection field's value.
func (s *ModifyDBEndpointInput) SetOverloadProtection(v bool) *ModifyDBEndpointInput {
	s.OverloadProtection = &v
	return s
}

// SetReadOnlyNodeDistributionType sets the ReadOnlyNodeDistributionType field's value.
func (s *ModifyDBEndpointInput) SetReadOnlyNodeDistributionType(v string) *ModifyDBEndpointInput {
	s.ReadOnlyNodeDistributionType = &v
	return s
}

// SetReadOnlyNodeMaxDelayTime sets the ReadOnlyNodeMaxDelayTime field's value.
func (s *ModifyDBEndpointInput) SetReadOnlyNodeMaxDelayTime(v int32) *ModifyDBEndpointInput {
	s.ReadOnlyNodeMaxDelayTime = &v
	return s
}

// SetReadOnlyNodeWeight sets the ReadOnlyNodeWeight field's value.
func (s *ModifyDBEndpointInput) SetReadOnlyNodeWeight(v []*ReadOnlyNodeWeightForModifyDBEndpointInput) *ModifyDBEndpointInput {
	s.ReadOnlyNodeWeight = v
	return s
}

// SetReadWriteMode sets the ReadWriteMode field's value.
func (s *ModifyDBEndpointInput) SetReadWriteMode(v string) *ModifyDBEndpointInput {
	s.ReadWriteMode = &v
	return s
}

// SetReadWriteSpliting sets the ReadWriteSpliting field's value.
func (s *ModifyDBEndpointInput) SetReadWriteSpliting(v bool) *ModifyDBEndpointInput {
	s.ReadWriteSpliting = &v
	return s
}

type ModifyDBEndpointOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s ModifyDBEndpointOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyDBEndpointOutput) GoString() string {
	return s.String()
}

type ReadOnlyNodeWeightForModifyDBEndpointInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	NodeId *string `type:"string" json:",omitempty"`

	NodeType *string `type:"string" json:",omitempty"`

	Weight *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s ReadOnlyNodeWeightForModifyDBEndpointInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ReadOnlyNodeWeightForModifyDBEndpointInput) GoString() string {
	return s.String()
}

// SetNodeId sets the NodeId field's value.
func (s *ReadOnlyNodeWeightForModifyDBEndpointInput) SetNodeId(v string) *ReadOnlyNodeWeightForModifyDBEndpointInput {
	s.NodeId = &v
	return s
}

// SetNodeType sets the NodeType field's value.
func (s *ReadOnlyNodeWeightForModifyDBEndpointInput) SetNodeType(v string) *ReadOnlyNodeWeightForModifyDBEndpointInput {
	s.NodeType = &v
	return s
}

// SetWeight sets the Weight field's value.
func (s *ReadOnlyNodeWeightForModifyDBEndpointInput) SetWeight(v int32) *ReadOnlyNodeWeightForModifyDBEndpointInput {
	s.Weight = &v
	return s
}
