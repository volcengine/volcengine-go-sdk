// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package rdsmysqlv2

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDescribeTasksCommon = "DescribeTasks"

// DescribeTasksCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeTasksCommon operation. The "output" return
// value will be populated with the DescribeTasksCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeTasksCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeTasksCommon Send returns without error.
//
// See DescribeTasksCommon for more information on using the DescribeTasksCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeTasksCommonRequest method.
//    req, resp := client.DescribeTasksCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) DescribeTasksCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeTasksCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeTasksCommon API operation for RDS_MYSQL_V2.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for RDS_MYSQL_V2's
// API operation DescribeTasksCommon for usage and error information.
func (c *RDSMYSQLV2) DescribeTasksCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeTasksCommonRequest(input)
	return out, req.Send()
}

// DescribeTasksCommonWithContext is the same as DescribeTasksCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeTasksCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) DescribeTasksCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeTasksCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeTasks = "DescribeTasks"

// DescribeTasksRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeTasks operation. The "output" return
// value will be populated with the DescribeTasksCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeTasksCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeTasksCommon Send returns without error.
//
// See DescribeTasks for more information on using the DescribeTasks
// API call, and error handling.
//
//    // Example sending a request using the DescribeTasksRequest method.
//    req, resp := client.DescribeTasksRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) DescribeTasksRequest(input *DescribeTasksInput) (req *request.Request, output *DescribeTasksOutput) {
	op := &request.Operation{
		Name:       opDescribeTasks,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeTasksInput{}
	}

	output = &DescribeTasksOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeTasks API operation for RDS_MYSQL_V2.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for RDS_MYSQL_V2's
// API operation DescribeTasks for usage and error information.
func (c *RDSMYSQLV2) DescribeTasks(input *DescribeTasksInput) (*DescribeTasksOutput, error) {
	req, out := c.DescribeTasksRequest(input)
	return out, req.Send()
}

// DescribeTasksWithContext is the same as DescribeTasks with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeTasks for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) DescribeTasksWithContext(ctx volcengine.Context, input *DescribeTasksInput, opts ...request.Option) (*DescribeTasksOutput, error) {
	req, out := c.DescribeTasksRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DataForDescribeTasksOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	CostTimeMS *int64 `type:"int64" json:",omitempty"`

	CreateTime *string `type:"string" json:",omitempty"`

	FinishTime *string `type:"string" json:",omitempty"`

	OriginConfig *string `type:"string" json:",omitempty"`

	Progress *int32 `type:"int32" json:",omitempty"`

	RelatedInstanceInfos *RelatedInstanceInfosForDescribeTasksOutput `type:"structure" json:",omitempty"`

	ScheduledExecuteEndTime *string `type:"string" json:",omitempty"`

	ScheduledExecuteStartTime *string `type:"string" json:",omitempty"`

	ScheduledSwitchEndTime *string `type:"string" json:",omitempty"`

	ScheduledSwitchStartTime *string `type:"string" json:",omitempty"`

	StartTime *string `type:"string" json:",omitempty"`

	TaskAction *string `type:"string" json:",omitempty"`

	TaskCategory *string `type:"string" json:",omitempty"`

	TaskDesc *string `type:"string" json:",omitempty"`

	TaskId *string `type:"string" json:",omitempty"`

	TaskParams *string `type:"string" json:",omitempty"`

	TaskProgress []*TaskProgressForDescribeTasksOutput `type:"list" json:",omitempty"`

	TaskSource *string `type:"string" json:",omitempty"`

	TaskStatus *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s DataForDescribeTasksOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DataForDescribeTasksOutput) GoString() string {
	return s.String()
}

// SetCostTimeMS sets the CostTimeMS field's value.
func (s *DataForDescribeTasksOutput) SetCostTimeMS(v int64) *DataForDescribeTasksOutput {
	s.CostTimeMS = &v
	return s
}

// SetCreateTime sets the CreateTime field's value.
func (s *DataForDescribeTasksOutput) SetCreateTime(v string) *DataForDescribeTasksOutput {
	s.CreateTime = &v
	return s
}

// SetFinishTime sets the FinishTime field's value.
func (s *DataForDescribeTasksOutput) SetFinishTime(v string) *DataForDescribeTasksOutput {
	s.FinishTime = &v
	return s
}

// SetOriginConfig sets the OriginConfig field's value.
func (s *DataForDescribeTasksOutput) SetOriginConfig(v string) *DataForDescribeTasksOutput {
	s.OriginConfig = &v
	return s
}

// SetProgress sets the Progress field's value.
func (s *DataForDescribeTasksOutput) SetProgress(v int32) *DataForDescribeTasksOutput {
	s.Progress = &v
	return s
}

// SetRelatedInstanceInfos sets the RelatedInstanceInfos field's value.
func (s *DataForDescribeTasksOutput) SetRelatedInstanceInfos(v *RelatedInstanceInfosForDescribeTasksOutput) *DataForDescribeTasksOutput {
	s.RelatedInstanceInfos = v
	return s
}

// SetScheduledExecuteEndTime sets the ScheduledExecuteEndTime field's value.
func (s *DataForDescribeTasksOutput) SetScheduledExecuteEndTime(v string) *DataForDescribeTasksOutput {
	s.ScheduledExecuteEndTime = &v
	return s
}

// SetScheduledExecuteStartTime sets the ScheduledExecuteStartTime field's value.
func (s *DataForDescribeTasksOutput) SetScheduledExecuteStartTime(v string) *DataForDescribeTasksOutput {
	s.ScheduledExecuteStartTime = &v
	return s
}

// SetScheduledSwitchEndTime sets the ScheduledSwitchEndTime field's value.
func (s *DataForDescribeTasksOutput) SetScheduledSwitchEndTime(v string) *DataForDescribeTasksOutput {
	s.ScheduledSwitchEndTime = &v
	return s
}

// SetScheduledSwitchStartTime sets the ScheduledSwitchStartTime field's value.
func (s *DataForDescribeTasksOutput) SetScheduledSwitchStartTime(v string) *DataForDescribeTasksOutput {
	s.ScheduledSwitchStartTime = &v
	return s
}

// SetStartTime sets the StartTime field's value.
func (s *DataForDescribeTasksOutput) SetStartTime(v string) *DataForDescribeTasksOutput {
	s.StartTime = &v
	return s
}

// SetTaskAction sets the TaskAction field's value.
func (s *DataForDescribeTasksOutput) SetTaskAction(v string) *DataForDescribeTasksOutput {
	s.TaskAction = &v
	return s
}

// SetTaskCategory sets the TaskCategory field's value.
func (s *DataForDescribeTasksOutput) SetTaskCategory(v string) *DataForDescribeTasksOutput {
	s.TaskCategory = &v
	return s
}

// SetTaskDesc sets the TaskDesc field's value.
func (s *DataForDescribeTasksOutput) SetTaskDesc(v string) *DataForDescribeTasksOutput {
	s.TaskDesc = &v
	return s
}

// SetTaskId sets the TaskId field's value.
func (s *DataForDescribeTasksOutput) SetTaskId(v string) *DataForDescribeTasksOutput {
	s.TaskId = &v
	return s
}

// SetTaskParams sets the TaskParams field's value.
func (s *DataForDescribeTasksOutput) SetTaskParams(v string) *DataForDescribeTasksOutput {
	s.TaskParams = &v
	return s
}

// SetTaskProgress sets the TaskProgress field's value.
func (s *DataForDescribeTasksOutput) SetTaskProgress(v []*TaskProgressForDescribeTasksOutput) *DataForDescribeTasksOutput {
	s.TaskProgress = v
	return s
}

// SetTaskSource sets the TaskSource field's value.
func (s *DataForDescribeTasksOutput) SetTaskSource(v string) *DataForDescribeTasksOutput {
	s.TaskSource = &v
	return s
}

// SetTaskStatus sets the TaskStatus field's value.
func (s *DataForDescribeTasksOutput) SetTaskStatus(v string) *DataForDescribeTasksOutput {
	s.TaskStatus = &v
	return s
}

type DescribeTasksInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	CreationEndTime *string `type:"string" json:",omitempty"`

	CreationStartTime *string `type:"string" json:",omitempty"`

	InstanceId *string `type:"string" json:",omitempty"`

	// PageNumber is a required field
	PageNumber *int32 `type:"int32" json:",omitempty" required:"true"`

	// PageSize is a required field
	PageSize *int32 `type:"int32" json:",omitempty" required:"true"`

	ProjectName *string `type:"string" json:",omitempty"`

	TaskAction *string `type:"string" json:",omitempty"`

	TaskCategory []*string `type:"list" json:",omitempty"`

	TaskId *string `type:"string" json:",omitempty"`

	TaskSource *string `type:"string" json:",omitempty"`

	TaskStatus []*string `type:"list" json:",omitempty"`

	TaskType *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s DescribeTasksInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeTasksInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeTasksInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DescribeTasksInput"}
	if s.PageNumber == nil {
		invalidParams.Add(request.NewErrParamRequired("PageNumber"))
	}
	if s.PageSize == nil {
		invalidParams.Add(request.NewErrParamRequired("PageSize"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetCreationEndTime sets the CreationEndTime field's value.
func (s *DescribeTasksInput) SetCreationEndTime(v string) *DescribeTasksInput {
	s.CreationEndTime = &v
	return s
}

// SetCreationStartTime sets the CreationStartTime field's value.
func (s *DescribeTasksInput) SetCreationStartTime(v string) *DescribeTasksInput {
	s.CreationStartTime = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *DescribeTasksInput) SetInstanceId(v string) *DescribeTasksInput {
	s.InstanceId = &v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *DescribeTasksInput) SetPageNumber(v int32) *DescribeTasksInput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *DescribeTasksInput) SetPageSize(v int32) *DescribeTasksInput {
	s.PageSize = &v
	return s
}

// SetProjectName sets the ProjectName field's value.
func (s *DescribeTasksInput) SetProjectName(v string) *DescribeTasksInput {
	s.ProjectName = &v
	return s
}

// SetTaskAction sets the TaskAction field's value.
func (s *DescribeTasksInput) SetTaskAction(v string) *DescribeTasksInput {
	s.TaskAction = &v
	return s
}

// SetTaskCategory sets the TaskCategory field's value.
func (s *DescribeTasksInput) SetTaskCategory(v []*string) *DescribeTasksInput {
	s.TaskCategory = v
	return s
}

// SetTaskId sets the TaskId field's value.
func (s *DescribeTasksInput) SetTaskId(v string) *DescribeTasksInput {
	s.TaskId = &v
	return s
}

// SetTaskSource sets the TaskSource field's value.
func (s *DescribeTasksInput) SetTaskSource(v string) *DescribeTasksInput {
	s.TaskSource = &v
	return s
}

// SetTaskStatus sets the TaskStatus field's value.
func (s *DescribeTasksInput) SetTaskStatus(v []*string) *DescribeTasksInput {
	s.TaskStatus = v
	return s
}

// SetTaskType sets the TaskType field's value.
func (s *DescribeTasksInput) SetTaskType(v string) *DescribeTasksInput {
	s.TaskType = &v
	return s
}

type DescribeTasksOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Datas []*DataForDescribeTasksOutput `type:"list" json:",omitempty"`

	Total *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s DescribeTasksOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeTasksOutput) GoString() string {
	return s.String()
}

// SetDatas sets the Datas field's value.
func (s *DescribeTasksOutput) SetDatas(v []*DataForDescribeTasksOutput) *DescribeTasksOutput {
	s.Datas = v
	return s
}

// SetTotal sets the Total field's value.
func (s *DescribeTasksOutput) SetTotal(v int32) *DescribeTasksOutput {
	s.Total = &v
	return s
}

type RelatedInstanceInfosForDescribeTasksOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	InstanceID *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s RelatedInstanceInfosForDescribeTasksOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s RelatedInstanceInfosForDescribeTasksOutput) GoString() string {
	return s.String()
}

// SetInstanceID sets the InstanceID field's value.
func (s *RelatedInstanceInfosForDescribeTasksOutput) SetInstanceID(v string) *RelatedInstanceInfosForDescribeTasksOutput {
	s.InstanceID = &v
	return s
}

type StepExtraInfoForDescribeTasksOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Type *string `type:"string" json:",omitempty"`

	Unit *string `type:"string" json:",omitempty"`

	Value *float64 `type:"double" json:",omitempty"`
}

// String returns the string representation
func (s StepExtraInfoForDescribeTasksOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s StepExtraInfoForDescribeTasksOutput) GoString() string {
	return s.String()
}

// SetType sets the Type field's value.
func (s *StepExtraInfoForDescribeTasksOutput) SetType(v string) *StepExtraInfoForDescribeTasksOutput {
	s.Type = &v
	return s
}

// SetUnit sets the Unit field's value.
func (s *StepExtraInfoForDescribeTasksOutput) SetUnit(v string) *StepExtraInfoForDescribeTasksOutput {
	s.Unit = &v
	return s
}

// SetValue sets the Value field's value.
func (s *StepExtraInfoForDescribeTasksOutput) SetValue(v float64) *StepExtraInfoForDescribeTasksOutput {
	s.Value = &v
	return s
}

type TaskProgressForDescribeTasksOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Name *string `type:"string" json:",omitempty"`

	StepExtraInfo []*StepExtraInfoForDescribeTasksOutput `type:"list" json:",omitempty"`

	StepStatus *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s TaskProgressForDescribeTasksOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s TaskProgressForDescribeTasksOutput) GoString() string {
	return s.String()
}

// SetName sets the Name field's value.
func (s *TaskProgressForDescribeTasksOutput) SetName(v string) *TaskProgressForDescribeTasksOutput {
	s.Name = &v
	return s
}

// SetStepExtraInfo sets the StepExtraInfo field's value.
func (s *TaskProgressForDescribeTasksOutput) SetStepExtraInfo(v []*StepExtraInfoForDescribeTasksOutput) *TaskProgressForDescribeTasksOutput {
	s.StepExtraInfo = v
	return s
}

// SetStepStatus sets the StepStatus field's value.
func (s *TaskProgressForDescribeTasksOutput) SetStepStatus(v string) *TaskProgressForDescribeTasksOutput {
	s.StepStatus = &v
	return s
}
