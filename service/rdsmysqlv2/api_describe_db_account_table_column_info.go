// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package rdsmysqlv2

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDescribeDbAccountTableColumnInfoCommon = "DescribeDbAccountTableColumnInfo"

// DescribeDbAccountTableColumnInfoCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeDbAccountTableColumnInfoCommon operation. The "output" return
// value will be populated with the DescribeDbAccountTableColumnInfoCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeDbAccountTableColumnInfoCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeDbAccountTableColumnInfoCommon Send returns without error.
//
// See DescribeDbAccountTableColumnInfoCommon for more information on using the DescribeDbAccountTableColumnInfoCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeDbAccountTableColumnInfoCommonRequest method.
//    req, resp := client.DescribeDbAccountTableColumnInfoCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) DescribeDbAccountTableColumnInfoCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeDbAccountTableColumnInfoCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeDbAccountTableColumnInfoCommon API operation for RDS_MYSQL_V2.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for RDS_MYSQL_V2's
// API operation DescribeDbAccountTableColumnInfoCommon for usage and error information.
func (c *RDSMYSQLV2) DescribeDbAccountTableColumnInfoCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeDbAccountTableColumnInfoCommonRequest(input)
	return out, req.Send()
}

// DescribeDbAccountTableColumnInfoCommonWithContext is the same as DescribeDbAccountTableColumnInfoCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeDbAccountTableColumnInfoCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) DescribeDbAccountTableColumnInfoCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeDbAccountTableColumnInfoCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeDbAccountTableColumnInfo = "DescribeDbAccountTableColumnInfo"

// DescribeDbAccountTableColumnInfoRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeDbAccountTableColumnInfo operation. The "output" return
// value will be populated with the DescribeDbAccountTableColumnInfoCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeDbAccountTableColumnInfoCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeDbAccountTableColumnInfoCommon Send returns without error.
//
// See DescribeDbAccountTableColumnInfo for more information on using the DescribeDbAccountTableColumnInfo
// API call, and error handling.
//
//    // Example sending a request using the DescribeDbAccountTableColumnInfoRequest method.
//    req, resp := client.DescribeDbAccountTableColumnInfoRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) DescribeDbAccountTableColumnInfoRequest(input *DescribeDbAccountTableColumnInfoInput) (req *request.Request, output *DescribeDbAccountTableColumnInfoOutput) {
	op := &request.Operation{
		Name:       opDescribeDbAccountTableColumnInfo,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeDbAccountTableColumnInfoInput{}
	}

	output = &DescribeDbAccountTableColumnInfoOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeDbAccountTableColumnInfo API operation for RDS_MYSQL_V2.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for RDS_MYSQL_V2's
// API operation DescribeDbAccountTableColumnInfo for usage and error information.
func (c *RDSMYSQLV2) DescribeDbAccountTableColumnInfo(input *DescribeDbAccountTableColumnInfoInput) (*DescribeDbAccountTableColumnInfoOutput, error) {
	req, out := c.DescribeDbAccountTableColumnInfoRequest(input)
	return out, req.Send()
}

// DescribeDbAccountTableColumnInfoWithContext is the same as DescribeDbAccountTableColumnInfo with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeDbAccountTableColumnInfo for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) DescribeDbAccountTableColumnInfoWithContext(ctx volcengine.Context, input *DescribeDbAccountTableColumnInfoInput, opts ...request.Option) (*DescribeDbAccountTableColumnInfoOutput, error) {
	req, out := c.DescribeDbAccountTableColumnInfoRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ColumnInfoForDescribeDbAccountTableColumnInfoOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	AccountPrivileges []*string `type:"list" json:",omitempty"`

	ColumnName *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ColumnInfoForDescribeDbAccountTableColumnInfoOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ColumnInfoForDescribeDbAccountTableColumnInfoOutput) GoString() string {
	return s.String()
}

// SetAccountPrivileges sets the AccountPrivileges field's value.
func (s *ColumnInfoForDescribeDbAccountTableColumnInfoOutput) SetAccountPrivileges(v []*string) *ColumnInfoForDescribeDbAccountTableColumnInfoOutput {
	s.AccountPrivileges = v
	return s
}

// SetColumnName sets the ColumnName field's value.
func (s *ColumnInfoForDescribeDbAccountTableColumnInfoOutput) SetColumnName(v string) *ColumnInfoForDescribeDbAccountTableColumnInfoOutput {
	s.ColumnName = &v
	return s
}

type DescribeDbAccountTableColumnInfoInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	AccountName *string `type:"string" json:",omitempty"`

	ColumnName *string `type:"string" json:",omitempty"`

	// DBName is a required field
	DBName *string `type:"string" json:",omitempty" required:"true"`

	Host *string `type:"string" json:",omitempty"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:",omitempty" required:"true"`

	TableLimit *int32 `type:"int32" json:",omitempty"`

	TableName *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s DescribeDbAccountTableColumnInfoInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeDbAccountTableColumnInfoInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeDbAccountTableColumnInfoInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DescribeDbAccountTableColumnInfoInput"}
	if s.DBName == nil {
		invalidParams.Add(request.NewErrParamRequired("DBName"))
	}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAccountName sets the AccountName field's value.
func (s *DescribeDbAccountTableColumnInfoInput) SetAccountName(v string) *DescribeDbAccountTableColumnInfoInput {
	s.AccountName = &v
	return s
}

// SetColumnName sets the ColumnName field's value.
func (s *DescribeDbAccountTableColumnInfoInput) SetColumnName(v string) *DescribeDbAccountTableColumnInfoInput {
	s.ColumnName = &v
	return s
}

// SetDBName sets the DBName field's value.
func (s *DescribeDbAccountTableColumnInfoInput) SetDBName(v string) *DescribeDbAccountTableColumnInfoInput {
	s.DBName = &v
	return s
}

// SetHost sets the Host field's value.
func (s *DescribeDbAccountTableColumnInfoInput) SetHost(v string) *DescribeDbAccountTableColumnInfoInput {
	s.Host = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *DescribeDbAccountTableColumnInfoInput) SetInstanceId(v string) *DescribeDbAccountTableColumnInfoInput {
	s.InstanceId = &v
	return s
}

// SetTableLimit sets the TableLimit field's value.
func (s *DescribeDbAccountTableColumnInfoInput) SetTableLimit(v int32) *DescribeDbAccountTableColumnInfoInput {
	s.TableLimit = &v
	return s
}

// SetTableName sets the TableName field's value.
func (s *DescribeDbAccountTableColumnInfoInput) SetTableName(v string) *DescribeDbAccountTableColumnInfoInput {
	s.TableName = &v
	return s
}

type DescribeDbAccountTableColumnInfoOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	TableInfos []*TableInfoForDescribeDbAccountTableColumnInfoOutput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s DescribeDbAccountTableColumnInfoOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeDbAccountTableColumnInfoOutput) GoString() string {
	return s.String()
}

// SetTableInfos sets the TableInfos field's value.
func (s *DescribeDbAccountTableColumnInfoOutput) SetTableInfos(v []*TableInfoForDescribeDbAccountTableColumnInfoOutput) *DescribeDbAccountTableColumnInfoOutput {
	s.TableInfos = v
	return s
}

type TableInfoForDescribeDbAccountTableColumnInfoOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	AccountPrivileges []*string `type:"list" json:",omitempty"`

	ColumnInfos []*ColumnInfoForDescribeDbAccountTableColumnInfoOutput `type:"list" json:",omitempty"`

	TableName *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s TableInfoForDescribeDbAccountTableColumnInfoOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s TableInfoForDescribeDbAccountTableColumnInfoOutput) GoString() string {
	return s.String()
}

// SetAccountPrivileges sets the AccountPrivileges field's value.
func (s *TableInfoForDescribeDbAccountTableColumnInfoOutput) SetAccountPrivileges(v []*string) *TableInfoForDescribeDbAccountTableColumnInfoOutput {
	s.AccountPrivileges = v
	return s
}

// SetColumnInfos sets the ColumnInfos field's value.
func (s *TableInfoForDescribeDbAccountTableColumnInfoOutput) SetColumnInfos(v []*ColumnInfoForDescribeDbAccountTableColumnInfoOutput) *TableInfoForDescribeDbAccountTableColumnInfoOutput {
	s.ColumnInfos = v
	return s
}

// SetTableName sets the TableName field's value.
func (s *TableInfoForDescribeDbAccountTableColumnInfoOutput) SetTableName(v string) *TableInfoForDescribeDbAccountTableColumnInfoOutput {
	s.TableName = &v
	return s
}
