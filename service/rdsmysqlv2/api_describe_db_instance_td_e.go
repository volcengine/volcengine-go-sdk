// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package rdsmysqlv2

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDescribeDBInstanceTDECommon = "DescribeDBInstanceTDE"

// DescribeDBInstanceTDECommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeDBInstanceTDECommon operation. The "output" return
// value will be populated with the DescribeDBInstanceTDECommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeDBInstanceTDECommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeDBInstanceTDECommon Send returns without error.
//
// See DescribeDBInstanceTDECommon for more information on using the DescribeDBInstanceTDECommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeDBInstanceTDECommonRequest method.
//    req, resp := client.DescribeDBInstanceTDECommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) DescribeDBInstanceTDECommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeDBInstanceTDECommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeDBInstanceTDECommon API operation for RDS_MYSQL_V2.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for RDS_MYSQL_V2's
// API operation DescribeDBInstanceTDECommon for usage and error information.
func (c *RDSMYSQLV2) DescribeDBInstanceTDECommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeDBInstanceTDECommonRequest(input)
	return out, req.Send()
}

// DescribeDBInstanceTDECommonWithContext is the same as DescribeDBInstanceTDECommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeDBInstanceTDECommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) DescribeDBInstanceTDECommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeDBInstanceTDECommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeDBInstanceTDE = "DescribeDBInstanceTDE"

// DescribeDBInstanceTDERequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeDBInstanceTDE operation. The "output" return
// value will be populated with the DescribeDBInstanceTDECommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeDBInstanceTDECommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeDBInstanceTDECommon Send returns without error.
//
// See DescribeDBInstanceTDE for more information on using the DescribeDBInstanceTDE
// API call, and error handling.
//
//    // Example sending a request using the DescribeDBInstanceTDERequest method.
//    req, resp := client.DescribeDBInstanceTDERequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) DescribeDBInstanceTDERequest(input *DescribeDBInstanceTDEInput) (req *request.Request, output *DescribeDBInstanceTDEOutput) {
	op := &request.Operation{
		Name:       opDescribeDBInstanceTDE,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeDBInstanceTDEInput{}
	}

	output = &DescribeDBInstanceTDEOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeDBInstanceTDE API operation for RDS_MYSQL_V2.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for RDS_MYSQL_V2's
// API operation DescribeDBInstanceTDE for usage and error information.
func (c *RDSMYSQLV2) DescribeDBInstanceTDE(input *DescribeDBInstanceTDEInput) (*DescribeDBInstanceTDEOutput, error) {
	req, out := c.DescribeDBInstanceTDERequest(input)
	return out, req.Send()
}

// DescribeDBInstanceTDEWithContext is the same as DescribeDBInstanceTDE with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeDBInstanceTDE for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) DescribeDBInstanceTDEWithContext(ctx volcengine.Context, input *DescribeDBInstanceTDEInput, opts ...request.Option) (*DescribeDBInstanceTDEOutput, error) {
	req, out := c.DescribeDBInstanceTDERequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DescribeDBInstanceTDEInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s DescribeDBInstanceTDEInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeDBInstanceTDEInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeDBInstanceTDEInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DescribeDBInstanceTDEInput"}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetInstanceId sets the InstanceId field's value.
func (s *DescribeDBInstanceTDEInput) SetInstanceId(v string) *DescribeDBInstanceTDEInput {
	s.InstanceId = &v
	return s
}

type DescribeDBInstanceTDEOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	TDEStatus *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s DescribeDBInstanceTDEOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeDBInstanceTDEOutput) GoString() string {
	return s.String()
}

// SetTDEStatus sets the TDEStatus field's value.
func (s *DescribeDBInstanceTDEOutput) SetTDEStatus(v string) *DescribeDBInstanceTDEOutput {
	s.TDEStatus = &v
	return s
}
