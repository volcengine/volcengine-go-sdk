// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package rdsmysqlv2

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opModifyDBInstanceSSLCommon = "ModifyDBInstanceSSL"

// ModifyDBInstanceSSLCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ModifyDBInstanceSSLCommon operation. The "output" return
// value will be populated with the ModifyDBInstanceSSLCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyDBInstanceSSLCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyDBInstanceSSLCommon Send returns without error.
//
// See ModifyDBInstanceSSLCommon for more information on using the ModifyDBInstanceSSLCommon
// API call, and error handling.
//
//    // Example sending a request using the ModifyDBInstanceSSLCommonRequest method.
//    req, resp := client.ModifyDBInstanceSSLCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) ModifyDBInstanceSSLCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opModifyDBInstanceSSLCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ModifyDBInstanceSSLCommon API operation for RDS_MYSQL_V2.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for RDS_MYSQL_V2's
// API operation ModifyDBInstanceSSLCommon for usage and error information.
func (c *RDSMYSQLV2) ModifyDBInstanceSSLCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ModifyDBInstanceSSLCommonRequest(input)
	return out, req.Send()
}

// ModifyDBInstanceSSLCommonWithContext is the same as ModifyDBInstanceSSLCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyDBInstanceSSLCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) ModifyDBInstanceSSLCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ModifyDBInstanceSSLCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyDBInstanceSSL = "ModifyDBInstanceSSL"

// ModifyDBInstanceSSLRequest generates a "volcengine/request.Request" representing the
// client's request for the ModifyDBInstanceSSL operation. The "output" return
// value will be populated with the ModifyDBInstanceSSLCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyDBInstanceSSLCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyDBInstanceSSLCommon Send returns without error.
//
// See ModifyDBInstanceSSL for more information on using the ModifyDBInstanceSSL
// API call, and error handling.
//
//    // Example sending a request using the ModifyDBInstanceSSLRequest method.
//    req, resp := client.ModifyDBInstanceSSLRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) ModifyDBInstanceSSLRequest(input *ModifyDBInstanceSSLInput) (req *request.Request, output *ModifyDBInstanceSSLOutput) {
	op := &request.Operation{
		Name:       opModifyDBInstanceSSL,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ModifyDBInstanceSSLInput{}
	}

	output = &ModifyDBInstanceSSLOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ModifyDBInstanceSSL API operation for RDS_MYSQL_V2.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for RDS_MYSQL_V2's
// API operation ModifyDBInstanceSSL for usage and error information.
func (c *RDSMYSQLV2) ModifyDBInstanceSSL(input *ModifyDBInstanceSSLInput) (*ModifyDBInstanceSSLOutput, error) {
	req, out := c.ModifyDBInstanceSSLRequest(input)
	return out, req.Send()
}

// ModifyDBInstanceSSLWithContext is the same as ModifyDBInstanceSSL with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyDBInstanceSSL for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) ModifyDBInstanceSSLWithContext(ctx volcengine.Context, input *ModifyDBInstanceSSLInput, opts ...request.Option) (*ModifyDBInstanceSSLOutput, error) {
	req, out := c.ModifyDBInstanceSSLRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ModifyDBInstanceSSLInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:",omitempty" required:"true"`

	ReloadSSLCertificate *bool `type:"boolean" json:",omitempty"`

	SSLEnable *bool `type:"boolean" json:",omitempty"`

	SpecifiedSwitchEndTime *string `type:"string" json:",omitempty"`

	SpecifiedSwitchStartTime *string `type:"string" json:",omitempty"`

	SwitchType *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ModifyDBInstanceSSLInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyDBInstanceSSLInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ModifyDBInstanceSSLInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ModifyDBInstanceSSLInput"}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetInstanceId sets the InstanceId field's value.
func (s *ModifyDBInstanceSSLInput) SetInstanceId(v string) *ModifyDBInstanceSSLInput {
	s.InstanceId = &v
	return s
}

// SetReloadSSLCertificate sets the ReloadSSLCertificate field's value.
func (s *ModifyDBInstanceSSLInput) SetReloadSSLCertificate(v bool) *ModifyDBInstanceSSLInput {
	s.ReloadSSLCertificate = &v
	return s
}

// SetSSLEnable sets the SSLEnable field's value.
func (s *ModifyDBInstanceSSLInput) SetSSLEnable(v bool) *ModifyDBInstanceSSLInput {
	s.SSLEnable = &v
	return s
}

// SetSpecifiedSwitchEndTime sets the SpecifiedSwitchEndTime field's value.
func (s *ModifyDBInstanceSSLInput) SetSpecifiedSwitchEndTime(v string) *ModifyDBInstanceSSLInput {
	s.SpecifiedSwitchEndTime = &v
	return s
}

// SetSpecifiedSwitchStartTime sets the SpecifiedSwitchStartTime field's value.
func (s *ModifyDBInstanceSSLInput) SetSpecifiedSwitchStartTime(v string) *ModifyDBInstanceSSLInput {
	s.SpecifiedSwitchStartTime = &v
	return s
}

// SetSwitchType sets the SwitchType field's value.
func (s *ModifyDBInstanceSSLInput) SetSwitchType(v string) *ModifyDBInstanceSSLInput {
	s.SwitchType = &v
	return s
}

type ModifyDBInstanceSSLOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s ModifyDBInstanceSSLOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyDBInstanceSSLOutput) GoString() string {
	return s.String()
}
