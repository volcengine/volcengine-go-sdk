// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package rdsmysqlv2

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDescribeDBInstanceNodesCommon = "DescribeDBInstanceNodes"

// DescribeDBInstanceNodesCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeDBInstanceNodesCommon operation. The "output" return
// value will be populated with the DescribeDBInstanceNodesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeDBInstanceNodesCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeDBInstanceNodesCommon Send returns without error.
//
// See DescribeDBInstanceNodesCommon for more information on using the DescribeDBInstanceNodesCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeDBInstanceNodesCommonRequest method.
//    req, resp := client.DescribeDBInstanceNodesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) DescribeDBInstanceNodesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeDBInstanceNodesCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeDBInstanceNodesCommon API operation for RDS_MYSQL_V2.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for RDS_MYSQL_V2's
// API operation DescribeDBInstanceNodesCommon for usage and error information.
func (c *RDSMYSQLV2) DescribeDBInstanceNodesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeDBInstanceNodesCommonRequest(input)
	return out, req.Send()
}

// DescribeDBInstanceNodesCommonWithContext is the same as DescribeDBInstanceNodesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeDBInstanceNodesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) DescribeDBInstanceNodesCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeDBInstanceNodesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeDBInstanceNodes = "DescribeDBInstanceNodes"

// DescribeDBInstanceNodesRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeDBInstanceNodes operation. The "output" return
// value will be populated with the DescribeDBInstanceNodesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeDBInstanceNodesCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeDBInstanceNodesCommon Send returns without error.
//
// See DescribeDBInstanceNodes for more information on using the DescribeDBInstanceNodes
// API call, and error handling.
//
//    // Example sending a request using the DescribeDBInstanceNodesRequest method.
//    req, resp := client.DescribeDBInstanceNodesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) DescribeDBInstanceNodesRequest(input *DescribeDBInstanceNodesInput) (req *request.Request, output *DescribeDBInstanceNodesOutput) {
	op := &request.Operation{
		Name:       opDescribeDBInstanceNodes,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeDBInstanceNodesInput{}
	}

	output = &DescribeDBInstanceNodesOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeDBInstanceNodes API operation for RDS_MYSQL_V2.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for RDS_MYSQL_V2's
// API operation DescribeDBInstanceNodes for usage and error information.
func (c *RDSMYSQLV2) DescribeDBInstanceNodes(input *DescribeDBInstanceNodesInput) (*DescribeDBInstanceNodesOutput, error) {
	req, out := c.DescribeDBInstanceNodesRequest(input)
	return out, req.Send()
}

// DescribeDBInstanceNodesWithContext is the same as DescribeDBInstanceNodes with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeDBInstanceNodes for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) DescribeDBInstanceNodesWithContext(ctx volcengine.Context, input *DescribeDBInstanceNodesInput, opts ...request.Option) (*DescribeDBInstanceNodesOutput, error) {
	req, out := c.DescribeDBInstanceNodesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DescribeDBInstanceNodesInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s DescribeDBInstanceNodesInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeDBInstanceNodesInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeDBInstanceNodesInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DescribeDBInstanceNodesInput"}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetInstanceId sets the InstanceId field's value.
func (s *DescribeDBInstanceNodesInput) SetInstanceId(v string) *DescribeDBInstanceNodesInput {
	s.InstanceId = &v
	return s
}

type DescribeDBInstanceNodesOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	NodeInfos []*NodeInfoForDescribeDBInstanceNodesOutput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s DescribeDBInstanceNodesOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeDBInstanceNodesOutput) GoString() string {
	return s.String()
}

// SetNodeInfos sets the NodeInfos field's value.
func (s *DescribeDBInstanceNodesOutput) SetNodeInfos(v []*NodeInfoForDescribeDBInstanceNodesOutput) *DescribeDBInstanceNodesOutput {
	s.NodeInfos = v
	return s
}

type NodeInfoForDescribeDBInstanceNodesOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	CPUUsedPercentage *float64 `type:"double" json:",omitempty"`

	LastIOError *string `type:"string" json:",omitempty"`

	LastSQLError *string `type:"string" json:",omitempty"`

	MemoryUsedPercentage *float64 `type:"double" json:",omitempty"`

	NodeId *string `type:"string" json:",omitempty"`

	NodeStatus *string `type:"string" json:",omitempty"`

	NodeType *string `type:"string" json:",omitempty"`

	SlaveIORunning *bool `type:"boolean" json:",omitempty"`

	SlaveSQLRunning *bool `type:"boolean" json:",omitempty"`

	SpaceUsedPercentage *float64 `type:"double" json:",omitempty"`

	SyncDelay *int32 `type:"int32" json:",omitempty"`

	ZoneId *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s NodeInfoForDescribeDBInstanceNodesOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s NodeInfoForDescribeDBInstanceNodesOutput) GoString() string {
	return s.String()
}

// SetCPUUsedPercentage sets the CPUUsedPercentage field's value.
func (s *NodeInfoForDescribeDBInstanceNodesOutput) SetCPUUsedPercentage(v float64) *NodeInfoForDescribeDBInstanceNodesOutput {
	s.CPUUsedPercentage = &v
	return s
}

// SetLastIOError sets the LastIOError field's value.
func (s *NodeInfoForDescribeDBInstanceNodesOutput) SetLastIOError(v string) *NodeInfoForDescribeDBInstanceNodesOutput {
	s.LastIOError = &v
	return s
}

// SetLastSQLError sets the LastSQLError field's value.
func (s *NodeInfoForDescribeDBInstanceNodesOutput) SetLastSQLError(v string) *NodeInfoForDescribeDBInstanceNodesOutput {
	s.LastSQLError = &v
	return s
}

// SetMemoryUsedPercentage sets the MemoryUsedPercentage field's value.
func (s *NodeInfoForDescribeDBInstanceNodesOutput) SetMemoryUsedPercentage(v float64) *NodeInfoForDescribeDBInstanceNodesOutput {
	s.MemoryUsedPercentage = &v
	return s
}

// SetNodeId sets the NodeId field's value.
func (s *NodeInfoForDescribeDBInstanceNodesOutput) SetNodeId(v string) *NodeInfoForDescribeDBInstanceNodesOutput {
	s.NodeId = &v
	return s
}

// SetNodeStatus sets the NodeStatus field's value.
func (s *NodeInfoForDescribeDBInstanceNodesOutput) SetNodeStatus(v string) *NodeInfoForDescribeDBInstanceNodesOutput {
	s.NodeStatus = &v
	return s
}

// SetNodeType sets the NodeType field's value.
func (s *NodeInfoForDescribeDBInstanceNodesOutput) SetNodeType(v string) *NodeInfoForDescribeDBInstanceNodesOutput {
	s.NodeType = &v
	return s
}

// SetSlaveIORunning sets the SlaveIORunning field's value.
func (s *NodeInfoForDescribeDBInstanceNodesOutput) SetSlaveIORunning(v bool) *NodeInfoForDescribeDBInstanceNodesOutput {
	s.SlaveIORunning = &v
	return s
}

// SetSlaveSQLRunning sets the SlaveSQLRunning field's value.
func (s *NodeInfoForDescribeDBInstanceNodesOutput) SetSlaveSQLRunning(v bool) *NodeInfoForDescribeDBInstanceNodesOutput {
	s.SlaveSQLRunning = &v
	return s
}

// SetSpaceUsedPercentage sets the SpaceUsedPercentage field's value.
func (s *NodeInfoForDescribeDBInstanceNodesOutput) SetSpaceUsedPercentage(v float64) *NodeInfoForDescribeDBInstanceNodesOutput {
	s.SpaceUsedPercentage = &v
	return s
}

// SetSyncDelay sets the SyncDelay field's value.
func (s *NodeInfoForDescribeDBInstanceNodesOutput) SetSyncDelay(v int32) *NodeInfoForDescribeDBInstanceNodesOutput {
	s.SyncDelay = &v
	return s
}

// SetZoneId sets the ZoneId field's value.
func (s *NodeInfoForDescribeDBInstanceNodesOutput) SetZoneId(v string) *NodeInfoForDescribeDBInstanceNodesOutput {
	s.ZoneId = &v
	return s
}
