// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package secagent

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opUpsertAlarmFeedbackWithRagCommon = "UpsertAlarmFeedbackWithRag"

// UpsertAlarmFeedbackWithRagCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the UpsertAlarmFeedbackWithRagCommon operation. The "output" return
// value will be populated with the UpsertAlarmFeedbackWithRagCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpsertAlarmFeedbackWithRagCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpsertAlarmFeedbackWithRagCommon Send returns without error.
//
// See UpsertAlarmFeedbackWithRagCommon for more information on using the UpsertAlarmFeedbackWithRagCommon
// API call, and error handling.
//
//    // Example sending a request using the UpsertAlarmFeedbackWithRagCommonRequest method.
//    req, resp := client.UpsertAlarmFeedbackWithRagCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECAGENT) UpsertAlarmFeedbackWithRagCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opUpsertAlarmFeedbackWithRagCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpsertAlarmFeedbackWithRagCommon API operation for SEC_AGENT.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SEC_AGENT's
// API operation UpsertAlarmFeedbackWithRagCommon for usage and error information.
func (c *SECAGENT) UpsertAlarmFeedbackWithRagCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.UpsertAlarmFeedbackWithRagCommonRequest(input)
	return out, req.Send()
}

// UpsertAlarmFeedbackWithRagCommonWithContext is the same as UpsertAlarmFeedbackWithRagCommon with the addition of
// the ability to pass a context and additional request options.
//
// See UpsertAlarmFeedbackWithRagCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECAGENT) UpsertAlarmFeedbackWithRagCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.UpsertAlarmFeedbackWithRagCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opUpsertAlarmFeedbackWithRag = "UpsertAlarmFeedbackWithRag"

// UpsertAlarmFeedbackWithRagRequest generates a "volcengine/request.Request" representing the
// client's request for the UpsertAlarmFeedbackWithRag operation. The "output" return
// value will be populated with the UpsertAlarmFeedbackWithRagCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpsertAlarmFeedbackWithRagCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpsertAlarmFeedbackWithRagCommon Send returns without error.
//
// See UpsertAlarmFeedbackWithRag for more information on using the UpsertAlarmFeedbackWithRag
// API call, and error handling.
//
//    // Example sending a request using the UpsertAlarmFeedbackWithRagRequest method.
//    req, resp := client.UpsertAlarmFeedbackWithRagRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECAGENT) UpsertAlarmFeedbackWithRagRequest(input *UpsertAlarmFeedbackWithRagInput) (req *request.Request, output *UpsertAlarmFeedbackWithRagOutput) {
	op := &request.Operation{
		Name:       opUpsertAlarmFeedbackWithRag,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UpsertAlarmFeedbackWithRagInput{}
	}

	output = &UpsertAlarmFeedbackWithRagOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpsertAlarmFeedbackWithRag API operation for SEC_AGENT.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SEC_AGENT's
// API operation UpsertAlarmFeedbackWithRag for usage and error information.
func (c *SECAGENT) UpsertAlarmFeedbackWithRag(input *UpsertAlarmFeedbackWithRagInput) (*UpsertAlarmFeedbackWithRagOutput, error) {
	req, out := c.UpsertAlarmFeedbackWithRagRequest(input)
	return out, req.Send()
}

// UpsertAlarmFeedbackWithRagWithContext is the same as UpsertAlarmFeedbackWithRag with the addition of
// the ability to pass a context and additional request options.
//
// See UpsertAlarmFeedbackWithRag for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECAGENT) UpsertAlarmFeedbackWithRagWithContext(ctx volcengine.Context, input *UpsertAlarmFeedbackWithRagInput, opts ...request.Option) (*UpsertAlarmFeedbackWithRagOutput, error) {
	req, out := c.UpsertAlarmFeedbackWithRagRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type UpsertAlarmFeedbackWithRagInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// AlarmID is a required field
	AlarmID *string `type:"string" json:",omitempty" required:"true"`

	// AnalysisRecordUUID is a required field
	AnalysisRecordUUID *string `type:"string" json:",omitempty" required:"true"`

	// FeedbackComplement is a required field
	FeedbackComplement *string `type:"string" json:",omitempty" required:"true"`

	// FeedbackIOCFeature is a required field
	FeedbackIOCFeature *string `type:"string" json:",omitempty" required:"true"`

	// FeedbackResult is a required field
	FeedbackResult *string `type:"string" json:",omitempty" required:"true"`

	FeedbackTag []*string `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s UpsertAlarmFeedbackWithRagInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpsertAlarmFeedbackWithRagInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UpsertAlarmFeedbackWithRagInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "UpsertAlarmFeedbackWithRagInput"}
	if s.AlarmID == nil {
		invalidParams.Add(request.NewErrParamRequired("AlarmID"))
	}
	if s.AnalysisRecordUUID == nil {
		invalidParams.Add(request.NewErrParamRequired("AnalysisRecordUUID"))
	}
	if s.FeedbackComplement == nil {
		invalidParams.Add(request.NewErrParamRequired("FeedbackComplement"))
	}
	if s.FeedbackIOCFeature == nil {
		invalidParams.Add(request.NewErrParamRequired("FeedbackIOCFeature"))
	}
	if s.FeedbackResult == nil {
		invalidParams.Add(request.NewErrParamRequired("FeedbackResult"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAlarmID sets the AlarmID field's value.
func (s *UpsertAlarmFeedbackWithRagInput) SetAlarmID(v string) *UpsertAlarmFeedbackWithRagInput {
	s.AlarmID = &v
	return s
}

// SetAnalysisRecordUUID sets the AnalysisRecordUUID field's value.
func (s *UpsertAlarmFeedbackWithRagInput) SetAnalysisRecordUUID(v string) *UpsertAlarmFeedbackWithRagInput {
	s.AnalysisRecordUUID = &v
	return s
}

// SetFeedbackComplement sets the FeedbackComplement field's value.
func (s *UpsertAlarmFeedbackWithRagInput) SetFeedbackComplement(v string) *UpsertAlarmFeedbackWithRagInput {
	s.FeedbackComplement = &v
	return s
}

// SetFeedbackIOCFeature sets the FeedbackIOCFeature field's value.
func (s *UpsertAlarmFeedbackWithRagInput) SetFeedbackIOCFeature(v string) *UpsertAlarmFeedbackWithRagInput {
	s.FeedbackIOCFeature = &v
	return s
}

// SetFeedbackResult sets the FeedbackResult field's value.
func (s *UpsertAlarmFeedbackWithRagInput) SetFeedbackResult(v string) *UpsertAlarmFeedbackWithRagInput {
	s.FeedbackResult = &v
	return s
}

// SetFeedbackTag sets the FeedbackTag field's value.
func (s *UpsertAlarmFeedbackWithRagInput) SetFeedbackTag(v []*string) *UpsertAlarmFeedbackWithRagInput {
	s.FeedbackTag = v
	return s
}

type UpsertAlarmFeedbackWithRagOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s UpsertAlarmFeedbackWithRagOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpsertAlarmFeedbackWithRagOutput) GoString() string {
	return s.String()
}
