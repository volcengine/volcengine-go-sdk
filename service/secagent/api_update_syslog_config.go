// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package secagent

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opUpdateSyslogConfigCommon = "UpdateSyslogConfig"

// UpdateSyslogConfigCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateSyslogConfigCommon operation. The "output" return
// value will be populated with the UpdateSyslogConfigCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateSyslogConfigCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateSyslogConfigCommon Send returns without error.
//
// See UpdateSyslogConfigCommon for more information on using the UpdateSyslogConfigCommon
// API call, and error handling.
//
//    // Example sending a request using the UpdateSyslogConfigCommonRequest method.
//    req, resp := client.UpdateSyslogConfigCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECAGENT) UpdateSyslogConfigCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opUpdateSyslogConfigCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateSyslogConfigCommon API operation for SEC_AGENT.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SEC_AGENT's
// API operation UpdateSyslogConfigCommon for usage and error information.
func (c *SECAGENT) UpdateSyslogConfigCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.UpdateSyslogConfigCommonRequest(input)
	return out, req.Send()
}

// UpdateSyslogConfigCommonWithContext is the same as UpdateSyslogConfigCommon with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateSyslogConfigCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECAGENT) UpdateSyslogConfigCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.UpdateSyslogConfigCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opUpdateSyslogConfig = "UpdateSyslogConfig"

// UpdateSyslogConfigRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateSyslogConfig operation. The "output" return
// value will be populated with the UpdateSyslogConfigCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateSyslogConfigCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateSyslogConfigCommon Send returns without error.
//
// See UpdateSyslogConfig for more information on using the UpdateSyslogConfig
// API call, and error handling.
//
//    // Example sending a request using the UpdateSyslogConfigRequest method.
//    req, resp := client.UpdateSyslogConfigRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECAGENT) UpdateSyslogConfigRequest(input *UpdateSyslogConfigInput) (req *request.Request, output *UpdateSyslogConfigOutput) {
	op := &request.Operation{
		Name:       opUpdateSyslogConfig,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UpdateSyslogConfigInput{}
	}

	output = &UpdateSyslogConfigOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateSyslogConfig API operation for SEC_AGENT.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SEC_AGENT's
// API operation UpdateSyslogConfig for usage and error information.
func (c *SECAGENT) UpdateSyslogConfig(input *UpdateSyslogConfigInput) (*UpdateSyslogConfigOutput, error) {
	req, out := c.UpdateSyslogConfigRequest(input)
	return out, req.Send()
}

// UpdateSyslogConfigWithContext is the same as UpdateSyslogConfig with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateSyslogConfig for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECAGENT) UpdateSyslogConfigWithContext(ctx volcengine.Context, input *UpdateSyslogConfigInput, opts ...request.Option) (*UpdateSyslogConfigOutput, error) {
	req, out := c.UpdateSyslogConfigRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ConfigDataForUpdateSyslogConfigInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	APIKey *string `type:"string" json:",omitempty"`

	ApplicationUIDs []*string `type:"list" json:",omitempty"`

	DataSourceName *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ConfigDataForUpdateSyslogConfigInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ConfigDataForUpdateSyslogConfigInput) GoString() string {
	return s.String()
}

// SetAPIKey sets the APIKey field's value.
func (s *ConfigDataForUpdateSyslogConfigInput) SetAPIKey(v string) *ConfigDataForUpdateSyslogConfigInput {
	s.APIKey = &v
	return s
}

// SetApplicationUIDs sets the ApplicationUIDs field's value.
func (s *ConfigDataForUpdateSyslogConfigInput) SetApplicationUIDs(v []*string) *ConfigDataForUpdateSyslogConfigInput {
	s.ApplicationUIDs = v
	return s
}

// SetDataSourceName sets the DataSourceName field's value.
func (s *ConfigDataForUpdateSyslogConfigInput) SetDataSourceName(v string) *ConfigDataForUpdateSyslogConfigInput {
	s.DataSourceName = &v
	return s
}

type UpdateSyslogConfigInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	ConfigData *ConfigDataForUpdateSyslogConfigInput `type:"structure" json:",omitempty"`

	// DataSourceName is a required field
	DataSourceName *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s UpdateSyslogConfigInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateSyslogConfigInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UpdateSyslogConfigInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "UpdateSyslogConfigInput"}
	if s.DataSourceName == nil {
		invalidParams.Add(request.NewErrParamRequired("DataSourceName"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetConfigData sets the ConfigData field's value.
func (s *UpdateSyslogConfigInput) SetConfigData(v *ConfigDataForUpdateSyslogConfigInput) *UpdateSyslogConfigInput {
	s.ConfigData = v
	return s
}

// SetDataSourceName sets the DataSourceName field's value.
func (s *UpdateSyslogConfigInput) SetDataSourceName(v string) *UpdateSyslogConfigInput {
	s.DataSourceName = &v
	return s
}

type UpdateSyslogConfigOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s UpdateSyslogConfigOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateSyslogConfigOutput) GoString() string {
	return s.String()
}
