// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package secagent

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opCheckIMConfigCommon = "CheckIMConfig"

// CheckIMConfigCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the CheckIMConfigCommon operation. The "output" return
// value will be populated with the CheckIMConfigCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CheckIMConfigCommon Request to send the API call to the service.
// the "output" return value is not valid until after CheckIMConfigCommon Send returns without error.
//
// See CheckIMConfigCommon for more information on using the CheckIMConfigCommon
// API call, and error handling.
//
//    // Example sending a request using the CheckIMConfigCommonRequest method.
//    req, resp := client.CheckIMConfigCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECAGENT) CheckIMConfigCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCheckIMConfigCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CheckIMConfigCommon API operation for SEC_AGENT.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SEC_AGENT's
// API operation CheckIMConfigCommon for usage and error information.
func (c *SECAGENT) CheckIMConfigCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CheckIMConfigCommonRequest(input)
	return out, req.Send()
}

// CheckIMConfigCommonWithContext is the same as CheckIMConfigCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CheckIMConfigCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECAGENT) CheckIMConfigCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CheckIMConfigCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCheckIMConfig = "CheckIMConfig"

// CheckIMConfigRequest generates a "volcengine/request.Request" representing the
// client's request for the CheckIMConfig operation. The "output" return
// value will be populated with the CheckIMConfigCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CheckIMConfigCommon Request to send the API call to the service.
// the "output" return value is not valid until after CheckIMConfigCommon Send returns without error.
//
// See CheckIMConfig for more information on using the CheckIMConfig
// API call, and error handling.
//
//    // Example sending a request using the CheckIMConfigRequest method.
//    req, resp := client.CheckIMConfigRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECAGENT) CheckIMConfigRequest(input *CheckIMConfigInput) (req *request.Request, output *CheckIMConfigOutput) {
	op := &request.Operation{
		Name:       opCheckIMConfig,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CheckIMConfigInput{}
	}

	output = &CheckIMConfigOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CheckIMConfig API operation for SEC_AGENT.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SEC_AGENT's
// API operation CheckIMConfig for usage and error information.
func (c *SECAGENT) CheckIMConfig(input *CheckIMConfigInput) (*CheckIMConfigOutput, error) {
	req, out := c.CheckIMConfigRequest(input)
	return out, req.Send()
}

// CheckIMConfigWithContext is the same as CheckIMConfig with the addition of
// the ability to pass a context and additional request options.
//
// See CheckIMConfig for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECAGENT) CheckIMConfigWithContext(ctx volcengine.Context, input *CheckIMConfigInput, opts ...request.Option) (*CheckIMConfigOutput, error) {
	req, out := c.CheckIMConfigRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type CheckIMConfigInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// IMConfigUID is a required field
	IMConfigUID *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s CheckIMConfigInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CheckIMConfigInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CheckIMConfigInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CheckIMConfigInput"}
	if s.IMConfigUID == nil {
		invalidParams.Add(request.NewErrParamRequired("IMConfigUID"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetIMConfigUID sets the IMConfigUID field's value.
func (s *CheckIMConfigInput) SetIMConfigUID(v string) *CheckIMConfigInput {
	s.IMConfigUID = &v
	return s
}

type CheckIMConfigOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	IsPass *bool `type:"boolean" json:",omitempty"`

	Message *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s CheckIMConfigOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CheckIMConfigOutput) GoString() string {
	return s.String()
}

// SetIsPass sets the IsPass field's value.
func (s *CheckIMConfigOutput) SetIsPass(v bool) *CheckIMConfigOutput {
	s.IsPass = &v
	return s
}

// SetMessage sets the Message field's value.
func (s *CheckIMConfigOutput) SetMessage(v string) *CheckIMConfigOutput {
	s.Message = &v
	return s
}
