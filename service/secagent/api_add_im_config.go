// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package secagent

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opAddIMConfigCommon = "AddIMConfig"

// AddIMConfigCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the AddIMConfigCommon operation. The "output" return
// value will be populated with the AddIMConfigCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned AddIMConfigCommon Request to send the API call to the service.
// the "output" return value is not valid until after AddIMConfigCommon Send returns without error.
//
// See AddIMConfigCommon for more information on using the AddIMConfigCommon
// API call, and error handling.
//
//    // Example sending a request using the AddIMConfigCommonRequest method.
//    req, resp := client.AddIMConfigCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECAGENT) AddIMConfigCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opAddIMConfigCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// AddIMConfigCommon API operation for SEC_AGENT.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SEC_AGENT's
// API operation AddIMConfigCommon for usage and error information.
func (c *SECAGENT) AddIMConfigCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.AddIMConfigCommonRequest(input)
	return out, req.Send()
}

// AddIMConfigCommonWithContext is the same as AddIMConfigCommon with the addition of
// the ability to pass a context and additional request options.
//
// See AddIMConfigCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECAGENT) AddIMConfigCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.AddIMConfigCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opAddIMConfig = "AddIMConfig"

// AddIMConfigRequest generates a "volcengine/request.Request" representing the
// client's request for the AddIMConfig operation. The "output" return
// value will be populated with the AddIMConfigCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned AddIMConfigCommon Request to send the API call to the service.
// the "output" return value is not valid until after AddIMConfigCommon Send returns without error.
//
// See AddIMConfig for more information on using the AddIMConfig
// API call, and error handling.
//
//    // Example sending a request using the AddIMConfigRequest method.
//    req, resp := client.AddIMConfigRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECAGENT) AddIMConfigRequest(input *AddIMConfigInput) (req *request.Request, output *AddIMConfigOutput) {
	op := &request.Operation{
		Name:       opAddIMConfig,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &AddIMConfigInput{}
	}

	output = &AddIMConfigOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// AddIMConfig API operation for SEC_AGENT.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SEC_AGENT's
// API operation AddIMConfig for usage and error information.
func (c *SECAGENT) AddIMConfig(input *AddIMConfigInput) (*AddIMConfigOutput, error) {
	req, out := c.AddIMConfigRequest(input)
	return out, req.Send()
}

// AddIMConfigWithContext is the same as AddIMConfig with the addition of
// the ability to pass a context and additional request options.
//
// See AddIMConfig for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECAGENT) AddIMConfigWithContext(ctx volcengine.Context, input *AddIMConfigInput, opts ...request.Option) (*AddIMConfigOutput, error) {
	req, out := c.AddIMConfigRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type AddIMConfigInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// NotifyPlatform is a required field
	NotifyPlatform *string `type:"string" json:",omitempty" required:"true"`

	NotifyRange []*string `type:"list" json:",omitempty"`

	// RebotName is a required field
	RebotName *string `type:"string" json:",omitempty" required:"true"`

	// Signature is a required field
	Signature *string `type:"string" json:",omitempty" required:"true"`

	// Webhook is a required field
	Webhook *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s AddIMConfigInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s AddIMConfigInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *AddIMConfigInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "AddIMConfigInput"}
	if s.NotifyPlatform == nil {
		invalidParams.Add(request.NewErrParamRequired("NotifyPlatform"))
	}
	if s.RebotName == nil {
		invalidParams.Add(request.NewErrParamRequired("RebotName"))
	}
	if s.Signature == nil {
		invalidParams.Add(request.NewErrParamRequired("Signature"))
	}
	if s.Webhook == nil {
		invalidParams.Add(request.NewErrParamRequired("Webhook"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetNotifyPlatform sets the NotifyPlatform field's value.
func (s *AddIMConfigInput) SetNotifyPlatform(v string) *AddIMConfigInput {
	s.NotifyPlatform = &v
	return s
}

// SetNotifyRange sets the NotifyRange field's value.
func (s *AddIMConfigInput) SetNotifyRange(v []*string) *AddIMConfigInput {
	s.NotifyRange = v
	return s
}

// SetRebotName sets the RebotName field's value.
func (s *AddIMConfigInput) SetRebotName(v string) *AddIMConfigInput {
	s.RebotName = &v
	return s
}

// SetSignature sets the Signature field's value.
func (s *AddIMConfigInput) SetSignature(v string) *AddIMConfigInput {
	s.Signature = &v
	return s
}

// SetWebhook sets the Webhook field's value.
func (s *AddIMConfigInput) SetWebhook(v string) *AddIMConfigInput {
	s.Webhook = &v
	return s
}

type AddIMConfigOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s AddIMConfigOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s AddIMConfigOutput) GoString() string {
	return s.String()
}
