// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package secagent

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opEditIMConfigCommon = "EditIMConfig"

// EditIMConfigCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the EditIMConfigCommon operation. The "output" return
// value will be populated with the EditIMConfigCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned EditIMConfigCommon Request to send the API call to the service.
// the "output" return value is not valid until after EditIMConfigCommon Send returns without error.
//
// See EditIMConfigCommon for more information on using the EditIMConfigCommon
// API call, and error handling.
//
//    // Example sending a request using the EditIMConfigCommonRequest method.
//    req, resp := client.EditIMConfigCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECAGENT) EditIMConfigCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opEditIMConfigCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// EditIMConfigCommon API operation for SEC_AGENT.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SEC_AGENT's
// API operation EditIMConfigCommon for usage and error information.
func (c *SECAGENT) EditIMConfigCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.EditIMConfigCommonRequest(input)
	return out, req.Send()
}

// EditIMConfigCommonWithContext is the same as EditIMConfigCommon with the addition of
// the ability to pass a context and additional request options.
//
// See EditIMConfigCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECAGENT) EditIMConfigCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.EditIMConfigCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opEditIMConfig = "EditIMConfig"

// EditIMConfigRequest generates a "volcengine/request.Request" representing the
// client's request for the EditIMConfig operation. The "output" return
// value will be populated with the EditIMConfigCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned EditIMConfigCommon Request to send the API call to the service.
// the "output" return value is not valid until after EditIMConfigCommon Send returns without error.
//
// See EditIMConfig for more information on using the EditIMConfig
// API call, and error handling.
//
//    // Example sending a request using the EditIMConfigRequest method.
//    req, resp := client.EditIMConfigRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECAGENT) EditIMConfigRequest(input *EditIMConfigInput) (req *request.Request, output *EditIMConfigOutput) {
	op := &request.Operation{
		Name:       opEditIMConfig,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &EditIMConfigInput{}
	}

	output = &EditIMConfigOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// EditIMConfig API operation for SEC_AGENT.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SEC_AGENT's
// API operation EditIMConfig for usage and error information.
func (c *SECAGENT) EditIMConfig(input *EditIMConfigInput) (*EditIMConfigOutput, error) {
	req, out := c.EditIMConfigRequest(input)
	return out, req.Send()
}

// EditIMConfigWithContext is the same as EditIMConfig with the addition of
// the ability to pass a context and additional request options.
//
// See EditIMConfig for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECAGENT) EditIMConfigWithContext(ctx volcengine.Context, input *EditIMConfigInput, opts ...request.Option) (*EditIMConfigOutput, error) {
	req, out := c.EditIMConfigRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type EditIMConfigInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// IMConfigUID is a required field
	IMConfigUID *string `type:"string" json:",omitempty" required:"true"`

	NotifyPlatform *string `type:"string" json:",omitempty"`

	NotifyRange []*string `type:"list" json:",omitempty"`

	RebotName *string `type:"string" json:",omitempty"`

	Signature *string `type:"string" json:",omitempty"`

	Webhook *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s EditIMConfigInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s EditIMConfigInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *EditIMConfigInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "EditIMConfigInput"}
	if s.IMConfigUID == nil {
		invalidParams.Add(request.NewErrParamRequired("IMConfigUID"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetIMConfigUID sets the IMConfigUID field's value.
func (s *EditIMConfigInput) SetIMConfigUID(v string) *EditIMConfigInput {
	s.IMConfigUID = &v
	return s
}

// SetNotifyPlatform sets the NotifyPlatform field's value.
func (s *EditIMConfigInput) SetNotifyPlatform(v string) *EditIMConfigInput {
	s.NotifyPlatform = &v
	return s
}

// SetNotifyRange sets the NotifyRange field's value.
func (s *EditIMConfigInput) SetNotifyRange(v []*string) *EditIMConfigInput {
	s.NotifyRange = v
	return s
}

// SetRebotName sets the RebotName field's value.
func (s *EditIMConfigInput) SetRebotName(v string) *EditIMConfigInput {
	s.RebotName = &v
	return s
}

// SetSignature sets the Signature field's value.
func (s *EditIMConfigInput) SetSignature(v string) *EditIMConfigInput {
	s.Signature = &v
	return s
}

// SetWebhook sets the Webhook field's value.
func (s *EditIMConfigInput) SetWebhook(v string) *EditIMConfigInput {
	s.Webhook = &v
	return s
}

type EditIMConfigOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s EditIMConfigOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s EditIMConfigOutput) GoString() string {
	return s.String()
}
