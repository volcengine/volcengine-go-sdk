// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package billing

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opListBudgetFilterZoneCodeCommon = "ListBudgetFilterZoneCode"

// ListBudgetFilterZoneCodeCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ListBudgetFilterZoneCodeCommon operation. The "output" return
// value will be populated with the ListBudgetFilterZoneCodeCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListBudgetFilterZoneCodeCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListBudgetFilterZoneCodeCommon Send returns without error.
//
// See ListBudgetFilterZoneCodeCommon for more information on using the ListBudgetFilterZoneCodeCommon
// API call, and error handling.
//
//    // Example sending a request using the ListBudgetFilterZoneCodeCommonRequest method.
//    req, resp := client.ListBudgetFilterZoneCodeCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BILLING) ListBudgetFilterZoneCodeCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opListBudgetFilterZoneCodeCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListBudgetFilterZoneCodeCommon API operation for BILLING.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BILLING's
// API operation ListBudgetFilterZoneCodeCommon for usage and error information.
func (c *BILLING) ListBudgetFilterZoneCodeCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ListBudgetFilterZoneCodeCommonRequest(input)
	return out, req.Send()
}

// ListBudgetFilterZoneCodeCommonWithContext is the same as ListBudgetFilterZoneCodeCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ListBudgetFilterZoneCodeCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BILLING) ListBudgetFilterZoneCodeCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ListBudgetFilterZoneCodeCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListBudgetFilterZoneCode = "ListBudgetFilterZoneCode"

// ListBudgetFilterZoneCodeRequest generates a "volcengine/request.Request" representing the
// client's request for the ListBudgetFilterZoneCode operation. The "output" return
// value will be populated with the ListBudgetFilterZoneCodeCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListBudgetFilterZoneCodeCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListBudgetFilterZoneCodeCommon Send returns without error.
//
// See ListBudgetFilterZoneCode for more information on using the ListBudgetFilterZoneCode
// API call, and error handling.
//
//    // Example sending a request using the ListBudgetFilterZoneCodeRequest method.
//    req, resp := client.ListBudgetFilterZoneCodeRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BILLING) ListBudgetFilterZoneCodeRequest(input *ListBudgetFilterZoneCodeInput) (req *request.Request, output *ListBudgetFilterZoneCodeOutput) {
	op := &request.Operation{
		Name:       opListBudgetFilterZoneCode,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListBudgetFilterZoneCodeInput{}
	}

	output = &ListBudgetFilterZoneCodeOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListBudgetFilterZoneCode API operation for BILLING.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BILLING's
// API operation ListBudgetFilterZoneCode for usage and error information.
func (c *BILLING) ListBudgetFilterZoneCode(input *ListBudgetFilterZoneCodeInput) (*ListBudgetFilterZoneCodeOutput, error) {
	req, out := c.ListBudgetFilterZoneCodeRequest(input)
	return out, req.Send()
}

// ListBudgetFilterZoneCodeWithContext is the same as ListBudgetFilterZoneCode with the addition of
// the ability to pass a context and additional request options.
//
// See ListBudgetFilterZoneCode for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BILLING) ListBudgetFilterZoneCodeWithContext(ctx volcengine.Context, input *ListBudgetFilterZoneCodeInput, opts ...request.Option) (*ListBudgetFilterZoneCodeOutput, error) {
	req, out := c.ListBudgetFilterZoneCodeRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ListBudgetFilterZoneCodeInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// Limit is a required field
	Limit *int32 `type:"int32" json:",omitempty" required:"true"`

	// Offset is a required field
	Offset *int32 `type:"int32" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s ListBudgetFilterZoneCodeInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListBudgetFilterZoneCodeInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ListBudgetFilterZoneCodeInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ListBudgetFilterZoneCodeInput"}
	if s.Limit == nil {
		invalidParams.Add(request.NewErrParamRequired("Limit"))
	}
	if s.Offset == nil {
		invalidParams.Add(request.NewErrParamRequired("Offset"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetLimit sets the Limit field's value.
func (s *ListBudgetFilterZoneCodeInput) SetLimit(v int32) *ListBudgetFilterZoneCodeInput {
	s.Limit = &v
	return s
}

// SetOffset sets the Offset field's value.
func (s *ListBudgetFilterZoneCodeInput) SetOffset(v int32) *ListBudgetFilterZoneCodeInput {
	s.Offset = &v
	return s
}

type ListBudgetFilterZoneCodeOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Limit *int32 `type:"int32" json:",omitempty"`

	Offset *int32 `type:"int32" json:",omitempty"`

	Total *int32 `type:"int32" json:",omitempty"`

	ZoneInfoList []*ZoneInfoListForListBudgetFilterZoneCodeOutput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s ListBudgetFilterZoneCodeOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListBudgetFilterZoneCodeOutput) GoString() string {
	return s.String()
}

// SetLimit sets the Limit field's value.
func (s *ListBudgetFilterZoneCodeOutput) SetLimit(v int32) *ListBudgetFilterZoneCodeOutput {
	s.Limit = &v
	return s
}

// SetOffset sets the Offset field's value.
func (s *ListBudgetFilterZoneCodeOutput) SetOffset(v int32) *ListBudgetFilterZoneCodeOutput {
	s.Offset = &v
	return s
}

// SetTotal sets the Total field's value.
func (s *ListBudgetFilterZoneCodeOutput) SetTotal(v int32) *ListBudgetFilterZoneCodeOutput {
	s.Total = &v
	return s
}

// SetZoneInfoList sets the ZoneInfoList field's value.
func (s *ListBudgetFilterZoneCodeOutput) SetZoneInfoList(v []*ZoneInfoListForListBudgetFilterZoneCodeOutput) *ListBudgetFilterZoneCodeOutput {
	s.ZoneInfoList = v
	return s
}

type ZoneInfoListForListBudgetFilterZoneCodeOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	RegionZoneCode *string `type:"string" json:",omitempty"`

	RegionZoneName *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ZoneInfoListForListBudgetFilterZoneCodeOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ZoneInfoListForListBudgetFilterZoneCodeOutput) GoString() string {
	return s.String()
}

// SetRegionZoneCode sets the RegionZoneCode field's value.
func (s *ZoneInfoListForListBudgetFilterZoneCodeOutput) SetRegionZoneCode(v string) *ZoneInfoListForListBudgetFilterZoneCodeOutput {
	s.RegionZoneCode = &v
	return s
}

// SetRegionZoneName sets the RegionZoneName field's value.
func (s *ZoneInfoListForListBudgetFilterZoneCodeOutput) SetRegionZoneName(v string) *ZoneInfoListForListBudgetFilterZoneCodeOutput {
	s.RegionZoneName = &v
	return s
}
