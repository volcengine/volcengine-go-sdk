// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package billing

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opListBudgetCommon = "ListBudget"

// ListBudgetCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ListBudgetCommon operation. The "output" return
// value will be populated with the ListBudgetCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListBudgetCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListBudgetCommon Send returns without error.
//
// See ListBudgetCommon for more information on using the ListBudgetCommon
// API call, and error handling.
//
//    // Example sending a request using the ListBudgetCommonRequest method.
//    req, resp := client.ListBudgetCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BILLING) ListBudgetCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opListBudgetCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListBudgetCommon API operation for BILLING.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BILLING's
// API operation ListBudgetCommon for usage and error information.
func (c *BILLING) ListBudgetCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ListBudgetCommonRequest(input)
	return out, req.Send()
}

// ListBudgetCommonWithContext is the same as ListBudgetCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ListBudgetCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BILLING) ListBudgetCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ListBudgetCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListBudget = "ListBudget"

// ListBudgetRequest generates a "volcengine/request.Request" representing the
// client's request for the ListBudget operation. The "output" return
// value will be populated with the ListBudgetCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListBudgetCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListBudgetCommon Send returns without error.
//
// See ListBudget for more information on using the ListBudget
// API call, and error handling.
//
//    // Example sending a request using the ListBudgetRequest method.
//    req, resp := client.ListBudgetRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BILLING) ListBudgetRequest(input *ListBudgetInput) (req *request.Request, output *ListBudgetOutput) {
	op := &request.Operation{
		Name:       opListBudget,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListBudgetInput{}
	}

	output = &ListBudgetOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListBudget API operation for BILLING.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BILLING's
// API operation ListBudget for usage and error information.
func (c *BILLING) ListBudget(input *ListBudgetInput) (*ListBudgetOutput, error) {
	req, out := c.ListBudgetRequest(input)
	return out, req.Send()
}

// ListBudgetWithContext is the same as ListBudget with the addition of
// the ability to pass a context and additional request options.
//
// See ListBudget for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BILLING) ListBudgetWithContext(ctx volcengine.Context, input *ListBudgetInput, opts ...request.Option) (*ListBudgetOutput, error) {
	req, out := c.ListBudgetRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type BudgetListForListBudgetOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	ActualAmount *string `type:"string" json:",omitempty"`

	BudgetAmount *string `type:"string" json:",omitempty"`

	BudgetEndTime *string `type:"string" json:",omitempty"`

	BudgetID *string `type:"string" json:",omitempty"`

	BudgetName *string `type:"string" json:",omitempty"`

	BudgetStartTime *string `type:"string" json:",omitempty"`

	BudgetType *string `type:"string" json:",omitempty" enum:"EnumOfBudgetTypeForListBudgetOutput"`

	Period *string `type:"string" json:",omitempty" enum:"EnumOfPeriodForListBudgetOutput"`

	Ratio *string `type:"string" json:",omitempty"`

	Status *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s BudgetListForListBudgetOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s BudgetListForListBudgetOutput) GoString() string {
	return s.String()
}

// SetActualAmount sets the ActualAmount field's value.
func (s *BudgetListForListBudgetOutput) SetActualAmount(v string) *BudgetListForListBudgetOutput {
	s.ActualAmount = &v
	return s
}

// SetBudgetAmount sets the BudgetAmount field's value.
func (s *BudgetListForListBudgetOutput) SetBudgetAmount(v string) *BudgetListForListBudgetOutput {
	s.BudgetAmount = &v
	return s
}

// SetBudgetEndTime sets the BudgetEndTime field's value.
func (s *BudgetListForListBudgetOutput) SetBudgetEndTime(v string) *BudgetListForListBudgetOutput {
	s.BudgetEndTime = &v
	return s
}

// SetBudgetID sets the BudgetID field's value.
func (s *BudgetListForListBudgetOutput) SetBudgetID(v string) *BudgetListForListBudgetOutput {
	s.BudgetID = &v
	return s
}

// SetBudgetName sets the BudgetName field's value.
func (s *BudgetListForListBudgetOutput) SetBudgetName(v string) *BudgetListForListBudgetOutput {
	s.BudgetName = &v
	return s
}

// SetBudgetStartTime sets the BudgetStartTime field's value.
func (s *BudgetListForListBudgetOutput) SetBudgetStartTime(v string) *BudgetListForListBudgetOutput {
	s.BudgetStartTime = &v
	return s
}

// SetBudgetType sets the BudgetType field's value.
func (s *BudgetListForListBudgetOutput) SetBudgetType(v string) *BudgetListForListBudgetOutput {
	s.BudgetType = &v
	return s
}

// SetPeriod sets the Period field's value.
func (s *BudgetListForListBudgetOutput) SetPeriod(v string) *BudgetListForListBudgetOutput {
	s.Period = &v
	return s
}

// SetRatio sets the Ratio field's value.
func (s *BudgetListForListBudgetOutput) SetRatio(v string) *BudgetListForListBudgetOutput {
	s.Ratio = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *BudgetListForListBudgetOutput) SetStatus(v int32) *BudgetListForListBudgetOutput {
	s.Status = &v
	return s
}

type ListBudgetInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	BudgetName *string `type:"string" json:",omitempty"`

	BudgetType *string `type:"string" json:",omitempty" enum:"EnumOfBudgetTypeForListBudgetInput"`

	// Limit is a required field
	Limit *int32 `type:"int32" json:",omitempty" required:"true"`

	// Offset is a required field
	Offset *int32 `type:"int32" json:",omitempty" required:"true"`

	OrderBy *string `type:"string" json:",omitempty" enum:"EnumOfOrderByForListBudgetInput"`

	OrderType *string `type:"string" json:",omitempty" enum:"EnumOfOrderTypeForListBudgetInput"`

	Status []*int32 `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s ListBudgetInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListBudgetInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ListBudgetInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ListBudgetInput"}
	if s.Limit == nil {
		invalidParams.Add(request.NewErrParamRequired("Limit"))
	}
	if s.Offset == nil {
		invalidParams.Add(request.NewErrParamRequired("Offset"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetBudgetName sets the BudgetName field's value.
func (s *ListBudgetInput) SetBudgetName(v string) *ListBudgetInput {
	s.BudgetName = &v
	return s
}

// SetBudgetType sets the BudgetType field's value.
func (s *ListBudgetInput) SetBudgetType(v string) *ListBudgetInput {
	s.BudgetType = &v
	return s
}

// SetLimit sets the Limit field's value.
func (s *ListBudgetInput) SetLimit(v int32) *ListBudgetInput {
	s.Limit = &v
	return s
}

// SetOffset sets the Offset field's value.
func (s *ListBudgetInput) SetOffset(v int32) *ListBudgetInput {
	s.Offset = &v
	return s
}

// SetOrderBy sets the OrderBy field's value.
func (s *ListBudgetInput) SetOrderBy(v string) *ListBudgetInput {
	s.OrderBy = &v
	return s
}

// SetOrderType sets the OrderType field's value.
func (s *ListBudgetInput) SetOrderType(v string) *ListBudgetInput {
	s.OrderType = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *ListBudgetInput) SetStatus(v []*int32) *ListBudgetInput {
	s.Status = v
	return s
}

type ListBudgetOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	BudgetList []*BudgetListForListBudgetOutput `type:"list" json:",omitempty"`

	Limit *int32 `type:"int32" json:",omitempty"`

	Offset *int32 `type:"int32" json:",omitempty"`

	Total *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s ListBudgetOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListBudgetOutput) GoString() string {
	return s.String()
}

// SetBudgetList sets the BudgetList field's value.
func (s *ListBudgetOutput) SetBudgetList(v []*BudgetListForListBudgetOutput) *ListBudgetOutput {
	s.BudgetList = v
	return s
}

// SetLimit sets the Limit field's value.
func (s *ListBudgetOutput) SetLimit(v int32) *ListBudgetOutput {
	s.Limit = &v
	return s
}

// SetOffset sets the Offset field's value.
func (s *ListBudgetOutput) SetOffset(v int32) *ListBudgetOutput {
	s.Offset = &v
	return s
}

// SetTotal sets the Total field's value.
func (s *ListBudgetOutput) SetTotal(v int32) *ListBudgetOutput {
	s.Total = &v
	return s
}

const (
	// EnumOfBudgetTypeForListBudgetInputCostBudget is a EnumOfBudgetTypeForListBudgetInput enum value
	EnumOfBudgetTypeForListBudgetInputCostBudget = "cost_budget"
)

const (
	// EnumOfBudgetTypeForListBudgetOutputCostBudget is a EnumOfBudgetTypeForListBudgetOutput enum value
	EnumOfBudgetTypeForListBudgetOutputCostBudget = "cost_budget"
)

const (
	// EnumOfOrderByForListBudgetInputRatio is a EnumOfOrderByForListBudgetInput enum value
	EnumOfOrderByForListBudgetInputRatio = "ratio"
)

const (
	// EnumOfOrderTypeForListBudgetInputAsc is a EnumOfOrderTypeForListBudgetInput enum value
	EnumOfOrderTypeForListBudgetInputAsc = "asc"

	// EnumOfOrderTypeForListBudgetInputDesc is a EnumOfOrderTypeForListBudgetInput enum value
	EnumOfOrderTypeForListBudgetInputDesc = "desc"
)

const (
	// EnumOfPeriodForListBudgetOutputMonth is a EnumOfPeriodForListBudgetOutput enum value
	EnumOfPeriodForListBudgetOutputMonth = "month"

	// EnumOfPeriodForListBudgetOutputQuarter is a EnumOfPeriodForListBudgetOutput enum value
	EnumOfPeriodForListBudgetOutputQuarter = "quarter"

	// EnumOfPeriodForListBudgetOutputYear is a EnumOfPeriodForListBudgetOutput enum value
	EnumOfPeriodForListBudgetOutputYear = "year"
)
