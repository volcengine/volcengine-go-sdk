// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package billing

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opListBudgetFilterRegionCodeCommon = "ListBudgetFilterRegionCode"

// ListBudgetFilterRegionCodeCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ListBudgetFilterRegionCodeCommon operation. The "output" return
// value will be populated with the ListBudgetFilterRegionCodeCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListBudgetFilterRegionCodeCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListBudgetFilterRegionCodeCommon Send returns without error.
//
// See ListBudgetFilterRegionCodeCommon for more information on using the ListBudgetFilterRegionCodeCommon
// API call, and error handling.
//
//    // Example sending a request using the ListBudgetFilterRegionCodeCommonRequest method.
//    req, resp := client.ListBudgetFilterRegionCodeCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BILLING) ListBudgetFilterRegionCodeCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opListBudgetFilterRegionCodeCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListBudgetFilterRegionCodeCommon API operation for BILLING.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BILLING's
// API operation ListBudgetFilterRegionCodeCommon for usage and error information.
func (c *BILLING) ListBudgetFilterRegionCodeCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ListBudgetFilterRegionCodeCommonRequest(input)
	return out, req.Send()
}

// ListBudgetFilterRegionCodeCommonWithContext is the same as ListBudgetFilterRegionCodeCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ListBudgetFilterRegionCodeCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BILLING) ListBudgetFilterRegionCodeCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ListBudgetFilterRegionCodeCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListBudgetFilterRegionCode = "ListBudgetFilterRegionCode"

// ListBudgetFilterRegionCodeRequest generates a "volcengine/request.Request" representing the
// client's request for the ListBudgetFilterRegionCode operation. The "output" return
// value will be populated with the ListBudgetFilterRegionCodeCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListBudgetFilterRegionCodeCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListBudgetFilterRegionCodeCommon Send returns without error.
//
// See ListBudgetFilterRegionCode for more information on using the ListBudgetFilterRegionCode
// API call, and error handling.
//
//    // Example sending a request using the ListBudgetFilterRegionCodeRequest method.
//    req, resp := client.ListBudgetFilterRegionCodeRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BILLING) ListBudgetFilterRegionCodeRequest(input *ListBudgetFilterRegionCodeInput) (req *request.Request, output *ListBudgetFilterRegionCodeOutput) {
	op := &request.Operation{
		Name:       opListBudgetFilterRegionCode,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListBudgetFilterRegionCodeInput{}
	}

	output = &ListBudgetFilterRegionCodeOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListBudgetFilterRegionCode API operation for BILLING.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BILLING's
// API operation ListBudgetFilterRegionCode for usage and error information.
func (c *BILLING) ListBudgetFilterRegionCode(input *ListBudgetFilterRegionCodeInput) (*ListBudgetFilterRegionCodeOutput, error) {
	req, out := c.ListBudgetFilterRegionCodeRequest(input)
	return out, req.Send()
}

// ListBudgetFilterRegionCodeWithContext is the same as ListBudgetFilterRegionCode with the addition of
// the ability to pass a context and additional request options.
//
// See ListBudgetFilterRegionCode for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BILLING) ListBudgetFilterRegionCodeWithContext(ctx volcengine.Context, input *ListBudgetFilterRegionCodeInput, opts ...request.Option) (*ListBudgetFilterRegionCodeOutput, error) {
	req, out := c.ListBudgetFilterRegionCodeRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ListBudgetFilterRegionCodeInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// Limit is a required field
	Limit *int32 `type:"int32" json:",omitempty" required:"true"`

	// Offset is a required field
	Offset *int32 `type:"int32" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s ListBudgetFilterRegionCodeInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListBudgetFilterRegionCodeInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ListBudgetFilterRegionCodeInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ListBudgetFilterRegionCodeInput"}
	if s.Limit == nil {
		invalidParams.Add(request.NewErrParamRequired("Limit"))
	}
	if s.Offset == nil {
		invalidParams.Add(request.NewErrParamRequired("Offset"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetLimit sets the Limit field's value.
func (s *ListBudgetFilterRegionCodeInput) SetLimit(v int32) *ListBudgetFilterRegionCodeInput {
	s.Limit = &v
	return s
}

// SetOffset sets the Offset field's value.
func (s *ListBudgetFilterRegionCodeInput) SetOffset(v int32) *ListBudgetFilterRegionCodeInput {
	s.Offset = &v
	return s
}

type ListBudgetFilterRegionCodeOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Limit *int32 `type:"int32" json:",omitempty"`

	Offset *int32 `type:"int32" json:",omitempty"`

	RegionInfoList []*RegionInfoListForListBudgetFilterRegionCodeOutput `type:"list" json:",omitempty"`

	Total *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s ListBudgetFilterRegionCodeOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListBudgetFilterRegionCodeOutput) GoString() string {
	return s.String()
}

// SetLimit sets the Limit field's value.
func (s *ListBudgetFilterRegionCodeOutput) SetLimit(v int32) *ListBudgetFilterRegionCodeOutput {
	s.Limit = &v
	return s
}

// SetOffset sets the Offset field's value.
func (s *ListBudgetFilterRegionCodeOutput) SetOffset(v int32) *ListBudgetFilterRegionCodeOutput {
	s.Offset = &v
	return s
}

// SetRegionInfoList sets the RegionInfoList field's value.
func (s *ListBudgetFilterRegionCodeOutput) SetRegionInfoList(v []*RegionInfoListForListBudgetFilterRegionCodeOutput) *ListBudgetFilterRegionCodeOutput {
	s.RegionInfoList = v
	return s
}

// SetTotal sets the Total field's value.
func (s *ListBudgetFilterRegionCodeOutput) SetTotal(v int32) *ListBudgetFilterRegionCodeOutput {
	s.Total = &v
	return s
}

type RegionInfoListForListBudgetFilterRegionCodeOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	RegionCode *string `type:"string" json:",omitempty"`

	RegionName *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s RegionInfoListForListBudgetFilterRegionCodeOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s RegionInfoListForListBudgetFilterRegionCodeOutput) GoString() string {
	return s.String()
}

// SetRegionCode sets the RegionCode field's value.
func (s *RegionInfoListForListBudgetFilterRegionCodeOutput) SetRegionCode(v string) *RegionInfoListForListBudgetFilterRegionCodeOutput {
	s.RegionCode = &v
	return s
}

// SetRegionName sets the RegionName field's value.
func (s *RegionInfoListForListBudgetFilterRegionCodeOutput) SetRegionName(v string) *RegionInfoListForListBudgetFilterRegionCodeOutput {
	s.RegionName = &v
	return s
}
