// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package billing

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opListRecipientInformationCommon = "ListRecipientInformation"

// ListRecipientInformationCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ListRecipientInformationCommon operation. The "output" return
// value will be populated with the ListRecipientInformationCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListRecipientInformationCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListRecipientInformationCommon Send returns without error.
//
// See ListRecipientInformationCommon for more information on using the ListRecipientInformationCommon
// API call, and error handling.
//
//    // Example sending a request using the ListRecipientInformationCommonRequest method.
//    req, resp := client.ListRecipientInformationCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BILLING) ListRecipientInformationCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opListRecipientInformationCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListRecipientInformationCommon API operation for BILLING.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BILLING's
// API operation ListRecipientInformationCommon for usage and error information.
func (c *BILLING) ListRecipientInformationCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ListRecipientInformationCommonRequest(input)
	return out, req.Send()
}

// ListRecipientInformationCommonWithContext is the same as ListRecipientInformationCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ListRecipientInformationCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BILLING) ListRecipientInformationCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ListRecipientInformationCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListRecipientInformation = "ListRecipientInformation"

// ListRecipientInformationRequest generates a "volcengine/request.Request" representing the
// client's request for the ListRecipientInformation operation. The "output" return
// value will be populated with the ListRecipientInformationCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListRecipientInformationCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListRecipientInformationCommon Send returns without error.
//
// See ListRecipientInformation for more information on using the ListRecipientInformation
// API call, and error handling.
//
//    // Example sending a request using the ListRecipientInformationRequest method.
//    req, resp := client.ListRecipientInformationRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BILLING) ListRecipientInformationRequest(input *ListRecipientInformationInput) (req *request.Request, output *ListRecipientInformationOutput) {
	op := &request.Operation{
		Name:       opListRecipientInformation,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListRecipientInformationInput{}
	}

	output = &ListRecipientInformationOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListRecipientInformation API operation for BILLING.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BILLING's
// API operation ListRecipientInformation for usage and error information.
func (c *BILLING) ListRecipientInformation(input *ListRecipientInformationInput) (*ListRecipientInformationOutput, error) {
	req, out := c.ListRecipientInformationRequest(input)
	return out, req.Send()
}

// ListRecipientInformationWithContext is the same as ListRecipientInformation with the addition of
// the ability to pass a context and additional request options.
//
// See ListRecipientInformation for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BILLING) ListRecipientInformationWithContext(ctx volcengine.Context, input *ListRecipientInformationInput, opts ...request.Option) (*ListRecipientInformationOutput, error) {
	req, out := c.ListRecipientInformationRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ListRecipientInformationInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// Limit is a required field
	Limit *int32 `type:"int32" json:",omitempty" required:"true"`

	// Offset is a required field
	Offset *int32 `type:"int32" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s ListRecipientInformationInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListRecipientInformationInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ListRecipientInformationInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ListRecipientInformationInput"}
	if s.Limit == nil {
		invalidParams.Add(request.NewErrParamRequired("Limit"))
	}
	if s.Offset == nil {
		invalidParams.Add(request.NewErrParamRequired("Offset"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetLimit sets the Limit field's value.
func (s *ListRecipientInformationInput) SetLimit(v int32) *ListRecipientInformationInput {
	s.Limit = &v
	return s
}

// SetOffset sets the Offset field's value.
func (s *ListRecipientInformationInput) SetOffset(v int32) *ListRecipientInformationInput {
	s.Offset = &v
	return s
}

type ListRecipientInformationOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Limit *int32 `type:"int32" json:",omitempty"`

	Offset *int32 `type:"int32" json:",omitempty"`

	RecipientInformationList []*RecipientInformationListForListRecipientInformationOutput `type:"list" json:",omitempty"`

	Total *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s ListRecipientInformationOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListRecipientInformationOutput) GoString() string {
	return s.String()
}

// SetLimit sets the Limit field's value.
func (s *ListRecipientInformationOutput) SetLimit(v int32) *ListRecipientInformationOutput {
	s.Limit = &v
	return s
}

// SetOffset sets the Offset field's value.
func (s *ListRecipientInformationOutput) SetOffset(v int32) *ListRecipientInformationOutput {
	s.Offset = &v
	return s
}

// SetRecipientInformationList sets the RecipientInformationList field's value.
func (s *ListRecipientInformationOutput) SetRecipientInformationList(v []*RecipientInformationListForListRecipientInformationOutput) *ListRecipientInformationOutput {
	s.RecipientInformationList = v
	return s
}

// SetTotal sets the Total field's value.
func (s *ListRecipientInformationOutput) SetTotal(v int32) *ListRecipientInformationOutput {
	s.Total = &v
	return s
}

type RecipientInformationListForListRecipientInformationOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	RecipientEmail *string `type:"string" json:",omitempty"`

	RecipientID *int64 `type:"int64" json:",omitempty"`

	RecipientMessage *string `type:"string" json:",omitempty"`

	RecipientName *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s RecipientInformationListForListRecipientInformationOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s RecipientInformationListForListRecipientInformationOutput) GoString() string {
	return s.String()
}

// SetRecipientEmail sets the RecipientEmail field's value.
func (s *RecipientInformationListForListRecipientInformationOutput) SetRecipientEmail(v string) *RecipientInformationListForListRecipientInformationOutput {
	s.RecipientEmail = &v
	return s
}

// SetRecipientID sets the RecipientID field's value.
func (s *RecipientInformationListForListRecipientInformationOutput) SetRecipientID(v int64) *RecipientInformationListForListRecipientInformationOutput {
	s.RecipientID = &v
	return s
}

// SetRecipientMessage sets the RecipientMessage field's value.
func (s *RecipientInformationListForListRecipientInformationOutput) SetRecipientMessage(v string) *RecipientInformationListForListRecipientInformationOutput {
	s.RecipientMessage = &v
	return s
}

// SetRecipientName sets the RecipientName field's value.
func (s *RecipientInformationListForListRecipientInformationOutput) SetRecipientName(v string) *RecipientInformationListForListRecipientInformationOutput {
	s.RecipientName = &v
	return s
}
