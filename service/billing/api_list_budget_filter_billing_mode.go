// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package billing

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opListBudgetFilterBillingModeCommon = "ListBudgetFilterBillingMode"

// ListBudgetFilterBillingModeCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ListBudgetFilterBillingModeCommon operation. The "output" return
// value will be populated with the ListBudgetFilterBillingModeCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListBudgetFilterBillingModeCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListBudgetFilterBillingModeCommon Send returns without error.
//
// See ListBudgetFilterBillingModeCommon for more information on using the ListBudgetFilterBillingModeCommon
// API call, and error handling.
//
//    // Example sending a request using the ListBudgetFilterBillingModeCommonRequest method.
//    req, resp := client.ListBudgetFilterBillingModeCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BILLING) ListBudgetFilterBillingModeCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opListBudgetFilterBillingModeCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListBudgetFilterBillingModeCommon API operation for BILLING.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BILLING's
// API operation ListBudgetFilterBillingModeCommon for usage and error information.
func (c *BILLING) ListBudgetFilterBillingModeCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ListBudgetFilterBillingModeCommonRequest(input)
	return out, req.Send()
}

// ListBudgetFilterBillingModeCommonWithContext is the same as ListBudgetFilterBillingModeCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ListBudgetFilterBillingModeCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BILLING) ListBudgetFilterBillingModeCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ListBudgetFilterBillingModeCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListBudgetFilterBillingMode = "ListBudgetFilterBillingMode"

// ListBudgetFilterBillingModeRequest generates a "volcengine/request.Request" representing the
// client's request for the ListBudgetFilterBillingMode operation. The "output" return
// value will be populated with the ListBudgetFilterBillingModeCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListBudgetFilterBillingModeCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListBudgetFilterBillingModeCommon Send returns without error.
//
// See ListBudgetFilterBillingMode for more information on using the ListBudgetFilterBillingMode
// API call, and error handling.
//
//    // Example sending a request using the ListBudgetFilterBillingModeRequest method.
//    req, resp := client.ListBudgetFilterBillingModeRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BILLING) ListBudgetFilterBillingModeRequest(input *ListBudgetFilterBillingModeInput) (req *request.Request, output *ListBudgetFilterBillingModeOutput) {
	op := &request.Operation{
		Name:       opListBudgetFilterBillingMode,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListBudgetFilterBillingModeInput{}
	}

	output = &ListBudgetFilterBillingModeOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListBudgetFilterBillingMode API operation for BILLING.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BILLING's
// API operation ListBudgetFilterBillingMode for usage and error information.
func (c *BILLING) ListBudgetFilterBillingMode(input *ListBudgetFilterBillingModeInput) (*ListBudgetFilterBillingModeOutput, error) {
	req, out := c.ListBudgetFilterBillingModeRequest(input)
	return out, req.Send()
}

// ListBudgetFilterBillingModeWithContext is the same as ListBudgetFilterBillingMode with the addition of
// the ability to pass a context and additional request options.
//
// See ListBudgetFilterBillingMode for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BILLING) ListBudgetFilterBillingModeWithContext(ctx volcengine.Context, input *ListBudgetFilterBillingModeInput, opts ...request.Option) (*ListBudgetFilterBillingModeOutput, error) {
	req, out := c.ListBudgetFilterBillingModeRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type BillingModeInfoListForListBudgetFilterBillingModeOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	BillingModeCode *string `type:"string" json:",omitempty"`

	BillingModeName *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s BillingModeInfoListForListBudgetFilterBillingModeOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s BillingModeInfoListForListBudgetFilterBillingModeOutput) GoString() string {
	return s.String()
}

// SetBillingModeCode sets the BillingModeCode field's value.
func (s *BillingModeInfoListForListBudgetFilterBillingModeOutput) SetBillingModeCode(v string) *BillingModeInfoListForListBudgetFilterBillingModeOutput {
	s.BillingModeCode = &v
	return s
}

// SetBillingModeName sets the BillingModeName field's value.
func (s *BillingModeInfoListForListBudgetFilterBillingModeOutput) SetBillingModeName(v string) *BillingModeInfoListForListBudgetFilterBillingModeOutput {
	s.BillingModeName = &v
	return s
}

type ListBudgetFilterBillingModeInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// Limit is a required field
	Limit *int32 `type:"int32" json:",omitempty" required:"true"`

	// Offset is a required field
	Offset *int32 `type:"int32" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s ListBudgetFilterBillingModeInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListBudgetFilterBillingModeInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ListBudgetFilterBillingModeInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ListBudgetFilterBillingModeInput"}
	if s.Limit == nil {
		invalidParams.Add(request.NewErrParamRequired("Limit"))
	}
	if s.Offset == nil {
		invalidParams.Add(request.NewErrParamRequired("Offset"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetLimit sets the Limit field's value.
func (s *ListBudgetFilterBillingModeInput) SetLimit(v int32) *ListBudgetFilterBillingModeInput {
	s.Limit = &v
	return s
}

// SetOffset sets the Offset field's value.
func (s *ListBudgetFilterBillingModeInput) SetOffset(v int32) *ListBudgetFilterBillingModeInput {
	s.Offset = &v
	return s
}

type ListBudgetFilterBillingModeOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	BillingModeInfoList []*BillingModeInfoListForListBudgetFilterBillingModeOutput `type:"list" json:",omitempty"`

	Limit *int32 `type:"int32" json:",omitempty"`

	Offset *int32 `type:"int32" json:",omitempty"`

	Total *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s ListBudgetFilterBillingModeOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListBudgetFilterBillingModeOutput) GoString() string {
	return s.String()
}

// SetBillingModeInfoList sets the BillingModeInfoList field's value.
func (s *ListBudgetFilterBillingModeOutput) SetBillingModeInfoList(v []*BillingModeInfoListForListBudgetFilterBillingModeOutput) *ListBudgetFilterBillingModeOutput {
	s.BillingModeInfoList = v
	return s
}

// SetLimit sets the Limit field's value.
func (s *ListBudgetFilterBillingModeOutput) SetLimit(v int32) *ListBudgetFilterBillingModeOutput {
	s.Limit = &v
	return s
}

// SetOffset sets the Offset field's value.
func (s *ListBudgetFilterBillingModeOutput) SetOffset(v int32) *ListBudgetFilterBillingModeOutput {
	s.Offset = &v
	return s
}

// SetTotal sets the Total field's value.
func (s *ListBudgetFilterBillingModeOutput) SetTotal(v int32) *ListBudgetFilterBillingModeOutput {
	s.Total = &v
	return s
}
