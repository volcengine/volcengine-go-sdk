// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package billing

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opListBudgetFilterProjectCommon = "ListBudgetFilterProject"

// ListBudgetFilterProjectCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ListBudgetFilterProjectCommon operation. The "output" return
// value will be populated with the ListBudgetFilterProjectCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListBudgetFilterProjectCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListBudgetFilterProjectCommon Send returns without error.
//
// See ListBudgetFilterProjectCommon for more information on using the ListBudgetFilterProjectCommon
// API call, and error handling.
//
//    // Example sending a request using the ListBudgetFilterProjectCommonRequest method.
//    req, resp := client.ListBudgetFilterProjectCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BILLING) ListBudgetFilterProjectCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opListBudgetFilterProjectCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListBudgetFilterProjectCommon API operation for BILLING.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BILLING's
// API operation ListBudgetFilterProjectCommon for usage and error information.
func (c *BILLING) ListBudgetFilterProjectCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ListBudgetFilterProjectCommonRequest(input)
	return out, req.Send()
}

// ListBudgetFilterProjectCommonWithContext is the same as ListBudgetFilterProjectCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ListBudgetFilterProjectCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BILLING) ListBudgetFilterProjectCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ListBudgetFilterProjectCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListBudgetFilterProject = "ListBudgetFilterProject"

// ListBudgetFilterProjectRequest generates a "volcengine/request.Request" representing the
// client's request for the ListBudgetFilterProject operation. The "output" return
// value will be populated with the ListBudgetFilterProjectCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListBudgetFilterProjectCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListBudgetFilterProjectCommon Send returns without error.
//
// See ListBudgetFilterProject for more information on using the ListBudgetFilterProject
// API call, and error handling.
//
//    // Example sending a request using the ListBudgetFilterProjectRequest method.
//    req, resp := client.ListBudgetFilterProjectRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BILLING) ListBudgetFilterProjectRequest(input *ListBudgetFilterProjectInput) (req *request.Request, output *ListBudgetFilterProjectOutput) {
	op := &request.Operation{
		Name:       opListBudgetFilterProject,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListBudgetFilterProjectInput{}
	}

	output = &ListBudgetFilterProjectOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListBudgetFilterProject API operation for BILLING.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BILLING's
// API operation ListBudgetFilterProject for usage and error information.
func (c *BILLING) ListBudgetFilterProject(input *ListBudgetFilterProjectInput) (*ListBudgetFilterProjectOutput, error) {
	req, out := c.ListBudgetFilterProjectRequest(input)
	return out, req.Send()
}

// ListBudgetFilterProjectWithContext is the same as ListBudgetFilterProject with the addition of
// the ability to pass a context and additional request options.
//
// See ListBudgetFilterProject for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BILLING) ListBudgetFilterProjectWithContext(ctx volcengine.Context, input *ListBudgetFilterProjectInput, opts ...request.Option) (*ListBudgetFilterProjectOutput, error) {
	req, out := c.ListBudgetFilterProjectRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ListBudgetFilterProjectInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// Limit is a required field
	Limit *int32 `type:"int32" json:",omitempty" required:"true"`

	// Offset is a required field
	Offset *int32 `type:"int32" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s ListBudgetFilterProjectInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListBudgetFilterProjectInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ListBudgetFilterProjectInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ListBudgetFilterProjectInput"}
	if s.Limit == nil {
		invalidParams.Add(request.NewErrParamRequired("Limit"))
	}
	if s.Offset == nil {
		invalidParams.Add(request.NewErrParamRequired("Offset"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetLimit sets the Limit field's value.
func (s *ListBudgetFilterProjectInput) SetLimit(v int32) *ListBudgetFilterProjectInput {
	s.Limit = &v
	return s
}

// SetOffset sets the Offset field's value.
func (s *ListBudgetFilterProjectInput) SetOffset(v int32) *ListBudgetFilterProjectInput {
	s.Offset = &v
	return s
}

type ListBudgetFilterProjectOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Limit *int32 `type:"int32" json:",omitempty"`

	List []*string `type:"list" json:",omitempty"`

	Offset *int32 `type:"int32" json:",omitempty"`

	Total *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s ListBudgetFilterProjectOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListBudgetFilterProjectOutput) GoString() string {
	return s.String()
}

// SetLimit sets the Limit field's value.
func (s *ListBudgetFilterProjectOutput) SetLimit(v int32) *ListBudgetFilterProjectOutput {
	s.Limit = &v
	return s
}

// SetList sets the List field's value.
func (s *ListBudgetFilterProjectOutput) SetList(v []*string) *ListBudgetFilterProjectOutput {
	s.List = v
	return s
}

// SetOffset sets the Offset field's value.
func (s *ListBudgetFilterProjectOutput) SetOffset(v int32) *ListBudgetFilterProjectOutput {
	s.Offset = &v
	return s
}

// SetTotal sets the Total field's value.
func (s *ListBudgetFilterProjectOutput) SetTotal(v int32) *ListBudgetFilterProjectOutput {
	s.Total = &v
	return s
}
