// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package dcdn

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDescribeBlockIPCommon = "DescribeBlockIP"

// DescribeBlockIPCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeBlockIPCommon operation. The "output" return
// value will be populated with the DescribeBlockIPCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeBlockIPCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeBlockIPCommon Send returns without error.
//
// See DescribeBlockIPCommon for more information on using the DescribeBlockIPCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeBlockIPCommonRequest method.
//    req, resp := client.DescribeBlockIPCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DCDN) DescribeBlockIPCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeBlockIPCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeBlockIPCommon API operation for DCDN.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for DCDN's
// API operation DescribeBlockIPCommon for usage and error information.
func (c *DCDN) DescribeBlockIPCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeBlockIPCommonRequest(input)
	return out, req.Send()
}

// DescribeBlockIPCommonWithContext is the same as DescribeBlockIPCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeBlockIPCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DCDN) DescribeBlockIPCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeBlockIPCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeBlockIP = "DescribeBlockIP"

// DescribeBlockIPRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeBlockIP operation. The "output" return
// value will be populated with the DescribeBlockIPCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeBlockIPCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeBlockIPCommon Send returns without error.
//
// See DescribeBlockIP for more information on using the DescribeBlockIP
// API call, and error handling.
//
//    // Example sending a request using the DescribeBlockIPRequest method.
//    req, resp := client.DescribeBlockIPRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DCDN) DescribeBlockIPRequest(input *DescribeBlockIPInput) (req *request.Request, output *DescribeBlockIPOutput) {
	op := &request.Operation{
		Name:       opDescribeBlockIP,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeBlockIPInput{}
	}

	output = &DescribeBlockIPOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeBlockIP API operation for DCDN.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for DCDN's
// API operation DescribeBlockIP for usage and error information.
func (c *DCDN) DescribeBlockIP(input *DescribeBlockIPInput) (*DescribeBlockIPOutput, error) {
	req, out := c.DescribeBlockIPRequest(input)
	return out, req.Send()
}

// DescribeBlockIPWithContext is the same as DescribeBlockIP with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeBlockIP for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DCDN) DescribeBlockIPWithContext(ctx volcengine.Context, input *DescribeBlockIPInput, opts ...request.Option) (*DescribeBlockIPOutput, error) {
	req, out := c.DescribeBlockIPRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DescribeBlockIPInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Domains []*string `type:"list" json:",omitempty"`

	IPList []*string `type:"list" json:",omitempty"`

	// PageNumber is a required field
	PageNumber *int32 `type:"int32" json:",omitempty" required:"true"`

	// PageSize is a required field
	PageSize *int32 `type:"int32" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s DescribeBlockIPInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeBlockIPInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeBlockIPInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DescribeBlockIPInput"}
	if s.PageNumber == nil {
		invalidParams.Add(request.NewErrParamRequired("PageNumber"))
	}
	if s.PageSize == nil {
		invalidParams.Add(request.NewErrParamRequired("PageSize"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDomains sets the Domains field's value.
func (s *DescribeBlockIPInput) SetDomains(v []*string) *DescribeBlockIPInput {
	s.Domains = v
	return s
}

// SetIPList sets the IPList field's value.
func (s *DescribeBlockIPInput) SetIPList(v []*string) *DescribeBlockIPInput {
	s.IPList = v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *DescribeBlockIPInput) SetPageNumber(v int32) *DescribeBlockIPInput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *DescribeBlockIPInput) SetPageSize(v int32) *DescribeBlockIPInput {
	s.PageSize = &v
	return s
}

type DescribeBlockIPOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Domains []*string `type:"list" json:",omitempty"`

	IPList []*string `type:"list" json:",omitempty"`

	PageNumber *int32 `type:"int32" json:",omitempty"`

	PageSize *int32 `type:"int32" json:",omitempty"`

	TotalCount *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s DescribeBlockIPOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeBlockIPOutput) GoString() string {
	return s.String()
}

// SetDomains sets the Domains field's value.
func (s *DescribeBlockIPOutput) SetDomains(v []*string) *DescribeBlockIPOutput {
	s.Domains = v
	return s
}

// SetIPList sets the IPList field's value.
func (s *DescribeBlockIPOutput) SetIPList(v []*string) *DescribeBlockIPOutput {
	s.IPList = v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *DescribeBlockIPOutput) SetPageNumber(v int32) *DescribeBlockIPOutput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *DescribeBlockIPOutput) SetPageSize(v int32) *DescribeBlockIPOutput {
	s.PageSize = &v
	return s
}

// SetTotalCount sets the TotalCount field's value.
func (s *DescribeBlockIPOutput) SetTotalCount(v int32) *DescribeBlockIPOutput {
	s.TotalCount = &v
	return s
}
