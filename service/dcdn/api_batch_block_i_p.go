// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package dcdn

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opBatchBlockIPCommon = "BatchBlockIP"

// BatchBlockIPCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the BatchBlockIPCommon operation. The "output" return
// value will be populated with the BatchBlockIPCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned BatchBlockIPCommon Request to send the API call to the service.
// the "output" return value is not valid until after BatchBlockIPCommon Send returns without error.
//
// See BatchBlockIPCommon for more information on using the BatchBlockIPCommon
// API call, and error handling.
//
//    // Example sending a request using the BatchBlockIPCommonRequest method.
//    req, resp := client.BatchBlockIPCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DCDN) BatchBlockIPCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opBatchBlockIPCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// BatchBlockIPCommon API operation for DCDN.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for DCDN's
// API operation BatchBlockIPCommon for usage and error information.
func (c *DCDN) BatchBlockIPCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.BatchBlockIPCommonRequest(input)
	return out, req.Send()
}

// BatchBlockIPCommonWithContext is the same as BatchBlockIPCommon with the addition of
// the ability to pass a context and additional request options.
//
// See BatchBlockIPCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DCDN) BatchBlockIPCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.BatchBlockIPCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opBatchBlockIP = "BatchBlockIP"

// BatchBlockIPRequest generates a "volcengine/request.Request" representing the
// client's request for the BatchBlockIP operation. The "output" return
// value will be populated with the BatchBlockIPCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned BatchBlockIPCommon Request to send the API call to the service.
// the "output" return value is not valid until after BatchBlockIPCommon Send returns without error.
//
// See BatchBlockIP for more information on using the BatchBlockIP
// API call, and error handling.
//
//    // Example sending a request using the BatchBlockIPRequest method.
//    req, resp := client.BatchBlockIPRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DCDN) BatchBlockIPRequest(input *BatchBlockIPInput) (req *request.Request, output *BatchBlockIPOutput) {
	op := &request.Operation{
		Name:       opBatchBlockIP,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &BatchBlockIPInput{}
	}

	output = &BatchBlockIPOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// BatchBlockIP API operation for DCDN.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for DCDN's
// API operation BatchBlockIP for usage and error information.
func (c *DCDN) BatchBlockIP(input *BatchBlockIPInput) (*BatchBlockIPOutput, error) {
	req, out := c.BatchBlockIPRequest(input)
	return out, req.Send()
}

// BatchBlockIPWithContext is the same as BatchBlockIP with the addition of
// the ability to pass a context and additional request options.
//
// See BatchBlockIP for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DCDN) BatchBlockIPWithContext(ctx volcengine.Context, input *BatchBlockIPInput, opts ...request.Option) (*BatchBlockIPOutput, error) {
	req, out := c.BatchBlockIPRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type BatchBlockIPInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	BlockInterval *int32 `type:"int32" json:",omitempty"`

	Domains []*string `type:"list" json:",omitempty"`

	IPList []*string `type:"list" json:",omitempty"`

	// OperatorType is a required field
	OperatorType *string `type:"string" json:",omitempty" required:"true"`

	UpdateType *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s BatchBlockIPInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s BatchBlockIPInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *BatchBlockIPInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "BatchBlockIPInput"}
	if s.OperatorType == nil {
		invalidParams.Add(request.NewErrParamRequired("OperatorType"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetBlockInterval sets the BlockInterval field's value.
func (s *BatchBlockIPInput) SetBlockInterval(v int32) *BatchBlockIPInput {
	s.BlockInterval = &v
	return s
}

// SetDomains sets the Domains field's value.
func (s *BatchBlockIPInput) SetDomains(v []*string) *BatchBlockIPInput {
	s.Domains = v
	return s
}

// SetIPList sets the IPList field's value.
func (s *BatchBlockIPInput) SetIPList(v []*string) *BatchBlockIPInput {
	s.IPList = v
	return s
}

// SetOperatorType sets the OperatorType field's value.
func (s *BatchBlockIPInput) SetOperatorType(v string) *BatchBlockIPInput {
	s.OperatorType = &v
	return s
}

// SetUpdateType sets the UpdateType field's value.
func (s *BatchBlockIPInput) SetUpdateType(v string) *BatchBlockIPInput {
	s.UpdateType = &v
	return s
}

type BatchBlockIPOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s BatchBlockIPOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s BatchBlockIPOutput) GoString() string {
	return s.String()
}
