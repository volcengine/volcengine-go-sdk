// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package dcdn

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opVerifyDomainOwnershipCommon = "VerifyDomainOwnership"

// VerifyDomainOwnershipCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the VerifyDomainOwnershipCommon operation. The "output" return
// value will be populated with the VerifyDomainOwnershipCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned VerifyDomainOwnershipCommon Request to send the API call to the service.
// the "output" return value is not valid until after VerifyDomainOwnershipCommon Send returns without error.
//
// See VerifyDomainOwnershipCommon for more information on using the VerifyDomainOwnershipCommon
// API call, and error handling.
//
//    // Example sending a request using the VerifyDomainOwnershipCommonRequest method.
//    req, resp := client.VerifyDomainOwnershipCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DCDN) VerifyDomainOwnershipCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opVerifyDomainOwnershipCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// VerifyDomainOwnershipCommon API operation for DCDN.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for DCDN's
// API operation VerifyDomainOwnershipCommon for usage and error information.
func (c *DCDN) VerifyDomainOwnershipCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.VerifyDomainOwnershipCommonRequest(input)
	return out, req.Send()
}

// VerifyDomainOwnershipCommonWithContext is the same as VerifyDomainOwnershipCommon with the addition of
// the ability to pass a context and additional request options.
//
// See VerifyDomainOwnershipCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DCDN) VerifyDomainOwnershipCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.VerifyDomainOwnershipCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opVerifyDomainOwnership = "VerifyDomainOwnership"

// VerifyDomainOwnershipRequest generates a "volcengine/request.Request" representing the
// client's request for the VerifyDomainOwnership operation. The "output" return
// value will be populated with the VerifyDomainOwnershipCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned VerifyDomainOwnershipCommon Request to send the API call to the service.
// the "output" return value is not valid until after VerifyDomainOwnershipCommon Send returns without error.
//
// See VerifyDomainOwnership for more information on using the VerifyDomainOwnership
// API call, and error handling.
//
//    // Example sending a request using the VerifyDomainOwnershipRequest method.
//    req, resp := client.VerifyDomainOwnershipRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DCDN) VerifyDomainOwnershipRequest(input *VerifyDomainOwnershipInput) (req *request.Request, output *VerifyDomainOwnershipOutput) {
	op := &request.Operation{
		Name:       opVerifyDomainOwnership,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &VerifyDomainOwnershipInput{}
	}

	output = &VerifyDomainOwnershipOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// VerifyDomainOwnership API operation for DCDN.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for DCDN's
// API operation VerifyDomainOwnership for usage and error information.
func (c *DCDN) VerifyDomainOwnership(input *VerifyDomainOwnershipInput) (*VerifyDomainOwnershipOutput, error) {
	req, out := c.VerifyDomainOwnershipRequest(input)
	return out, req.Send()
}

// VerifyDomainOwnershipWithContext is the same as VerifyDomainOwnership with the addition of
// the ability to pass a context and additional request options.
//
// See VerifyDomainOwnership for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DCDN) VerifyDomainOwnershipWithContext(ctx volcengine.Context, input *VerifyDomainOwnershipInput, opts ...request.Option) (*VerifyDomainOwnershipOutput, error) {
	req, out := c.VerifyDomainOwnershipRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type VerifyDomainOwnershipInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// DomainName is a required field
	DomainName *string `type:"string" json:",omitempty" required:"true"`

	// VerifyType is a required field
	VerifyType *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s VerifyDomainOwnershipInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s VerifyDomainOwnershipInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *VerifyDomainOwnershipInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "VerifyDomainOwnershipInput"}
	if s.DomainName == nil {
		invalidParams.Add(request.NewErrParamRequired("DomainName"))
	}
	if s.VerifyType == nil {
		invalidParams.Add(request.NewErrParamRequired("VerifyType"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDomainName sets the DomainName field's value.
func (s *VerifyDomainOwnershipInput) SetDomainName(v string) *VerifyDomainOwnershipInput {
	s.DomainName = &v
	return s
}

// SetVerifyType sets the VerifyType field's value.
func (s *VerifyDomainOwnershipInput) SetVerifyType(v string) *VerifyDomainOwnershipInput {
	s.VerifyType = &v
	return s
}

type VerifyDomainOwnershipOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Message *string `type:"string" json:",omitempty"`

	Result *bool `type:"boolean" json:",omitempty"`
}

// String returns the string representation
func (s VerifyDomainOwnershipOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s VerifyDomainOwnershipOutput) GoString() string {
	return s.String()
}

// SetMessage sets the Message field's value.
func (s *VerifyDomainOwnershipOutput) SetMessage(v string) *VerifyDomainOwnershipOutput {
	s.Message = &v
	return s
}

// SetResult sets the Result field's value.
func (s *VerifyDomainOwnershipOutput) SetResult(v bool) *VerifyDomainOwnershipOutput {
	s.Result = &v
	return s
}
