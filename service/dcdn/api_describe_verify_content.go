// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package dcdn

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDescribeVerifyContentCommon = "DescribeVerifyContent"

// DescribeVerifyContentCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeVerifyContentCommon operation. The "output" return
// value will be populated with the DescribeVerifyContentCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeVerifyContentCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeVerifyContentCommon Send returns without error.
//
// See DescribeVerifyContentCommon for more information on using the DescribeVerifyContentCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeVerifyContentCommonRequest method.
//    req, resp := client.DescribeVerifyContentCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DCDN) DescribeVerifyContentCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeVerifyContentCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeVerifyContentCommon API operation for DCDN.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for DCDN's
// API operation DescribeVerifyContentCommon for usage and error information.
func (c *DCDN) DescribeVerifyContentCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeVerifyContentCommonRequest(input)
	return out, req.Send()
}

// DescribeVerifyContentCommonWithContext is the same as DescribeVerifyContentCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeVerifyContentCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DCDN) DescribeVerifyContentCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeVerifyContentCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeVerifyContent = "DescribeVerifyContent"

// DescribeVerifyContentRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeVerifyContent operation. The "output" return
// value will be populated with the DescribeVerifyContentCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeVerifyContentCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeVerifyContentCommon Send returns without error.
//
// See DescribeVerifyContent for more information on using the DescribeVerifyContent
// API call, and error handling.
//
//    // Example sending a request using the DescribeVerifyContentRequest method.
//    req, resp := client.DescribeVerifyContentRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DCDN) DescribeVerifyContentRequest(input *DescribeVerifyContentInput) (req *request.Request, output *DescribeVerifyContentOutput) {
	op := &request.Operation{
		Name:       opDescribeVerifyContent,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeVerifyContentInput{}
	}

	output = &DescribeVerifyContentOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeVerifyContent API operation for DCDN.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for DCDN's
// API operation DescribeVerifyContent for usage and error information.
func (c *DCDN) DescribeVerifyContent(input *DescribeVerifyContentInput) (*DescribeVerifyContentOutput, error) {
	req, out := c.DescribeVerifyContentRequest(input)
	return out, req.Send()
}

// DescribeVerifyContentWithContext is the same as DescribeVerifyContent with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeVerifyContent for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DCDN) DescribeVerifyContentWithContext(ctx volcengine.Context, input *DescribeVerifyContentInput, opts ...request.Option) (*DescribeVerifyContentOutput, error) {
	req, out := c.DescribeVerifyContentRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DescribeVerifyContentInput struct {
	_ struct{} `type:"structure"`

	// DomainName is a required field
	DomainName *string `type:"string" required:"true"`
}

// String returns the string representation
func (s DescribeVerifyContentInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeVerifyContentInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeVerifyContentInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DescribeVerifyContentInput"}
	if s.DomainName == nil {
		invalidParams.Add(request.NewErrParamRequired("DomainName"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDomainName sets the DomainName field's value.
func (s *DescribeVerifyContentInput) SetDomainName(v string) *DescribeVerifyContentInput {
	s.DomainName = &v
	return s
}

type DescribeVerifyContentOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	Content *string `type:"string"`

	Verified *bool `type:"boolean"`

	VerifyDomain *string `type:"string"`
}

// String returns the string representation
func (s DescribeVerifyContentOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeVerifyContentOutput) GoString() string {
	return s.String()
}

// SetContent sets the Content field's value.
func (s *DescribeVerifyContentOutput) SetContent(v string) *DescribeVerifyContentOutput {
	s.Content = &v
	return s
}

// SetVerified sets the Verified field's value.
func (s *DescribeVerifyContentOutput) SetVerified(v bool) *DescribeVerifyContentOutput {
	s.Verified = &v
	return s
}

// SetVerifyDomain sets the VerifyDomain field's value.
func (s *DescribeVerifyContentOutput) SetVerifyDomain(v string) *DescribeVerifyContentOutput {
	s.VerifyDomain = &v
	return s
}
