// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package tis

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opGetSpeakerListCommon = "GetSpeakerList"

// GetSpeakerListCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the GetSpeakerListCommon operation. The "output" return
// value will be populated with the GetSpeakerListCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetSpeakerListCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetSpeakerListCommon Send returns without error.
//
// See GetSpeakerListCommon for more information on using the GetSpeakerListCommon
// API call, and error handling.
//
//    // Example sending a request using the GetSpeakerListCommonRequest method.
//    req, resp := client.GetSpeakerListCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *TIS) GetSpeakerListCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opGetSpeakerListCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetSpeakerListCommon API operation for TIS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for TIS's
// API operation GetSpeakerListCommon for usage and error information.
func (c *TIS) GetSpeakerListCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.GetSpeakerListCommonRequest(input)
	return out, req.Send()
}

// GetSpeakerListCommonWithContext is the same as GetSpeakerListCommon with the addition of
// the ability to pass a context and additional request options.
//
// See GetSpeakerListCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *TIS) GetSpeakerListCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.GetSpeakerListCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opGetSpeakerList = "GetSpeakerList"

// GetSpeakerListRequest generates a "volcengine/request.Request" representing the
// client's request for the GetSpeakerList operation. The "output" return
// value will be populated with the GetSpeakerListCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetSpeakerListCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetSpeakerListCommon Send returns without error.
//
// See GetSpeakerList for more information on using the GetSpeakerList
// API call, and error handling.
//
//    // Example sending a request using the GetSpeakerListRequest method.
//    req, resp := client.GetSpeakerListRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *TIS) GetSpeakerListRequest(input *GetSpeakerListInput) (req *request.Request, output *GetSpeakerListOutput) {
	op := &request.Operation{
		Name:       opGetSpeakerList,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &GetSpeakerListInput{}
	}

	output = &GetSpeakerListOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetSpeakerList API operation for TIS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for TIS's
// API operation GetSpeakerList for usage and error information.
func (c *TIS) GetSpeakerList(input *GetSpeakerListInput) (*GetSpeakerListOutput, error) {
	req, out := c.GetSpeakerListRequest(input)
	return out, req.Send()
}

// GetSpeakerListWithContext is the same as GetSpeakerList with the addition of
// the ability to pass a context and additional request options.
//
// See GetSpeakerList for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *TIS) GetSpeakerListWithContext(ctx volcengine.Context, input *GetSpeakerListInput, opts ...request.Option) (*GetSpeakerListOutput, error) {
	req, out := c.GetSpeakerListRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type GetSpeakerListInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Type *string `type:"string" json:",omitempty" enum:"EnumOfTypeForGetSpeakerListInput"`
}

// String returns the string representation
func (s GetSpeakerListInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetSpeakerListInput) GoString() string {
	return s.String()
}

// SetType sets the Type field's value.
func (s *GetSpeakerListInput) SetType(v string) *GetSpeakerListInput {
	s.Type = &v
	return s
}

type GetSpeakerListOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Speakers []*SpeakerForGetSpeakerListOutput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s GetSpeakerListOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetSpeakerListOutput) GoString() string {
	return s.String()
}

// SetSpeakers sets the Speakers field's value.
func (s *GetSpeakerListOutput) SetSpeakers(v []*SpeakerForGetSpeakerListOutput) *GetSpeakerListOutput {
	s.Speakers = v
	return s
}

type SpeakerForGetSpeakerListOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Description *string `type:"string" json:",omitempty"`

	ID *string `type:"string" json:",omitempty"`

	Language *string `type:"string" json:",omitempty"`

	Name *string `type:"string" json:",omitempty"`

	Type *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s SpeakerForGetSpeakerListOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s SpeakerForGetSpeakerListOutput) GoString() string {
	return s.String()
}

// SetDescription sets the Description field's value.
func (s *SpeakerForGetSpeakerListOutput) SetDescription(v string) *SpeakerForGetSpeakerListOutput {
	s.Description = &v
	return s
}

// SetID sets the ID field's value.
func (s *SpeakerForGetSpeakerListOutput) SetID(v string) *SpeakerForGetSpeakerListOutput {
	s.ID = &v
	return s
}

// SetLanguage sets the Language field's value.
func (s *SpeakerForGetSpeakerListOutput) SetLanguage(v string) *SpeakerForGetSpeakerListOutput {
	s.Language = &v
	return s
}

// SetName sets the Name field's value.
func (s *SpeakerForGetSpeakerListOutput) SetName(v string) *SpeakerForGetSpeakerListOutput {
	s.Name = &v
	return s
}

// SetType sets the Type field's value.
func (s *SpeakerForGetSpeakerListOutput) SetType(v string) *SpeakerForGetSpeakerListOutput {
	s.Type = &v
	return s
}

const (
	// EnumOfTypeForGetSpeakerListInputDefault is a EnumOfTypeForGetSpeakerListInput enum value
	EnumOfTypeForGetSpeakerListInputDefault = "default"

	// EnumOfTypeForGetSpeakerListInputPrivate is a EnumOfTypeForGetSpeakerListInput enum value
	EnumOfTypeForGetSpeakerListInputPrivate = "private"
)
