// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package milvus

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opScaleInstanceCommon = "ScaleInstance"

// ScaleInstanceCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ScaleInstanceCommon operation. The "output" return
// value will be populated with the ScaleInstanceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ScaleInstanceCommon Request to send the API call to the service.
// the "output" return value is not valid until after ScaleInstanceCommon Send returns without error.
//
// See ScaleInstanceCommon for more information on using the ScaleInstanceCommon
// API call, and error handling.
//
//    // Example sending a request using the ScaleInstanceCommonRequest method.
//    req, resp := client.ScaleInstanceCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *MILVUS) ScaleInstanceCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opScaleInstanceCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ScaleInstanceCommon API operation for MILVUS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for MILVUS's
// API operation ScaleInstanceCommon for usage and error information.
func (c *MILVUS) ScaleInstanceCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ScaleInstanceCommonRequest(input)
	return out, req.Send()
}

// ScaleInstanceCommonWithContext is the same as ScaleInstanceCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ScaleInstanceCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *MILVUS) ScaleInstanceCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ScaleInstanceCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opScaleInstance = "ScaleInstance"

// ScaleInstanceRequest generates a "volcengine/request.Request" representing the
// client's request for the ScaleInstance operation. The "output" return
// value will be populated with the ScaleInstanceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ScaleInstanceCommon Request to send the API call to the service.
// the "output" return value is not valid until after ScaleInstanceCommon Send returns without error.
//
// See ScaleInstance for more information on using the ScaleInstance
// API call, and error handling.
//
//    // Example sending a request using the ScaleInstanceRequest method.
//    req, resp := client.ScaleInstanceRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *MILVUS) ScaleInstanceRequest(input *ScaleInstanceInput) (req *request.Request, output *ScaleInstanceOutput) {
	op := &request.Operation{
		Name:       opScaleInstance,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ScaleInstanceInput{}
	}

	output = &ScaleInstanceOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ScaleInstance API operation for MILVUS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for MILVUS's
// API operation ScaleInstance for usage and error information.
func (c *MILVUS) ScaleInstance(input *ScaleInstanceInput) (*ScaleInstanceOutput, error) {
	req, out := c.ScaleInstanceRequest(input)
	return out, req.Send()
}

// ScaleInstanceWithContext is the same as ScaleInstance with the addition of
// the ability to pass a context and additional request options.
//
// See ScaleInstance for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *MILVUS) ScaleInstanceWithContext(ctx volcengine.Context, input *ScaleInstanceInput, opts ...request.Option) (*ScaleInstanceOutput, error) {
	req, out := c.ScaleInstanceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ComponentSpecListForScaleInstanceInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	CpuNum *int32 `type:"int32" json:",omitempty"`

	MemSize *int32 `type:"int32" json:",omitempty"`

	NodeCUType *string `type:"string" json:",omitempty"`

	NodeNum *int32 `type:"int32" json:",omitempty"`

	NodeType *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ComponentSpecListForScaleInstanceInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ComponentSpecListForScaleInstanceInput) GoString() string {
	return s.String()
}

// SetCpuNum sets the CpuNum field's value.
func (s *ComponentSpecListForScaleInstanceInput) SetCpuNum(v int32) *ComponentSpecListForScaleInstanceInput {
	s.CpuNum = &v
	return s
}

// SetMemSize sets the MemSize field's value.
func (s *ComponentSpecListForScaleInstanceInput) SetMemSize(v int32) *ComponentSpecListForScaleInstanceInput {
	s.MemSize = &v
	return s
}

// SetNodeCUType sets the NodeCUType field's value.
func (s *ComponentSpecListForScaleInstanceInput) SetNodeCUType(v string) *ComponentSpecListForScaleInstanceInput {
	s.NodeCUType = &v
	return s
}

// SetNodeNum sets the NodeNum field's value.
func (s *ComponentSpecListForScaleInstanceInput) SetNodeNum(v int32) *ComponentSpecListForScaleInstanceInput {
	s.NodeNum = &v
	return s
}

// SetNodeType sets the NodeType field's value.
func (s *ComponentSpecListForScaleInstanceInput) SetNodeType(v string) *ComponentSpecListForScaleInstanceInput {
	s.NodeType = &v
	return s
}

type ScaleInstanceInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	ComponentSpecList []*ComponentSpecListForScaleInstanceInput `type:"list" json:",omitempty"`

	// HaEnabled is a required field
	HaEnabled *bool `type:"boolean" json:",omitempty" required:"true"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:",omitempty" required:"true"`

	// OneStep is a required field
	OneStep *bool `type:"boolean" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s ScaleInstanceInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ScaleInstanceInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ScaleInstanceInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ScaleInstanceInput"}
	if s.HaEnabled == nil {
		invalidParams.Add(request.NewErrParamRequired("HaEnabled"))
	}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}
	if s.OneStep == nil {
		invalidParams.Add(request.NewErrParamRequired("OneStep"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetComponentSpecList sets the ComponentSpecList field's value.
func (s *ScaleInstanceInput) SetComponentSpecList(v []*ComponentSpecListForScaleInstanceInput) *ScaleInstanceInput {
	s.ComponentSpecList = v
	return s
}

// SetHaEnabled sets the HaEnabled field's value.
func (s *ScaleInstanceInput) SetHaEnabled(v bool) *ScaleInstanceInput {
	s.HaEnabled = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *ScaleInstanceInput) SetInstanceId(v string) *ScaleInstanceInput {
	s.InstanceId = &v
	return s
}

// SetOneStep sets the OneStep field's value.
func (s *ScaleInstanceInput) SetOneStep(v bool) *ScaleInstanceInput {
	s.OneStep = &v
	return s
}

type ScaleInstanceOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	InstanceId *string `type:"string" json:",omitempty"`

	OrderNO *string `type:"string" json:",omitempty"`

	TradeConfigId *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ScaleInstanceOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ScaleInstanceOutput) GoString() string {
	return s.String()
}

// SetInstanceId sets the InstanceId field's value.
func (s *ScaleInstanceOutput) SetInstanceId(v string) *ScaleInstanceOutput {
	s.InstanceId = &v
	return s
}

// SetOrderNO sets the OrderNO field's value.
func (s *ScaleInstanceOutput) SetOrderNO(v string) *ScaleInstanceOutput {
	s.OrderNO = &v
	return s
}

// SetTradeConfigId sets the TradeConfigId field's value.
func (s *ScaleInstanceOutput) SetTradeConfigId(v string) *ScaleInstanceOutput {
	s.TradeConfigId = &v
	return s
}
