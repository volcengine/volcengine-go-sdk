// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package milvus

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDescribeAvailableVersionCommon = "DescribeAvailableVersion"

// DescribeAvailableVersionCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeAvailableVersionCommon operation. The "output" return
// value will be populated with the DescribeAvailableVersionCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeAvailableVersionCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeAvailableVersionCommon Send returns without error.
//
// See DescribeAvailableVersionCommon for more information on using the DescribeAvailableVersionCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeAvailableVersionCommonRequest method.
//    req, resp := client.DescribeAvailableVersionCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *MILVUS) DescribeAvailableVersionCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeAvailableVersionCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeAvailableVersionCommon API operation for MILVUS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for MILVUS's
// API operation DescribeAvailableVersionCommon for usage and error information.
func (c *MILVUS) DescribeAvailableVersionCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeAvailableVersionCommonRequest(input)
	return out, req.Send()
}

// DescribeAvailableVersionCommonWithContext is the same as DescribeAvailableVersionCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeAvailableVersionCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *MILVUS) DescribeAvailableVersionCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeAvailableVersionCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeAvailableVersion = "DescribeAvailableVersion"

// DescribeAvailableVersionRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeAvailableVersion operation. The "output" return
// value will be populated with the DescribeAvailableVersionCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeAvailableVersionCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeAvailableVersionCommon Send returns without error.
//
// See DescribeAvailableVersion for more information on using the DescribeAvailableVersion
// API call, and error handling.
//
//    // Example sending a request using the DescribeAvailableVersionRequest method.
//    req, resp := client.DescribeAvailableVersionRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *MILVUS) DescribeAvailableVersionRequest(input *DescribeAvailableVersionInput) (req *request.Request, output *DescribeAvailableVersionOutput) {
	op := &request.Operation{
		Name:       opDescribeAvailableVersion,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeAvailableVersionInput{}
	}

	output = &DescribeAvailableVersionOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeAvailableVersion API operation for MILVUS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for MILVUS's
// API operation DescribeAvailableVersion for usage and error information.
func (c *MILVUS) DescribeAvailableVersion(input *DescribeAvailableVersionInput) (*DescribeAvailableVersionOutput, error) {
	req, out := c.DescribeAvailableVersionRequest(input)
	return out, req.Send()
}

// DescribeAvailableVersionWithContext is the same as DescribeAvailableVersion with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeAvailableVersion for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *MILVUS) DescribeAvailableVersionWithContext(ctx volcengine.Context, input *DescribeAvailableVersionInput, opts ...request.Option) (*DescribeAvailableVersionOutput, error) {
	req, out := c.DescribeAvailableVersionRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DescribeAvailableVersionInput struct {
	_ struct{} `type:"structure" json:",omitempty"`
}

// String returns the string representation
func (s DescribeAvailableVersionInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeAvailableVersionInput) GoString() string {
	return s.String()
}

type DescribeAvailableVersionOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Versions []*VersionForDescribeAvailableVersionOutput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s DescribeAvailableVersionOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeAvailableVersionOutput) GoString() string {
	return s.String()
}

// SetVersions sets the Versions field's value.
func (s *DescribeAvailableVersionOutput) SetVersions(v []*VersionForDescribeAvailableVersionOutput) *DescribeAvailableVersionOutput {
	s.Versions = v
	return s
}

type VersionForDescribeAvailableVersionOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	DisplayName *string `type:"string" json:",omitempty"`

	Version *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s VersionForDescribeAvailableVersionOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s VersionForDescribeAvailableVersionOutput) GoString() string {
	return s.String()
}

// SetDisplayName sets the DisplayName field's value.
func (s *VersionForDescribeAvailableVersionOutput) SetDisplayName(v string) *VersionForDescribeAvailableVersionOutput {
	s.DisplayName = &v
	return s
}

// SetVersion sets the Version field's value.
func (s *VersionForDescribeAvailableVersionOutput) SetVersion(v string) *VersionForDescribeAvailableVersionOutput {
	s.Version = &v
	return s
}
