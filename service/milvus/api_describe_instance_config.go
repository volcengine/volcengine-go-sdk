// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package milvus

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDescribeInstanceConfigCommon = "DescribeInstanceConfig"

// DescribeInstanceConfigCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeInstanceConfigCommon operation. The "output" return
// value will be populated with the DescribeInstanceConfigCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeInstanceConfigCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeInstanceConfigCommon Send returns without error.
//
// See DescribeInstanceConfigCommon for more information on using the DescribeInstanceConfigCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeInstanceConfigCommonRequest method.
//    req, resp := client.DescribeInstanceConfigCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *MILVUS) DescribeInstanceConfigCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeInstanceConfigCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeInstanceConfigCommon API operation for MILVUS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for MILVUS's
// API operation DescribeInstanceConfigCommon for usage and error information.
func (c *MILVUS) DescribeInstanceConfigCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeInstanceConfigCommonRequest(input)
	return out, req.Send()
}

// DescribeInstanceConfigCommonWithContext is the same as DescribeInstanceConfigCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeInstanceConfigCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *MILVUS) DescribeInstanceConfigCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeInstanceConfigCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeInstanceConfig = "DescribeInstanceConfig"

// DescribeInstanceConfigRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeInstanceConfig operation. The "output" return
// value will be populated with the DescribeInstanceConfigCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeInstanceConfigCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeInstanceConfigCommon Send returns without error.
//
// See DescribeInstanceConfig for more information on using the DescribeInstanceConfig
// API call, and error handling.
//
//    // Example sending a request using the DescribeInstanceConfigRequest method.
//    req, resp := client.DescribeInstanceConfigRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *MILVUS) DescribeInstanceConfigRequest(input *DescribeInstanceConfigInput) (req *request.Request, output *DescribeInstanceConfigOutput) {
	op := &request.Operation{
		Name:       opDescribeInstanceConfig,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeInstanceConfigInput{}
	}

	output = &DescribeInstanceConfigOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeInstanceConfig API operation for MILVUS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for MILVUS's
// API operation DescribeInstanceConfig for usage and error information.
func (c *MILVUS) DescribeInstanceConfig(input *DescribeInstanceConfigInput) (*DescribeInstanceConfigOutput, error) {
	req, out := c.DescribeInstanceConfigRequest(input)
	return out, req.Send()
}

// DescribeInstanceConfigWithContext is the same as DescribeInstanceConfig with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeInstanceConfig for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *MILVUS) DescribeInstanceConfigWithContext(ctx volcengine.Context, input *DescribeInstanceConfigInput, opts ...request.Option) (*DescribeInstanceConfigOutput, error) {
	req, out := c.DescribeInstanceConfigRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ConfigurationForDescribeInstanceConfigOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	ConfigKey *string `type:"string" json:",omitempty"`

	CurValue *string `type:"string" json:",omitempty"`

	DefaultValue *string `type:"string" json:",omitempty"`

	Description *string `type:"string" json:",omitempty"`

	HotUpdateEnabled *bool `type:"boolean" json:",omitempty"`

	Module *string `type:"string" json:",omitempty"`

	Unit *string `type:"string" json:",omitempty"`

	ValueRange *string `type:"string" json:",omitempty"`

	ValueType *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ConfigurationForDescribeInstanceConfigOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ConfigurationForDescribeInstanceConfigOutput) GoString() string {
	return s.String()
}

// SetConfigKey sets the ConfigKey field's value.
func (s *ConfigurationForDescribeInstanceConfigOutput) SetConfigKey(v string) *ConfigurationForDescribeInstanceConfigOutput {
	s.ConfigKey = &v
	return s
}

// SetCurValue sets the CurValue field's value.
func (s *ConfigurationForDescribeInstanceConfigOutput) SetCurValue(v string) *ConfigurationForDescribeInstanceConfigOutput {
	s.CurValue = &v
	return s
}

// SetDefaultValue sets the DefaultValue field's value.
func (s *ConfigurationForDescribeInstanceConfigOutput) SetDefaultValue(v string) *ConfigurationForDescribeInstanceConfigOutput {
	s.DefaultValue = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *ConfigurationForDescribeInstanceConfigOutput) SetDescription(v string) *ConfigurationForDescribeInstanceConfigOutput {
	s.Description = &v
	return s
}

// SetHotUpdateEnabled sets the HotUpdateEnabled field's value.
func (s *ConfigurationForDescribeInstanceConfigOutput) SetHotUpdateEnabled(v bool) *ConfigurationForDescribeInstanceConfigOutput {
	s.HotUpdateEnabled = &v
	return s
}

// SetModule sets the Module field's value.
func (s *ConfigurationForDescribeInstanceConfigOutput) SetModule(v string) *ConfigurationForDescribeInstanceConfigOutput {
	s.Module = &v
	return s
}

// SetUnit sets the Unit field's value.
func (s *ConfigurationForDescribeInstanceConfigOutput) SetUnit(v string) *ConfigurationForDescribeInstanceConfigOutput {
	s.Unit = &v
	return s
}

// SetValueRange sets the ValueRange field's value.
func (s *ConfigurationForDescribeInstanceConfigOutput) SetValueRange(v string) *ConfigurationForDescribeInstanceConfigOutput {
	s.ValueRange = &v
	return s
}

// SetValueType sets the ValueType field's value.
func (s *ConfigurationForDescribeInstanceConfigOutput) SetValueType(v string) *ConfigurationForDescribeInstanceConfigOutput {
	s.ValueType = &v
	return s
}

type DescribeInstanceConfigInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s DescribeInstanceConfigInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeInstanceConfigInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeInstanceConfigInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DescribeInstanceConfigInput"}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetInstanceId sets the InstanceId field's value.
func (s *DescribeInstanceConfigInput) SetInstanceId(v string) *DescribeInstanceConfigInput {
	s.InstanceId = &v
	return s
}

type DescribeInstanceConfigOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Configurations []*ConfigurationForDescribeInstanceConfigOutput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s DescribeInstanceConfigOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeInstanceConfigOutput) GoString() string {
	return s.String()
}

// SetConfigurations sets the Configurations field's value.
func (s *DescribeInstanceConfigOutput) SetConfigurations(v []*ConfigurationForDescribeInstanceConfigOutput) *DescribeInstanceConfigOutput {
	s.Configurations = v
	return s
}
