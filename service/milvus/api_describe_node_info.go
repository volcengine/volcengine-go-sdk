// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package milvus

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDescribeNodeInfoCommon = "DescribeNodeInfo"

// DescribeNodeInfoCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeNodeInfoCommon operation. The "output" return
// value will be populated with the DescribeNodeInfoCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeNodeInfoCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeNodeInfoCommon Send returns without error.
//
// See DescribeNodeInfoCommon for more information on using the DescribeNodeInfoCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeNodeInfoCommonRequest method.
//    req, resp := client.DescribeNodeInfoCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *MILVUS) DescribeNodeInfoCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeNodeInfoCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeNodeInfoCommon API operation for MILVUS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for MILVUS's
// API operation DescribeNodeInfoCommon for usage and error information.
func (c *MILVUS) DescribeNodeInfoCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeNodeInfoCommonRequest(input)
	return out, req.Send()
}

// DescribeNodeInfoCommonWithContext is the same as DescribeNodeInfoCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeNodeInfoCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *MILVUS) DescribeNodeInfoCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeNodeInfoCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeNodeInfo = "DescribeNodeInfo"

// DescribeNodeInfoRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeNodeInfo operation. The "output" return
// value will be populated with the DescribeNodeInfoCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeNodeInfoCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeNodeInfoCommon Send returns without error.
//
// See DescribeNodeInfo for more information on using the DescribeNodeInfo
// API call, and error handling.
//
//    // Example sending a request using the DescribeNodeInfoRequest method.
//    req, resp := client.DescribeNodeInfoRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *MILVUS) DescribeNodeInfoRequest(input *DescribeNodeInfoInput) (req *request.Request, output *DescribeNodeInfoOutput) {
	op := &request.Operation{
		Name:       opDescribeNodeInfo,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeNodeInfoInput{}
	}

	output = &DescribeNodeInfoOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeNodeInfo API operation for MILVUS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for MILVUS's
// API operation DescribeNodeInfo for usage and error information.
func (c *MILVUS) DescribeNodeInfo(input *DescribeNodeInfoInput) (*DescribeNodeInfoOutput, error) {
	req, out := c.DescribeNodeInfoRequest(input)
	return out, req.Send()
}

// DescribeNodeInfoWithContext is the same as DescribeNodeInfo with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeNodeInfo for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *MILVUS) DescribeNodeInfoWithContext(ctx volcengine.Context, input *DescribeNodeInfoInput, opts ...request.Option) (*DescribeNodeInfoOutput, error) {
	req, out := c.DescribeNodeInfoRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DescribeNodeInfoInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s DescribeNodeInfoInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeNodeInfoInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeNodeInfoInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DescribeNodeInfoInput"}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetInstanceId sets the InstanceId field's value.
func (s *DescribeNodeInfoInput) SetInstanceId(v string) *DescribeNodeInfoInput {
	s.InstanceId = &v
	return s
}

type DescribeNodeInfoOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	NodeInfoList []*NodeInfoListForDescribeNodeInfoOutput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s DescribeNodeInfoOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeNodeInfoOutput) GoString() string {
	return s.String()
}

// SetNodeInfoList sets the NodeInfoList field's value.
func (s *DescribeNodeInfoOutput) SetNodeInfoList(v []*NodeInfoListForDescribeNodeInfoOutput) *DescribeNodeInfoOutput {
	s.NodeInfoList = v
	return s
}

type NodeInfoListForDescribeNodeInfoOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	CreateTime *string `type:"string" json:",omitempty"`

	DisplayName *string `type:"string" json:",omitempty"`

	NodeName *string `type:"string" json:",omitempty"`

	NodeType *string `type:"string" json:",omitempty"`

	Status *string `type:"string" json:",omitempty"`

	TotalCpu *string `type:"string" json:",omitempty"`

	TotalMemInBytes *string `type:"string" json:",omitempty"`

	UpdateTime *string `type:"string" json:",omitempty"`

	UsedCpu *string `type:"string" json:",omitempty"`

	UsedMemInBytes *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s NodeInfoListForDescribeNodeInfoOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s NodeInfoListForDescribeNodeInfoOutput) GoString() string {
	return s.String()
}

// SetCreateTime sets the CreateTime field's value.
func (s *NodeInfoListForDescribeNodeInfoOutput) SetCreateTime(v string) *NodeInfoListForDescribeNodeInfoOutput {
	s.CreateTime = &v
	return s
}

// SetDisplayName sets the DisplayName field's value.
func (s *NodeInfoListForDescribeNodeInfoOutput) SetDisplayName(v string) *NodeInfoListForDescribeNodeInfoOutput {
	s.DisplayName = &v
	return s
}

// SetNodeName sets the NodeName field's value.
func (s *NodeInfoListForDescribeNodeInfoOutput) SetNodeName(v string) *NodeInfoListForDescribeNodeInfoOutput {
	s.NodeName = &v
	return s
}

// SetNodeType sets the NodeType field's value.
func (s *NodeInfoListForDescribeNodeInfoOutput) SetNodeType(v string) *NodeInfoListForDescribeNodeInfoOutput {
	s.NodeType = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *NodeInfoListForDescribeNodeInfoOutput) SetStatus(v string) *NodeInfoListForDescribeNodeInfoOutput {
	s.Status = &v
	return s
}

// SetTotalCpu sets the TotalCpu field's value.
func (s *NodeInfoListForDescribeNodeInfoOutput) SetTotalCpu(v string) *NodeInfoListForDescribeNodeInfoOutput {
	s.TotalCpu = &v
	return s
}

// SetTotalMemInBytes sets the TotalMemInBytes field's value.
func (s *NodeInfoListForDescribeNodeInfoOutput) SetTotalMemInBytes(v string) *NodeInfoListForDescribeNodeInfoOutput {
	s.TotalMemInBytes = &v
	return s
}

// SetUpdateTime sets the UpdateTime field's value.
func (s *NodeInfoListForDescribeNodeInfoOutput) SetUpdateTime(v string) *NodeInfoListForDescribeNodeInfoOutput {
	s.UpdateTime = &v
	return s
}

// SetUsedCpu sets the UsedCpu field's value.
func (s *NodeInfoListForDescribeNodeInfoOutput) SetUsedCpu(v string) *NodeInfoListForDescribeNodeInfoOutput {
	s.UsedCpu = &v
	return s
}

// SetUsedMemInBytes sets the UsedMemInBytes field's value.
func (s *NodeInfoListForDescribeNodeInfoOutput) SetUsedMemInBytes(v string) *NodeInfoListForDescribeNodeInfoOutput {
	s.UsedMemInBytes = &v
	return s
}
