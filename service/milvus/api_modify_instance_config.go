// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package milvus

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opModifyInstanceConfigCommon = "ModifyInstanceConfig"

// ModifyInstanceConfigCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ModifyInstanceConfigCommon operation. The "output" return
// value will be populated with the ModifyInstanceConfigCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyInstanceConfigCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyInstanceConfigCommon Send returns without error.
//
// See ModifyInstanceConfigCommon for more information on using the ModifyInstanceConfigCommon
// API call, and error handling.
//
//    // Example sending a request using the ModifyInstanceConfigCommonRequest method.
//    req, resp := client.ModifyInstanceConfigCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *MILVUS) ModifyInstanceConfigCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opModifyInstanceConfigCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ModifyInstanceConfigCommon API operation for MILVUS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for MILVUS's
// API operation ModifyInstanceConfigCommon for usage and error information.
func (c *MILVUS) ModifyInstanceConfigCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ModifyInstanceConfigCommonRequest(input)
	return out, req.Send()
}

// ModifyInstanceConfigCommonWithContext is the same as ModifyInstanceConfigCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyInstanceConfigCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *MILVUS) ModifyInstanceConfigCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ModifyInstanceConfigCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyInstanceConfig = "ModifyInstanceConfig"

// ModifyInstanceConfigRequest generates a "volcengine/request.Request" representing the
// client's request for the ModifyInstanceConfig operation. The "output" return
// value will be populated with the ModifyInstanceConfigCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyInstanceConfigCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyInstanceConfigCommon Send returns without error.
//
// See ModifyInstanceConfig for more information on using the ModifyInstanceConfig
// API call, and error handling.
//
//    // Example sending a request using the ModifyInstanceConfigRequest method.
//    req, resp := client.ModifyInstanceConfigRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *MILVUS) ModifyInstanceConfigRequest(input *ModifyInstanceConfigInput) (req *request.Request, output *ModifyInstanceConfigOutput) {
	op := &request.Operation{
		Name:       opModifyInstanceConfig,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ModifyInstanceConfigInput{}
	}

	output = &ModifyInstanceConfigOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ModifyInstanceConfig API operation for MILVUS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for MILVUS's
// API operation ModifyInstanceConfig for usage and error information.
func (c *MILVUS) ModifyInstanceConfig(input *ModifyInstanceConfigInput) (*ModifyInstanceConfigOutput, error) {
	req, out := c.ModifyInstanceConfigRequest(input)
	return out, req.Send()
}

// ModifyInstanceConfigWithContext is the same as ModifyInstanceConfig with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyInstanceConfig for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *MILVUS) ModifyInstanceConfigWithContext(ctx volcengine.Context, input *ModifyInstanceConfigInput, opts ...request.Option) (*ModifyInstanceConfigOutput, error) {
	req, out := c.ModifyInstanceConfigRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ConfigAssignListForModifyInstanceConfigInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	ConfigKey *string `type:"string" json:",omitempty"`

	Value *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ConfigAssignListForModifyInstanceConfigInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ConfigAssignListForModifyInstanceConfigInput) GoString() string {
	return s.String()
}

// SetConfigKey sets the ConfigKey field's value.
func (s *ConfigAssignListForModifyInstanceConfigInput) SetConfigKey(v string) *ConfigAssignListForModifyInstanceConfigInput {
	s.ConfigKey = &v
	return s
}

// SetValue sets the Value field's value.
func (s *ConfigAssignListForModifyInstanceConfigInput) SetValue(v string) *ConfigAssignListForModifyInstanceConfigInput {
	s.Value = &v
	return s
}

type ModifyInstanceConfigInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	ConfigAssignList []*ConfigAssignListForModifyInstanceConfigInput `type:"list" json:",omitempty"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s ModifyInstanceConfigInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyInstanceConfigInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ModifyInstanceConfigInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ModifyInstanceConfigInput"}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetConfigAssignList sets the ConfigAssignList field's value.
func (s *ModifyInstanceConfigInput) SetConfigAssignList(v []*ConfigAssignListForModifyInstanceConfigInput) *ModifyInstanceConfigInput {
	s.ConfigAssignList = v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *ModifyInstanceConfigInput) SetInstanceId(v string) *ModifyInstanceConfigInput {
	s.InstanceId = &v
	return s
}

type ModifyInstanceConfigOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Status *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ModifyInstanceConfigOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyInstanceConfigOutput) GoString() string {
	return s.String()
}

// SetStatus sets the Status field's value.
func (s *ModifyInstanceConfigOutput) SetStatus(v string) *ModifyInstanceConfigOutput {
	s.Status = &v
	return s
}
