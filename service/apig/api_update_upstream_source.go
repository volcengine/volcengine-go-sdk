// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package apig

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opUpdateUpstreamSourceCommon = "UpdateUpstreamSource"

// UpdateUpstreamSourceCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateUpstreamSourceCommon operation. The "output" return
// value will be populated with the UpdateUpstreamSourceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateUpstreamSourceCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateUpstreamSourceCommon Send returns without error.
//
// See UpdateUpstreamSourceCommon for more information on using the UpdateUpstreamSourceCommon
// API call, and error handling.
//
//    // Example sending a request using the UpdateUpstreamSourceCommonRequest method.
//    req, resp := client.UpdateUpstreamSourceCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *APIG) UpdateUpstreamSourceCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opUpdateUpstreamSourceCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateUpstreamSourceCommon API operation for APIG.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for APIG's
// API operation UpdateUpstreamSourceCommon for usage and error information.
func (c *APIG) UpdateUpstreamSourceCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.UpdateUpstreamSourceCommonRequest(input)
	return out, req.Send()
}

// UpdateUpstreamSourceCommonWithContext is the same as UpdateUpstreamSourceCommon with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateUpstreamSourceCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *APIG) UpdateUpstreamSourceCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.UpdateUpstreamSourceCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opUpdateUpstreamSource = "UpdateUpstreamSource"

// UpdateUpstreamSourceRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateUpstreamSource operation. The "output" return
// value will be populated with the UpdateUpstreamSourceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateUpstreamSourceCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateUpstreamSourceCommon Send returns without error.
//
// See UpdateUpstreamSource for more information on using the UpdateUpstreamSource
// API call, and error handling.
//
//    // Example sending a request using the UpdateUpstreamSourceRequest method.
//    req, resp := client.UpdateUpstreamSourceRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *APIG) UpdateUpstreamSourceRequest(input *UpdateUpstreamSourceInput) (req *request.Request, output *UpdateUpstreamSourceOutput) {
	op := &request.Operation{
		Name:       opUpdateUpstreamSource,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UpdateUpstreamSourceInput{}
	}

	output = &UpdateUpstreamSourceOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateUpstreamSource API operation for APIG.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for APIG's
// API operation UpdateUpstreamSource for usage and error information.
func (c *APIG) UpdateUpstreamSource(input *UpdateUpstreamSourceInput) (*UpdateUpstreamSourceOutput, error) {
	req, out := c.UpdateUpstreamSourceRequest(input)
	return out, req.Send()
}

// UpdateUpstreamSourceWithContext is the same as UpdateUpstreamSource with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateUpstreamSource for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *APIG) UpdateUpstreamSourceWithContext(ctx volcengine.Context, input *UpdateUpstreamSourceInput, opts ...request.Option) (*UpdateUpstreamSourceOutput, error) {
	req, out := c.UpdateUpstreamSourceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type IngressSettingsForUpdateUpstreamSourceInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	EnableAllIngressClasses *bool `type:"boolean" json:",omitempty"`

	EnableAllNamespaces *bool `type:"boolean" json:",omitempty"`

	EnableIngress *bool `type:"boolean" json:",omitempty"`

	EnableIngressWithoutIngressClass *bool `type:"boolean" json:",omitempty"`

	IngressClasses []*string `type:"list" json:",omitempty"`

	UpdateStatus *bool `type:"boolean" json:",omitempty"`

	WatchNamespaces []*string `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s IngressSettingsForUpdateUpstreamSourceInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s IngressSettingsForUpdateUpstreamSourceInput) GoString() string {
	return s.String()
}

// SetEnableAllIngressClasses sets the EnableAllIngressClasses field's value.
func (s *IngressSettingsForUpdateUpstreamSourceInput) SetEnableAllIngressClasses(v bool) *IngressSettingsForUpdateUpstreamSourceInput {
	s.EnableAllIngressClasses = &v
	return s
}

// SetEnableAllNamespaces sets the EnableAllNamespaces field's value.
func (s *IngressSettingsForUpdateUpstreamSourceInput) SetEnableAllNamespaces(v bool) *IngressSettingsForUpdateUpstreamSourceInput {
	s.EnableAllNamespaces = &v
	return s
}

// SetEnableIngress sets the EnableIngress field's value.
func (s *IngressSettingsForUpdateUpstreamSourceInput) SetEnableIngress(v bool) *IngressSettingsForUpdateUpstreamSourceInput {
	s.EnableIngress = &v
	return s
}

// SetEnableIngressWithoutIngressClass sets the EnableIngressWithoutIngressClass field's value.
func (s *IngressSettingsForUpdateUpstreamSourceInput) SetEnableIngressWithoutIngressClass(v bool) *IngressSettingsForUpdateUpstreamSourceInput {
	s.EnableIngressWithoutIngressClass = &v
	return s
}

// SetIngressClasses sets the IngressClasses field's value.
func (s *IngressSettingsForUpdateUpstreamSourceInput) SetIngressClasses(v []*string) *IngressSettingsForUpdateUpstreamSourceInput {
	s.IngressClasses = v
	return s
}

// SetUpdateStatus sets the UpdateStatus field's value.
func (s *IngressSettingsForUpdateUpstreamSourceInput) SetUpdateStatus(v bool) *IngressSettingsForUpdateUpstreamSourceInput {
	s.UpdateStatus = &v
	return s
}

// SetWatchNamespaces sets the WatchNamespaces field's value.
func (s *IngressSettingsForUpdateUpstreamSourceInput) SetWatchNamespaces(v []*string) *IngressSettingsForUpdateUpstreamSourceInput {
	s.WatchNamespaces = v
	return s
}

type UpdateUpstreamSourceInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Comments *string `type:"string" json:",omitempty"`

	// Id is a required field
	Id *string `type:"string" json:",omitempty" required:"true"`

	IngressSettings *IngressSettingsForUpdateUpstreamSourceInput `type:"structure" json:",omitempty"`

	WatchNamespaces []*string `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s UpdateUpstreamSourceInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateUpstreamSourceInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UpdateUpstreamSourceInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "UpdateUpstreamSourceInput"}
	if s.Id == nil {
		invalidParams.Add(request.NewErrParamRequired("Id"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetComments sets the Comments field's value.
func (s *UpdateUpstreamSourceInput) SetComments(v string) *UpdateUpstreamSourceInput {
	s.Comments = &v
	return s
}

// SetId sets the Id field's value.
func (s *UpdateUpstreamSourceInput) SetId(v string) *UpdateUpstreamSourceInput {
	s.Id = &v
	return s
}

// SetIngressSettings sets the IngressSettings field's value.
func (s *UpdateUpstreamSourceInput) SetIngressSettings(v *IngressSettingsForUpdateUpstreamSourceInput) *UpdateUpstreamSourceInput {
	s.IngressSettings = v
	return s
}

// SetWatchNamespaces sets the WatchNamespaces field's value.
func (s *UpdateUpstreamSourceInput) SetWatchNamespaces(v []*string) *UpdateUpstreamSourceInput {
	s.WatchNamespaces = v
	return s
}

type UpdateUpstreamSourceOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Id *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s UpdateUpstreamSourceOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateUpstreamSourceOutput) GoString() string {
	return s.String()
}

// SetId sets the Id field's value.
func (s *UpdateUpstreamSourceOutput) SetId(v string) *UpdateUpstreamSourceOutput {
	s.Id = &v
	return s
}
