// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package apig

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opCreatePluginBindingCommon = "CreatePluginBinding"

// CreatePluginBindingCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the CreatePluginBindingCommon operation. The "output" return
// value will be populated with the CreatePluginBindingCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreatePluginBindingCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreatePluginBindingCommon Send returns without error.
//
// See CreatePluginBindingCommon for more information on using the CreatePluginBindingCommon
// API call, and error handling.
//
//    // Example sending a request using the CreatePluginBindingCommonRequest method.
//    req, resp := client.CreatePluginBindingCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *APIG) CreatePluginBindingCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreatePluginBindingCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreatePluginBindingCommon API operation for APIG.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for APIG's
// API operation CreatePluginBindingCommon for usage and error information.
func (c *APIG) CreatePluginBindingCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreatePluginBindingCommonRequest(input)
	return out, req.Send()
}

// CreatePluginBindingCommonWithContext is the same as CreatePluginBindingCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreatePluginBindingCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *APIG) CreatePluginBindingCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreatePluginBindingCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreatePluginBinding = "CreatePluginBinding"

// CreatePluginBindingRequest generates a "volcengine/request.Request" representing the
// client's request for the CreatePluginBinding operation. The "output" return
// value will be populated with the CreatePluginBindingCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreatePluginBindingCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreatePluginBindingCommon Send returns without error.
//
// See CreatePluginBinding for more information on using the CreatePluginBinding
// API call, and error handling.
//
//    // Example sending a request using the CreatePluginBindingRequest method.
//    req, resp := client.CreatePluginBindingRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *APIG) CreatePluginBindingRequest(input *CreatePluginBindingInput) (req *request.Request, output *CreatePluginBindingOutput) {
	op := &request.Operation{
		Name:       opCreatePluginBinding,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreatePluginBindingInput{}
	}

	output = &CreatePluginBindingOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreatePluginBinding API operation for APIG.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for APIG's
// API operation CreatePluginBinding for usage and error information.
func (c *APIG) CreatePluginBinding(input *CreatePluginBindingInput) (*CreatePluginBindingOutput, error) {
	req, out := c.CreatePluginBindingRequest(input)
	return out, req.Send()
}

// CreatePluginBindingWithContext is the same as CreatePluginBinding with the addition of
// the ability to pass a context and additional request options.
//
// See CreatePluginBinding for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *APIG) CreatePluginBindingWithContext(ctx volcengine.Context, input *CreatePluginBindingInput, opts ...request.Option) (*CreatePluginBindingOutput, error) {
	req, out := c.CreatePluginBindingRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type CreatePluginBindingInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Description *string `type:"string" json:",omitempty"`

	// Enable is a required field
	Enable *bool `type:"boolean" json:",omitempty" required:"true"`

	// PluginConfig is a required field
	PluginConfig *string `type:"string" json:",omitempty" required:"true"`

	// PluginName is a required field
	PluginName *string `type:"string" json:",omitempty" required:"true"`

	// Scope is a required field
	Scope *string `type:"string" json:",omitempty" required:"true"`

	// Target is a required field
	Target *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s CreatePluginBindingInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreatePluginBindingInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreatePluginBindingInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CreatePluginBindingInput"}
	if s.Enable == nil {
		invalidParams.Add(request.NewErrParamRequired("Enable"))
	}
	if s.PluginConfig == nil {
		invalidParams.Add(request.NewErrParamRequired("PluginConfig"))
	}
	if s.PluginName == nil {
		invalidParams.Add(request.NewErrParamRequired("PluginName"))
	}
	if s.Scope == nil {
		invalidParams.Add(request.NewErrParamRequired("Scope"))
	}
	if s.Target == nil {
		invalidParams.Add(request.NewErrParamRequired("Target"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDescription sets the Description field's value.
func (s *CreatePluginBindingInput) SetDescription(v string) *CreatePluginBindingInput {
	s.Description = &v
	return s
}

// SetEnable sets the Enable field's value.
func (s *CreatePluginBindingInput) SetEnable(v bool) *CreatePluginBindingInput {
	s.Enable = &v
	return s
}

// SetPluginConfig sets the PluginConfig field's value.
func (s *CreatePluginBindingInput) SetPluginConfig(v string) *CreatePluginBindingInput {
	s.PluginConfig = &v
	return s
}

// SetPluginName sets the PluginName field's value.
func (s *CreatePluginBindingInput) SetPluginName(v string) *CreatePluginBindingInput {
	s.PluginName = &v
	return s
}

// SetScope sets the Scope field's value.
func (s *CreatePluginBindingInput) SetScope(v string) *CreatePluginBindingInput {
	s.Scope = &v
	return s
}

// SetTarget sets the Target field's value.
func (s *CreatePluginBindingInput) SetTarget(v string) *CreatePluginBindingInput {
	s.Target = &v
	return s
}

type CreatePluginBindingOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Id *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s CreatePluginBindingOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreatePluginBindingOutput) GoString() string {
	return s.String()
}

// SetId sets the Id field's value.
func (s *CreatePluginBindingOutput) SetId(v string) *CreatePluginBindingOutput {
	s.Id = &v
	return s
}
