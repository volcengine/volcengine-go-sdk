// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package apig

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opUpdateUpstreamVersionCommon = "UpdateUpstreamVersion"

// UpdateUpstreamVersionCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateUpstreamVersionCommon operation. The "output" return
// value will be populated with the UpdateUpstreamVersionCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateUpstreamVersionCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateUpstreamVersionCommon Send returns without error.
//
// See UpdateUpstreamVersionCommon for more information on using the UpdateUpstreamVersionCommon
// API call, and error handling.
//
//    // Example sending a request using the UpdateUpstreamVersionCommonRequest method.
//    req, resp := client.UpdateUpstreamVersionCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *APIG) UpdateUpstreamVersionCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opUpdateUpstreamVersionCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateUpstreamVersionCommon API operation for APIG.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for APIG's
// API operation UpdateUpstreamVersionCommon for usage and error information.
func (c *APIG) UpdateUpstreamVersionCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.UpdateUpstreamVersionCommonRequest(input)
	return out, req.Send()
}

// UpdateUpstreamVersionCommonWithContext is the same as UpdateUpstreamVersionCommon with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateUpstreamVersionCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *APIG) UpdateUpstreamVersionCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.UpdateUpstreamVersionCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opUpdateUpstreamVersion = "UpdateUpstreamVersion"

// UpdateUpstreamVersionRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateUpstreamVersion operation. The "output" return
// value will be populated with the UpdateUpstreamVersionCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateUpstreamVersionCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateUpstreamVersionCommon Send returns without error.
//
// See UpdateUpstreamVersion for more information on using the UpdateUpstreamVersion
// API call, and error handling.
//
//    // Example sending a request using the UpdateUpstreamVersionRequest method.
//    req, resp := client.UpdateUpstreamVersionRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *APIG) UpdateUpstreamVersionRequest(input *UpdateUpstreamVersionInput) (req *request.Request, output *UpdateUpstreamVersionOutput) {
	op := &request.Operation{
		Name:       opUpdateUpstreamVersion,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UpdateUpstreamVersionInput{}
	}

	output = &UpdateUpstreamVersionOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateUpstreamVersion API operation for APIG.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for APIG's
// API operation UpdateUpstreamVersion for usage and error information.
func (c *APIG) UpdateUpstreamVersion(input *UpdateUpstreamVersionInput) (*UpdateUpstreamVersionOutput, error) {
	req, out := c.UpdateUpstreamVersionRequest(input)
	return out, req.Send()
}

// UpdateUpstreamVersionWithContext is the same as UpdateUpstreamVersion with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateUpstreamVersion for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *APIG) UpdateUpstreamVersionWithContext(ctx volcengine.Context, input *UpdateUpstreamVersionInput, opts ...request.Option) (*UpdateUpstreamVersionOutput, error) {
	req, out := c.UpdateUpstreamVersionRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type LabelForUpdateUpstreamVersionInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Key *string `type:"string" json:",omitempty"`

	Value *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s LabelForUpdateUpstreamVersionInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s LabelForUpdateUpstreamVersionInput) GoString() string {
	return s.String()
}

// SetKey sets the Key field's value.
func (s *LabelForUpdateUpstreamVersionInput) SetKey(v string) *LabelForUpdateUpstreamVersionInput {
	s.Key = &v
	return s
}

// SetValue sets the Value field's value.
func (s *LabelForUpdateUpstreamVersionInput) SetValue(v string) *LabelForUpdateUpstreamVersionInput {
	s.Value = &v
	return s
}

type UpdateUpstreamVersionInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// UpstreamId is a required field
	UpstreamId *string `type:"string" json:",omitempty" required:"true"`

	UpstreamVersion *UpstreamVersionForUpdateUpstreamVersionInput `type:"structure" json:",omitempty"`
}

// String returns the string representation
func (s UpdateUpstreamVersionInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateUpstreamVersionInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UpdateUpstreamVersionInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "UpdateUpstreamVersionInput"}
	if s.UpstreamId == nil {
		invalidParams.Add(request.NewErrParamRequired("UpstreamId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetUpstreamId sets the UpstreamId field's value.
func (s *UpdateUpstreamVersionInput) SetUpstreamId(v string) *UpdateUpstreamVersionInput {
	s.UpstreamId = &v
	return s
}

// SetUpstreamVersion sets the UpstreamVersion field's value.
func (s *UpdateUpstreamVersionInput) SetUpstreamVersion(v *UpstreamVersionForUpdateUpstreamVersionInput) *UpdateUpstreamVersionInput {
	s.UpstreamVersion = v
	return s
}

type UpdateUpstreamVersionOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Name *string `type:"string" json:",omitempty"`

	UpstreamId *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s UpdateUpstreamVersionOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateUpstreamVersionOutput) GoString() string {
	return s.String()
}

// SetName sets the Name field's value.
func (s *UpdateUpstreamVersionOutput) SetName(v string) *UpdateUpstreamVersionOutput {
	s.Name = &v
	return s
}

// SetUpstreamId sets the UpstreamId field's value.
func (s *UpdateUpstreamVersionOutput) SetUpstreamId(v string) *UpdateUpstreamVersionOutput {
	s.UpstreamId = &v
	return s
}

type UpstreamVersionForUpdateUpstreamVersionInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Labels []*LabelForUpdateUpstreamVersionInput `type:"list" json:",omitempty"`

	Name *string `type:"string" json:",omitempty"`

	UpdateTime *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s UpstreamVersionForUpdateUpstreamVersionInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpstreamVersionForUpdateUpstreamVersionInput) GoString() string {
	return s.String()
}

// SetLabels sets the Labels field's value.
func (s *UpstreamVersionForUpdateUpstreamVersionInput) SetLabels(v []*LabelForUpdateUpstreamVersionInput) *UpstreamVersionForUpdateUpstreamVersionInput {
	s.Labels = v
	return s
}

// SetName sets the Name field's value.
func (s *UpstreamVersionForUpdateUpstreamVersionInput) SetName(v string) *UpstreamVersionForUpdateUpstreamVersionInput {
	s.Name = &v
	return s
}

// SetUpdateTime sets the UpdateTime field's value.
func (s *UpstreamVersionForUpdateUpstreamVersionInput) SetUpdateTime(v string) *UpstreamVersionForUpdateUpstreamVersionInput {
	s.UpdateTime = &v
	return s
}
