// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package apig

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opAttachGatewayLBCommon = "AttachGatewayLB"

// AttachGatewayLBCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the AttachGatewayLBCommon operation. The "output" return
// value will be populated with the AttachGatewayLBCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned AttachGatewayLBCommon Request to send the API call to the service.
// the "output" return value is not valid until after AttachGatewayLBCommon Send returns without error.
//
// See AttachGatewayLBCommon for more information on using the AttachGatewayLBCommon
// API call, and error handling.
//
//    // Example sending a request using the AttachGatewayLBCommonRequest method.
//    req, resp := client.AttachGatewayLBCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *APIG) AttachGatewayLBCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opAttachGatewayLBCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// AttachGatewayLBCommon API operation for APIG.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for APIG's
// API operation AttachGatewayLBCommon for usage and error information.
func (c *APIG) AttachGatewayLBCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.AttachGatewayLBCommonRequest(input)
	return out, req.Send()
}

// AttachGatewayLBCommonWithContext is the same as AttachGatewayLBCommon with the addition of
// the ability to pass a context and additional request options.
//
// See AttachGatewayLBCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *APIG) AttachGatewayLBCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.AttachGatewayLBCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opAttachGatewayLB = "AttachGatewayLB"

// AttachGatewayLBRequest generates a "volcengine/request.Request" representing the
// client's request for the AttachGatewayLB operation. The "output" return
// value will be populated with the AttachGatewayLBCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned AttachGatewayLBCommon Request to send the API call to the service.
// the "output" return value is not valid until after AttachGatewayLBCommon Send returns without error.
//
// See AttachGatewayLB for more information on using the AttachGatewayLB
// API call, and error handling.
//
//    // Example sending a request using the AttachGatewayLBRequest method.
//    req, resp := client.AttachGatewayLBRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *APIG) AttachGatewayLBRequest(input *AttachGatewayLBInput) (req *request.Request, output *AttachGatewayLBOutput) {
	op := &request.Operation{
		Name:       opAttachGatewayLB,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &AttachGatewayLBInput{}
	}

	output = &AttachGatewayLBOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// AttachGatewayLB API operation for APIG.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for APIG's
// API operation AttachGatewayLB for usage and error information.
func (c *APIG) AttachGatewayLB(input *AttachGatewayLBInput) (*AttachGatewayLBOutput, error) {
	req, out := c.AttachGatewayLBRequest(input)
	return out, req.Send()
}

// AttachGatewayLBWithContext is the same as AttachGatewayLB with the addition of
// the ability to pass a context and additional request options.
//
// See AttachGatewayLB for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *APIG) AttachGatewayLBWithContext(ctx volcengine.Context, input *AttachGatewayLBInput, opts ...request.Option) (*AttachGatewayLBOutput, error) {
	req, out := c.AttachGatewayLBRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type AttachGatewayLBInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// GatewayId is a required field
	GatewayId *string `type:"string" json:",omitempty" required:"true"`

	ImportedCLBSpec *ImportedCLBSpecForAttachGatewayLBInput `type:"structure" json:",omitempty"`
}

// String returns the string representation
func (s AttachGatewayLBInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s AttachGatewayLBInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *AttachGatewayLBInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "AttachGatewayLBInput"}
	if s.GatewayId == nil {
		invalidParams.Add(request.NewErrParamRequired("GatewayId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetGatewayId sets the GatewayId field's value.
func (s *AttachGatewayLBInput) SetGatewayId(v string) *AttachGatewayLBInput {
	s.GatewayId = &v
	return s
}

// SetImportedCLBSpec sets the ImportedCLBSpec field's value.
func (s *AttachGatewayLBInput) SetImportedCLBSpec(v *ImportedCLBSpecForAttachGatewayLBInput) *AttachGatewayLBInput {
	s.ImportedCLBSpec = v
	return s
}

type AttachGatewayLBOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Id *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s AttachGatewayLBOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s AttachGatewayLBOutput) GoString() string {
	return s.String()
}

// SetId sets the Id field's value.
func (s *AttachGatewayLBOutput) SetId(v string) *AttachGatewayLBOutput {
	s.Id = &v
	return s
}

type ImportedCLBSpecForAttachGatewayLBInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Id *string `type:"string" json:",omitempty"`

	Scheduler *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ImportedCLBSpecForAttachGatewayLBInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ImportedCLBSpecForAttachGatewayLBInput) GoString() string {
	return s.String()
}

// SetId sets the Id field's value.
func (s *ImportedCLBSpecForAttachGatewayLBInput) SetId(v string) *ImportedCLBSpecForAttachGatewayLBInput {
	s.Id = &v
	return s
}

// SetScheduler sets the Scheduler field's value.
func (s *ImportedCLBSpecForAttachGatewayLBInput) SetScheduler(v string) *ImportedCLBSpecForAttachGatewayLBInput {
	s.Scheduler = &v
	return s
}
