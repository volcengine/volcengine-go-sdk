// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package apig

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opGetConsumerCommon = "GetConsumer"

// GetConsumerCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the GetConsumerCommon operation. The "output" return
// value will be populated with the GetConsumerCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetConsumerCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetConsumerCommon Send returns without error.
//
// See GetConsumerCommon for more information on using the GetConsumerCommon
// API call, and error handling.
//
//    // Example sending a request using the GetConsumerCommonRequest method.
//    req, resp := client.GetConsumerCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *APIG) GetConsumerCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opGetConsumerCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetConsumerCommon API operation for APIG.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for APIG's
// API operation GetConsumerCommon for usage and error information.
func (c *APIG) GetConsumerCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.GetConsumerCommonRequest(input)
	return out, req.Send()
}

// GetConsumerCommonWithContext is the same as GetConsumerCommon with the addition of
// the ability to pass a context and additional request options.
//
// See GetConsumerCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *APIG) GetConsumerCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.GetConsumerCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opGetConsumer = "GetConsumer"

// GetConsumerRequest generates a "volcengine/request.Request" representing the
// client's request for the GetConsumer operation. The "output" return
// value will be populated with the GetConsumerCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetConsumerCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetConsumerCommon Send returns without error.
//
// See GetConsumer for more information on using the GetConsumer
// API call, and error handling.
//
//    // Example sending a request using the GetConsumerRequest method.
//    req, resp := client.GetConsumerRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *APIG) GetConsumerRequest(input *GetConsumerInput) (req *request.Request, output *GetConsumerOutput) {
	op := &request.Operation{
		Name:       opGetConsumer,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &GetConsumerInput{}
	}

	output = &GetConsumerOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetConsumer API operation for APIG.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for APIG's
// API operation GetConsumer for usage and error information.
func (c *APIG) GetConsumer(input *GetConsumerInput) (*GetConsumerOutput, error) {
	req, out := c.GetConsumerRequest(input)
	return out, req.Send()
}

// GetConsumerWithContext is the same as GetConsumer with the addition of
// the ability to pass a context and additional request options.
//
// See GetConsumer for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *APIG) GetConsumerWithContext(ctx volcengine.Context, input *GetConsumerInput, opts ...request.Option) (*GetConsumerOutput, error) {
	req, out := c.GetConsumerRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ConsumerForGetConsumerOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Comments *string `type:"string" json:",omitempty"`

	CreateTime *string `type:"string" json:",omitempty"`

	GatewayId *string `type:"string" json:",omitempty"`

	GatewayName *string `type:"string" json:",omitempty"`

	Id *string `type:"string" json:",omitempty"`

	Name *string `type:"string" json:",omitempty"`

	UpdateTime *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ConsumerForGetConsumerOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ConsumerForGetConsumerOutput) GoString() string {
	return s.String()
}

// SetComments sets the Comments field's value.
func (s *ConsumerForGetConsumerOutput) SetComments(v string) *ConsumerForGetConsumerOutput {
	s.Comments = &v
	return s
}

// SetCreateTime sets the CreateTime field's value.
func (s *ConsumerForGetConsumerOutput) SetCreateTime(v string) *ConsumerForGetConsumerOutput {
	s.CreateTime = &v
	return s
}

// SetGatewayId sets the GatewayId field's value.
func (s *ConsumerForGetConsumerOutput) SetGatewayId(v string) *ConsumerForGetConsumerOutput {
	s.GatewayId = &v
	return s
}

// SetGatewayName sets the GatewayName field's value.
func (s *ConsumerForGetConsumerOutput) SetGatewayName(v string) *ConsumerForGetConsumerOutput {
	s.GatewayName = &v
	return s
}

// SetId sets the Id field's value.
func (s *ConsumerForGetConsumerOutput) SetId(v string) *ConsumerForGetConsumerOutput {
	s.Id = &v
	return s
}

// SetName sets the Name field's value.
func (s *ConsumerForGetConsumerOutput) SetName(v string) *ConsumerForGetConsumerOutput {
	s.Name = &v
	return s
}

// SetUpdateTime sets the UpdateTime field's value.
func (s *ConsumerForGetConsumerOutput) SetUpdateTime(v string) *ConsumerForGetConsumerOutput {
	s.UpdateTime = &v
	return s
}

type GetConsumerInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// Id is a required field
	Id *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s GetConsumerInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetConsumerInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *GetConsumerInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "GetConsumerInput"}
	if s.Id == nil {
		invalidParams.Add(request.NewErrParamRequired("Id"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetId sets the Id field's value.
func (s *GetConsumerInput) SetId(v string) *GetConsumerInput {
	s.Id = &v
	return s
}

type GetConsumerOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Consumer *ConsumerForGetConsumerOutput `type:"structure" json:",omitempty"`
}

// String returns the string representation
func (s GetConsumerOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetConsumerOutput) GoString() string {
	return s.String()
}

// SetConsumer sets the Consumer field's value.
func (s *GetConsumerOutput) SetConsumer(v *ConsumerForGetConsumerOutput) *GetConsumerOutput {
	s.Consumer = v
	return s
}
