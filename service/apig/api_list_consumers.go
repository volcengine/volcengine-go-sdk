// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package apig

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opListConsumersCommon = "ListConsumers"

// ListConsumersCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ListConsumersCommon operation. The "output" return
// value will be populated with the ListConsumersCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListConsumersCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListConsumersCommon Send returns without error.
//
// See ListConsumersCommon for more information on using the ListConsumersCommon
// API call, and error handling.
//
//    // Example sending a request using the ListConsumersCommonRequest method.
//    req, resp := client.ListConsumersCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *APIG) ListConsumersCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opListConsumersCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListConsumersCommon API operation for APIG.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for APIG's
// API operation ListConsumersCommon for usage and error information.
func (c *APIG) ListConsumersCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ListConsumersCommonRequest(input)
	return out, req.Send()
}

// ListConsumersCommonWithContext is the same as ListConsumersCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ListConsumersCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *APIG) ListConsumersCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ListConsumersCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListConsumers = "ListConsumers"

// ListConsumersRequest generates a "volcengine/request.Request" representing the
// client's request for the ListConsumers operation. The "output" return
// value will be populated with the ListConsumersCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListConsumersCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListConsumersCommon Send returns without error.
//
// See ListConsumers for more information on using the ListConsumers
// API call, and error handling.
//
//    // Example sending a request using the ListConsumersRequest method.
//    req, resp := client.ListConsumersRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *APIG) ListConsumersRequest(input *ListConsumersInput) (req *request.Request, output *ListConsumersOutput) {
	op := &request.Operation{
		Name:       opListConsumers,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListConsumersInput{}
	}

	output = &ListConsumersOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListConsumers API operation for APIG.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for APIG's
// API operation ListConsumers for usage and error information.
func (c *APIG) ListConsumers(input *ListConsumersInput) (*ListConsumersOutput, error) {
	req, out := c.ListConsumersRequest(input)
	return out, req.Send()
}

// ListConsumersWithContext is the same as ListConsumers with the addition of
// the ability to pass a context and additional request options.
//
// See ListConsumers for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *APIG) ListConsumersWithContext(ctx volcengine.Context, input *ListConsumersInput, opts ...request.Option) (*ListConsumersOutput, error) {
	req, out := c.ListConsumersRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type FilterForListConsumersInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	GatewayId *string `type:"string" json:",omitempty"`

	Name *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s FilterForListConsumersInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s FilterForListConsumersInput) GoString() string {
	return s.String()
}

// SetGatewayId sets the GatewayId field's value.
func (s *FilterForListConsumersInput) SetGatewayId(v string) *FilterForListConsumersInput {
	s.GatewayId = &v
	return s
}

// SetName sets the Name field's value.
func (s *FilterForListConsumersInput) SetName(v string) *FilterForListConsumersInput {
	s.Name = &v
	return s
}

type ItemForListConsumersOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Comments *string `type:"string" json:",omitempty"`

	CreateTime *string `type:"string" json:",omitempty"`

	GatewayId *string `type:"string" json:",omitempty"`

	GatewayName *string `type:"string" json:",omitempty"`

	Id *string `type:"string" json:",omitempty"`

	Name *string `type:"string" json:",omitempty"`

	UpdateTime *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ItemForListConsumersOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ItemForListConsumersOutput) GoString() string {
	return s.String()
}

// SetComments sets the Comments field's value.
func (s *ItemForListConsumersOutput) SetComments(v string) *ItemForListConsumersOutput {
	s.Comments = &v
	return s
}

// SetCreateTime sets the CreateTime field's value.
func (s *ItemForListConsumersOutput) SetCreateTime(v string) *ItemForListConsumersOutput {
	s.CreateTime = &v
	return s
}

// SetGatewayId sets the GatewayId field's value.
func (s *ItemForListConsumersOutput) SetGatewayId(v string) *ItemForListConsumersOutput {
	s.GatewayId = &v
	return s
}

// SetGatewayName sets the GatewayName field's value.
func (s *ItemForListConsumersOutput) SetGatewayName(v string) *ItemForListConsumersOutput {
	s.GatewayName = &v
	return s
}

// SetId sets the Id field's value.
func (s *ItemForListConsumersOutput) SetId(v string) *ItemForListConsumersOutput {
	s.Id = &v
	return s
}

// SetName sets the Name field's value.
func (s *ItemForListConsumersOutput) SetName(v string) *ItemForListConsumersOutput {
	s.Name = &v
	return s
}

// SetUpdateTime sets the UpdateTime field's value.
func (s *ItemForListConsumersOutput) SetUpdateTime(v string) *ItemForListConsumersOutput {
	s.UpdateTime = &v
	return s
}

type ListConsumersInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Filter *FilterForListConsumersInput `type:"structure" json:",omitempty"`

	PageNumber *int64 `type:"int64" json:",omitempty"`

	PageSize *int64 `type:"int64" json:",omitempty"`
}

// String returns the string representation
func (s ListConsumersInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListConsumersInput) GoString() string {
	return s.String()
}

// SetFilter sets the Filter field's value.
func (s *ListConsumersInput) SetFilter(v *FilterForListConsumersInput) *ListConsumersInput {
	s.Filter = v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *ListConsumersInput) SetPageNumber(v int64) *ListConsumersInput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *ListConsumersInput) SetPageSize(v int64) *ListConsumersInput {
	s.PageSize = &v
	return s
}

type ListConsumersOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Items []*ItemForListConsumersOutput `type:"list" json:",omitempty"`

	Total *int64 `type:"int64" json:",omitempty"`
}

// String returns the string representation
func (s ListConsumersOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListConsumersOutput) GoString() string {
	return s.String()
}

// SetItems sets the Items field's value.
func (s *ListConsumersOutput) SetItems(v []*ItemForListConsumersOutput) *ListConsumersOutput {
	s.Items = v
	return s
}

// SetTotal sets the Total field's value.
func (s *ListConsumersOutput) SetTotal(v int64) *ListConsumersOutput {
	s.Total = &v
	return s
}
