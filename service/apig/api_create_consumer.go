// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package apig

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opCreateConsumerCommon = "CreateConsumer"

// CreateConsumerCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateConsumerCommon operation. The "output" return
// value will be populated with the CreateConsumerCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateConsumerCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateConsumerCommon Send returns without error.
//
// See CreateConsumerCommon for more information on using the CreateConsumerCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateConsumerCommonRequest method.
//    req, resp := client.CreateConsumerCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *APIG) CreateConsumerCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateConsumerCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateConsumerCommon API operation for APIG.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for APIG's
// API operation CreateConsumerCommon for usage and error information.
func (c *APIG) CreateConsumerCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateConsumerCommonRequest(input)
	return out, req.Send()
}

// CreateConsumerCommonWithContext is the same as CreateConsumerCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateConsumerCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *APIG) CreateConsumerCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateConsumerCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateConsumer = "CreateConsumer"

// CreateConsumerRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateConsumer operation. The "output" return
// value will be populated with the CreateConsumerCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateConsumerCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateConsumerCommon Send returns without error.
//
// See CreateConsumer for more information on using the CreateConsumer
// API call, and error handling.
//
//    // Example sending a request using the CreateConsumerRequest method.
//    req, resp := client.CreateConsumerRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *APIG) CreateConsumerRequest(input *CreateConsumerInput) (req *request.Request, output *CreateConsumerOutput) {
	op := &request.Operation{
		Name:       opCreateConsumer,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateConsumerInput{}
	}

	output = &CreateConsumerOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateConsumer API operation for APIG.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for APIG's
// API operation CreateConsumer for usage and error information.
func (c *APIG) CreateConsumer(input *CreateConsumerInput) (*CreateConsumerOutput, error) {
	req, out := c.CreateConsumerRequest(input)
	return out, req.Send()
}

// CreateConsumerWithContext is the same as CreateConsumer with the addition of
// the ability to pass a context and additional request options.
//
// See CreateConsumer for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *APIG) CreateConsumerWithContext(ctx volcengine.Context, input *CreateConsumerInput, opts ...request.Option) (*CreateConsumerOutput, error) {
	req, out := c.CreateConsumerRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type CreateConsumerInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Comments *string `type:"string" json:",omitempty"`

	// GatewayId is a required field
	GatewayId *string `type:"string" json:",omitempty" required:"true"`

	// Name is a required field
	Name *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s CreateConsumerInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateConsumerInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateConsumerInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CreateConsumerInput"}
	if s.GatewayId == nil {
		invalidParams.Add(request.NewErrParamRequired("GatewayId"))
	}
	if s.Name == nil {
		invalidParams.Add(request.NewErrParamRequired("Name"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetComments sets the Comments field's value.
func (s *CreateConsumerInput) SetComments(v string) *CreateConsumerInput {
	s.Comments = &v
	return s
}

// SetGatewayId sets the GatewayId field's value.
func (s *CreateConsumerInput) SetGatewayId(v string) *CreateConsumerInput {
	s.GatewayId = &v
	return s
}

// SetName sets the Name field's value.
func (s *CreateConsumerInput) SetName(v string) *CreateConsumerInput {
	s.Name = &v
	return s
}

type CreateConsumerOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Id *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s CreateConsumerOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateConsumerOutput) GoString() string {
	return s.String()
}

// SetId sets the Id field's value.
func (s *CreateConsumerOutput) SetId(v string) *CreateConsumerOutput {
	s.Id = &v
	return s
}
