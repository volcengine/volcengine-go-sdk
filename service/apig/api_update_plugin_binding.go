// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package apig

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opUpdatePluginBindingCommon = "UpdatePluginBinding"

// UpdatePluginBindingCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdatePluginBindingCommon operation. The "output" return
// value will be populated with the UpdatePluginBindingCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdatePluginBindingCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdatePluginBindingCommon Send returns without error.
//
// See UpdatePluginBindingCommon for more information on using the UpdatePluginBindingCommon
// API call, and error handling.
//
//    // Example sending a request using the UpdatePluginBindingCommonRequest method.
//    req, resp := client.UpdatePluginBindingCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *APIG) UpdatePluginBindingCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opUpdatePluginBindingCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdatePluginBindingCommon API operation for APIG.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for APIG's
// API operation UpdatePluginBindingCommon for usage and error information.
func (c *APIG) UpdatePluginBindingCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.UpdatePluginBindingCommonRequest(input)
	return out, req.Send()
}

// UpdatePluginBindingCommonWithContext is the same as UpdatePluginBindingCommon with the addition of
// the ability to pass a context and additional request options.
//
// See UpdatePluginBindingCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *APIG) UpdatePluginBindingCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.UpdatePluginBindingCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opUpdatePluginBinding = "UpdatePluginBinding"

// UpdatePluginBindingRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdatePluginBinding operation. The "output" return
// value will be populated with the UpdatePluginBindingCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdatePluginBindingCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdatePluginBindingCommon Send returns without error.
//
// See UpdatePluginBinding for more information on using the UpdatePluginBinding
// API call, and error handling.
//
//    // Example sending a request using the UpdatePluginBindingRequest method.
//    req, resp := client.UpdatePluginBindingRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *APIG) UpdatePluginBindingRequest(input *UpdatePluginBindingInput) (req *request.Request, output *UpdatePluginBindingOutput) {
	op := &request.Operation{
		Name:       opUpdatePluginBinding,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UpdatePluginBindingInput{}
	}

	output = &UpdatePluginBindingOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdatePluginBinding API operation for APIG.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for APIG's
// API operation UpdatePluginBinding for usage and error information.
func (c *APIG) UpdatePluginBinding(input *UpdatePluginBindingInput) (*UpdatePluginBindingOutput, error) {
	req, out := c.UpdatePluginBindingRequest(input)
	return out, req.Send()
}

// UpdatePluginBindingWithContext is the same as UpdatePluginBinding with the addition of
// the ability to pass a context and additional request options.
//
// See UpdatePluginBinding for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *APIG) UpdatePluginBindingWithContext(ctx volcengine.Context, input *UpdatePluginBindingInput, opts ...request.Option) (*UpdatePluginBindingOutput, error) {
	req, out := c.UpdatePluginBindingRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type UpdatePluginBindingInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Description *string `type:"string" json:",omitempty"`

	// Enable is a required field
	Enable *bool `type:"boolean" json:",omitempty" required:"true"`

	// Id is a required field
	Id *string `type:"string" json:",omitempty" required:"true"`

	// PluginConfig is a required field
	PluginConfig *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s UpdatePluginBindingInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdatePluginBindingInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UpdatePluginBindingInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "UpdatePluginBindingInput"}
	if s.Enable == nil {
		invalidParams.Add(request.NewErrParamRequired("Enable"))
	}
	if s.Id == nil {
		invalidParams.Add(request.NewErrParamRequired("Id"))
	}
	if s.PluginConfig == nil {
		invalidParams.Add(request.NewErrParamRequired("PluginConfig"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDescription sets the Description field's value.
func (s *UpdatePluginBindingInput) SetDescription(v string) *UpdatePluginBindingInput {
	s.Description = &v
	return s
}

// SetEnable sets the Enable field's value.
func (s *UpdatePluginBindingInput) SetEnable(v bool) *UpdatePluginBindingInput {
	s.Enable = &v
	return s
}

// SetId sets the Id field's value.
func (s *UpdatePluginBindingInput) SetId(v string) *UpdatePluginBindingInput {
	s.Id = &v
	return s
}

// SetPluginConfig sets the PluginConfig field's value.
func (s *UpdatePluginBindingInput) SetPluginConfig(v string) *UpdatePluginBindingInput {
	s.PluginConfig = &v
	return s
}

type UpdatePluginBindingOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Id *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s UpdatePluginBindingOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdatePluginBindingOutput) GoString() string {
	return s.String()
}

// SetId sets the Id field's value.
func (s *UpdatePluginBindingOutput) SetId(v string) *UpdatePluginBindingOutput {
	s.Id = &v
	return s
}
