// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package apig

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opCreateUpstreamVersionCommon = "CreateUpstreamVersion"

// CreateUpstreamVersionCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateUpstreamVersionCommon operation. The "output" return
// value will be populated with the CreateUpstreamVersionCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateUpstreamVersionCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateUpstreamVersionCommon Send returns without error.
//
// See CreateUpstreamVersionCommon for more information on using the CreateUpstreamVersionCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateUpstreamVersionCommonRequest method.
//    req, resp := client.CreateUpstreamVersionCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *APIG) CreateUpstreamVersionCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateUpstreamVersionCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateUpstreamVersionCommon API operation for APIG.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for APIG's
// API operation CreateUpstreamVersionCommon for usage and error information.
func (c *APIG) CreateUpstreamVersionCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateUpstreamVersionCommonRequest(input)
	return out, req.Send()
}

// CreateUpstreamVersionCommonWithContext is the same as CreateUpstreamVersionCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateUpstreamVersionCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *APIG) CreateUpstreamVersionCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateUpstreamVersionCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateUpstreamVersion = "CreateUpstreamVersion"

// CreateUpstreamVersionRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateUpstreamVersion operation. The "output" return
// value will be populated with the CreateUpstreamVersionCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateUpstreamVersionCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateUpstreamVersionCommon Send returns without error.
//
// See CreateUpstreamVersion for more information on using the CreateUpstreamVersion
// API call, and error handling.
//
//    // Example sending a request using the CreateUpstreamVersionRequest method.
//    req, resp := client.CreateUpstreamVersionRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *APIG) CreateUpstreamVersionRequest(input *CreateUpstreamVersionInput) (req *request.Request, output *CreateUpstreamVersionOutput) {
	op := &request.Operation{
		Name:       opCreateUpstreamVersion,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateUpstreamVersionInput{}
	}

	output = &CreateUpstreamVersionOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateUpstreamVersion API operation for APIG.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for APIG's
// API operation CreateUpstreamVersion for usage and error information.
func (c *APIG) CreateUpstreamVersion(input *CreateUpstreamVersionInput) (*CreateUpstreamVersionOutput, error) {
	req, out := c.CreateUpstreamVersionRequest(input)
	return out, req.Send()
}

// CreateUpstreamVersionWithContext is the same as CreateUpstreamVersion with the addition of
// the ability to pass a context and additional request options.
//
// See CreateUpstreamVersion for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *APIG) CreateUpstreamVersionWithContext(ctx volcengine.Context, input *CreateUpstreamVersionInput, opts ...request.Option) (*CreateUpstreamVersionOutput, error) {
	req, out := c.CreateUpstreamVersionRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type CreateUpstreamVersionInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// UpstreamId is a required field
	UpstreamId *string `type:"string" json:",omitempty" required:"true"`

	UpstreamVersion *UpstreamVersionForCreateUpstreamVersionInput `type:"structure" json:",omitempty"`
}

// String returns the string representation
func (s CreateUpstreamVersionInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateUpstreamVersionInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateUpstreamVersionInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CreateUpstreamVersionInput"}
	if s.UpstreamId == nil {
		invalidParams.Add(request.NewErrParamRequired("UpstreamId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetUpstreamId sets the UpstreamId field's value.
func (s *CreateUpstreamVersionInput) SetUpstreamId(v string) *CreateUpstreamVersionInput {
	s.UpstreamId = &v
	return s
}

// SetUpstreamVersion sets the UpstreamVersion field's value.
func (s *CreateUpstreamVersionInput) SetUpstreamVersion(v *UpstreamVersionForCreateUpstreamVersionInput) *CreateUpstreamVersionInput {
	s.UpstreamVersion = v
	return s
}

type CreateUpstreamVersionOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Name *string `type:"string" json:",omitempty"`

	UpstreamId *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s CreateUpstreamVersionOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateUpstreamVersionOutput) GoString() string {
	return s.String()
}

// SetName sets the Name field's value.
func (s *CreateUpstreamVersionOutput) SetName(v string) *CreateUpstreamVersionOutput {
	s.Name = &v
	return s
}

// SetUpstreamId sets the UpstreamId field's value.
func (s *CreateUpstreamVersionOutput) SetUpstreamId(v string) *CreateUpstreamVersionOutput {
	s.UpstreamId = &v
	return s
}

type LabelForCreateUpstreamVersionInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Key *string `type:"string" json:",omitempty"`

	Value *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s LabelForCreateUpstreamVersionInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s LabelForCreateUpstreamVersionInput) GoString() string {
	return s.String()
}

// SetKey sets the Key field's value.
func (s *LabelForCreateUpstreamVersionInput) SetKey(v string) *LabelForCreateUpstreamVersionInput {
	s.Key = &v
	return s
}

// SetValue sets the Value field's value.
func (s *LabelForCreateUpstreamVersionInput) SetValue(v string) *LabelForCreateUpstreamVersionInput {
	s.Value = &v
	return s
}

type UpstreamVersionForCreateUpstreamVersionInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Labels []*LabelForCreateUpstreamVersionInput `type:"list" json:",omitempty"`

	Name *string `type:"string" json:",omitempty"`

	UpdateTime *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s UpstreamVersionForCreateUpstreamVersionInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpstreamVersionForCreateUpstreamVersionInput) GoString() string {
	return s.String()
}

// SetLabels sets the Labels field's value.
func (s *UpstreamVersionForCreateUpstreamVersionInput) SetLabels(v []*LabelForCreateUpstreamVersionInput) *UpstreamVersionForCreateUpstreamVersionInput {
	s.Labels = v
	return s
}

// SetName sets the Name field's value.
func (s *UpstreamVersionForCreateUpstreamVersionInput) SetName(v string) *UpstreamVersionForCreateUpstreamVersionInput {
	s.Name = &v
	return s
}

// SetUpdateTime sets the UpdateTime field's value.
func (s *UpstreamVersionForCreateUpstreamVersionInput) SetUpdateTime(v string) *UpstreamVersionForCreateUpstreamVersionInput {
	s.UpdateTime = &v
	return s
}
