// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package apig

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDeleteUpstreamVersionCommon = "DeleteUpstreamVersion"

// DeleteUpstreamVersionCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteUpstreamVersionCommon operation. The "output" return
// value will be populated with the DeleteUpstreamVersionCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteUpstreamVersionCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteUpstreamVersionCommon Send returns without error.
//
// See DeleteUpstreamVersionCommon for more information on using the DeleteUpstreamVersionCommon
// API call, and error handling.
//
//    // Example sending a request using the DeleteUpstreamVersionCommonRequest method.
//    req, resp := client.DeleteUpstreamVersionCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *APIG) DeleteUpstreamVersionCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteUpstreamVersionCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DeleteUpstreamVersionCommon API operation for APIG.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for APIG's
// API operation DeleteUpstreamVersionCommon for usage and error information.
func (c *APIG) DeleteUpstreamVersionCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteUpstreamVersionCommonRequest(input)
	return out, req.Send()
}

// DeleteUpstreamVersionCommonWithContext is the same as DeleteUpstreamVersionCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteUpstreamVersionCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *APIG) DeleteUpstreamVersionCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteUpstreamVersionCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteUpstreamVersion = "DeleteUpstreamVersion"

// DeleteUpstreamVersionRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteUpstreamVersion operation. The "output" return
// value will be populated with the DeleteUpstreamVersionCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteUpstreamVersionCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteUpstreamVersionCommon Send returns without error.
//
// See DeleteUpstreamVersion for more information on using the DeleteUpstreamVersion
// API call, and error handling.
//
//    // Example sending a request using the DeleteUpstreamVersionRequest method.
//    req, resp := client.DeleteUpstreamVersionRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *APIG) DeleteUpstreamVersionRequest(input *DeleteUpstreamVersionInput) (req *request.Request, output *DeleteUpstreamVersionOutput) {
	op := &request.Operation{
		Name:       opDeleteUpstreamVersion,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteUpstreamVersionInput{}
	}

	output = &DeleteUpstreamVersionOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DeleteUpstreamVersion API operation for APIG.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for APIG's
// API operation DeleteUpstreamVersion for usage and error information.
func (c *APIG) DeleteUpstreamVersion(input *DeleteUpstreamVersionInput) (*DeleteUpstreamVersionOutput, error) {
	req, out := c.DeleteUpstreamVersionRequest(input)
	return out, req.Send()
}

// DeleteUpstreamVersionWithContext is the same as DeleteUpstreamVersion with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteUpstreamVersion for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *APIG) DeleteUpstreamVersionWithContext(ctx volcengine.Context, input *DeleteUpstreamVersionInput, opts ...request.Option) (*DeleteUpstreamVersionOutput, error) {
	req, out := c.DeleteUpstreamVersionRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DeleteUpstreamVersionInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// UpstreamId is a required field
	UpstreamId *string `type:"string" json:",omitempty" required:"true"`

	// UpstreamVersionName is a required field
	UpstreamVersionName *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s DeleteUpstreamVersionInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteUpstreamVersionInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeleteUpstreamVersionInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DeleteUpstreamVersionInput"}
	if s.UpstreamId == nil {
		invalidParams.Add(request.NewErrParamRequired("UpstreamId"))
	}
	if s.UpstreamVersionName == nil {
		invalidParams.Add(request.NewErrParamRequired("UpstreamVersionName"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetUpstreamId sets the UpstreamId field's value.
func (s *DeleteUpstreamVersionInput) SetUpstreamId(v string) *DeleteUpstreamVersionInput {
	s.UpstreamId = &v
	return s
}

// SetUpstreamVersionName sets the UpstreamVersionName field's value.
func (s *DeleteUpstreamVersionInput) SetUpstreamVersionName(v string) *DeleteUpstreamVersionInput {
	s.UpstreamVersionName = &v
	return s
}

type DeleteUpstreamVersionOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s DeleteUpstreamVersionOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteUpstreamVersionOutput) GoString() string {
	return s.String()
}
