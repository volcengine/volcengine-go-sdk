// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package tag

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opGetTagsCommon = "GetTags"

// GetTagsCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the GetTagsCommon operation. The "output" return
// value will be populated with the GetTagsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetTagsCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetTagsCommon Send returns without error.
//
// See GetTagsCommon for more information on using the GetTagsCommon
// API call, and error handling.
//
//    // Example sending a request using the GetTagsCommonRequest method.
//    req, resp := client.GetTagsCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *TAG) GetTagsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opGetTagsCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// GetTagsCommon API operation for TAG.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for TAG's
// API operation GetTagsCommon for usage and error information.
func (c *TAG) GetTagsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.GetTagsCommonRequest(input)
	return out, req.Send()
}

// GetTagsCommonWithContext is the same as GetTagsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See GetTagsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *TAG) GetTagsCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.GetTagsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opGetTags = "GetTags"

// GetTagsRequest generates a "volcengine/request.Request" representing the
// client's request for the GetTags operation. The "output" return
// value will be populated with the GetTagsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetTagsCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetTagsCommon Send returns without error.
//
// See GetTags for more information on using the GetTags
// API call, and error handling.
//
//    // Example sending a request using the GetTagsRequest method.
//    req, resp := client.GetTagsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *TAG) GetTagsRequest(input *GetTagsInput) (req *request.Request, output *GetTagsOutput) {
	op := &request.Operation{
		Name:       opGetTags,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &GetTagsInput{}
	}

	output = &GetTagsOutput{}
	req = c.newRequest(op, input, output)

	return
}

// GetTags API operation for TAG.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for TAG's
// API operation GetTags for usage and error information.
func (c *TAG) GetTags(input *GetTagsInput) (*GetTagsOutput, error) {
	req, out := c.GetTagsRequest(input)
	return out, req.Send()
}

// GetTagsWithContext is the same as GetTags with the addition of
// the ability to pass a context and additional request options.
//
// See GetTags for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *TAG) GetTagsWithContext(ctx volcengine.Context, input *GetTagsInput, opts ...request.Option) (*GetTagsOutput, error) {
	req, out := c.GetTagsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type GetTagsInput struct {
	_ struct{} `type:"structure"`

	CountResources *bool `type:"boolean"`

	MatchType *string `type:"string" enum:"EnumOfMatchTypeForGetTagsInput"`

	MaxResults *int32 `type:"int32"`

	NextToken *string `type:"string"`

	TagKeys []*string `type:"list"`

	TagType *string `type:"string"`
}

// String returns the string representation
func (s GetTagsInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetTagsInput) GoString() string {
	return s.String()
}

// SetCountResources sets the CountResources field's value.
func (s *GetTagsInput) SetCountResources(v bool) *GetTagsInput {
	s.CountResources = &v
	return s
}

// SetMatchType sets the MatchType field's value.
func (s *GetTagsInput) SetMatchType(v string) *GetTagsInput {
	s.MatchType = &v
	return s
}

// SetMaxResults sets the MaxResults field's value.
func (s *GetTagsInput) SetMaxResults(v int32) *GetTagsInput {
	s.MaxResults = &v
	return s
}

// SetNextToken sets the NextToken field's value.
func (s *GetTagsInput) SetNextToken(v string) *GetTagsInput {
	s.NextToken = &v
	return s
}

// SetTagKeys sets the TagKeys field's value.
func (s *GetTagsInput) SetTagKeys(v []*string) *GetTagsInput {
	s.TagKeys = v
	return s
}

// SetTagType sets the TagType field's value.
func (s *GetTagsInput) SetTagType(v string) *GetTagsInput {
	s.TagType = &v
	return s
}

type GetTagsOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	NextToken *string `type:"string"`

	Tags []*TagForGetTagsOutput `type:"list"`
}

// String returns the string representation
func (s GetTagsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetTagsOutput) GoString() string {
	return s.String()
}

// SetNextToken sets the NextToken field's value.
func (s *GetTagsOutput) SetNextToken(v string) *GetTagsOutput {
	s.NextToken = &v
	return s
}

// SetTags sets the Tags field's value.
func (s *GetTagsOutput) SetTags(v []*TagForGetTagsOutput) *GetTagsOutput {
	s.Tags = v
	return s
}

type TagForGetTagsOutput struct {
	_ struct{} `type:"structure"`

	Key *string `type:"string"`

	ResourcesNum *int32 `type:"int32"`

	Type *string `type:"string"`

	Value *string `type:"string"`
}

// String returns the string representation
func (s TagForGetTagsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s TagForGetTagsOutput) GoString() string {
	return s.String()
}

// SetKey sets the Key field's value.
func (s *TagForGetTagsOutput) SetKey(v string) *TagForGetTagsOutput {
	s.Key = &v
	return s
}

// SetResourcesNum sets the ResourcesNum field's value.
func (s *TagForGetTagsOutput) SetResourcesNum(v int32) *TagForGetTagsOutput {
	s.ResourcesNum = &v
	return s
}

// SetType sets the Type field's value.
func (s *TagForGetTagsOutput) SetType(v string) *TagForGetTagsOutput {
	s.Type = &v
	return s
}

// SetValue sets the Value field's value.
func (s *TagForGetTagsOutput) SetValue(v string) *TagForGetTagsOutput {
	s.Value = &v
	return s
}

const (
	// EnumOfMatchTypeForGetTagsInputPrefix is a EnumOfMatchTypeForGetTagsInput enum value
	EnumOfMatchTypeForGetTagsInputPrefix = "prefix"

	// EnumOfMatchTypeForGetTagsInputEquals is a EnumOfMatchTypeForGetTagsInput enum value
	EnumOfMatchTypeForGetTagsInputEquals = "equals"

	// EnumOfMatchTypeForGetTagsInputContain is a EnumOfMatchTypeForGetTagsInput enum value
	EnumOfMatchTypeForGetTagsInputContain = "contain"
)
