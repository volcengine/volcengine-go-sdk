// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package graph20250815

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opGetGraphTableSchemaStatusCommon = "GetGraphTableSchemaStatus"

// GetGraphTableSchemaStatusCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the GetGraphTableSchemaStatusCommon operation. The "output" return
// value will be populated with the GetGraphTableSchemaStatusCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetGraphTableSchemaStatusCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetGraphTableSchemaStatusCommon Send returns without error.
//
// See GetGraphTableSchemaStatusCommon for more information on using the GetGraphTableSchemaStatusCommon
// API call, and error handling.
//
//    // Example sending a request using the GetGraphTableSchemaStatusCommonRequest method.
//    req, resp := client.GetGraphTableSchemaStatusCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *GRAPH20250815) GetGraphTableSchemaStatusCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opGetGraphTableSchemaStatusCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetGraphTableSchemaStatusCommon API operation for GRAPH20250815.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for GRAPH20250815's
// API operation GetGraphTableSchemaStatusCommon for usage and error information.
func (c *GRAPH20250815) GetGraphTableSchemaStatusCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.GetGraphTableSchemaStatusCommonRequest(input)
	return out, req.Send()
}

// GetGraphTableSchemaStatusCommonWithContext is the same as GetGraphTableSchemaStatusCommon with the addition of
// the ability to pass a context and additional request options.
//
// See GetGraphTableSchemaStatusCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *GRAPH20250815) GetGraphTableSchemaStatusCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.GetGraphTableSchemaStatusCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opGetGraphTableSchemaStatus = "GetGraphTableSchemaStatus"

// GetGraphTableSchemaStatusRequest generates a "volcengine/request.Request" representing the
// client's request for the GetGraphTableSchemaStatus operation. The "output" return
// value will be populated with the GetGraphTableSchemaStatusCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetGraphTableSchemaStatusCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetGraphTableSchemaStatusCommon Send returns without error.
//
// See GetGraphTableSchemaStatus for more information on using the GetGraphTableSchemaStatus
// API call, and error handling.
//
//    // Example sending a request using the GetGraphTableSchemaStatusRequest method.
//    req, resp := client.GetGraphTableSchemaStatusRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *GRAPH20250815) GetGraphTableSchemaStatusRequest(input *GetGraphTableSchemaStatusInput) (req *request.Request, output *GetGraphTableSchemaStatusOutput) {
	op := &request.Operation{
		Name:       opGetGraphTableSchemaStatus,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &GetGraphTableSchemaStatusInput{}
	}

	output = &GetGraphTableSchemaStatusOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetGraphTableSchemaStatus API operation for GRAPH20250815.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for GRAPH20250815's
// API operation GetGraphTableSchemaStatus for usage and error information.
func (c *GRAPH20250815) GetGraphTableSchemaStatus(input *GetGraphTableSchemaStatusInput) (*GetGraphTableSchemaStatusOutput, error) {
	req, out := c.GetGraphTableSchemaStatusRequest(input)
	return out, req.Send()
}

// GetGraphTableSchemaStatusWithContext is the same as GetGraphTableSchemaStatus with the addition of
// the ability to pass a context and additional request options.
//
// See GetGraphTableSchemaStatus for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *GRAPH20250815) GetGraphTableSchemaStatusWithContext(ctx volcengine.Context, input *GetGraphTableSchemaStatusInput, opts ...request.Option) (*GetGraphTableSchemaStatusOutput, error) {
	req, out := c.GetGraphTableSchemaStatusRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type GetGraphTableSchemaStatusInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:",omitempty" required:"true"`

	// TableName is a required field
	TableName *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s GetGraphTableSchemaStatusInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetGraphTableSchemaStatusInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *GetGraphTableSchemaStatusInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "GetGraphTableSchemaStatusInput"}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}
	if s.TableName == nil {
		invalidParams.Add(request.NewErrParamRequired("TableName"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetInstanceId sets the InstanceId field's value.
func (s *GetGraphTableSchemaStatusInput) SetInstanceId(v string) *GetGraphTableSchemaStatusInput {
	s.InstanceId = &v
	return s
}

// SetTableName sets the TableName field's value.
func (s *GetGraphTableSchemaStatusInput) SetTableName(v string) *GetGraphTableSchemaStatusInput {
	s.TableName = &v
	return s
}

type GetGraphTableSchemaStatusOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	LatestSchemaApplied *bool `type:"boolean" json:",omitempty"`
}

// String returns the string representation
func (s GetGraphTableSchemaStatusOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetGraphTableSchemaStatusOutput) GoString() string {
	return s.String()
}

// SetLatestSchemaApplied sets the LatestSchemaApplied field's value.
func (s *GetGraphTableSchemaStatusOutput) SetLatestSchemaApplied(v bool) *GetGraphTableSchemaStatusOutput {
	s.LatestSchemaApplied = &v
	return s
}
