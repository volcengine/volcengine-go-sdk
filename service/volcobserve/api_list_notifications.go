// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package volcobserve

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opListNotificationsCommon = "ListNotifications"

// ListNotificationsCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ListNotificationsCommon operation. The "output" return
// value will be populated with the ListNotificationsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListNotificationsCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListNotificationsCommon Send returns without error.
//
// See ListNotificationsCommon for more information on using the ListNotificationsCommon
// API call, and error handling.
//
//    // Example sending a request using the ListNotificationsCommonRequest method.
//    req, resp := client.ListNotificationsCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VOLCOBSERVE) ListNotificationsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opListNotificationsCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListNotificationsCommon API operation for VOLC_OBSERVE.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VOLC_OBSERVE's
// API operation ListNotificationsCommon for usage and error information.
func (c *VOLCOBSERVE) ListNotificationsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ListNotificationsCommonRequest(input)
	return out, req.Send()
}

// ListNotificationsCommonWithContext is the same as ListNotificationsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ListNotificationsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VOLCOBSERVE) ListNotificationsCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ListNotificationsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListNotifications = "ListNotifications"

// ListNotificationsRequest generates a "volcengine/request.Request" representing the
// client's request for the ListNotifications operation. The "output" return
// value will be populated with the ListNotificationsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListNotificationsCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListNotificationsCommon Send returns without error.
//
// See ListNotifications for more information on using the ListNotifications
// API call, and error handling.
//
//    // Example sending a request using the ListNotificationsRequest method.
//    req, resp := client.ListNotificationsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VOLCOBSERVE) ListNotificationsRequest(input *ListNotificationsInput) (req *request.Request, output *ListNotificationsOutput) {
	op := &request.Operation{
		Name:       opListNotifications,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListNotificationsInput{}
	}

	output = &ListNotificationsOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListNotifications API operation for VOLC_OBSERVE.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VOLC_OBSERVE's
// API operation ListNotifications for usage and error information.
func (c *VOLCOBSERVE) ListNotifications(input *ListNotificationsInput) (*ListNotificationsOutput, error) {
	req, out := c.ListNotificationsRequest(input)
	return out, req.Send()
}

// ListNotificationsWithContext is the same as ListNotifications with the addition of
// the ability to pass a context and additional request options.
//
// See ListNotifications for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VOLCOBSERVE) ListNotificationsWithContext(ctx volcengine.Context, input *ListNotificationsInput, opts ...request.Option) (*ListNotificationsOutput, error) {
	req, out := c.ListNotificationsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DataForListNotificationsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	CreatedAt *string `type:"string" json:",omitempty"`

	EffectEndAt *string `type:"string" json:",omitempty"`

	EffectStartAt *string `type:"string" json:",omitempty"`

	Id *string `type:"string" json:",omitempty"`

	Levels []*string `type:"list" json:",omitempty"`

	Name *string `type:"string" json:",omitempty"`

	Notifications []*NotificationForListNotificationsOutput `type:"list" json:",omitempty"`

	UpdatedAt *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s DataForListNotificationsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DataForListNotificationsOutput) GoString() string {
	return s.String()
}

// SetCreatedAt sets the CreatedAt field's value.
func (s *DataForListNotificationsOutput) SetCreatedAt(v string) *DataForListNotificationsOutput {
	s.CreatedAt = &v
	return s
}

// SetEffectEndAt sets the EffectEndAt field's value.
func (s *DataForListNotificationsOutput) SetEffectEndAt(v string) *DataForListNotificationsOutput {
	s.EffectEndAt = &v
	return s
}

// SetEffectStartAt sets the EffectStartAt field's value.
func (s *DataForListNotificationsOutput) SetEffectStartAt(v string) *DataForListNotificationsOutput {
	s.EffectStartAt = &v
	return s
}

// SetId sets the Id field's value.
func (s *DataForListNotificationsOutput) SetId(v string) *DataForListNotificationsOutput {
	s.Id = &v
	return s
}

// SetLevels sets the Levels field's value.
func (s *DataForListNotificationsOutput) SetLevels(v []*string) *DataForListNotificationsOutput {
	s.Levels = v
	return s
}

// SetName sets the Name field's value.
func (s *DataForListNotificationsOutput) SetName(v string) *DataForListNotificationsOutput {
	s.Name = &v
	return s
}

// SetNotifications sets the Notifications field's value.
func (s *DataForListNotificationsOutput) SetNotifications(v []*NotificationForListNotificationsOutput) *DataForListNotificationsOutput {
	s.Notifications = v
	return s
}

// SetUpdatedAt sets the UpdatedAt field's value.
func (s *DataForListNotificationsOutput) SetUpdatedAt(v string) *DataForListNotificationsOutput {
	s.UpdatedAt = &v
	return s
}

type ListNotificationsInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Ids []*string `type:"list" json:",omitempty"`

	Levels []*string `type:"list" json:",omitempty"`

	Name *string `type:"string" json:",omitempty"`

	PageNumber *int64 `type:"integer" json:",omitempty"`

	PageSize *int64 `type:"integer" json:",omitempty"`

	RuleIds []*string `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s ListNotificationsInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListNotificationsInput) GoString() string {
	return s.String()
}

// SetIds sets the Ids field's value.
func (s *ListNotificationsInput) SetIds(v []*string) *ListNotificationsInput {
	s.Ids = v
	return s
}

// SetLevels sets the Levels field's value.
func (s *ListNotificationsInput) SetLevels(v []*string) *ListNotificationsInput {
	s.Levels = v
	return s
}

// SetName sets the Name field's value.
func (s *ListNotificationsInput) SetName(v string) *ListNotificationsInput {
	s.Name = &v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *ListNotificationsInput) SetPageNumber(v int64) *ListNotificationsInput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *ListNotificationsInput) SetPageSize(v int64) *ListNotificationsInput {
	s.PageSize = &v
	return s
}

// SetRuleIds sets the RuleIds field's value.
func (s *ListNotificationsInput) SetRuleIds(v []*string) *ListNotificationsInput {
	s.RuleIds = v
	return s
}

type ListNotificationsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Data []*DataForListNotificationsOutput `type:"list" json:",omitempty"`

	PageNumber *int64 `type:"integer" json:",omitempty"`

	PageSize *int64 `type:"integer" json:",omitempty"`

	TotalCount *int64 `type:"integer" json:",omitempty"`
}

// String returns the string representation
func (s ListNotificationsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListNotificationsOutput) GoString() string {
	return s.String()
}

// SetData sets the Data field's value.
func (s *ListNotificationsOutput) SetData(v []*DataForListNotificationsOutput) *ListNotificationsOutput {
	s.Data = v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *ListNotificationsOutput) SetPageNumber(v int64) *ListNotificationsOutput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *ListNotificationsOutput) SetPageSize(v int64) *ListNotificationsOutput {
	s.PageSize = &v
	return s
}

// SetTotalCount sets the TotalCount field's value.
func (s *ListNotificationsOutput) SetTotalCount(v int64) *ListNotificationsOutput {
	s.TotalCount = &v
	return s
}

type NotificationForListNotificationsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	AlertMethods []*string `type:"list" json:",omitempty"`

	ContactGroupIds []*string `type:"list" json:",omitempty"`

	Level *string `type:"string" json:",omitempty" enum:"EnumOfLevelForListNotificationsOutput"`

	NotifyTemplates []*NotifyTemplateForListNotificationsOutput `type:"list" json:",omitempty"`

	WebhookIds []*string `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s NotificationForListNotificationsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s NotificationForListNotificationsOutput) GoString() string {
	return s.String()
}

// SetAlertMethods sets the AlertMethods field's value.
func (s *NotificationForListNotificationsOutput) SetAlertMethods(v []*string) *NotificationForListNotificationsOutput {
	s.AlertMethods = v
	return s
}

// SetContactGroupIds sets the ContactGroupIds field's value.
func (s *NotificationForListNotificationsOutput) SetContactGroupIds(v []*string) *NotificationForListNotificationsOutput {
	s.ContactGroupIds = v
	return s
}

// SetLevel sets the Level field's value.
func (s *NotificationForListNotificationsOutput) SetLevel(v string) *NotificationForListNotificationsOutput {
	s.Level = &v
	return s
}

// SetNotifyTemplates sets the NotifyTemplates field's value.
func (s *NotificationForListNotificationsOutput) SetNotifyTemplates(v []*NotifyTemplateForListNotificationsOutput) *NotificationForListNotificationsOutput {
	s.NotifyTemplates = v
	return s
}

// SetWebhookIds sets the WebhookIds field's value.
func (s *NotificationForListNotificationsOutput) SetWebhookIds(v []*string) *NotificationForListNotificationsOutput {
	s.WebhookIds = v
	return s
}

type NotifyTemplateForListNotificationsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Channel *string `type:"string" json:",omitempty" enum:"EnumOfChannelForListNotificationsOutput"`

	NotifyTemplateId *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s NotifyTemplateForListNotificationsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s NotifyTemplateForListNotificationsOutput) GoString() string {
	return s.String()
}

// SetChannel sets the Channel field's value.
func (s *NotifyTemplateForListNotificationsOutput) SetChannel(v string) *NotifyTemplateForListNotificationsOutput {
	s.Channel = &v
	return s
}

// SetNotifyTemplateId sets the NotifyTemplateId field's value.
func (s *NotifyTemplateForListNotificationsOutput) SetNotifyTemplateId(v string) *NotifyTemplateForListNotificationsOutput {
	s.NotifyTemplateId = &v
	return s
}

const (
	// EnumOfAlertMethodListForListNotificationsOutputEmail is a EnumOfAlertMethodListForListNotificationsOutput enum value
	EnumOfAlertMethodListForListNotificationsOutputEmail = "Email"

	// EnumOfAlertMethodListForListNotificationsOutputPhone is a EnumOfAlertMethodListForListNotificationsOutput enum value
	EnumOfAlertMethodListForListNotificationsOutputPhone = "Phone"

	// EnumOfAlertMethodListForListNotificationsOutputSms is a EnumOfAlertMethodListForListNotificationsOutput enum value
	EnumOfAlertMethodListForListNotificationsOutputSms = "SMS"

	// EnumOfAlertMethodListForListNotificationsOutputWebhook is a EnumOfAlertMethodListForListNotificationsOutput enum value
	EnumOfAlertMethodListForListNotificationsOutputWebhook = "Webhook"
)

const (
	// EnumOfChannelForListNotificationsOutputEmail is a EnumOfChannelForListNotificationsOutput enum value
	EnumOfChannelForListNotificationsOutputEmail = "email"

	// EnumOfChannelForListNotificationsOutputSms is a EnumOfChannelForListNotificationsOutput enum value
	EnumOfChannelForListNotificationsOutputSms = "sms"

	// EnumOfChannelForListNotificationsOutputPhone is a EnumOfChannelForListNotificationsOutput enum value
	EnumOfChannelForListNotificationsOutputPhone = "phone"

	// EnumOfChannelForListNotificationsOutputLark is a EnumOfChannelForListNotificationsOutput enum value
	EnumOfChannelForListNotificationsOutputLark = "lark"

	// EnumOfChannelForListNotificationsOutputDingtalk is a EnumOfChannelForListNotificationsOutput enum value
	EnumOfChannelForListNotificationsOutputDingtalk = "dingtalk"

	// EnumOfChannelForListNotificationsOutputWecom is a EnumOfChannelForListNotificationsOutput enum value
	EnumOfChannelForListNotificationsOutputWecom = "wecom"

	// EnumOfChannelForListNotificationsOutputSlack is a EnumOfChannelForListNotificationsOutput enum value
	EnumOfChannelForListNotificationsOutputSlack = "slack"

	// EnumOfChannelForListNotificationsOutputApi is a EnumOfChannelForListNotificationsOutput enum value
	EnumOfChannelForListNotificationsOutputApi = "api"
)

const (
	// EnumOfLevelForListNotificationsOutputNotice is a EnumOfLevelForListNotificationsOutput enum value
	EnumOfLevelForListNotificationsOutputNotice = "notice"

	// EnumOfLevelForListNotificationsOutputWarning is a EnumOfLevelForListNotificationsOutput enum value
	EnumOfLevelForListNotificationsOutputWarning = "warning"

	// EnumOfLevelForListNotificationsOutputCritical is a EnumOfLevelForListNotificationsOutput enum value
	EnumOfLevelForListNotificationsOutputCritical = "critical"

	// EnumOfLevelForListNotificationsOutputRecovery is a EnumOfLevelForListNotificationsOutput enum value
	EnumOfLevelForListNotificationsOutputRecovery = "recovery"
)

const (
	// EnumOfLevelListForListNotificationsInputNotice is a EnumOfLevelListForListNotificationsInput enum value
	EnumOfLevelListForListNotificationsInputNotice = "notice"

	// EnumOfLevelListForListNotificationsInputWarning is a EnumOfLevelListForListNotificationsInput enum value
	EnumOfLevelListForListNotificationsInputWarning = "warning"

	// EnumOfLevelListForListNotificationsInputCritical is a EnumOfLevelListForListNotificationsInput enum value
	EnumOfLevelListForListNotificationsInputCritical = "critical"

	// EnumOfLevelListForListNotificationsInputRecovery is a EnumOfLevelListForListNotificationsInput enum value
	EnumOfLevelListForListNotificationsInputRecovery = "recovery"
)
