// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package volcobserve

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDisablePresetAlertTemplateCommon = "DisablePresetAlertTemplate"

// DisablePresetAlertTemplateCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DisablePresetAlertTemplateCommon operation. The "output" return
// value will be populated with the DisablePresetAlertTemplateCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DisablePresetAlertTemplateCommon Request to send the API call to the service.
// the "output" return value is not valid until after DisablePresetAlertTemplateCommon Send returns without error.
//
// See DisablePresetAlertTemplateCommon for more information on using the DisablePresetAlertTemplateCommon
// API call, and error handling.
//
//    // Example sending a request using the DisablePresetAlertTemplateCommonRequest method.
//    req, resp := client.DisablePresetAlertTemplateCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VOLCOBSERVE) DisablePresetAlertTemplateCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDisablePresetAlertTemplateCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DisablePresetAlertTemplateCommon API operation for VOLC_OBSERVE.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VOLC_OBSERVE's
// API operation DisablePresetAlertTemplateCommon for usage and error information.
func (c *VOLCOBSERVE) DisablePresetAlertTemplateCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DisablePresetAlertTemplateCommonRequest(input)
	return out, req.Send()
}

// DisablePresetAlertTemplateCommonWithContext is the same as DisablePresetAlertTemplateCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DisablePresetAlertTemplateCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VOLCOBSERVE) DisablePresetAlertTemplateCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DisablePresetAlertTemplateCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDisablePresetAlertTemplate = "DisablePresetAlertTemplate"

// DisablePresetAlertTemplateRequest generates a "volcengine/request.Request" representing the
// client's request for the DisablePresetAlertTemplate operation. The "output" return
// value will be populated with the DisablePresetAlertTemplateCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DisablePresetAlertTemplateCommon Request to send the API call to the service.
// the "output" return value is not valid until after DisablePresetAlertTemplateCommon Send returns without error.
//
// See DisablePresetAlertTemplate for more information on using the DisablePresetAlertTemplate
// API call, and error handling.
//
//    // Example sending a request using the DisablePresetAlertTemplateRequest method.
//    req, resp := client.DisablePresetAlertTemplateRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VOLCOBSERVE) DisablePresetAlertTemplateRequest(input *DisablePresetAlertTemplateInput) (req *request.Request, output *DisablePresetAlertTemplateOutput) {
	op := &request.Operation{
		Name:       opDisablePresetAlertTemplate,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DisablePresetAlertTemplateInput{}
	}

	output = &DisablePresetAlertTemplateOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DisablePresetAlertTemplate API operation for VOLC_OBSERVE.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VOLC_OBSERVE's
// API operation DisablePresetAlertTemplate for usage and error information.
func (c *VOLCOBSERVE) DisablePresetAlertTemplate(input *DisablePresetAlertTemplateInput) (*DisablePresetAlertTemplateOutput, error) {
	req, out := c.DisablePresetAlertTemplateRequest(input)
	return out, req.Send()
}

// DisablePresetAlertTemplateWithContext is the same as DisablePresetAlertTemplate with the addition of
// the ability to pass a context and additional request options.
//
// See DisablePresetAlertTemplate for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VOLCOBSERVE) DisablePresetAlertTemplateWithContext(ctx volcengine.Context, input *DisablePresetAlertTemplateInput, opts ...request.Option) (*DisablePresetAlertTemplateOutput, error) {
	req, out := c.DisablePresetAlertTemplateRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DisablePresetAlertTemplateInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// TemplateId is a required field
	TemplateId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s DisablePresetAlertTemplateInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DisablePresetAlertTemplateInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DisablePresetAlertTemplateInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DisablePresetAlertTemplateInput"}
	if s.TemplateId == nil {
		invalidParams.Add(request.NewErrParamRequired("TemplateId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetTemplateId sets the TemplateId field's value.
func (s *DisablePresetAlertTemplateInput) SetTemplateId(v string) *DisablePresetAlertTemplateInput {
	s.TemplateId = &v
	return s
}

type DisablePresetAlertTemplateOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Data []*string `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s DisablePresetAlertTemplateOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DisablePresetAlertTemplateOutput) GoString() string {
	return s.String()
}

// SetData sets the Data field's value.
func (s *DisablePresetAlertTemplateOutput) SetData(v []*string) *DisablePresetAlertTemplateOutput {
	s.Data = v
	return s
}
