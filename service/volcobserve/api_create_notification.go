// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package volcobserve

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opCreateNotificationCommon = "CreateNotification"

// CreateNotificationCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateNotificationCommon operation. The "output" return
// value will be populated with the CreateNotificationCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateNotificationCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateNotificationCommon Send returns without error.
//
// See CreateNotificationCommon for more information on using the CreateNotificationCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateNotificationCommonRequest method.
//    req, resp := client.CreateNotificationCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VOLCOBSERVE) CreateNotificationCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateNotificationCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateNotificationCommon API operation for VOLC_OBSERVE.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VOLC_OBSERVE's
// API operation CreateNotificationCommon for usage and error information.
func (c *VOLCOBSERVE) CreateNotificationCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateNotificationCommonRequest(input)
	return out, req.Send()
}

// CreateNotificationCommonWithContext is the same as CreateNotificationCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateNotificationCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VOLCOBSERVE) CreateNotificationCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateNotificationCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateNotification = "CreateNotification"

// CreateNotificationRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateNotification operation. The "output" return
// value will be populated with the CreateNotificationCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateNotificationCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateNotificationCommon Send returns without error.
//
// See CreateNotification for more information on using the CreateNotification
// API call, and error handling.
//
//    // Example sending a request using the CreateNotificationRequest method.
//    req, resp := client.CreateNotificationRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VOLCOBSERVE) CreateNotificationRequest(input *CreateNotificationInput) (req *request.Request, output *CreateNotificationOutput) {
	op := &request.Operation{
		Name:       opCreateNotification,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateNotificationInput{}
	}

	output = &CreateNotificationOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateNotification API operation for VOLC_OBSERVE.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VOLC_OBSERVE's
// API operation CreateNotification for usage and error information.
func (c *VOLCOBSERVE) CreateNotification(input *CreateNotificationInput) (*CreateNotificationOutput, error) {
	req, out := c.CreateNotificationRequest(input)
	return out, req.Send()
}

// CreateNotificationWithContext is the same as CreateNotification with the addition of
// the ability to pass a context and additional request options.
//
// See CreateNotification for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VOLCOBSERVE) CreateNotificationWithContext(ctx volcengine.Context, input *CreateNotificationInput, opts ...request.Option) (*CreateNotificationOutput, error) {
	req, out := c.CreateNotificationRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type CreateNotificationInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// EffectEndAt is a required field
	EffectEndAt *string `type:"string" json:",omitempty" required:"true"`

	// EffectStartAt is a required field
	EffectStartAt *string `type:"string" json:",omitempty" required:"true"`

	// Name is a required field
	Name *string `type:"string" json:",omitempty" required:"true"`

	Notifications []*NotificationForCreateNotificationInput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s CreateNotificationInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateNotificationInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateNotificationInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CreateNotificationInput"}
	if s.EffectEndAt == nil {
		invalidParams.Add(request.NewErrParamRequired("EffectEndAt"))
	}
	if s.EffectStartAt == nil {
		invalidParams.Add(request.NewErrParamRequired("EffectStartAt"))
	}
	if s.Name == nil {
		invalidParams.Add(request.NewErrParamRequired("Name"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetEffectEndAt sets the EffectEndAt field's value.
func (s *CreateNotificationInput) SetEffectEndAt(v string) *CreateNotificationInput {
	s.EffectEndAt = &v
	return s
}

// SetEffectStartAt sets the EffectStartAt field's value.
func (s *CreateNotificationInput) SetEffectStartAt(v string) *CreateNotificationInput {
	s.EffectStartAt = &v
	return s
}

// SetName sets the Name field's value.
func (s *CreateNotificationInput) SetName(v string) *CreateNotificationInput {
	s.Name = &v
	return s
}

// SetNotifications sets the Notifications field's value.
func (s *CreateNotificationInput) SetNotifications(v []*NotificationForCreateNotificationInput) *CreateNotificationInput {
	s.Notifications = v
	return s
}

type CreateNotificationOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Data []*string `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s CreateNotificationOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateNotificationOutput) GoString() string {
	return s.String()
}

// SetData sets the Data field's value.
func (s *CreateNotificationOutput) SetData(v []*string) *CreateNotificationOutput {
	s.Data = v
	return s
}

type NotificationForCreateNotificationInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	AlertMethods []*string `type:"list" json:",omitempty"`

	ContactGroupIds []*string `type:"list" json:",omitempty"`

	Level *string `type:"string" json:",omitempty" enum:"EnumOfLevelForCreateNotificationInput"`

	NotifyTemplates []*NotifyTemplateForCreateNotificationInput `type:"list" json:",omitempty"`

	WebhookIds []*string `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s NotificationForCreateNotificationInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s NotificationForCreateNotificationInput) GoString() string {
	return s.String()
}

// SetAlertMethods sets the AlertMethods field's value.
func (s *NotificationForCreateNotificationInput) SetAlertMethods(v []*string) *NotificationForCreateNotificationInput {
	s.AlertMethods = v
	return s
}

// SetContactGroupIds sets the ContactGroupIds field's value.
func (s *NotificationForCreateNotificationInput) SetContactGroupIds(v []*string) *NotificationForCreateNotificationInput {
	s.ContactGroupIds = v
	return s
}

// SetLevel sets the Level field's value.
func (s *NotificationForCreateNotificationInput) SetLevel(v string) *NotificationForCreateNotificationInput {
	s.Level = &v
	return s
}

// SetNotifyTemplates sets the NotifyTemplates field's value.
func (s *NotificationForCreateNotificationInput) SetNotifyTemplates(v []*NotifyTemplateForCreateNotificationInput) *NotificationForCreateNotificationInput {
	s.NotifyTemplates = v
	return s
}

// SetWebhookIds sets the WebhookIds field's value.
func (s *NotificationForCreateNotificationInput) SetWebhookIds(v []*string) *NotificationForCreateNotificationInput {
	s.WebhookIds = v
	return s
}

type NotifyTemplateForCreateNotificationInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Channel *string `type:"string" json:",omitempty" enum:"EnumOfChannelForCreateNotificationInput"`

	NotifyTemplateId *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s NotifyTemplateForCreateNotificationInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s NotifyTemplateForCreateNotificationInput) GoString() string {
	return s.String()
}

// SetChannel sets the Channel field's value.
func (s *NotifyTemplateForCreateNotificationInput) SetChannel(v string) *NotifyTemplateForCreateNotificationInput {
	s.Channel = &v
	return s
}

// SetNotifyTemplateId sets the NotifyTemplateId field's value.
func (s *NotifyTemplateForCreateNotificationInput) SetNotifyTemplateId(v string) *NotifyTemplateForCreateNotificationInput {
	s.NotifyTemplateId = &v
	return s
}

const (
	// EnumOfAlertMethodListForCreateNotificationInputEmail is a EnumOfAlertMethodListForCreateNotificationInput enum value
	EnumOfAlertMethodListForCreateNotificationInputEmail = "Email"

	// EnumOfAlertMethodListForCreateNotificationInputPhone is a EnumOfAlertMethodListForCreateNotificationInput enum value
	EnumOfAlertMethodListForCreateNotificationInputPhone = "Phone"

	// EnumOfAlertMethodListForCreateNotificationInputSms is a EnumOfAlertMethodListForCreateNotificationInput enum value
	EnumOfAlertMethodListForCreateNotificationInputSms = "SMS"

	// EnumOfAlertMethodListForCreateNotificationInputWebhook is a EnumOfAlertMethodListForCreateNotificationInput enum value
	EnumOfAlertMethodListForCreateNotificationInputWebhook = "Webhook"
)

const (
	// EnumOfChannelForCreateNotificationInputEmail is a EnumOfChannelForCreateNotificationInput enum value
	EnumOfChannelForCreateNotificationInputEmail = "email"

	// EnumOfChannelForCreateNotificationInputSms is a EnumOfChannelForCreateNotificationInput enum value
	EnumOfChannelForCreateNotificationInputSms = "sms"

	// EnumOfChannelForCreateNotificationInputPhone is a EnumOfChannelForCreateNotificationInput enum value
	EnumOfChannelForCreateNotificationInputPhone = "phone"

	// EnumOfChannelForCreateNotificationInputLark is a EnumOfChannelForCreateNotificationInput enum value
	EnumOfChannelForCreateNotificationInputLark = "lark"

	// EnumOfChannelForCreateNotificationInputDingtalk is a EnumOfChannelForCreateNotificationInput enum value
	EnumOfChannelForCreateNotificationInputDingtalk = "dingtalk"

	// EnumOfChannelForCreateNotificationInputWecom is a EnumOfChannelForCreateNotificationInput enum value
	EnumOfChannelForCreateNotificationInputWecom = "wecom"

	// EnumOfChannelForCreateNotificationInputSlack is a EnumOfChannelForCreateNotificationInput enum value
	EnumOfChannelForCreateNotificationInputSlack = "slack"

	// EnumOfChannelForCreateNotificationInputApi is a EnumOfChannelForCreateNotificationInput enum value
	EnumOfChannelForCreateNotificationInputApi = "api"
)

const (
	// EnumOfLevelForCreateNotificationInputNotice is a EnumOfLevelForCreateNotificationInput enum value
	EnumOfLevelForCreateNotificationInputNotice = "notice"

	// EnumOfLevelForCreateNotificationInputWarning is a EnumOfLevelForCreateNotificationInput enum value
	EnumOfLevelForCreateNotificationInputWarning = "warning"

	// EnumOfLevelForCreateNotificationInputCritical is a EnumOfLevelForCreateNotificationInput enum value
	EnumOfLevelForCreateNotificationInputCritical = "critical"

	// EnumOfLevelForCreateNotificationInputRecovery is a EnumOfLevelForCreateNotificationInput enum value
	EnumOfLevelForCreateNotificationInputRecovery = "recovery"
)
