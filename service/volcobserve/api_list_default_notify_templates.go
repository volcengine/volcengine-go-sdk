// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package volcobserve

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opListDefaultNotifyTemplatesCommon = "ListDefaultNotifyTemplates"

// ListDefaultNotifyTemplatesCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ListDefaultNotifyTemplatesCommon operation. The "output" return
// value will be populated with the ListDefaultNotifyTemplatesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListDefaultNotifyTemplatesCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListDefaultNotifyTemplatesCommon Send returns without error.
//
// See ListDefaultNotifyTemplatesCommon for more information on using the ListDefaultNotifyTemplatesCommon
// API call, and error handling.
//
//    // Example sending a request using the ListDefaultNotifyTemplatesCommonRequest method.
//    req, resp := client.ListDefaultNotifyTemplatesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VOLCOBSERVE) ListDefaultNotifyTemplatesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opListDefaultNotifyTemplatesCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListDefaultNotifyTemplatesCommon API operation for VOLC_OBSERVE.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VOLC_OBSERVE's
// API operation ListDefaultNotifyTemplatesCommon for usage and error information.
func (c *VOLCOBSERVE) ListDefaultNotifyTemplatesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ListDefaultNotifyTemplatesCommonRequest(input)
	return out, req.Send()
}

// ListDefaultNotifyTemplatesCommonWithContext is the same as ListDefaultNotifyTemplatesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ListDefaultNotifyTemplatesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VOLCOBSERVE) ListDefaultNotifyTemplatesCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ListDefaultNotifyTemplatesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListDefaultNotifyTemplates = "ListDefaultNotifyTemplates"

// ListDefaultNotifyTemplatesRequest generates a "volcengine/request.Request" representing the
// client's request for the ListDefaultNotifyTemplates operation. The "output" return
// value will be populated with the ListDefaultNotifyTemplatesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListDefaultNotifyTemplatesCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListDefaultNotifyTemplatesCommon Send returns without error.
//
// See ListDefaultNotifyTemplates for more information on using the ListDefaultNotifyTemplates
// API call, and error handling.
//
//    // Example sending a request using the ListDefaultNotifyTemplatesRequest method.
//    req, resp := client.ListDefaultNotifyTemplatesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VOLCOBSERVE) ListDefaultNotifyTemplatesRequest(input *ListDefaultNotifyTemplatesInput) (req *request.Request, output *ListDefaultNotifyTemplatesOutput) {
	op := &request.Operation{
		Name:       opListDefaultNotifyTemplates,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListDefaultNotifyTemplatesInput{}
	}

	output = &ListDefaultNotifyTemplatesOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListDefaultNotifyTemplates API operation for VOLC_OBSERVE.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VOLC_OBSERVE's
// API operation ListDefaultNotifyTemplates for usage and error information.
func (c *VOLCOBSERVE) ListDefaultNotifyTemplates(input *ListDefaultNotifyTemplatesInput) (*ListDefaultNotifyTemplatesOutput, error) {
	req, out := c.ListDefaultNotifyTemplatesRequest(input)
	return out, req.Send()
}

// ListDefaultNotifyTemplatesWithContext is the same as ListDefaultNotifyTemplates with the addition of
// the ability to pass a context and additional request options.
//
// See ListDefaultNotifyTemplates for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VOLCOBSERVE) ListDefaultNotifyTemplatesWithContext(ctx volcengine.Context, input *ListDefaultNotifyTemplatesInput, opts ...request.Option) (*ListDefaultNotifyTemplatesOutput, error) {
	req, out := c.ListDefaultNotifyTemplatesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DataForListDefaultNotifyTemplatesOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Channel *string `type:"string" json:",omitempty"`

	Content *string `type:"string" json:",omitempty"`

	Language *string `type:"string" json:",omitempty"`

	Title *string `type:"string" json:",omitempty"`

	Type *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s DataForListDefaultNotifyTemplatesOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DataForListDefaultNotifyTemplatesOutput) GoString() string {
	return s.String()
}

// SetChannel sets the Channel field's value.
func (s *DataForListDefaultNotifyTemplatesOutput) SetChannel(v string) *DataForListDefaultNotifyTemplatesOutput {
	s.Channel = &v
	return s
}

// SetContent sets the Content field's value.
func (s *DataForListDefaultNotifyTemplatesOutput) SetContent(v string) *DataForListDefaultNotifyTemplatesOutput {
	s.Content = &v
	return s
}

// SetLanguage sets the Language field's value.
func (s *DataForListDefaultNotifyTemplatesOutput) SetLanguage(v string) *DataForListDefaultNotifyTemplatesOutput {
	s.Language = &v
	return s
}

// SetTitle sets the Title field's value.
func (s *DataForListDefaultNotifyTemplatesOutput) SetTitle(v string) *DataForListDefaultNotifyTemplatesOutput {
	s.Title = &v
	return s
}

// SetType sets the Type field's value.
func (s *DataForListDefaultNotifyTemplatesOutput) SetType(v string) *DataForListDefaultNotifyTemplatesOutput {
	s.Type = &v
	return s
}

type ListDefaultNotifyTemplatesInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Channels []*string `type:"list" json:",omitempty"`

	Language *string `type:"string" json:",omitempty" enum:"EnumOfLanguageForListDefaultNotifyTemplatesInput"`

	// Type is a required field
	Type *string `type:"string" json:",omitempty" required:"true" enum:"EnumOfTypeForListDefaultNotifyTemplatesInput"`
}

// String returns the string representation
func (s ListDefaultNotifyTemplatesInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListDefaultNotifyTemplatesInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ListDefaultNotifyTemplatesInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ListDefaultNotifyTemplatesInput"}
	if s.Type == nil {
		invalidParams.Add(request.NewErrParamRequired("Type"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetChannels sets the Channels field's value.
func (s *ListDefaultNotifyTemplatesInput) SetChannels(v []*string) *ListDefaultNotifyTemplatesInput {
	s.Channels = v
	return s
}

// SetLanguage sets the Language field's value.
func (s *ListDefaultNotifyTemplatesInput) SetLanguage(v string) *ListDefaultNotifyTemplatesInput {
	s.Language = &v
	return s
}

// SetType sets the Type field's value.
func (s *ListDefaultNotifyTemplatesInput) SetType(v string) *ListDefaultNotifyTemplatesInput {
	s.Type = &v
	return s
}

type ListDefaultNotifyTemplatesOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Data []*DataForListDefaultNotifyTemplatesOutput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s ListDefaultNotifyTemplatesOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListDefaultNotifyTemplatesOutput) GoString() string {
	return s.String()
}

// SetData sets the Data field's value.
func (s *ListDefaultNotifyTemplatesOutput) SetData(v []*DataForListDefaultNotifyTemplatesOutput) *ListDefaultNotifyTemplatesOutput {
	s.Data = v
	return s
}

const (
	// EnumOfChannelListForListDefaultNotifyTemplatesInputEmail is a EnumOfChannelListForListDefaultNotifyTemplatesInput enum value
	EnumOfChannelListForListDefaultNotifyTemplatesInputEmail = "email"

	// EnumOfChannelListForListDefaultNotifyTemplatesInputSms is a EnumOfChannelListForListDefaultNotifyTemplatesInput enum value
	EnumOfChannelListForListDefaultNotifyTemplatesInputSms = "sms"

	// EnumOfChannelListForListDefaultNotifyTemplatesInputPhone is a EnumOfChannelListForListDefaultNotifyTemplatesInput enum value
	EnumOfChannelListForListDefaultNotifyTemplatesInputPhone = "phone"

	// EnumOfChannelListForListDefaultNotifyTemplatesInputLark is a EnumOfChannelListForListDefaultNotifyTemplatesInput enum value
	EnumOfChannelListForListDefaultNotifyTemplatesInputLark = "lark"

	// EnumOfChannelListForListDefaultNotifyTemplatesInputDingtalk is a EnumOfChannelListForListDefaultNotifyTemplatesInput enum value
	EnumOfChannelListForListDefaultNotifyTemplatesInputDingtalk = "dingtalk"

	// EnumOfChannelListForListDefaultNotifyTemplatesInputWecom is a EnumOfChannelListForListDefaultNotifyTemplatesInput enum value
	EnumOfChannelListForListDefaultNotifyTemplatesInputWecom = "wecom"

	// EnumOfChannelListForListDefaultNotifyTemplatesInputSlack is a EnumOfChannelListForListDefaultNotifyTemplatesInput enum value
	EnumOfChannelListForListDefaultNotifyTemplatesInputSlack = "slack"

	// EnumOfChannelListForListDefaultNotifyTemplatesInputApi is a EnumOfChannelListForListDefaultNotifyTemplatesInput enum value
	EnumOfChannelListForListDefaultNotifyTemplatesInputApi = "api"
)

const (
	// EnumOfLanguageForListDefaultNotifyTemplatesInputZh is a EnumOfLanguageForListDefaultNotifyTemplatesInput enum value
	EnumOfLanguageForListDefaultNotifyTemplatesInputZh = "zh"

	// EnumOfLanguageForListDefaultNotifyTemplatesInputEn is a EnumOfLanguageForListDefaultNotifyTemplatesInput enum value
	EnumOfLanguageForListDefaultNotifyTemplatesInputEn = "en"
)

const (
	// EnumOfTypeForListDefaultNotifyTemplatesInputMetric is a EnumOfTypeForListDefaultNotifyTemplatesInput enum value
	EnumOfTypeForListDefaultNotifyTemplatesInputMetric = "metric"

	// EnumOfTypeForListDefaultNotifyTemplatesInputEvent is a EnumOfTypeForListDefaultNotifyTemplatesInput enum value
	EnumOfTypeForListDefaultNotifyTemplatesInputEvent = "event"
)
