// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package volcobserve

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opUpdateNotificationCommon = "UpdateNotification"

// UpdateNotificationCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateNotificationCommon operation. The "output" return
// value will be populated with the UpdateNotificationCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateNotificationCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateNotificationCommon Send returns without error.
//
// See UpdateNotificationCommon for more information on using the UpdateNotificationCommon
// API call, and error handling.
//
//    // Example sending a request using the UpdateNotificationCommonRequest method.
//    req, resp := client.UpdateNotificationCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VOLCOBSERVE) UpdateNotificationCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opUpdateNotificationCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateNotificationCommon API operation for VOLC_OBSERVE.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VOLC_OBSERVE's
// API operation UpdateNotificationCommon for usage and error information.
func (c *VOLCOBSERVE) UpdateNotificationCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.UpdateNotificationCommonRequest(input)
	return out, req.Send()
}

// UpdateNotificationCommonWithContext is the same as UpdateNotificationCommon with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateNotificationCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VOLCOBSERVE) UpdateNotificationCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.UpdateNotificationCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opUpdateNotification = "UpdateNotification"

// UpdateNotificationRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateNotification operation. The "output" return
// value will be populated with the UpdateNotificationCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateNotificationCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateNotificationCommon Send returns without error.
//
// See UpdateNotification for more information on using the UpdateNotification
// API call, and error handling.
//
//    // Example sending a request using the UpdateNotificationRequest method.
//    req, resp := client.UpdateNotificationRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VOLCOBSERVE) UpdateNotificationRequest(input *UpdateNotificationInput) (req *request.Request, output *UpdateNotificationOutput) {
	op := &request.Operation{
		Name:       opUpdateNotification,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UpdateNotificationInput{}
	}

	output = &UpdateNotificationOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateNotification API operation for VOLC_OBSERVE.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VOLC_OBSERVE's
// API operation UpdateNotification for usage and error information.
func (c *VOLCOBSERVE) UpdateNotification(input *UpdateNotificationInput) (*UpdateNotificationOutput, error) {
	req, out := c.UpdateNotificationRequest(input)
	return out, req.Send()
}

// UpdateNotificationWithContext is the same as UpdateNotification with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateNotification for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VOLCOBSERVE) UpdateNotificationWithContext(ctx volcengine.Context, input *UpdateNotificationInput, opts ...request.Option) (*UpdateNotificationOutput, error) {
	req, out := c.UpdateNotificationRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type NotificationForUpdateNotificationInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	AlertMethods []*string `type:"list" json:",omitempty"`

	ContactGroupIds []*string `type:"list" json:",omitempty"`

	Level *string `type:"string" json:",omitempty" enum:"EnumOfLevelForUpdateNotificationInput"`

	NotifyTemplates []*NotifyTemplateForUpdateNotificationInput `type:"list" json:",omitempty"`

	WebhookIds []*string `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s NotificationForUpdateNotificationInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s NotificationForUpdateNotificationInput) GoString() string {
	return s.String()
}

// SetAlertMethods sets the AlertMethods field's value.
func (s *NotificationForUpdateNotificationInput) SetAlertMethods(v []*string) *NotificationForUpdateNotificationInput {
	s.AlertMethods = v
	return s
}

// SetContactGroupIds sets the ContactGroupIds field's value.
func (s *NotificationForUpdateNotificationInput) SetContactGroupIds(v []*string) *NotificationForUpdateNotificationInput {
	s.ContactGroupIds = v
	return s
}

// SetLevel sets the Level field's value.
func (s *NotificationForUpdateNotificationInput) SetLevel(v string) *NotificationForUpdateNotificationInput {
	s.Level = &v
	return s
}

// SetNotifyTemplates sets the NotifyTemplates field's value.
func (s *NotificationForUpdateNotificationInput) SetNotifyTemplates(v []*NotifyTemplateForUpdateNotificationInput) *NotificationForUpdateNotificationInput {
	s.NotifyTemplates = v
	return s
}

// SetWebhookIds sets the WebhookIds field's value.
func (s *NotificationForUpdateNotificationInput) SetWebhookIds(v []*string) *NotificationForUpdateNotificationInput {
	s.WebhookIds = v
	return s
}

type NotifyTemplateForUpdateNotificationInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Channel *string `type:"string" json:",omitempty" enum:"EnumOfChannelForUpdateNotificationInput"`

	NotifyTemplateId *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s NotifyTemplateForUpdateNotificationInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s NotifyTemplateForUpdateNotificationInput) GoString() string {
	return s.String()
}

// SetChannel sets the Channel field's value.
func (s *NotifyTemplateForUpdateNotificationInput) SetChannel(v string) *NotifyTemplateForUpdateNotificationInput {
	s.Channel = &v
	return s
}

// SetNotifyTemplateId sets the NotifyTemplateId field's value.
func (s *NotifyTemplateForUpdateNotificationInput) SetNotifyTemplateId(v string) *NotifyTemplateForUpdateNotificationInput {
	s.NotifyTemplateId = &v
	return s
}

type UpdateNotificationInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// EffectEndAt is a required field
	EffectEndAt *string `type:"string" json:",omitempty" required:"true"`

	// EffectStartAt is a required field
	EffectStartAt *string `type:"string" json:",omitempty" required:"true"`

	// Id is a required field
	Id *string `type:"string" json:",omitempty" required:"true"`

	// Name is a required field
	Name *string `type:"string" json:",omitempty" required:"true"`

	Notifications []*NotificationForUpdateNotificationInput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s UpdateNotificationInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateNotificationInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UpdateNotificationInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "UpdateNotificationInput"}
	if s.EffectEndAt == nil {
		invalidParams.Add(request.NewErrParamRequired("EffectEndAt"))
	}
	if s.EffectStartAt == nil {
		invalidParams.Add(request.NewErrParamRequired("EffectStartAt"))
	}
	if s.Id == nil {
		invalidParams.Add(request.NewErrParamRequired("Id"))
	}
	if s.Name == nil {
		invalidParams.Add(request.NewErrParamRequired("Name"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetEffectEndAt sets the EffectEndAt field's value.
func (s *UpdateNotificationInput) SetEffectEndAt(v string) *UpdateNotificationInput {
	s.EffectEndAt = &v
	return s
}

// SetEffectStartAt sets the EffectStartAt field's value.
func (s *UpdateNotificationInput) SetEffectStartAt(v string) *UpdateNotificationInput {
	s.EffectStartAt = &v
	return s
}

// SetId sets the Id field's value.
func (s *UpdateNotificationInput) SetId(v string) *UpdateNotificationInput {
	s.Id = &v
	return s
}

// SetName sets the Name field's value.
func (s *UpdateNotificationInput) SetName(v string) *UpdateNotificationInput {
	s.Name = &v
	return s
}

// SetNotifications sets the Notifications field's value.
func (s *UpdateNotificationInput) SetNotifications(v []*NotificationForUpdateNotificationInput) *UpdateNotificationInput {
	s.Notifications = v
	return s
}

type UpdateNotificationOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Data []*string `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s UpdateNotificationOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateNotificationOutput) GoString() string {
	return s.String()
}

// SetData sets the Data field's value.
func (s *UpdateNotificationOutput) SetData(v []*string) *UpdateNotificationOutput {
	s.Data = v
	return s
}

const (
	// EnumOfAlertMethodListForUpdateNotificationInputEmail is a EnumOfAlertMethodListForUpdateNotificationInput enum value
	EnumOfAlertMethodListForUpdateNotificationInputEmail = "Email"

	// EnumOfAlertMethodListForUpdateNotificationInputPhone is a EnumOfAlertMethodListForUpdateNotificationInput enum value
	EnumOfAlertMethodListForUpdateNotificationInputPhone = "Phone"

	// EnumOfAlertMethodListForUpdateNotificationInputSms is a EnumOfAlertMethodListForUpdateNotificationInput enum value
	EnumOfAlertMethodListForUpdateNotificationInputSms = "SMS"

	// EnumOfAlertMethodListForUpdateNotificationInputWebhook is a EnumOfAlertMethodListForUpdateNotificationInput enum value
	EnumOfAlertMethodListForUpdateNotificationInputWebhook = "Webhook"
)

const (
	// EnumOfChannelForUpdateNotificationInputEmail is a EnumOfChannelForUpdateNotificationInput enum value
	EnumOfChannelForUpdateNotificationInputEmail = "email"

	// EnumOfChannelForUpdateNotificationInputSms is a EnumOfChannelForUpdateNotificationInput enum value
	EnumOfChannelForUpdateNotificationInputSms = "sms"

	// EnumOfChannelForUpdateNotificationInputPhone is a EnumOfChannelForUpdateNotificationInput enum value
	EnumOfChannelForUpdateNotificationInputPhone = "phone"

	// EnumOfChannelForUpdateNotificationInputLark is a EnumOfChannelForUpdateNotificationInput enum value
	EnumOfChannelForUpdateNotificationInputLark = "lark"

	// EnumOfChannelForUpdateNotificationInputDingtalk is a EnumOfChannelForUpdateNotificationInput enum value
	EnumOfChannelForUpdateNotificationInputDingtalk = "dingtalk"

	// EnumOfChannelForUpdateNotificationInputWecom is a EnumOfChannelForUpdateNotificationInput enum value
	EnumOfChannelForUpdateNotificationInputWecom = "wecom"

	// EnumOfChannelForUpdateNotificationInputSlack is a EnumOfChannelForUpdateNotificationInput enum value
	EnumOfChannelForUpdateNotificationInputSlack = "slack"

	// EnumOfChannelForUpdateNotificationInputApi is a EnumOfChannelForUpdateNotificationInput enum value
	EnumOfChannelForUpdateNotificationInputApi = "api"
)

const (
	// EnumOfLevelForUpdateNotificationInputNotice is a EnumOfLevelForUpdateNotificationInput enum value
	EnumOfLevelForUpdateNotificationInputNotice = "notice"

	// EnumOfLevelForUpdateNotificationInputWarning is a EnumOfLevelForUpdateNotificationInput enum value
	EnumOfLevelForUpdateNotificationInputWarning = "warning"

	// EnumOfLevelForUpdateNotificationInputCritical is a EnumOfLevelForUpdateNotificationInput enum value
	EnumOfLevelForUpdateNotificationInputCritical = "critical"

	// EnumOfLevelForUpdateNotificationInputRecovery is a EnumOfLevelForUpdateNotificationInput enum value
	EnumOfLevelForUpdateNotificationInputRecovery = "recovery"
)
