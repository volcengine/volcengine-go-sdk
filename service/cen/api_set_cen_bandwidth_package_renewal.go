// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package cen

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opSetCenBandwidthPackageRenewalCommon = "SetCenBandwidthPackageRenewal"

// SetCenBandwidthPackageRenewalCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the SetCenBandwidthPackageRenewalCommon operation. The "output" return
// value will be populated with the SetCenBandwidthPackageRenewalCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned SetCenBandwidthPackageRenewalCommon Request to send the API call to the service.
// the "output" return value is not valid until after SetCenBandwidthPackageRenewalCommon Send returns without error.
//
// See SetCenBandwidthPackageRenewalCommon for more information on using the SetCenBandwidthPackageRenewalCommon
// API call, and error handling.
//
//    // Example sending a request using the SetCenBandwidthPackageRenewalCommonRequest method.
//    req, resp := client.SetCenBandwidthPackageRenewalCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CEN) SetCenBandwidthPackageRenewalCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opSetCenBandwidthPackageRenewalCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// SetCenBandwidthPackageRenewalCommon API operation for CEN.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for CEN's
// API operation SetCenBandwidthPackageRenewalCommon for usage and error information.
func (c *CEN) SetCenBandwidthPackageRenewalCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.SetCenBandwidthPackageRenewalCommonRequest(input)
	return out, req.Send()
}

// SetCenBandwidthPackageRenewalCommonWithContext is the same as SetCenBandwidthPackageRenewalCommon with the addition of
// the ability to pass a context and additional request options.
//
// See SetCenBandwidthPackageRenewalCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CEN) SetCenBandwidthPackageRenewalCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.SetCenBandwidthPackageRenewalCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opSetCenBandwidthPackageRenewal = "SetCenBandwidthPackageRenewal"

// SetCenBandwidthPackageRenewalRequest generates a "volcengine/request.Request" representing the
// client's request for the SetCenBandwidthPackageRenewal operation. The "output" return
// value will be populated with the SetCenBandwidthPackageRenewalCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned SetCenBandwidthPackageRenewalCommon Request to send the API call to the service.
// the "output" return value is not valid until after SetCenBandwidthPackageRenewalCommon Send returns without error.
//
// See SetCenBandwidthPackageRenewal for more information on using the SetCenBandwidthPackageRenewal
// API call, and error handling.
//
//    // Example sending a request using the SetCenBandwidthPackageRenewalRequest method.
//    req, resp := client.SetCenBandwidthPackageRenewalRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CEN) SetCenBandwidthPackageRenewalRequest(input *SetCenBandwidthPackageRenewalInput) (req *request.Request, output *SetCenBandwidthPackageRenewalOutput) {
	op := &request.Operation{
		Name:       opSetCenBandwidthPackageRenewal,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &SetCenBandwidthPackageRenewalInput{}
	}

	output = &SetCenBandwidthPackageRenewalOutput{}
	req = c.newRequest(op, input, output)

	return
}

// SetCenBandwidthPackageRenewal API operation for CEN.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for CEN's
// API operation SetCenBandwidthPackageRenewal for usage and error information.
func (c *CEN) SetCenBandwidthPackageRenewal(input *SetCenBandwidthPackageRenewalInput) (*SetCenBandwidthPackageRenewalOutput, error) {
	req, out := c.SetCenBandwidthPackageRenewalRequest(input)
	return out, req.Send()
}

// SetCenBandwidthPackageRenewalWithContext is the same as SetCenBandwidthPackageRenewal with the addition of
// the ability to pass a context and additional request options.
//
// See SetCenBandwidthPackageRenewal for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CEN) SetCenBandwidthPackageRenewalWithContext(ctx volcengine.Context, input *SetCenBandwidthPackageRenewalInput, opts ...request.Option) (*SetCenBandwidthPackageRenewalOutput, error) {
	req, out := c.SetCenBandwidthPackageRenewalRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type SetCenBandwidthPackageRenewalInput struct {
	_ struct{} `type:"structure"`

	// CenBandwidthPackageId is a required field
	CenBandwidthPackageId *string `type:"string" required:"true"`

	RemainRenewTimes *int64 `type:"integer"`

	RenewPeriod *int64 `type:"integer"`

	// RenewType is a required field
	RenewType *string `type:"string" required:"true"`
}

// String returns the string representation
func (s SetCenBandwidthPackageRenewalInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s SetCenBandwidthPackageRenewalInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *SetCenBandwidthPackageRenewalInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "SetCenBandwidthPackageRenewalInput"}
	if s.CenBandwidthPackageId == nil {
		invalidParams.Add(request.NewErrParamRequired("CenBandwidthPackageId"))
	}
	if s.RenewType == nil {
		invalidParams.Add(request.NewErrParamRequired("RenewType"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetCenBandwidthPackageId sets the CenBandwidthPackageId field's value.
func (s *SetCenBandwidthPackageRenewalInput) SetCenBandwidthPackageId(v string) *SetCenBandwidthPackageRenewalInput {
	s.CenBandwidthPackageId = &v
	return s
}

// SetRemainRenewTimes sets the RemainRenewTimes field's value.
func (s *SetCenBandwidthPackageRenewalInput) SetRemainRenewTimes(v int64) *SetCenBandwidthPackageRenewalInput {
	s.RemainRenewTimes = &v
	return s
}

// SetRenewPeriod sets the RenewPeriod field's value.
func (s *SetCenBandwidthPackageRenewalInput) SetRenewPeriod(v int64) *SetCenBandwidthPackageRenewalInput {
	s.RenewPeriod = &v
	return s
}

// SetRenewType sets the RenewType field's value.
func (s *SetCenBandwidthPackageRenewalInput) SetRenewType(v string) *SetCenBandwidthPackageRenewalInput {
	s.RenewType = &v
	return s
}

type SetCenBandwidthPackageRenewalOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s SetCenBandwidthPackageRenewalOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s SetCenBandwidthPackageRenewalOutput) GoString() string {
	return s.String()
}
