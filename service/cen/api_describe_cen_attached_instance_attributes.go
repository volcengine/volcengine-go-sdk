// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package cen

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDescribeCenAttachedInstanceAttributesCommon = "DescribeCenAttachedInstanceAttributes"

// DescribeCenAttachedInstanceAttributesCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeCenAttachedInstanceAttributesCommon operation. The "output" return
// value will be populated with the DescribeCenAttachedInstanceAttributesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeCenAttachedInstanceAttributesCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeCenAttachedInstanceAttributesCommon Send returns without error.
//
// See DescribeCenAttachedInstanceAttributesCommon for more information on using the DescribeCenAttachedInstanceAttributesCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeCenAttachedInstanceAttributesCommonRequest method.
//    req, resp := client.DescribeCenAttachedInstanceAttributesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CEN) DescribeCenAttachedInstanceAttributesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeCenAttachedInstanceAttributesCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeCenAttachedInstanceAttributesCommon API operation for CEN.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for CEN's
// API operation DescribeCenAttachedInstanceAttributesCommon for usage and error information.
func (c *CEN) DescribeCenAttachedInstanceAttributesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeCenAttachedInstanceAttributesCommonRequest(input)
	return out, req.Send()
}

// DescribeCenAttachedInstanceAttributesCommonWithContext is the same as DescribeCenAttachedInstanceAttributesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeCenAttachedInstanceAttributesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CEN) DescribeCenAttachedInstanceAttributesCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeCenAttachedInstanceAttributesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeCenAttachedInstanceAttributes = "DescribeCenAttachedInstanceAttributes"

// DescribeCenAttachedInstanceAttributesRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeCenAttachedInstanceAttributes operation. The "output" return
// value will be populated with the DescribeCenAttachedInstanceAttributesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeCenAttachedInstanceAttributesCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeCenAttachedInstanceAttributesCommon Send returns without error.
//
// See DescribeCenAttachedInstanceAttributes for more information on using the DescribeCenAttachedInstanceAttributes
// API call, and error handling.
//
//    // Example sending a request using the DescribeCenAttachedInstanceAttributesRequest method.
//    req, resp := client.DescribeCenAttachedInstanceAttributesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CEN) DescribeCenAttachedInstanceAttributesRequest(input *DescribeCenAttachedInstanceAttributesInput) (req *request.Request, output *DescribeCenAttachedInstanceAttributesOutput) {
	op := &request.Operation{
		Name:       opDescribeCenAttachedInstanceAttributes,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeCenAttachedInstanceAttributesInput{}
	}

	output = &DescribeCenAttachedInstanceAttributesOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeCenAttachedInstanceAttributes API operation for CEN.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for CEN's
// API operation DescribeCenAttachedInstanceAttributes for usage and error information.
func (c *CEN) DescribeCenAttachedInstanceAttributes(input *DescribeCenAttachedInstanceAttributesInput) (*DescribeCenAttachedInstanceAttributesOutput, error) {
	req, out := c.DescribeCenAttachedInstanceAttributesRequest(input)
	return out, req.Send()
}

// DescribeCenAttachedInstanceAttributesWithContext is the same as DescribeCenAttachedInstanceAttributes with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeCenAttachedInstanceAttributes for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CEN) DescribeCenAttachedInstanceAttributesWithContext(ctx volcengine.Context, input *DescribeCenAttachedInstanceAttributesInput, opts ...request.Option) (*DescribeCenAttachedInstanceAttributesOutput, error) {
	req, out := c.DescribeCenAttachedInstanceAttributesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DescribeCenAttachedInstanceAttributesInput struct {
	_ struct{} `type:"structure"`

	// CenId is a required field
	CenId *string `type:"string" required:"true"`

	// InstanceId is a required field
	InstanceId *string `type:"string" required:"true"`

	// InstanceRegionId is a required field
	InstanceRegionId *string `type:"string" required:"true"`

	// InstanceType is a required field
	InstanceType *string `type:"string" required:"true"`
}

// String returns the string representation
func (s DescribeCenAttachedInstanceAttributesInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeCenAttachedInstanceAttributesInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeCenAttachedInstanceAttributesInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DescribeCenAttachedInstanceAttributesInput"}
	if s.CenId == nil {
		invalidParams.Add(request.NewErrParamRequired("CenId"))
	}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}
	if s.InstanceRegionId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceRegionId"))
	}
	if s.InstanceType == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceType"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetCenId sets the CenId field's value.
func (s *DescribeCenAttachedInstanceAttributesInput) SetCenId(v string) *DescribeCenAttachedInstanceAttributesInput {
	s.CenId = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *DescribeCenAttachedInstanceAttributesInput) SetInstanceId(v string) *DescribeCenAttachedInstanceAttributesInput {
	s.InstanceId = &v
	return s
}

// SetInstanceRegionId sets the InstanceRegionId field's value.
func (s *DescribeCenAttachedInstanceAttributesInput) SetInstanceRegionId(v string) *DescribeCenAttachedInstanceAttributesInput {
	s.InstanceRegionId = &v
	return s
}

// SetInstanceType sets the InstanceType field's value.
func (s *DescribeCenAttachedInstanceAttributesInput) SetInstanceType(v string) *DescribeCenAttachedInstanceAttributesInput {
	s.InstanceType = &v
	return s
}

type DescribeCenAttachedInstanceAttributesOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	CenId *string `type:"string"`

	CreationTime *string `type:"string"`

	InstanceId *string `type:"string"`

	InstanceOwnerId *string `type:"string"`

	InstanceRegionId *string `type:"string"`

	InstanceType *string `type:"string"`

	Status *string `type:"string"`
}

// String returns the string representation
func (s DescribeCenAttachedInstanceAttributesOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeCenAttachedInstanceAttributesOutput) GoString() string {
	return s.String()
}

// SetCenId sets the CenId field's value.
func (s *DescribeCenAttachedInstanceAttributesOutput) SetCenId(v string) *DescribeCenAttachedInstanceAttributesOutput {
	s.CenId = &v
	return s
}

// SetCreationTime sets the CreationTime field's value.
func (s *DescribeCenAttachedInstanceAttributesOutput) SetCreationTime(v string) *DescribeCenAttachedInstanceAttributesOutput {
	s.CreationTime = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *DescribeCenAttachedInstanceAttributesOutput) SetInstanceId(v string) *DescribeCenAttachedInstanceAttributesOutput {
	s.InstanceId = &v
	return s
}

// SetInstanceOwnerId sets the InstanceOwnerId field's value.
func (s *DescribeCenAttachedInstanceAttributesOutput) SetInstanceOwnerId(v string) *DescribeCenAttachedInstanceAttributesOutput {
	s.InstanceOwnerId = &v
	return s
}

// SetInstanceRegionId sets the InstanceRegionId field's value.
func (s *DescribeCenAttachedInstanceAttributesOutput) SetInstanceRegionId(v string) *DescribeCenAttachedInstanceAttributesOutput {
	s.InstanceRegionId = &v
	return s
}

// SetInstanceType sets the InstanceType field's value.
func (s *DescribeCenAttachedInstanceAttributesOutput) SetInstanceType(v string) *DescribeCenAttachedInstanceAttributesOutput {
	s.InstanceType = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *DescribeCenAttachedInstanceAttributesOutput) SetStatus(v string) *DescribeCenAttachedInstanceAttributesOutput {
	s.Status = &v
	return s
}
