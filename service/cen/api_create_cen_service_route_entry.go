// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package cen

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opCreateCenServiceRouteEntryCommon = "CreateCenServiceRouteEntry"

// CreateCenServiceRouteEntryCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateCenServiceRouteEntryCommon operation. The "output" return
// value will be populated with the CreateCenServiceRouteEntryCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateCenServiceRouteEntryCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateCenServiceRouteEntryCommon Send returns without error.
//
// See CreateCenServiceRouteEntryCommon for more information on using the CreateCenServiceRouteEntryCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateCenServiceRouteEntryCommonRequest method.
//    req, resp := client.CreateCenServiceRouteEntryCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CEN) CreateCenServiceRouteEntryCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateCenServiceRouteEntryCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// CreateCenServiceRouteEntryCommon API operation for CEN.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for CEN's
// API operation CreateCenServiceRouteEntryCommon for usage and error information.
func (c *CEN) CreateCenServiceRouteEntryCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateCenServiceRouteEntryCommonRequest(input)
	return out, req.Send()
}

// CreateCenServiceRouteEntryCommonWithContext is the same as CreateCenServiceRouteEntryCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateCenServiceRouteEntryCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CEN) CreateCenServiceRouteEntryCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateCenServiceRouteEntryCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateCenServiceRouteEntry = "CreateCenServiceRouteEntry"

// CreateCenServiceRouteEntryRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateCenServiceRouteEntry operation. The "output" return
// value will be populated with the CreateCenServiceRouteEntryCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateCenServiceRouteEntryCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateCenServiceRouteEntryCommon Send returns without error.
//
// See CreateCenServiceRouteEntry for more information on using the CreateCenServiceRouteEntry
// API call, and error handling.
//
//    // Example sending a request using the CreateCenServiceRouteEntryRequest method.
//    req, resp := client.CreateCenServiceRouteEntryRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CEN) CreateCenServiceRouteEntryRequest(input *CreateCenServiceRouteEntryInput) (req *request.Request, output *CreateCenServiceRouteEntryOutput) {
	op := &request.Operation{
		Name:       opCreateCenServiceRouteEntry,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateCenServiceRouteEntryInput{}
	}

	output = &CreateCenServiceRouteEntryOutput{}
	req = c.newRequest(op, input, output)

	return
}

// CreateCenServiceRouteEntry API operation for CEN.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for CEN's
// API operation CreateCenServiceRouteEntry for usage and error information.
func (c *CEN) CreateCenServiceRouteEntry(input *CreateCenServiceRouteEntryInput) (*CreateCenServiceRouteEntryOutput, error) {
	req, out := c.CreateCenServiceRouteEntryRequest(input)
	return out, req.Send()
}

// CreateCenServiceRouteEntryWithContext is the same as CreateCenServiceRouteEntry with the addition of
// the ability to pass a context and additional request options.
//
// See CreateCenServiceRouteEntry for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CEN) CreateCenServiceRouteEntryWithContext(ctx volcengine.Context, input *CreateCenServiceRouteEntryInput, opts ...request.Option) (*CreateCenServiceRouteEntryOutput, error) {
	req, out := c.CreateCenServiceRouteEntryRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type CreateCenServiceRouteEntryInput struct {
	_ struct{} `type:"structure"`

	// CenId is a required field
	CenId *string `type:"string" required:"true"`

	Description *string `type:"string"`

	// DestinationCidrBlock is a required field
	DestinationCidrBlock *string `type:"string" required:"true"`

	PublishMode *string `type:"string"`

	PublishToInstances []*PublishToInstanceForCreateCenServiceRouteEntryInput `type:"list"`

	// ServiceRegionId is a required field
	ServiceRegionId *string `type:"string" required:"true"`

	// ServiceVpcId is a required field
	ServiceVpcId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s CreateCenServiceRouteEntryInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateCenServiceRouteEntryInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateCenServiceRouteEntryInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CreateCenServiceRouteEntryInput"}
	if s.CenId == nil {
		invalidParams.Add(request.NewErrParamRequired("CenId"))
	}
	if s.DestinationCidrBlock == nil {
		invalidParams.Add(request.NewErrParamRequired("DestinationCidrBlock"))
	}
	if s.ServiceRegionId == nil {
		invalidParams.Add(request.NewErrParamRequired("ServiceRegionId"))
	}
	if s.ServiceVpcId == nil {
		invalidParams.Add(request.NewErrParamRequired("ServiceVpcId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetCenId sets the CenId field's value.
func (s *CreateCenServiceRouteEntryInput) SetCenId(v string) *CreateCenServiceRouteEntryInput {
	s.CenId = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *CreateCenServiceRouteEntryInput) SetDescription(v string) *CreateCenServiceRouteEntryInput {
	s.Description = &v
	return s
}

// SetDestinationCidrBlock sets the DestinationCidrBlock field's value.
func (s *CreateCenServiceRouteEntryInput) SetDestinationCidrBlock(v string) *CreateCenServiceRouteEntryInput {
	s.DestinationCidrBlock = &v
	return s
}

// SetPublishMode sets the PublishMode field's value.
func (s *CreateCenServiceRouteEntryInput) SetPublishMode(v string) *CreateCenServiceRouteEntryInput {
	s.PublishMode = &v
	return s
}

// SetPublishToInstances sets the PublishToInstances field's value.
func (s *CreateCenServiceRouteEntryInput) SetPublishToInstances(v []*PublishToInstanceForCreateCenServiceRouteEntryInput) *CreateCenServiceRouteEntryInput {
	s.PublishToInstances = v
	return s
}

// SetServiceRegionId sets the ServiceRegionId field's value.
func (s *CreateCenServiceRouteEntryInput) SetServiceRegionId(v string) *CreateCenServiceRouteEntryInput {
	s.ServiceRegionId = &v
	return s
}

// SetServiceVpcId sets the ServiceVpcId field's value.
func (s *CreateCenServiceRouteEntryInput) SetServiceVpcId(v string) *CreateCenServiceRouteEntryInput {
	s.ServiceVpcId = &v
	return s
}

type CreateCenServiceRouteEntryOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s CreateCenServiceRouteEntryOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateCenServiceRouteEntryOutput) GoString() string {
	return s.String()
}

type PublishToInstanceForCreateCenServiceRouteEntryInput struct {
	_ struct{} `type:"structure"`

	InstanceId *string `type:"string"`

	InstanceRegionId *string `type:"string"`

	InstanceType *string `type:"string"`
}

// String returns the string representation
func (s PublishToInstanceForCreateCenServiceRouteEntryInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s PublishToInstanceForCreateCenServiceRouteEntryInput) GoString() string {
	return s.String()
}

// SetInstanceId sets the InstanceId field's value.
func (s *PublishToInstanceForCreateCenServiceRouteEntryInput) SetInstanceId(v string) *PublishToInstanceForCreateCenServiceRouteEntryInput {
	s.InstanceId = &v
	return s
}

// SetInstanceRegionId sets the InstanceRegionId field's value.
func (s *PublishToInstanceForCreateCenServiceRouteEntryInput) SetInstanceRegionId(v string) *PublishToInstanceForCreateCenServiceRouteEntryInput {
	s.InstanceRegionId = &v
	return s
}

// SetInstanceType sets the InstanceType field's value.
func (s *PublishToInstanceForCreateCenServiceRouteEntryInput) SetInstanceType(v string) *PublishToInstanceForCreateCenServiceRouteEntryInput {
	s.InstanceType = &v
	return s
}
