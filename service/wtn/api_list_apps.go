// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package wtn

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opListAppsCommon = "ListApps"

// ListAppsCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ListAppsCommon operation. The "output" return
// value will be populated with the ListAppsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListAppsCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListAppsCommon Send returns without error.
//
// See ListAppsCommon for more information on using the ListAppsCommon
// API call, and error handling.
//
//    // Example sending a request using the ListAppsCommonRequest method.
//    req, resp := client.ListAppsCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *WTN) ListAppsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opListAppsCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// ListAppsCommon API operation for WTN.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for WTN's
// API operation ListAppsCommon for usage and error information.
func (c *WTN) ListAppsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ListAppsCommonRequest(input)
	return out, req.Send()
}

// ListAppsCommonWithContext is the same as ListAppsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ListAppsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *WTN) ListAppsCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ListAppsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListApps = "ListApps"

// ListAppsRequest generates a "volcengine/request.Request" representing the
// client's request for the ListApps operation. The "output" return
// value will be populated with the ListAppsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListAppsCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListAppsCommon Send returns without error.
//
// See ListApps for more information on using the ListApps
// API call, and error handling.
//
//    // Example sending a request using the ListAppsRequest method.
//    req, resp := client.ListAppsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *WTN) ListAppsRequest(input *ListAppsInput) (req *request.Request, output *ListAppsOutput) {
	op := &request.Operation{
		Name:       opListApps,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListAppsInput{}
	}

	output = &ListAppsOutput{}
	req = c.newRequest(op, input, output)

	return
}

// ListApps API operation for WTN.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for WTN's
// API operation ListApps for usage and error information.
func (c *WTN) ListApps(input *ListAppsInput) (*ListAppsOutput, error) {
	req, out := c.ListAppsRequest(input)
	return out, req.Send()
}

// ListAppsWithContext is the same as ListApps with the addition of
// the ability to pass a context and additional request options.
//
// See ListApps for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *WTN) ListAppsWithContext(ctx volcengine.Context, input *ListAppsInput, opts ...request.Option) (*ListAppsOutput, error) {
	req, out := c.ListAppsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type AppListForListAppsOutput struct {
	_ struct{} `type:"structure"`

	AppId *string `type:"string"`

	AppKey *string `type:"string"`

	AppName *string `type:"string"`

	CreateAt *string `type:"string"`

	SecondaryAppKey *string `type:"string"`

	Status *string `type:"string"`
}

// String returns the string representation
func (s AppListForListAppsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s AppListForListAppsOutput) GoString() string {
	return s.String()
}

// SetAppId sets the AppId field's value.
func (s *AppListForListAppsOutput) SetAppId(v string) *AppListForListAppsOutput {
	s.AppId = &v
	return s
}

// SetAppKey sets the AppKey field's value.
func (s *AppListForListAppsOutput) SetAppKey(v string) *AppListForListAppsOutput {
	s.AppKey = &v
	return s
}

// SetAppName sets the AppName field's value.
func (s *AppListForListAppsOutput) SetAppName(v string) *AppListForListAppsOutput {
	s.AppName = &v
	return s
}

// SetCreateAt sets the CreateAt field's value.
func (s *AppListForListAppsOutput) SetCreateAt(v string) *AppListForListAppsOutput {
	s.CreateAt = &v
	return s
}

// SetSecondaryAppKey sets the SecondaryAppKey field's value.
func (s *AppListForListAppsOutput) SetSecondaryAppKey(v string) *AppListForListAppsOutput {
	s.SecondaryAppKey = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *AppListForListAppsOutput) SetStatus(v string) *AppListForListAppsOutput {
	s.Status = &v
	return s
}

type ListAppsInput struct {
	_ struct{} `type:"structure"`

	AppId *string `type:"string"`

	Limit *string `type:"string"`

	Offset *string `type:"string"`

	ProjectName *string `type:"string"`

	Reverse *string `type:"string"`
}

// String returns the string representation
func (s ListAppsInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListAppsInput) GoString() string {
	return s.String()
}

// SetAppId sets the AppId field's value.
func (s *ListAppsInput) SetAppId(v string) *ListAppsInput {
	s.AppId = &v
	return s
}

// SetLimit sets the Limit field's value.
func (s *ListAppsInput) SetLimit(v string) *ListAppsInput {
	s.Limit = &v
	return s
}

// SetOffset sets the Offset field's value.
func (s *ListAppsInput) SetOffset(v string) *ListAppsInput {
	s.Offset = &v
	return s
}

// SetProjectName sets the ProjectName field's value.
func (s *ListAppsInput) SetProjectName(v string) *ListAppsInput {
	s.ProjectName = &v
	return s
}

// SetReverse sets the Reverse field's value.
func (s *ListAppsInput) SetReverse(v string) *ListAppsInput {
	s.Reverse = &v
	return s
}

type ListAppsOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	AppList []*AppListForListAppsOutput `type:"list"`

	Limit *int32 `type:"int32"`

	Offset *int32 `type:"int32"`

	Total *int32 `type:"int32"`
}

// String returns the string representation
func (s ListAppsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListAppsOutput) GoString() string {
	return s.String()
}

// SetAppList sets the AppList field's value.
func (s *ListAppsOutput) SetAppList(v []*AppListForListAppsOutput) *ListAppsOutput {
	s.AppList = v
	return s
}

// SetLimit sets the Limit field's value.
func (s *ListAppsOutput) SetLimit(v int32) *ListAppsOutput {
	s.Limit = &v
	return s
}

// SetOffset sets the Offset field's value.
func (s *ListAppsOutput) SetOffset(v int32) *ListAppsOutput {
	s.Offset = &v
	return s
}

// SetTotal sets the Total field's value.
func (s *ListAppsOutput) SetTotal(v int32) *ListAppsOutput {
	s.Total = &v
	return s
}
