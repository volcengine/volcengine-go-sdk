// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package wtn

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opListRealTimePublicStreamInfoCommon = "ListRealTimePublicStreamInfo"

// ListRealTimePublicStreamInfoCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ListRealTimePublicStreamInfoCommon operation. The "output" return
// value will be populated with the ListRealTimePublicStreamInfoCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListRealTimePublicStreamInfoCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListRealTimePublicStreamInfoCommon Send returns without error.
//
// See ListRealTimePublicStreamInfoCommon for more information on using the ListRealTimePublicStreamInfoCommon
// API call, and error handling.
//
//    // Example sending a request using the ListRealTimePublicStreamInfoCommonRequest method.
//    req, resp := client.ListRealTimePublicStreamInfoCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *WTN) ListRealTimePublicStreamInfoCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opListRealTimePublicStreamInfoCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListRealTimePublicStreamInfoCommon API operation for WTN.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for WTN's
// API operation ListRealTimePublicStreamInfoCommon for usage and error information.
func (c *WTN) ListRealTimePublicStreamInfoCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ListRealTimePublicStreamInfoCommonRequest(input)
	return out, req.Send()
}

// ListRealTimePublicStreamInfoCommonWithContext is the same as ListRealTimePublicStreamInfoCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ListRealTimePublicStreamInfoCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *WTN) ListRealTimePublicStreamInfoCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ListRealTimePublicStreamInfoCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListRealTimePublicStreamInfo = "ListRealTimePublicStreamInfo"

// ListRealTimePublicStreamInfoRequest generates a "volcengine/request.Request" representing the
// client's request for the ListRealTimePublicStreamInfo operation. The "output" return
// value will be populated with the ListRealTimePublicStreamInfoCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListRealTimePublicStreamInfoCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListRealTimePublicStreamInfoCommon Send returns without error.
//
// See ListRealTimePublicStreamInfo for more information on using the ListRealTimePublicStreamInfo
// API call, and error handling.
//
//    // Example sending a request using the ListRealTimePublicStreamInfoRequest method.
//    req, resp := client.ListRealTimePublicStreamInfoRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *WTN) ListRealTimePublicStreamInfoRequest(input *ListRealTimePublicStreamInfoInput) (req *request.Request, output *ListRealTimePublicStreamInfoOutput) {
	op := &request.Operation{
		Name:       opListRealTimePublicStreamInfo,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListRealTimePublicStreamInfoInput{}
	}

	output = &ListRealTimePublicStreamInfoOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListRealTimePublicStreamInfo API operation for WTN.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for WTN's
// API operation ListRealTimePublicStreamInfo for usage and error information.
func (c *WTN) ListRealTimePublicStreamInfo(input *ListRealTimePublicStreamInfoInput) (*ListRealTimePublicStreamInfoOutput, error) {
	req, out := c.ListRealTimePublicStreamInfoRequest(input)
	return out, req.Send()
}

// ListRealTimePublicStreamInfoWithContext is the same as ListRealTimePublicStreamInfo with the addition of
// the ability to pass a context and additional request options.
//
// See ListRealTimePublicStreamInfo for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *WTN) ListRealTimePublicStreamInfoWithContext(ctx volcengine.Context, input *ListRealTimePublicStreamInfoInput, opts ...request.Option) (*ListRealTimePublicStreamInfoOutput, error) {
	req, out := c.ListRealTimePublicStreamInfoRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DataForListRealTimePublicStreamInfoOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	StreamId *string `type:"string" json:",omitempty"`

	TimeStamp *string `type:"string" json:",omitempty"`

	Value *float64 `type:"double" json:",omitempty"`
}

// String returns the string representation
func (s DataForListRealTimePublicStreamInfoOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DataForListRealTimePublicStreamInfoOutput) GoString() string {
	return s.String()
}

// SetStreamId sets the StreamId field's value.
func (s *DataForListRealTimePublicStreamInfoOutput) SetStreamId(v string) *DataForListRealTimePublicStreamInfoOutput {
	s.StreamId = &v
	return s
}

// SetTimeStamp sets the TimeStamp field's value.
func (s *DataForListRealTimePublicStreamInfoOutput) SetTimeStamp(v string) *DataForListRealTimePublicStreamInfoOutput {
	s.TimeStamp = &v
	return s
}

// SetValue sets the Value field's value.
func (s *DataForListRealTimePublicStreamInfoOutput) SetValue(v float64) *DataForListRealTimePublicStreamInfoOutput {
	s.Value = &v
	return s
}

type IndicatorForListRealTimePublicStreamInfoOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Data []*DataForListRealTimePublicStreamInfoOutput `type:"list" json:",omitempty"`

	Name *string `type:"string" json:",omitempty"`

	Overview *OverviewForListRealTimePublicStreamInfoOutput `type:"structure" json:"overview,omitempty"`

	Unit *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s IndicatorForListRealTimePublicStreamInfoOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s IndicatorForListRealTimePublicStreamInfoOutput) GoString() string {
	return s.String()
}

// SetData sets the Data field's value.
func (s *IndicatorForListRealTimePublicStreamInfoOutput) SetData(v []*DataForListRealTimePublicStreamInfoOutput) *IndicatorForListRealTimePublicStreamInfoOutput {
	s.Data = v
	return s
}

// SetName sets the Name field's value.
func (s *IndicatorForListRealTimePublicStreamInfoOutput) SetName(v string) *IndicatorForListRealTimePublicStreamInfoOutput {
	s.Name = &v
	return s
}

// SetOverview sets the Overview field's value.
func (s *IndicatorForListRealTimePublicStreamInfoOutput) SetOverview(v *OverviewForListRealTimePublicStreamInfoOutput) *IndicatorForListRealTimePublicStreamInfoOutput {
	s.Overview = v
	return s
}

// SetUnit sets the Unit field's value.
func (s *IndicatorForListRealTimePublicStreamInfoOutput) SetUnit(v string) *IndicatorForListRealTimePublicStreamInfoOutput {
	s.Unit = &v
	return s
}

type ListRealTimePublicStreamInfoInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// AppId is a required field
	AppId *string `type:"string" json:",omitempty" required:"true"`

	// EndTime is a required field
	EndTime *string `type:"string" json:",omitempty" required:"true"`

	Indicator []*string `type:"list" json:",omitempty"`

	// StartTime is a required field
	StartTime *string `type:"string" json:",omitempty" required:"true"`

	StreamId *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ListRealTimePublicStreamInfoInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListRealTimePublicStreamInfoInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ListRealTimePublicStreamInfoInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ListRealTimePublicStreamInfoInput"}
	if s.AppId == nil {
		invalidParams.Add(request.NewErrParamRequired("AppId"))
	}
	if s.EndTime == nil {
		invalidParams.Add(request.NewErrParamRequired("EndTime"))
	}
	if s.StartTime == nil {
		invalidParams.Add(request.NewErrParamRequired("StartTime"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAppId sets the AppId field's value.
func (s *ListRealTimePublicStreamInfoInput) SetAppId(v string) *ListRealTimePublicStreamInfoInput {
	s.AppId = &v
	return s
}

// SetEndTime sets the EndTime field's value.
func (s *ListRealTimePublicStreamInfoInput) SetEndTime(v string) *ListRealTimePublicStreamInfoInput {
	s.EndTime = &v
	return s
}

// SetIndicator sets the Indicator field's value.
func (s *ListRealTimePublicStreamInfoInput) SetIndicator(v []*string) *ListRealTimePublicStreamInfoInput {
	s.Indicator = v
	return s
}

// SetStartTime sets the StartTime field's value.
func (s *ListRealTimePublicStreamInfoInput) SetStartTime(v string) *ListRealTimePublicStreamInfoInput {
	s.StartTime = &v
	return s
}

// SetStreamId sets the StreamId field's value.
func (s *ListRealTimePublicStreamInfoInput) SetStreamId(v string) *ListRealTimePublicStreamInfoInput {
	s.StreamId = &v
	return s
}

type ListRealTimePublicStreamInfoOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Indicators []*IndicatorForListRealTimePublicStreamInfoOutput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s ListRealTimePublicStreamInfoOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListRealTimePublicStreamInfoOutput) GoString() string {
	return s.String()
}

// SetIndicators sets the Indicators field's value.
func (s *ListRealTimePublicStreamInfoOutput) SetIndicators(v []*IndicatorForListRealTimePublicStreamInfoOutput) *ListRealTimePublicStreamInfoOutput {
	s.Indicators = v
	return s
}

type OverviewForListRealTimePublicStreamInfoOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Alias *string `type:"string" json:",omitempty"`

	ExtraInfo *string `type:"string" json:",omitempty"`

	HoverInfo *string `type:"string" json:",omitempty"`

	MaxValue *string `type:"string" json:",omitempty"`

	MinValue *string `type:"string" json:",omitempty"`

	Name *string `type:"string" json:",omitempty"`

	Unit *string `type:"string" json:",omitempty"`

	Value *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s OverviewForListRealTimePublicStreamInfoOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s OverviewForListRealTimePublicStreamInfoOutput) GoString() string {
	return s.String()
}

// SetAlias sets the Alias field's value.
func (s *OverviewForListRealTimePublicStreamInfoOutput) SetAlias(v string) *OverviewForListRealTimePublicStreamInfoOutput {
	s.Alias = &v
	return s
}

// SetExtraInfo sets the ExtraInfo field's value.
func (s *OverviewForListRealTimePublicStreamInfoOutput) SetExtraInfo(v string) *OverviewForListRealTimePublicStreamInfoOutput {
	s.ExtraInfo = &v
	return s
}

// SetHoverInfo sets the HoverInfo field's value.
func (s *OverviewForListRealTimePublicStreamInfoOutput) SetHoverInfo(v string) *OverviewForListRealTimePublicStreamInfoOutput {
	s.HoverInfo = &v
	return s
}

// SetMaxValue sets the MaxValue field's value.
func (s *OverviewForListRealTimePublicStreamInfoOutput) SetMaxValue(v string) *OverviewForListRealTimePublicStreamInfoOutput {
	s.MaxValue = &v
	return s
}

// SetMinValue sets the MinValue field's value.
func (s *OverviewForListRealTimePublicStreamInfoOutput) SetMinValue(v string) *OverviewForListRealTimePublicStreamInfoOutput {
	s.MinValue = &v
	return s
}

// SetName sets the Name field's value.
func (s *OverviewForListRealTimePublicStreamInfoOutput) SetName(v string) *OverviewForListRealTimePublicStreamInfoOutput {
	s.Name = &v
	return s
}

// SetUnit sets the Unit field's value.
func (s *OverviewForListRealTimePublicStreamInfoOutput) SetUnit(v string) *OverviewForListRealTimePublicStreamInfoOutput {
	s.Unit = &v
	return s
}

// SetValue sets the Value field's value.
func (s *OverviewForListRealTimePublicStreamInfoOutput) SetValue(v string) *OverviewForListRealTimePublicStreamInfoOutput {
	s.Value = &v
	return s
}
