// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package acep

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opStopScreenShotCommon = "StopScreenShot"

// StopScreenShotCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the StopScreenShotCommon operation. The "output" return
// value will be populated with the StopScreenShotCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned StopScreenShotCommon Request to send the API call to the service.
// the "output" return value is not valid until after StopScreenShotCommon Send returns without error.
//
// See StopScreenShotCommon for more information on using the StopScreenShotCommon
// API call, and error handling.
//
//    // Example sending a request using the StopScreenShotCommonRequest method.
//    req, resp := client.StopScreenShotCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ACEP) StopScreenShotCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opStopScreenShotCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// StopScreenShotCommon API operation for ACEP.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ACEP's
// API operation StopScreenShotCommon for usage and error information.
func (c *ACEP) StopScreenShotCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.StopScreenShotCommonRequest(input)
	return out, req.Send()
}

// StopScreenShotCommonWithContext is the same as StopScreenShotCommon with the addition of
// the ability to pass a context and additional request options.
//
// See StopScreenShotCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ACEP) StopScreenShotCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.StopScreenShotCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opStopScreenShot = "StopScreenShot"

// StopScreenShotRequest generates a "volcengine/request.Request" representing the
// client's request for the StopScreenShot operation. The "output" return
// value will be populated with the StopScreenShotCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned StopScreenShotCommon Request to send the API call to the service.
// the "output" return value is not valid until after StopScreenShotCommon Send returns without error.
//
// See StopScreenShot for more information on using the StopScreenShot
// API call, and error handling.
//
//    // Example sending a request using the StopScreenShotRequest method.
//    req, resp := client.StopScreenShotRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ACEP) StopScreenShotRequest(input *StopScreenShotInput) (req *request.Request, output *StopScreenShotOutput) {
	op := &request.Operation{
		Name:       opStopScreenShot,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &StopScreenShotInput{}
	}

	output = &StopScreenShotOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// StopScreenShot API operation for ACEP.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ACEP's
// API operation StopScreenShot for usage and error information.
func (c *ACEP) StopScreenShot(input *StopScreenShotInput) (*StopScreenShotOutput, error) {
	req, out := c.StopScreenShotRequest(input)
	return out, req.Send()
}

// StopScreenShotWithContext is the same as StopScreenShot with the addition of
// the ability to pass a context and additional request options.
//
// See StopScreenShot for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ACEP) StopScreenShotWithContext(ctx volcengine.Context, input *StopScreenShotInput, opts ...request.Option) (*StopScreenShotOutput, error) {
	req, out := c.StopScreenShotRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DetailForStopScreenShotOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	DownloadUrl *string `type:"string" json:",omitempty"`

	ErrorCode *int32 `type:"int32" json:",omitempty"`

	ErrorMsg *string `type:"string" json:",omitempty"`

	ExpireAt *int64 `type:"int64" json:",omitempty"`

	Height *int32 `type:"int32" json:",omitempty"`

	PodId *string `type:"string" json:",omitempty"`

	Width *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s DetailForStopScreenShotOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DetailForStopScreenShotOutput) GoString() string {
	return s.String()
}

// SetDownloadUrl sets the DownloadUrl field's value.
func (s *DetailForStopScreenShotOutput) SetDownloadUrl(v string) *DetailForStopScreenShotOutput {
	s.DownloadUrl = &v
	return s
}

// SetErrorCode sets the ErrorCode field's value.
func (s *DetailForStopScreenShotOutput) SetErrorCode(v int32) *DetailForStopScreenShotOutput {
	s.ErrorCode = &v
	return s
}

// SetErrorMsg sets the ErrorMsg field's value.
func (s *DetailForStopScreenShotOutput) SetErrorMsg(v string) *DetailForStopScreenShotOutput {
	s.ErrorMsg = &v
	return s
}

// SetExpireAt sets the ExpireAt field's value.
func (s *DetailForStopScreenShotOutput) SetExpireAt(v int64) *DetailForStopScreenShotOutput {
	s.ExpireAt = &v
	return s
}

// SetHeight sets the Height field's value.
func (s *DetailForStopScreenShotOutput) SetHeight(v int32) *DetailForStopScreenShotOutput {
	s.Height = &v
	return s
}

// SetPodId sets the PodId field's value.
func (s *DetailForStopScreenShotOutput) SetPodId(v string) *DetailForStopScreenShotOutput {
	s.PodId = &v
	return s
}

// SetWidth sets the Width field's value.
func (s *DetailForStopScreenShotOutput) SetWidth(v int32) *DetailForStopScreenShotOutput {
	s.Width = &v
	return s
}

type StopScreenShotInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	PodIdList []*string `type:"list" json:",omitempty"`

	// ProductId is a required field
	ProductId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s StopScreenShotInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s StopScreenShotInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *StopScreenShotInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "StopScreenShotInput"}
	if s.ProductId == nil {
		invalidParams.Add(request.NewErrParamRequired("ProductId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetPodIdList sets the PodIdList field's value.
func (s *StopScreenShotInput) SetPodIdList(v []*string) *StopScreenShotInput {
	s.PodIdList = v
	return s
}

// SetProductId sets the ProductId field's value.
func (s *StopScreenShotInput) SetProductId(v string) *StopScreenShotInput {
	s.ProductId = &v
	return s
}

type StopScreenShotOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Details []*DetailForStopScreenShotOutput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s StopScreenShotOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s StopScreenShotOutput) GoString() string {
	return s.String()
}

// SetDetails sets the Details field's value.
func (s *StopScreenShotOutput) SetDetails(v []*DetailForStopScreenShotOutput) *StopScreenShotOutput {
	s.Details = v
	return s
}
