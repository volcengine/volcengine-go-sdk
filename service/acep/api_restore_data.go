// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package acep

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opRestoreDataCommon = "RestoreData"

// RestoreDataCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the RestoreDataCommon operation. The "output" return
// value will be populated with the RestoreDataCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned RestoreDataCommon Request to send the API call to the service.
// the "output" return value is not valid until after RestoreDataCommon Send returns without error.
//
// See RestoreDataCommon for more information on using the RestoreDataCommon
// API call, and error handling.
//
//    // Example sending a request using the RestoreDataCommonRequest method.
//    req, resp := client.RestoreDataCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ACEP) RestoreDataCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opRestoreDataCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// RestoreDataCommon API operation for ACEP.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ACEP's
// API operation RestoreDataCommon for usage and error information.
func (c *ACEP) RestoreDataCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.RestoreDataCommonRequest(input)
	return out, req.Send()
}

// RestoreDataCommonWithContext is the same as RestoreDataCommon with the addition of
// the ability to pass a context and additional request options.
//
// See RestoreDataCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ACEP) RestoreDataCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.RestoreDataCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opRestoreData = "RestoreData"

// RestoreDataRequest generates a "volcengine/request.Request" representing the
// client's request for the RestoreData operation. The "output" return
// value will be populated with the RestoreDataCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned RestoreDataCommon Request to send the API call to the service.
// the "output" return value is not valid until after RestoreDataCommon Send returns without error.
//
// See RestoreData for more information on using the RestoreData
// API call, and error handling.
//
//    // Example sending a request using the RestoreDataRequest method.
//    req, resp := client.RestoreDataRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ACEP) RestoreDataRequest(input *RestoreDataInput) (req *request.Request, output *RestoreDataOutput) {
	op := &request.Operation{
		Name:       opRestoreData,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &RestoreDataInput{}
	}

	output = &RestoreDataOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// RestoreData API operation for ACEP.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ACEP's
// API operation RestoreData for usage and error information.
func (c *ACEP) RestoreData(input *RestoreDataInput) (*RestoreDataOutput, error) {
	req, out := c.RestoreDataRequest(input)
	return out, req.Send()
}

// RestoreDataWithContext is the same as RestoreData with the addition of
// the ability to pass a context and additional request options.
//
// See RestoreData for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ACEP) RestoreDataWithContext(ctx volcengine.Context, input *RestoreDataInput, opts ...request.Option) (*RestoreDataOutput, error) {
	req, out := c.RestoreDataRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DetailForRestoreDataOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	JobId *string `type:"string" json:",omitempty"`

	PodId *string `type:"string" json:",omitempty"`

	TaskId *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s DetailForRestoreDataOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DetailForRestoreDataOutput) GoString() string {
	return s.String()
}

// SetJobId sets the JobId field's value.
func (s *DetailForRestoreDataOutput) SetJobId(v string) *DetailForRestoreDataOutput {
	s.JobId = &v
	return s
}

// SetPodId sets the PodId field's value.
func (s *DetailForRestoreDataOutput) SetPodId(v string) *DetailForRestoreDataOutput {
	s.PodId = &v
	return s
}

// SetTaskId sets the TaskId field's value.
func (s *DetailForRestoreDataOutput) SetTaskId(v string) *DetailForRestoreDataOutput {
	s.TaskId = &v
	return s
}

type RestoreDataInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// BackupDataId is a required field
	BackupDataId *string `type:"string" json:",omitempty" required:"true"`

	CreatePodNum *int32 `type:"int32" json:",omitempty"`

	PodIdList []*string `type:"list" json:",omitempty"`

	// ProductId is a required field
	ProductId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s RestoreDataInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s RestoreDataInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *RestoreDataInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "RestoreDataInput"}
	if s.BackupDataId == nil {
		invalidParams.Add(request.NewErrParamRequired("BackupDataId"))
	}
	if s.ProductId == nil {
		invalidParams.Add(request.NewErrParamRequired("ProductId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetBackupDataId sets the BackupDataId field's value.
func (s *RestoreDataInput) SetBackupDataId(v string) *RestoreDataInput {
	s.BackupDataId = &v
	return s
}

// SetCreatePodNum sets the CreatePodNum field's value.
func (s *RestoreDataInput) SetCreatePodNum(v int32) *RestoreDataInput {
	s.CreatePodNum = &v
	return s
}

// SetPodIdList sets the PodIdList field's value.
func (s *RestoreDataInput) SetPodIdList(v []*string) *RestoreDataInput {
	s.PodIdList = v
	return s
}

// SetProductId sets the ProductId field's value.
func (s *RestoreDataInput) SetProductId(v string) *RestoreDataInput {
	s.ProductId = &v
	return s
}

type RestoreDataOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Details []*DetailForRestoreDataOutput `type:"list" json:",omitempty"`

	TaskIdList []*string `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s RestoreDataOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s RestoreDataOutput) GoString() string {
	return s.String()
}

// SetDetails sets the Details field's value.
func (s *RestoreDataOutput) SetDetails(v []*DetailForRestoreDataOutput) *RestoreDataOutput {
	s.Details = v
	return s
}

// SetTaskIdList sets the TaskIdList field's value.
func (s *RestoreDataOutput) SetTaskIdList(v []*string) *RestoreDataOutput {
	s.TaskIdList = v
	return s
}
