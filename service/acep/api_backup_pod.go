// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package acep

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opBackupPodCommon = "BackupPod"

// BackupPodCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the BackupPodCommon operation. The "output" return
// value will be populated with the BackupPodCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned BackupPodCommon Request to send the API call to the service.
// the "output" return value is not valid until after BackupPodCommon Send returns without error.
//
// See BackupPodCommon for more information on using the BackupPodCommon
// API call, and error handling.
//
//    // Example sending a request using the BackupPodCommonRequest method.
//    req, resp := client.BackupPodCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ACEP) BackupPodCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opBackupPodCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// BackupPodCommon API operation for ACEP.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ACEP's
// API operation BackupPodCommon for usage and error information.
func (c *ACEP) BackupPodCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.BackupPodCommonRequest(input)
	return out, req.Send()
}

// BackupPodCommonWithContext is the same as BackupPodCommon with the addition of
// the ability to pass a context and additional request options.
//
// See BackupPodCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ACEP) BackupPodCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.BackupPodCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opBackupPod = "BackupPod"

// BackupPodRequest generates a "volcengine/request.Request" representing the
// client's request for the BackupPod operation. The "output" return
// value will be populated with the BackupPodCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned BackupPodCommon Request to send the API call to the service.
// the "output" return value is not valid until after BackupPodCommon Send returns without error.
//
// See BackupPod for more information on using the BackupPod
// API call, and error handling.
//
//    // Example sending a request using the BackupPodRequest method.
//    req, resp := client.BackupPodRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ACEP) BackupPodRequest(input *BackupPodInput) (req *request.Request, output *BackupPodOutput) {
	op := &request.Operation{
		Name:       opBackupPod,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &BackupPodInput{}
	}

	output = &BackupPodOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// BackupPod API operation for ACEP.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ACEP's
// API operation BackupPod for usage and error information.
func (c *ACEP) BackupPod(input *BackupPodInput) (*BackupPodOutput, error) {
	req, out := c.BackupPodRequest(input)
	return out, req.Send()
}

// BackupPodWithContext is the same as BackupPod with the addition of
// the ability to pass a context and additional request options.
//
// See BackupPod for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ACEP) BackupPodWithContext(ctx volcengine.Context, input *BackupPodInput, opts ...request.Option) (*BackupPodOutput, error) {
	req, out := c.BackupPodRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type BackupPodInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	PodIdList []*string `type:"list" json:",omitempty"`

	// ProductId is a required field
	ProductId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s BackupPodInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s BackupPodInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *BackupPodInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "BackupPodInput"}
	if s.ProductId == nil {
		invalidParams.Add(request.NewErrParamRequired("ProductId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetPodIdList sets the PodIdList field's value.
func (s *BackupPodInput) SetPodIdList(v []*string) *BackupPodInput {
	s.PodIdList = v
	return s
}

// SetProductId sets the ProductId field's value.
func (s *BackupPodInput) SetProductId(v string) *BackupPodInput {
	s.ProductId = &v
	return s
}

type BackupPodOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	TaskIdList []*string `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s BackupPodOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s BackupPodOutput) GoString() string {
	return s.String()
}

// SetTaskIdList sets the TaskIdList field's value.
func (s *BackupPodOutput) SetTaskIdList(v []*string) *BackupPodOutput {
	s.TaskIdList = v
	return s
}
