// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package acep

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opMigratePodCommon = "MigratePod"

// MigratePodCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the MigratePodCommon operation. The "output" return
// value will be populated with the MigratePodCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned MigratePodCommon Request to send the API call to the service.
// the "output" return value is not valid until after MigratePodCommon Send returns without error.
//
// See MigratePodCommon for more information on using the MigratePodCommon
// API call, and error handling.
//
//    // Example sending a request using the MigratePodCommonRequest method.
//    req, resp := client.MigratePodCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ACEP) MigratePodCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opMigratePodCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// MigratePodCommon API operation for ACEP.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ACEP's
// API operation MigratePodCommon for usage and error information.
func (c *ACEP) MigratePodCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.MigratePodCommonRequest(input)
	return out, req.Send()
}

// MigratePodCommonWithContext is the same as MigratePodCommon with the addition of
// the ability to pass a context and additional request options.
//
// See MigratePodCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ACEP) MigratePodCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.MigratePodCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opMigratePod = "MigratePod"

// MigratePodRequest generates a "volcengine/request.Request" representing the
// client's request for the MigratePod operation. The "output" return
// value will be populated with the MigratePodCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned MigratePodCommon Request to send the API call to the service.
// the "output" return value is not valid until after MigratePodCommon Send returns without error.
//
// See MigratePod for more information on using the MigratePod
// API call, and error handling.
//
//    // Example sending a request using the MigratePodRequest method.
//    req, resp := client.MigratePodRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ACEP) MigratePodRequest(input *MigratePodInput) (req *request.Request, output *MigratePodOutput) {
	op := &request.Operation{
		Name:       opMigratePod,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &MigratePodInput{}
	}

	output = &MigratePodOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// MigratePod API operation for ACEP.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ACEP's
// API operation MigratePod for usage and error information.
func (c *ACEP) MigratePod(input *MigratePodInput) (*MigratePodOutput, error) {
	req, out := c.MigratePodRequest(input)
	return out, req.Send()
}

// MigratePodWithContext is the same as MigratePod with the addition of
// the ability to pass a context and additional request options.
//
// See MigratePod for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ACEP) MigratePodWithContext(ctx volcengine.Context, input *MigratePodInput, opts ...request.Option) (*MigratePodOutput, error) {
	req, out := c.MigratePodRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DetailForMigratePodOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	ErrCode *int32 `type:"int32" json:",omitempty"`

	ErrMsg *string `type:"string" json:",omitempty"`

	PodId *string `type:"string" json:",omitempty"`

	Success *bool `type:"boolean" json:",omitempty"`
}

// String returns the string representation
func (s DetailForMigratePodOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DetailForMigratePodOutput) GoString() string {
	return s.String()
}

// SetErrCode sets the ErrCode field's value.
func (s *DetailForMigratePodOutput) SetErrCode(v int32) *DetailForMigratePodOutput {
	s.ErrCode = &v
	return s
}

// SetErrMsg sets the ErrMsg field's value.
func (s *DetailForMigratePodOutput) SetErrMsg(v string) *DetailForMigratePodOutput {
	s.ErrMsg = &v
	return s
}

// SetPodId sets the PodId field's value.
func (s *DetailForMigratePodOutput) SetPodId(v string) *DetailForMigratePodOutput {
	s.PodId = &v
	return s
}

// SetSuccess sets the Success field's value.
func (s *DetailForMigratePodOutput) SetSuccess(v bool) *DetailForMigratePodOutput {
	s.Success = &v
	return s
}

type MigratePodInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	PodIdList []*string `type:"list" json:",omitempty"`

	// ProductId is a required field
	ProductId *string `type:"string" json:",omitempty" required:"true"`

	TargetDc *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s MigratePodInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s MigratePodInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *MigratePodInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "MigratePodInput"}
	if s.ProductId == nil {
		invalidParams.Add(request.NewErrParamRequired("ProductId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetPodIdList sets the PodIdList field's value.
func (s *MigratePodInput) SetPodIdList(v []*string) *MigratePodInput {
	s.PodIdList = v
	return s
}

// SetProductId sets the ProductId field's value.
func (s *MigratePodInput) SetProductId(v string) *MigratePodInput {
	s.ProductId = &v
	return s
}

// SetTargetDc sets the TargetDc field's value.
func (s *MigratePodInput) SetTargetDc(v string) *MigratePodInput {
	s.TargetDc = &v
	return s
}

type MigratePodOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Details []*DetailForMigratePodOutput `type:"list" json:",omitempty"`

	ProductId *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s MigratePodOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s MigratePodOutput) GoString() string {
	return s.String()
}

// SetDetails sets the Details field's value.
func (s *MigratePodOutput) SetDetails(v []*DetailForMigratePodOutput) *MigratePodOutput {
	s.Details = v
	return s
}

// SetProductId sets the ProductId field's value.
func (s *MigratePodOutput) SetProductId(v string) *MigratePodOutput {
	s.ProductId = &v
	return s
}
