// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package acep

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opCancelRestorePodCommon = "CancelRestorePod"

// CancelRestorePodCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the CancelRestorePodCommon operation. The "output" return
// value will be populated with the CancelRestorePodCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CancelRestorePodCommon Request to send the API call to the service.
// the "output" return value is not valid until after CancelRestorePodCommon Send returns without error.
//
// See CancelRestorePodCommon for more information on using the CancelRestorePodCommon
// API call, and error handling.
//
//    // Example sending a request using the CancelRestorePodCommonRequest method.
//    req, resp := client.CancelRestorePodCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ACEP) CancelRestorePodCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCancelRestorePodCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CancelRestorePodCommon API operation for ACEP.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ACEP's
// API operation CancelRestorePodCommon for usage and error information.
func (c *ACEP) CancelRestorePodCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CancelRestorePodCommonRequest(input)
	return out, req.Send()
}

// CancelRestorePodCommonWithContext is the same as CancelRestorePodCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CancelRestorePodCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ACEP) CancelRestorePodCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CancelRestorePodCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCancelRestorePod = "CancelRestorePod"

// CancelRestorePodRequest generates a "volcengine/request.Request" representing the
// client's request for the CancelRestorePod operation. The "output" return
// value will be populated with the CancelRestorePodCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CancelRestorePodCommon Request to send the API call to the service.
// the "output" return value is not valid until after CancelRestorePodCommon Send returns without error.
//
// See CancelRestorePod for more information on using the CancelRestorePod
// API call, and error handling.
//
//    // Example sending a request using the CancelRestorePodRequest method.
//    req, resp := client.CancelRestorePodRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ACEP) CancelRestorePodRequest(input *CancelRestorePodInput) (req *request.Request, output *CancelRestorePodOutput) {
	op := &request.Operation{
		Name:       opCancelRestorePod,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CancelRestorePodInput{}
	}

	output = &CancelRestorePodOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CancelRestorePod API operation for ACEP.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ACEP's
// API operation CancelRestorePod for usage and error information.
func (c *ACEP) CancelRestorePod(input *CancelRestorePodInput) (*CancelRestorePodOutput, error) {
	req, out := c.CancelRestorePodRequest(input)
	return out, req.Send()
}

// CancelRestorePodWithContext is the same as CancelRestorePod with the addition of
// the ability to pass a context and additional request options.
//
// See CancelRestorePod for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ACEP) CancelRestorePodWithContext(ctx volcengine.Context, input *CancelRestorePodInput, opts ...request.Option) (*CancelRestorePodOutput, error) {
	req, out := c.CancelRestorePodRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type CancelRestorePodInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	PodIdList []*string `type:"list" json:",omitempty"`

	// ProductId is a required field
	ProductId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s CancelRestorePodInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CancelRestorePodInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CancelRestorePodInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CancelRestorePodInput"}
	if s.ProductId == nil {
		invalidParams.Add(request.NewErrParamRequired("ProductId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetPodIdList sets the PodIdList field's value.
func (s *CancelRestorePodInput) SetPodIdList(v []*string) *CancelRestorePodInput {
	s.PodIdList = v
	return s
}

// SetProductId sets the ProductId field's value.
func (s *CancelRestorePodInput) SetProductId(v string) *CancelRestorePodInput {
	s.ProductId = &v
	return s
}

type CancelRestorePodOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s CancelRestorePodOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CancelRestorePodOutput) GoString() string {
	return s.String()
}
