// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package acep

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opAddCustomRouteCommon = "AddCustomRoute"

// AddCustomRouteCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the AddCustomRouteCommon operation. The "output" return
// value will be populated with the AddCustomRouteCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned AddCustomRouteCommon Request to send the API call to the service.
// the "output" return value is not valid until after AddCustomRouteCommon Send returns without error.
//
// See AddCustomRouteCommon for more information on using the AddCustomRouteCommon
// API call, and error handling.
//
//    // Example sending a request using the AddCustomRouteCommonRequest method.
//    req, resp := client.AddCustomRouteCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ACEP) AddCustomRouteCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opAddCustomRouteCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// AddCustomRouteCommon API operation for ACEP.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ACEP's
// API operation AddCustomRouteCommon for usage and error information.
func (c *ACEP) AddCustomRouteCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.AddCustomRouteCommonRequest(input)
	return out, req.Send()
}

// AddCustomRouteCommonWithContext is the same as AddCustomRouteCommon with the addition of
// the ability to pass a context and additional request options.
//
// See AddCustomRouteCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ACEP) AddCustomRouteCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.AddCustomRouteCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opAddCustomRoute = "AddCustomRoute"

// AddCustomRouteRequest generates a "volcengine/request.Request" representing the
// client's request for the AddCustomRoute operation. The "output" return
// value will be populated with the AddCustomRouteCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned AddCustomRouteCommon Request to send the API call to the service.
// the "output" return value is not valid until after AddCustomRouteCommon Send returns without error.
//
// See AddCustomRoute for more information on using the AddCustomRoute
// API call, and error handling.
//
//    // Example sending a request using the AddCustomRouteRequest method.
//    req, resp := client.AddCustomRouteRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ACEP) AddCustomRouteRequest(input *AddCustomRouteInput) (req *request.Request, output *AddCustomRouteOutput) {
	op := &request.Operation{
		Name:       opAddCustomRoute,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &AddCustomRouteInput{}
	}

	output = &AddCustomRouteOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// AddCustomRoute API operation for ACEP.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ACEP's
// API operation AddCustomRoute for usage and error information.
func (c *ACEP) AddCustomRoute(input *AddCustomRouteInput) (*AddCustomRouteOutput, error) {
	req, out := c.AddCustomRouteRequest(input)
	return out, req.Send()
}

// AddCustomRouteWithContext is the same as AddCustomRoute with the addition of
// the ability to pass a context and additional request options.
//
// See AddCustomRoute for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ACEP) AddCustomRouteWithContext(ctx volcengine.Context, input *AddCustomRouteInput, opts ...request.Option) (*AddCustomRouteOutput, error) {
	req, out := c.AddCustomRouteRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type AddCustomRouteInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	CustomRouteName *string `type:"string" json:",omitempty"`

	// DstIP is a required field
	DstIP *string `type:"string" json:",omitempty" required:"true"`

	// ProductId is a required field
	ProductId *string `type:"string" json:",omitempty" required:"true"`

	ProxyCipher *string `type:"string" json:",omitempty"`

	ProxyPassword *string `type:"string" json:",omitempty"`

	// ProxyPort is a required field
	ProxyPort *int32 `type:"int32" json:",omitempty" required:"true"`

	// ProxyProtocol is a required field
	ProxyProtocol *string `type:"string" json:",omitempty" required:"true"`

	ProxyUserName *string `type:"string" json:",omitempty"`

	// Zone is a required field
	Zone *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s AddCustomRouteInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s AddCustomRouteInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *AddCustomRouteInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "AddCustomRouteInput"}
	if s.DstIP == nil {
		invalidParams.Add(request.NewErrParamRequired("DstIP"))
	}
	if s.ProductId == nil {
		invalidParams.Add(request.NewErrParamRequired("ProductId"))
	}
	if s.ProxyPort == nil {
		invalidParams.Add(request.NewErrParamRequired("ProxyPort"))
	}
	if s.ProxyProtocol == nil {
		invalidParams.Add(request.NewErrParamRequired("ProxyProtocol"))
	}
	if s.Zone == nil {
		invalidParams.Add(request.NewErrParamRequired("Zone"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetCustomRouteName sets the CustomRouteName field's value.
func (s *AddCustomRouteInput) SetCustomRouteName(v string) *AddCustomRouteInput {
	s.CustomRouteName = &v
	return s
}

// SetDstIP sets the DstIP field's value.
func (s *AddCustomRouteInput) SetDstIP(v string) *AddCustomRouteInput {
	s.DstIP = &v
	return s
}

// SetProductId sets the ProductId field's value.
func (s *AddCustomRouteInput) SetProductId(v string) *AddCustomRouteInput {
	s.ProductId = &v
	return s
}

// SetProxyCipher sets the ProxyCipher field's value.
func (s *AddCustomRouteInput) SetProxyCipher(v string) *AddCustomRouteInput {
	s.ProxyCipher = &v
	return s
}

// SetProxyPassword sets the ProxyPassword field's value.
func (s *AddCustomRouteInput) SetProxyPassword(v string) *AddCustomRouteInput {
	s.ProxyPassword = &v
	return s
}

// SetProxyPort sets the ProxyPort field's value.
func (s *AddCustomRouteInput) SetProxyPort(v int32) *AddCustomRouteInput {
	s.ProxyPort = &v
	return s
}

// SetProxyProtocol sets the ProxyProtocol field's value.
func (s *AddCustomRouteInput) SetProxyProtocol(v string) *AddCustomRouteInput {
	s.ProxyProtocol = &v
	return s
}

// SetProxyUserName sets the ProxyUserName field's value.
func (s *AddCustomRouteInput) SetProxyUserName(v string) *AddCustomRouteInput {
	s.ProxyUserName = &v
	return s
}

// SetZone sets the Zone field's value.
func (s *AddCustomRouteInput) SetZone(v string) *AddCustomRouteInput {
	s.Zone = &v
	return s
}

type AddCustomRouteOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	CustomRouteId *string `type:"string" json:",omitempty"`

	DstIP *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s AddCustomRouteOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s AddCustomRouteOutput) GoString() string {
	return s.String()
}

// SetCustomRouteId sets the CustomRouteId field's value.
func (s *AddCustomRouteOutput) SetCustomRouteId(v string) *AddCustomRouteOutput {
	s.CustomRouteId = &v
	return s
}

// SetDstIP sets the DstIP field's value.
func (s *AddCustomRouteOutput) SetDstIP(v string) *AddCustomRouteOutput {
	s.DstIP = &v
	return s
}
