// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package acep

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opGetDcBandwidthDailyPeakCommon = "GetDcBandwidthDailyPeak"

// GetDcBandwidthDailyPeakCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the GetDcBandwidthDailyPeakCommon operation. The "output" return
// value will be populated with the GetDcBandwidthDailyPeakCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetDcBandwidthDailyPeakCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetDcBandwidthDailyPeakCommon Send returns without error.
//
// See GetDcBandwidthDailyPeakCommon for more information on using the GetDcBandwidthDailyPeakCommon
// API call, and error handling.
//
//    // Example sending a request using the GetDcBandwidthDailyPeakCommonRequest method.
//    req, resp := client.GetDcBandwidthDailyPeakCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ACEP) GetDcBandwidthDailyPeakCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opGetDcBandwidthDailyPeakCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetDcBandwidthDailyPeakCommon API operation for ACEP.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ACEP's
// API operation GetDcBandwidthDailyPeakCommon for usage and error information.
func (c *ACEP) GetDcBandwidthDailyPeakCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.GetDcBandwidthDailyPeakCommonRequest(input)
	return out, req.Send()
}

// GetDcBandwidthDailyPeakCommonWithContext is the same as GetDcBandwidthDailyPeakCommon with the addition of
// the ability to pass a context and additional request options.
//
// See GetDcBandwidthDailyPeakCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ACEP) GetDcBandwidthDailyPeakCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.GetDcBandwidthDailyPeakCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opGetDcBandwidthDailyPeak = "GetDcBandwidthDailyPeak"

// GetDcBandwidthDailyPeakRequest generates a "volcengine/request.Request" representing the
// client's request for the GetDcBandwidthDailyPeak operation. The "output" return
// value will be populated with the GetDcBandwidthDailyPeakCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetDcBandwidthDailyPeakCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetDcBandwidthDailyPeakCommon Send returns without error.
//
// See GetDcBandwidthDailyPeak for more information on using the GetDcBandwidthDailyPeak
// API call, and error handling.
//
//    // Example sending a request using the GetDcBandwidthDailyPeakRequest method.
//    req, resp := client.GetDcBandwidthDailyPeakRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ACEP) GetDcBandwidthDailyPeakRequest(input *GetDcBandwidthDailyPeakInput) (req *request.Request, output *GetDcBandwidthDailyPeakOutput) {
	op := &request.Operation{
		Name:       opGetDcBandwidthDailyPeak,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &GetDcBandwidthDailyPeakInput{}
	}

	output = &GetDcBandwidthDailyPeakOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetDcBandwidthDailyPeak API operation for ACEP.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ACEP's
// API operation GetDcBandwidthDailyPeak for usage and error information.
func (c *ACEP) GetDcBandwidthDailyPeak(input *GetDcBandwidthDailyPeakInput) (*GetDcBandwidthDailyPeakOutput, error) {
	req, out := c.GetDcBandwidthDailyPeakRequest(input)
	return out, req.Send()
}

// GetDcBandwidthDailyPeakWithContext is the same as GetDcBandwidthDailyPeak with the addition of
// the ability to pass a context and additional request options.
//
// See GetDcBandwidthDailyPeak for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ACEP) GetDcBandwidthDailyPeakWithContext(ctx volcengine.Context, input *GetDcBandwidthDailyPeakInput, opts ...request.Option) (*GetDcBandwidthDailyPeakOutput, error) {
	req, out := c.GetDcBandwidthDailyPeakRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type GetDcBandwidthDailyPeakInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	DcIdList []*string `type:"list" json:",omitempty"`

	// EndDate is a required field
	EndDate *string `type:"string" json:",omitempty" required:"true"`

	// ProductId is a required field
	ProductId *string `type:"string" json:",omitempty" required:"true"`

	// StartDate is a required field
	StartDate *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s GetDcBandwidthDailyPeakInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetDcBandwidthDailyPeakInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *GetDcBandwidthDailyPeakInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "GetDcBandwidthDailyPeakInput"}
	if s.EndDate == nil {
		invalidParams.Add(request.NewErrParamRequired("EndDate"))
	}
	if s.ProductId == nil {
		invalidParams.Add(request.NewErrParamRequired("ProductId"))
	}
	if s.StartDate == nil {
		invalidParams.Add(request.NewErrParamRequired("StartDate"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDcIdList sets the DcIdList field's value.
func (s *GetDcBandwidthDailyPeakInput) SetDcIdList(v []*string) *GetDcBandwidthDailyPeakInput {
	s.DcIdList = v
	return s
}

// SetEndDate sets the EndDate field's value.
func (s *GetDcBandwidthDailyPeakInput) SetEndDate(v string) *GetDcBandwidthDailyPeakInput {
	s.EndDate = &v
	return s
}

// SetProductId sets the ProductId field's value.
func (s *GetDcBandwidthDailyPeakInput) SetProductId(v string) *GetDcBandwidthDailyPeakInput {
	s.ProductId = &v
	return s
}

// SetStartDate sets the StartDate field's value.
func (s *GetDcBandwidthDailyPeakInput) SetStartDate(v string) *GetDcBandwidthDailyPeakInput {
	s.StartDate = &v
	return s
}

type GetDcBandwidthDailyPeakOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Row []*RowForGetDcBandwidthDailyPeakOutput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s GetDcBandwidthDailyPeakOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetDcBandwidthDailyPeakOutput) GoString() string {
	return s.String()
}

// SetRow sets the Row field's value.
func (s *GetDcBandwidthDailyPeakOutput) SetRow(v []*RowForGetDcBandwidthDailyPeakOutput) *GetDcBandwidthDailyPeakOutput {
	s.Row = v
	return s
}

type RowForGetDcBandwidthDailyPeakOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	AccountId *string `type:"string" json:",omitempty"`

	Date *string `type:"string" json:",omitempty"`

	DcId *string `type:"string" json:",omitempty"`

	DownPeakBandwidth *float64 `type:"double" json:",omitempty"`

	ProductId *string `type:"string" json:",omitempty"`

	UpPeakBandwidth *float64 `type:"double" json:",omitempty"`
}

// String returns the string representation
func (s RowForGetDcBandwidthDailyPeakOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s RowForGetDcBandwidthDailyPeakOutput) GoString() string {
	return s.String()
}

// SetAccountId sets the AccountId field's value.
func (s *RowForGetDcBandwidthDailyPeakOutput) SetAccountId(v string) *RowForGetDcBandwidthDailyPeakOutput {
	s.AccountId = &v
	return s
}

// SetDate sets the Date field's value.
func (s *RowForGetDcBandwidthDailyPeakOutput) SetDate(v string) *RowForGetDcBandwidthDailyPeakOutput {
	s.Date = &v
	return s
}

// SetDcId sets the DcId field's value.
func (s *RowForGetDcBandwidthDailyPeakOutput) SetDcId(v string) *RowForGetDcBandwidthDailyPeakOutput {
	s.DcId = &v
	return s
}

// SetDownPeakBandwidth sets the DownPeakBandwidth field's value.
func (s *RowForGetDcBandwidthDailyPeakOutput) SetDownPeakBandwidth(v float64) *RowForGetDcBandwidthDailyPeakOutput {
	s.DownPeakBandwidth = &v
	return s
}

// SetProductId sets the ProductId field's value.
func (s *RowForGetDcBandwidthDailyPeakOutput) SetProductId(v string) *RowForGetDcBandwidthDailyPeakOutput {
	s.ProductId = &v
	return s
}

// SetUpPeakBandwidth sets the UpPeakBandwidth field's value.
func (s *RowForGetDcBandwidthDailyPeakOutput) SetUpPeakBandwidth(v float64) *RowForGetDcBandwidthDailyPeakOutput {
	s.UpPeakBandwidth = &v
	return s
}
