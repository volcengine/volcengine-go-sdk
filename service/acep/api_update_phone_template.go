// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package acep

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opUpdatePhoneTemplateCommon = "UpdatePhoneTemplate"

// UpdatePhoneTemplateCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdatePhoneTemplateCommon operation. The "output" return
// value will be populated with the UpdatePhoneTemplateCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdatePhoneTemplateCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdatePhoneTemplateCommon Send returns without error.
//
// See UpdatePhoneTemplateCommon for more information on using the UpdatePhoneTemplateCommon
// API call, and error handling.
//
//    // Example sending a request using the UpdatePhoneTemplateCommonRequest method.
//    req, resp := client.UpdatePhoneTemplateCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ACEP) UpdatePhoneTemplateCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opUpdatePhoneTemplateCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdatePhoneTemplateCommon API operation for ACEP.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ACEP's
// API operation UpdatePhoneTemplateCommon for usage and error information.
func (c *ACEP) UpdatePhoneTemplateCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.UpdatePhoneTemplateCommonRequest(input)
	return out, req.Send()
}

// UpdatePhoneTemplateCommonWithContext is the same as UpdatePhoneTemplateCommon with the addition of
// the ability to pass a context and additional request options.
//
// See UpdatePhoneTemplateCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ACEP) UpdatePhoneTemplateCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.UpdatePhoneTemplateCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opUpdatePhoneTemplate = "UpdatePhoneTemplate"

// UpdatePhoneTemplateRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdatePhoneTemplate operation. The "output" return
// value will be populated with the UpdatePhoneTemplateCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdatePhoneTemplateCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdatePhoneTemplateCommon Send returns without error.
//
// See UpdatePhoneTemplate for more information on using the UpdatePhoneTemplate
// API call, and error handling.
//
//    // Example sending a request using the UpdatePhoneTemplateRequest method.
//    req, resp := client.UpdatePhoneTemplateRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ACEP) UpdatePhoneTemplateRequest(input *UpdatePhoneTemplateInput) (req *request.Request, output *UpdatePhoneTemplateOutput) {
	op := &request.Operation{
		Name:       opUpdatePhoneTemplate,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UpdatePhoneTemplateInput{}
	}

	output = &UpdatePhoneTemplateOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdatePhoneTemplate API operation for ACEP.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ACEP's
// API operation UpdatePhoneTemplate for usage and error information.
func (c *ACEP) UpdatePhoneTemplate(input *UpdatePhoneTemplateInput) (*UpdatePhoneTemplateOutput, error) {
	req, out := c.UpdatePhoneTemplateRequest(input)
	return out, req.Send()
}

// UpdatePhoneTemplateWithContext is the same as UpdatePhoneTemplate with the addition of
// the ability to pass a context and additional request options.
//
// See UpdatePhoneTemplate for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ACEP) UpdatePhoneTemplateWithContext(ctx volcengine.Context, input *UpdatePhoneTemplateInput, opts ...request.Option) (*UpdatePhoneTemplateOutput, error) {
	req, out := c.UpdatePhoneTemplateRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type UpdatePhoneTemplateInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// PhoneTemplateId is a required field
	PhoneTemplateId *string `type:"string" json:",omitempty" required:"true"`

	PhoneTemplateName *string `type:"string" json:",omitempty"`

	Status *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s UpdatePhoneTemplateInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdatePhoneTemplateInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UpdatePhoneTemplateInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "UpdatePhoneTemplateInput"}
	if s.PhoneTemplateId == nil {
		invalidParams.Add(request.NewErrParamRequired("PhoneTemplateId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetPhoneTemplateId sets the PhoneTemplateId field's value.
func (s *UpdatePhoneTemplateInput) SetPhoneTemplateId(v string) *UpdatePhoneTemplateInput {
	s.PhoneTemplateId = &v
	return s
}

// SetPhoneTemplateName sets the PhoneTemplateName field's value.
func (s *UpdatePhoneTemplateInput) SetPhoneTemplateName(v string) *UpdatePhoneTemplateInput {
	s.PhoneTemplateName = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *UpdatePhoneTemplateInput) SetStatus(v int32) *UpdatePhoneTemplateInput {
	s.Status = &v
	return s
}

type UpdatePhoneTemplateOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s UpdatePhoneTemplateOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdatePhoneTemplateOutput) GoString() string {
	return s.String()
}
