// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package acep

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDeleteBackupDataCommon = "DeleteBackupData"

// DeleteBackupDataCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteBackupDataCommon operation. The "output" return
// value will be populated with the DeleteBackupDataCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteBackupDataCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteBackupDataCommon Send returns without error.
//
// See DeleteBackupDataCommon for more information on using the DeleteBackupDataCommon
// API call, and error handling.
//
//    // Example sending a request using the DeleteBackupDataCommonRequest method.
//    req, resp := client.DeleteBackupDataCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ACEP) DeleteBackupDataCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteBackupDataCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DeleteBackupDataCommon API operation for ACEP.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ACEP's
// API operation DeleteBackupDataCommon for usage and error information.
func (c *ACEP) DeleteBackupDataCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteBackupDataCommonRequest(input)
	return out, req.Send()
}

// DeleteBackupDataCommonWithContext is the same as DeleteBackupDataCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteBackupDataCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ACEP) DeleteBackupDataCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteBackupDataCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteBackupData = "DeleteBackupData"

// DeleteBackupDataRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteBackupData operation. The "output" return
// value will be populated with the DeleteBackupDataCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteBackupDataCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteBackupDataCommon Send returns without error.
//
// See DeleteBackupData for more information on using the DeleteBackupData
// API call, and error handling.
//
//    // Example sending a request using the DeleteBackupDataRequest method.
//    req, resp := client.DeleteBackupDataRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ACEP) DeleteBackupDataRequest(input *DeleteBackupDataInput) (req *request.Request, output *DeleteBackupDataOutput) {
	op := &request.Operation{
		Name:       opDeleteBackupData,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteBackupDataInput{}
	}

	output = &DeleteBackupDataOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DeleteBackupData API operation for ACEP.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ACEP's
// API operation DeleteBackupData for usage and error information.
func (c *ACEP) DeleteBackupData(input *DeleteBackupDataInput) (*DeleteBackupDataOutput, error) {
	req, out := c.DeleteBackupDataRequest(input)
	return out, req.Send()
}

// DeleteBackupDataWithContext is the same as DeleteBackupData with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteBackupData for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ACEP) DeleteBackupDataWithContext(ctx volcengine.Context, input *DeleteBackupDataInput, opts ...request.Option) (*DeleteBackupDataOutput, error) {
	req, out := c.DeleteBackupDataRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DeleteBackupDataInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	BackupDataIdList []*string `type:"list" json:",omitempty"`

	// ProductId is a required field
	ProductId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s DeleteBackupDataInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteBackupDataInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeleteBackupDataInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DeleteBackupDataInput"}
	if s.ProductId == nil {
		invalidParams.Add(request.NewErrParamRequired("ProductId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetBackupDataIdList sets the BackupDataIdList field's value.
func (s *DeleteBackupDataInput) SetBackupDataIdList(v []*string) *DeleteBackupDataInput {
	s.BackupDataIdList = v
	return s
}

// SetProductId sets the ProductId field's value.
func (s *DeleteBackupDataInput) SetProductId(v string) *DeleteBackupDataInput {
	s.ProductId = &v
	return s
}

type DeleteBackupDataOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Details []*DetailForDeleteBackupDataOutput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s DeleteBackupDataOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteBackupDataOutput) GoString() string {
	return s.String()
}

// SetDetails sets the Details field's value.
func (s *DeleteBackupDataOutput) SetDetails(v []*DetailForDeleteBackupDataOutput) *DeleteBackupDataOutput {
	s.Details = v
	return s
}

type DetailForDeleteBackupDataOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	BackupDataId *string `type:"string" json:",omitempty"`

	ErrCode *int32 `type:"int32" json:",omitempty"`

	ErrMsg *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s DetailForDeleteBackupDataOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DetailForDeleteBackupDataOutput) GoString() string {
	return s.String()
}

// SetBackupDataId sets the BackupDataId field's value.
func (s *DetailForDeleteBackupDataOutput) SetBackupDataId(v string) *DetailForDeleteBackupDataOutput {
	s.BackupDataId = &v
	return s
}

// SetErrCode sets the ErrCode field's value.
func (s *DetailForDeleteBackupDataOutput) SetErrCode(v int32) *DetailForDeleteBackupDataOutput {
	s.ErrCode = &v
	return s
}

// SetErrMsg sets the ErrMsg field's value.
func (s *DetailForDeleteBackupDataOutput) SetErrMsg(v string) *DetailForDeleteBackupDataOutput {
	s.ErrMsg = &v
	return s
}
