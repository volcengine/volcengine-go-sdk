// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package clb

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDescribeNLBListenerHealthCommon = "DescribeNLBListenerHealth"

// DescribeNLBListenerHealthCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeNLBListenerHealthCommon operation. The "output" return
// value will be populated with the DescribeNLBListenerHealthCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeNLBListenerHealthCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeNLBListenerHealthCommon Send returns without error.
//
// See DescribeNLBListenerHealthCommon for more information on using the DescribeNLBListenerHealthCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeNLBListenerHealthCommonRequest method.
//    req, resp := client.DescribeNLBListenerHealthCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLB) DescribeNLBListenerHealthCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeNLBListenerHealthCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeNLBListenerHealthCommon API operation for CLB.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for CLB's
// API operation DescribeNLBListenerHealthCommon for usage and error information.
func (c *CLB) DescribeNLBListenerHealthCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeNLBListenerHealthCommonRequest(input)
	return out, req.Send()
}

// DescribeNLBListenerHealthCommonWithContext is the same as DescribeNLBListenerHealthCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeNLBListenerHealthCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLB) DescribeNLBListenerHealthCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeNLBListenerHealthCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeNLBListenerHealth = "DescribeNLBListenerHealth"

// DescribeNLBListenerHealthRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeNLBListenerHealth operation. The "output" return
// value will be populated with the DescribeNLBListenerHealthCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeNLBListenerHealthCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeNLBListenerHealthCommon Send returns without error.
//
// See DescribeNLBListenerHealth for more information on using the DescribeNLBListenerHealth
// API call, and error handling.
//
//    // Example sending a request using the DescribeNLBListenerHealthRequest method.
//    req, resp := client.DescribeNLBListenerHealthRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLB) DescribeNLBListenerHealthRequest(input *DescribeNLBListenerHealthInput) (req *request.Request, output *DescribeNLBListenerHealthOutput) {
	op := &request.Operation{
		Name:       opDescribeNLBListenerHealth,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeNLBListenerHealthInput{}
	}

	output = &DescribeNLBListenerHealthOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeNLBListenerHealth API operation for CLB.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for CLB's
// API operation DescribeNLBListenerHealth for usage and error information.
func (c *CLB) DescribeNLBListenerHealth(input *DescribeNLBListenerHealthInput) (*DescribeNLBListenerHealthOutput, error) {
	req, out := c.DescribeNLBListenerHealthRequest(input)
	return out, req.Send()
}

// DescribeNLBListenerHealthWithContext is the same as DescribeNLBListenerHealth with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeNLBListenerHealth for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLB) DescribeNLBListenerHealthWithContext(ctx volcengine.Context, input *DescribeNLBListenerHealthInput, opts ...request.Option) (*DescribeNLBListenerHealthOutput, error) {
	req, out := c.DescribeNLBListenerHealthRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DescribeNLBListenerHealthInput struct {
	_ struct{} `type:"structure"`

	// ListenerId is a required field
	ListenerId *string `type:"string" required:"true"`

	MaxResults *int64 `type:"integer"`

	NextToken *string `type:"string"`

	OnlyUnhealthy *bool `type:"boolean"`
}

// String returns the string representation
func (s DescribeNLBListenerHealthInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeNLBListenerHealthInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeNLBListenerHealthInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DescribeNLBListenerHealthInput"}
	if s.ListenerId == nil {
		invalidParams.Add(request.NewErrParamRequired("ListenerId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetListenerId sets the ListenerId field's value.
func (s *DescribeNLBListenerHealthInput) SetListenerId(v string) *DescribeNLBListenerHealthInput {
	s.ListenerId = &v
	return s
}

// SetMaxResults sets the MaxResults field's value.
func (s *DescribeNLBListenerHealthInput) SetMaxResults(v int64) *DescribeNLBListenerHealthInput {
	s.MaxResults = &v
	return s
}

// SetNextToken sets the NextToken field's value.
func (s *DescribeNLBListenerHealthInput) SetNextToken(v string) *DescribeNLBListenerHealthInput {
	s.NextToken = &v
	return s
}

// SetOnlyUnhealthy sets the OnlyUnhealthy field's value.
func (s *DescribeNLBListenerHealthInput) SetOnlyUnhealthy(v bool) *DescribeNLBListenerHealthInput {
	s.OnlyUnhealthy = &v
	return s
}

type DescribeNLBListenerHealthOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	HealthyCount *int64 `type:"integer"`

	ListenerId *string `type:"string"`

	NextToken *string `type:"string"`

	RequestId *string `type:"string"`

	Results []*ResultForDescribeNLBListenerHealthOutput `type:"list"`

	ServerGroupId *string `type:"string"`

	Status *string `type:"string"`

	UnhealthyCount *int64 `type:"integer"`
}

// String returns the string representation
func (s DescribeNLBListenerHealthOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeNLBListenerHealthOutput) GoString() string {
	return s.String()
}

// SetHealthyCount sets the HealthyCount field's value.
func (s *DescribeNLBListenerHealthOutput) SetHealthyCount(v int64) *DescribeNLBListenerHealthOutput {
	s.HealthyCount = &v
	return s
}

// SetListenerId sets the ListenerId field's value.
func (s *DescribeNLBListenerHealthOutput) SetListenerId(v string) *DescribeNLBListenerHealthOutput {
	s.ListenerId = &v
	return s
}

// SetNextToken sets the NextToken field's value.
func (s *DescribeNLBListenerHealthOutput) SetNextToken(v string) *DescribeNLBListenerHealthOutput {
	s.NextToken = &v
	return s
}

// SetRequestId sets the RequestId field's value.
func (s *DescribeNLBListenerHealthOutput) SetRequestId(v string) *DescribeNLBListenerHealthOutput {
	s.RequestId = &v
	return s
}

// SetResults sets the Results field's value.
func (s *DescribeNLBListenerHealthOutput) SetResults(v []*ResultForDescribeNLBListenerHealthOutput) *DescribeNLBListenerHealthOutput {
	s.Results = v
	return s
}

// SetServerGroupId sets the ServerGroupId field's value.
func (s *DescribeNLBListenerHealthOutput) SetServerGroupId(v string) *DescribeNLBListenerHealthOutput {
	s.ServerGroupId = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *DescribeNLBListenerHealthOutput) SetStatus(v string) *DescribeNLBListenerHealthOutput {
	s.Status = &v
	return s
}

// SetUnhealthyCount sets the UnhealthyCount field's value.
func (s *DescribeNLBListenerHealthOutput) SetUnhealthyCount(v int64) *DescribeNLBListenerHealthOutput {
	s.UnhealthyCount = &v
	return s
}

type ResultForDescribeNLBListenerHealthOutput struct {
	_ struct{} `type:"structure"`

	InstanceId *string `type:"string"`

	Ip *string `type:"string"`

	Port *int64 `type:"integer"`

	ServerId *string `type:"string"`

	ServerType *string `type:"string"`

	Status *string `type:"string"`

	UpdateTime *string `type:"string"`

	ZoneId *string `type:"string"`
}

// String returns the string representation
func (s ResultForDescribeNLBListenerHealthOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ResultForDescribeNLBListenerHealthOutput) GoString() string {
	return s.String()
}

// SetInstanceId sets the InstanceId field's value.
func (s *ResultForDescribeNLBListenerHealthOutput) SetInstanceId(v string) *ResultForDescribeNLBListenerHealthOutput {
	s.InstanceId = &v
	return s
}

// SetIp sets the Ip field's value.
func (s *ResultForDescribeNLBListenerHealthOutput) SetIp(v string) *ResultForDescribeNLBListenerHealthOutput {
	s.Ip = &v
	return s
}

// SetPort sets the Port field's value.
func (s *ResultForDescribeNLBListenerHealthOutput) SetPort(v int64) *ResultForDescribeNLBListenerHealthOutput {
	s.Port = &v
	return s
}

// SetServerId sets the ServerId field's value.
func (s *ResultForDescribeNLBListenerHealthOutput) SetServerId(v string) *ResultForDescribeNLBListenerHealthOutput {
	s.ServerId = &v
	return s
}

// SetServerType sets the ServerType field's value.
func (s *ResultForDescribeNLBListenerHealthOutput) SetServerType(v string) *ResultForDescribeNLBListenerHealthOutput {
	s.ServerType = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *ResultForDescribeNLBListenerHealthOutput) SetStatus(v string) *ResultForDescribeNLBListenerHealthOutput {
	s.Status = &v
	return s
}

// SetUpdateTime sets the UpdateTime field's value.
func (s *ResultForDescribeNLBListenerHealthOutput) SetUpdateTime(v string) *ResultForDescribeNLBListenerHealthOutput {
	s.UpdateTime = &v
	return s
}

// SetZoneId sets the ZoneId field's value.
func (s *ResultForDescribeNLBListenerHealthOutput) SetZoneId(v string) *ResultForDescribeNLBListenerHealthOutput {
	s.ZoneId = &v
	return s
}
