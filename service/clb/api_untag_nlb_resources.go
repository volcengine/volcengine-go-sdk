// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package clb

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opUntagNLBResourcesCommon = "UntagNLBResources"

// UntagNLBResourcesCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the UntagNLBResourcesCommon operation. The "output" return
// value will be populated with the UntagNLBResourcesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UntagNLBResourcesCommon Request to send the API call to the service.
// the "output" return value is not valid until after UntagNLBResourcesCommon Send returns without error.
//
// See UntagNLBResourcesCommon for more information on using the UntagNLBResourcesCommon
// API call, and error handling.
//
//    // Example sending a request using the UntagNLBResourcesCommonRequest method.
//    req, resp := client.UntagNLBResourcesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLB) UntagNLBResourcesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opUntagNLBResourcesCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// UntagNLBResourcesCommon API operation for CLB.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for CLB's
// API operation UntagNLBResourcesCommon for usage and error information.
func (c *CLB) UntagNLBResourcesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.UntagNLBResourcesCommonRequest(input)
	return out, req.Send()
}

// UntagNLBResourcesCommonWithContext is the same as UntagNLBResourcesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See UntagNLBResourcesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLB) UntagNLBResourcesCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.UntagNLBResourcesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opUntagNLBResources = "UntagNLBResources"

// UntagNLBResourcesRequest generates a "volcengine/request.Request" representing the
// client's request for the UntagNLBResources operation. The "output" return
// value will be populated with the UntagNLBResourcesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UntagNLBResourcesCommon Request to send the API call to the service.
// the "output" return value is not valid until after UntagNLBResourcesCommon Send returns without error.
//
// See UntagNLBResources for more information on using the UntagNLBResources
// API call, and error handling.
//
//    // Example sending a request using the UntagNLBResourcesRequest method.
//    req, resp := client.UntagNLBResourcesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLB) UntagNLBResourcesRequest(input *UntagNLBResourcesInput) (req *request.Request, output *UntagNLBResourcesOutput) {
	op := &request.Operation{
		Name:       opUntagNLBResources,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UntagNLBResourcesInput{}
	}

	output = &UntagNLBResourcesOutput{}
	req = c.newRequest(op, input, output)

	return
}

// UntagNLBResources API operation for CLB.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for CLB's
// API operation UntagNLBResources for usage and error information.
func (c *CLB) UntagNLBResources(input *UntagNLBResourcesInput) (*UntagNLBResourcesOutput, error) {
	req, out := c.UntagNLBResourcesRequest(input)
	return out, req.Send()
}

// UntagNLBResourcesWithContext is the same as UntagNLBResources with the addition of
// the ability to pass a context and additional request options.
//
// See UntagNLBResources for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLB) UntagNLBResourcesWithContext(ctx volcengine.Context, input *UntagNLBResourcesInput, opts ...request.Option) (*UntagNLBResourcesOutput, error) {
	req, out := c.UntagNLBResourcesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type UntagNLBResourcesInput struct {
	_ struct{} `type:"structure"`

	// ResourceIds is a required field
	ResourceIds []*string `type:"list" required:"true"`

	// ResourceType is a required field
	ResourceType *string `type:"string" required:"true" enum:"ResourceTypeForUntagNLBResourcesInput"`

	// TagKeys is a required field
	TagKeys []*string `type:"list" required:"true"`
}

// String returns the string representation
func (s UntagNLBResourcesInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UntagNLBResourcesInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UntagNLBResourcesInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "UntagNLBResourcesInput"}
	if s.ResourceIds == nil {
		invalidParams.Add(request.NewErrParamRequired("ResourceIds"))
	}
	if s.ResourceType == nil {
		invalidParams.Add(request.NewErrParamRequired("ResourceType"))
	}
	if s.TagKeys == nil {
		invalidParams.Add(request.NewErrParamRequired("TagKeys"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetResourceIds sets the ResourceIds field's value.
func (s *UntagNLBResourcesInput) SetResourceIds(v []*string) *UntagNLBResourcesInput {
	s.ResourceIds = v
	return s
}

// SetResourceType sets the ResourceType field's value.
func (s *UntagNLBResourcesInput) SetResourceType(v string) *UntagNLBResourcesInput {
	s.ResourceType = &v
	return s
}

// SetTagKeys sets the TagKeys field's value.
func (s *UntagNLBResourcesInput) SetTagKeys(v []*string) *UntagNLBResourcesInput {
	s.TagKeys = v
	return s
}

type UntagNLBResourcesOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	RequestId *string `type:"string"`
}

// String returns the string representation
func (s UntagNLBResourcesOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UntagNLBResourcesOutput) GoString() string {
	return s.String()
}

// SetRequestId sets the RequestId field's value.
func (s *UntagNLBResourcesOutput) SetRequestId(v string) *UntagNLBResourcesOutput {
	s.RequestId = &v
	return s
}

const (
	// ResourceTypeForUntagNLBResourcesInputNlb is a ResourceTypeForUntagNLBResourcesInput enum value
	ResourceTypeForUntagNLBResourcesInputNlb = "nlb"

	// ResourceTypeForUntagNLBResourcesInputNlbListener is a ResourceTypeForUntagNLBResourcesInput enum value
	ResourceTypeForUntagNLBResourcesInputNlbListener = "nlb_listener"

	// ResourceTypeForUntagNLBResourcesInputNlbServergroup is a ResourceTypeForUntagNLBResourcesInput enum value
	ResourceTypeForUntagNLBResourcesInputNlbServergroup = "nlb_servergroup"

	// ResourceTypeForUntagNLBResourcesInputNlbSecurityPolicy is a ResourceTypeForUntagNLBResourcesInput enum value
	ResourceTypeForUntagNLBResourcesInputNlbSecurityPolicy = "nlb_security_policy"
)
