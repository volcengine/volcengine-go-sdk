// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package dbw

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDescribeAuditLogConfigCommon = "DescribeAuditLogConfig"

// DescribeAuditLogConfigCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeAuditLogConfigCommon operation. The "output" return
// value will be populated with the DescribeAuditLogConfigCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeAuditLogConfigCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeAuditLogConfigCommon Send returns without error.
//
// See DescribeAuditLogConfigCommon for more information on using the DescribeAuditLogConfigCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeAuditLogConfigCommonRequest method.
//    req, resp := client.DescribeAuditLogConfigCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DBW) DescribeAuditLogConfigCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeAuditLogConfigCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeAuditLogConfigCommon API operation for DBW.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for DBW's
// API operation DescribeAuditLogConfigCommon for usage and error information.
func (c *DBW) DescribeAuditLogConfigCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeAuditLogConfigCommonRequest(input)
	return out, req.Send()
}

// DescribeAuditLogConfigCommonWithContext is the same as DescribeAuditLogConfigCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeAuditLogConfigCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DBW) DescribeAuditLogConfigCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeAuditLogConfigCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeAuditLogConfig = "DescribeAuditLogConfig"

// DescribeAuditLogConfigRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeAuditLogConfig operation. The "output" return
// value will be populated with the DescribeAuditLogConfigCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeAuditLogConfigCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeAuditLogConfigCommon Send returns without error.
//
// See DescribeAuditLogConfig for more information on using the DescribeAuditLogConfig
// API call, and error handling.
//
//    // Example sending a request using the DescribeAuditLogConfigRequest method.
//    req, resp := client.DescribeAuditLogConfigRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DBW) DescribeAuditLogConfigRequest(input *DescribeAuditLogConfigInput) (req *request.Request, output *DescribeAuditLogConfigOutput) {
	op := &request.Operation{
		Name:       opDescribeAuditLogConfig,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeAuditLogConfigInput{}
	}

	output = &DescribeAuditLogConfigOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeAuditLogConfig API operation for DBW.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for DBW's
// API operation DescribeAuditLogConfig for usage and error information.
func (c *DBW) DescribeAuditLogConfig(input *DescribeAuditLogConfigInput) (*DescribeAuditLogConfigOutput, error) {
	req, out := c.DescribeAuditLogConfigRequest(input)
	return out, req.Send()
}

// DescribeAuditLogConfigWithContext is the same as DescribeAuditLogConfig with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeAuditLogConfig for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DBW) DescribeAuditLogConfigWithContext(ctx volcengine.Context, input *DescribeAuditLogConfigInput, opts ...request.Option) (*DescribeAuditLogConfigOutput, error) {
	req, out := c.DescribeAuditLogConfigRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DescribeAuditLogConfigInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:",omitempty" required:"true"`

	// InstanceType is a required field
	InstanceType *string `type:"string" json:",omitempty" required:"true" enum:"EnumOfInstanceTypeForDescribeAuditLogConfigInput"`
}

// String returns the string representation
func (s DescribeAuditLogConfigInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeAuditLogConfigInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeAuditLogConfigInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DescribeAuditLogConfigInput"}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}
	if s.InstanceType == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceType"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetInstanceId sets the InstanceId field's value.
func (s *DescribeAuditLogConfigInput) SetInstanceId(v string) *DescribeAuditLogConfigInput {
	s.InstanceId = &v
	return s
}

// SetInstanceType sets the InstanceType field's value.
func (s *DescribeAuditLogConfigInput) SetInstanceType(v string) *DescribeAuditLogConfigInput {
	s.InstanceType = &v
	return s
}

type DescribeAuditLogConfigOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	SqlRetentionDay *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s DescribeAuditLogConfigOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeAuditLogConfigOutput) GoString() string {
	return s.String()
}

// SetSqlRetentionDay sets the SqlRetentionDay field's value.
func (s *DescribeAuditLogConfigOutput) SetSqlRetentionDay(v int32) *DescribeAuditLogConfigOutput {
	s.SqlRetentionDay = &v
	return s
}

const (
	// EnumOfInstanceTypeForDescribeAuditLogConfigInputMySql is a EnumOfInstanceTypeForDescribeAuditLogConfigInput enum value
	EnumOfInstanceTypeForDescribeAuditLogConfigInputMySql = "MySQL"

	// EnumOfInstanceTypeForDescribeAuditLogConfigInputPostgres is a EnumOfInstanceTypeForDescribeAuditLogConfigInput enum value
	EnumOfInstanceTypeForDescribeAuditLogConfigInputPostgres = "Postgres"

	// EnumOfInstanceTypeForDescribeAuditLogConfigInputMongo is a EnumOfInstanceTypeForDescribeAuditLogConfigInput enum value
	EnumOfInstanceTypeForDescribeAuditLogConfigInputMongo = "Mongo"

	// EnumOfInstanceTypeForDescribeAuditLogConfigInputRedis is a EnumOfInstanceTypeForDescribeAuditLogConfigInput enum value
	EnumOfInstanceTypeForDescribeAuditLogConfigInputRedis = "Redis"

	// EnumOfInstanceTypeForDescribeAuditLogConfigInputVeDbmySql is a EnumOfInstanceTypeForDescribeAuditLogConfigInput enum value
	EnumOfInstanceTypeForDescribeAuditLogConfigInputVeDbmySql = "VeDBMySQL"

	// EnumOfInstanceTypeForDescribeAuditLogConfigInputMetaRds is a EnumOfInstanceTypeForDescribeAuditLogConfigInput enum value
	EnumOfInstanceTypeForDescribeAuditLogConfigInputMetaRds = "MetaRDS"

	// EnumOfInstanceTypeForDescribeAuditLogConfigInputMssql is a EnumOfInstanceTypeForDescribeAuditLogConfigInput enum value
	EnumOfInstanceTypeForDescribeAuditLogConfigInputMssql = "MSSQL"

	// EnumOfInstanceTypeForDescribeAuditLogConfigInputByteRds is a EnumOfInstanceTypeForDescribeAuditLogConfigInput enum value
	EnumOfInstanceTypeForDescribeAuditLogConfigInputByteRds = "ByteRDS"

	// EnumOfInstanceTypeForDescribeAuditLogConfigInputMySqlsharding is a EnumOfInstanceTypeForDescribeAuditLogConfigInput enum value
	EnumOfInstanceTypeForDescribeAuditLogConfigInputMySqlsharding = "MySQLSharding"

	// EnumOfInstanceTypeForDescribeAuditLogConfigInputMetaMySql is a EnumOfInstanceTypeForDescribeAuditLogConfigInput enum value
	EnumOfInstanceTypeForDescribeAuditLogConfigInputMetaMySql = "MetaMySQL"
)
