// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package bmq

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opPreviewTopicDataCommon = "PreviewTopicData"

// PreviewTopicDataCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the PreviewTopicDataCommon operation. The "output" return
// value will be populated with the PreviewTopicDataCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned PreviewTopicDataCommon Request to send the API call to the service.
// the "output" return value is not valid until after PreviewTopicDataCommon Send returns without error.
//
// See PreviewTopicDataCommon for more information on using the PreviewTopicDataCommon
// API call, and error handling.
//
//    // Example sending a request using the PreviewTopicDataCommonRequest method.
//    req, resp := client.PreviewTopicDataCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BMQ) PreviewTopicDataCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opPreviewTopicDataCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// PreviewTopicDataCommon API operation for BMQ.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BMQ's
// API operation PreviewTopicDataCommon for usage and error information.
func (c *BMQ) PreviewTopicDataCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.PreviewTopicDataCommonRequest(input)
	return out, req.Send()
}

// PreviewTopicDataCommonWithContext is the same as PreviewTopicDataCommon with the addition of
// the ability to pass a context and additional request options.
//
// See PreviewTopicDataCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BMQ) PreviewTopicDataCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.PreviewTopicDataCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opPreviewTopicData = "PreviewTopicData"

// PreviewTopicDataRequest generates a "volcengine/request.Request" representing the
// client's request for the PreviewTopicData operation. The "output" return
// value will be populated with the PreviewTopicDataCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned PreviewTopicDataCommon Request to send the API call to the service.
// the "output" return value is not valid until after PreviewTopicDataCommon Send returns without error.
//
// See PreviewTopicData for more information on using the PreviewTopicData
// API call, and error handling.
//
//    // Example sending a request using the PreviewTopicDataRequest method.
//    req, resp := client.PreviewTopicDataRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BMQ) PreviewTopicDataRequest(input *PreviewTopicDataInput) (req *request.Request, output *PreviewTopicDataOutput) {
	op := &request.Operation{
		Name:       opPreviewTopicData,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &PreviewTopicDataInput{}
	}

	output = &PreviewTopicDataOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// PreviewTopicData API operation for BMQ.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BMQ's
// API operation PreviewTopicData for usage and error information.
func (c *BMQ) PreviewTopicData(input *PreviewTopicDataInput) (*PreviewTopicDataOutput, error) {
	req, out := c.PreviewTopicDataRequest(input)
	return out, req.Send()
}

// PreviewTopicDataWithContext is the same as PreviewTopicData with the addition of
// the ability to pass a context and additional request options.
//
// See PreviewTopicData for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BMQ) PreviewTopicDataWithContext(ctx volcengine.Context, input *PreviewTopicDataInput, opts ...request.Option) (*PreviewTopicDataOutput, error) {
	req, out := c.PreviewTopicDataRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type HeaderForPreviewTopicDataOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`
}

// String returns the string representation
func (s HeaderForPreviewTopicDataOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s HeaderForPreviewTopicDataOutput) GoString() string {
	return s.String()
}

type ItemForPreviewTopicDataOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Header *HeaderForPreviewTopicDataOutput `type:"structure" json:",omitempty"`

	Key *string `type:"string" json:",omitempty"`

	Offset *int64 `type:"int64" json:",omitempty"`

	PartitionId *int32 `type:"int32" json:",omitempty"`

	Timestamp *int64 `type:"int64" json:",omitempty"`

	TopicName *string `type:"string" json:",omitempty"`

	Value *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ItemForPreviewTopicDataOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ItemForPreviewTopicDataOutput) GoString() string {
	return s.String()
}

// SetHeader sets the Header field's value.
func (s *ItemForPreviewTopicDataOutput) SetHeader(v *HeaderForPreviewTopicDataOutput) *ItemForPreviewTopicDataOutput {
	s.Header = v
	return s
}

// SetKey sets the Key field's value.
func (s *ItemForPreviewTopicDataOutput) SetKey(v string) *ItemForPreviewTopicDataOutput {
	s.Key = &v
	return s
}

// SetOffset sets the Offset field's value.
func (s *ItemForPreviewTopicDataOutput) SetOffset(v int64) *ItemForPreviewTopicDataOutput {
	s.Offset = &v
	return s
}

// SetPartitionId sets the PartitionId field's value.
func (s *ItemForPreviewTopicDataOutput) SetPartitionId(v int32) *ItemForPreviewTopicDataOutput {
	s.PartitionId = &v
	return s
}

// SetTimestamp sets the Timestamp field's value.
func (s *ItemForPreviewTopicDataOutput) SetTimestamp(v int64) *ItemForPreviewTopicDataOutput {
	s.Timestamp = &v
	return s
}

// SetTopicName sets the TopicName field's value.
func (s *ItemForPreviewTopicDataOutput) SetTopicName(v string) *ItemForPreviewTopicDataOutput {
	s.TopicName = &v
	return s
}

// SetValue sets the Value field's value.
func (s *ItemForPreviewTopicDataOutput) SetValue(v string) *ItemForPreviewTopicDataOutput {
	s.Value = &v
	return s
}

type PreviewTopicDataInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	EndValue *int64 `type:"int64" json:",omitempty"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:",omitempty" required:"true"`

	PageNumber *int32 `type:"int32" json:",omitempty"`

	PageSize *int32 `type:"int32" json:",omitempty"`

	Partitions []*int32 `type:"list" json:",omitempty"`

	// PreviewType is a required field
	PreviewType *string `type:"string" json:",omitempty" required:"true"`

	// RelativeValue is a required field
	RelativeValue *int64 `type:"int64" json:",omitempty" required:"true"`

	// TopicName is a required field
	TopicName *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s PreviewTopicDataInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s PreviewTopicDataInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *PreviewTopicDataInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "PreviewTopicDataInput"}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}
	if s.PreviewType == nil {
		invalidParams.Add(request.NewErrParamRequired("PreviewType"))
	}
	if s.RelativeValue == nil {
		invalidParams.Add(request.NewErrParamRequired("RelativeValue"))
	}
	if s.TopicName == nil {
		invalidParams.Add(request.NewErrParamRequired("TopicName"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetEndValue sets the EndValue field's value.
func (s *PreviewTopicDataInput) SetEndValue(v int64) *PreviewTopicDataInput {
	s.EndValue = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *PreviewTopicDataInput) SetInstanceId(v string) *PreviewTopicDataInput {
	s.InstanceId = &v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *PreviewTopicDataInput) SetPageNumber(v int32) *PreviewTopicDataInput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *PreviewTopicDataInput) SetPageSize(v int32) *PreviewTopicDataInput {
	s.PageSize = &v
	return s
}

// SetPartitions sets the Partitions field's value.
func (s *PreviewTopicDataInput) SetPartitions(v []*int32) *PreviewTopicDataInput {
	s.Partitions = v
	return s
}

// SetPreviewType sets the PreviewType field's value.
func (s *PreviewTopicDataInput) SetPreviewType(v string) *PreviewTopicDataInput {
	s.PreviewType = &v
	return s
}

// SetRelativeValue sets the RelativeValue field's value.
func (s *PreviewTopicDataInput) SetRelativeValue(v int64) *PreviewTopicDataInput {
	s.RelativeValue = &v
	return s
}

// SetTopicName sets the TopicName field's value.
func (s *PreviewTopicDataInput) SetTopicName(v string) *PreviewTopicDataInput {
	s.TopicName = &v
	return s
}

type PreviewTopicDataOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Items []*ItemForPreviewTopicDataOutput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s PreviewTopicDataOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s PreviewTopicDataOutput) GoString() string {
	return s.String()
}

// SetItems sets the Items field's value.
func (s *PreviewTopicDataOutput) SetItems(v []*ItemForPreviewTopicDataOutput) *PreviewTopicDataOutput {
	s.Items = v
	return s
}
