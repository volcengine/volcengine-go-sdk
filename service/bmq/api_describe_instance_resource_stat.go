// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package bmq

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDescribeInstanceResourceStatCommon = "DescribeInstanceResourceStat"

// DescribeInstanceResourceStatCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeInstanceResourceStatCommon operation. The "output" return
// value will be populated with the DescribeInstanceResourceStatCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeInstanceResourceStatCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeInstanceResourceStatCommon Send returns without error.
//
// See DescribeInstanceResourceStatCommon for more information on using the DescribeInstanceResourceStatCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeInstanceResourceStatCommonRequest method.
//    req, resp := client.DescribeInstanceResourceStatCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BMQ) DescribeInstanceResourceStatCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeInstanceResourceStatCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeInstanceResourceStatCommon API operation for BMQ.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BMQ's
// API operation DescribeInstanceResourceStatCommon for usage and error information.
func (c *BMQ) DescribeInstanceResourceStatCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeInstanceResourceStatCommonRequest(input)
	return out, req.Send()
}

// DescribeInstanceResourceStatCommonWithContext is the same as DescribeInstanceResourceStatCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeInstanceResourceStatCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BMQ) DescribeInstanceResourceStatCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeInstanceResourceStatCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeInstanceResourceStat = "DescribeInstanceResourceStat"

// DescribeInstanceResourceStatRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeInstanceResourceStat operation. The "output" return
// value will be populated with the DescribeInstanceResourceStatCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeInstanceResourceStatCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeInstanceResourceStatCommon Send returns without error.
//
// See DescribeInstanceResourceStat for more information on using the DescribeInstanceResourceStat
// API call, and error handling.
//
//    // Example sending a request using the DescribeInstanceResourceStatRequest method.
//    req, resp := client.DescribeInstanceResourceStatRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BMQ) DescribeInstanceResourceStatRequest(input *DescribeInstanceResourceStatInput) (req *request.Request, output *DescribeInstanceResourceStatOutput) {
	op := &request.Operation{
		Name:       opDescribeInstanceResourceStat,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeInstanceResourceStatInput{}
	}

	output = &DescribeInstanceResourceStatOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeInstanceResourceStat API operation for BMQ.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BMQ's
// API operation DescribeInstanceResourceStat for usage and error information.
func (c *BMQ) DescribeInstanceResourceStat(input *DescribeInstanceResourceStatInput) (*DescribeInstanceResourceStatOutput, error) {
	req, out := c.DescribeInstanceResourceStatRequest(input)
	return out, req.Send()
}

// DescribeInstanceResourceStatWithContext is the same as DescribeInstanceResourceStat with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeInstanceResourceStat for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BMQ) DescribeInstanceResourceStatWithContext(ctx volcengine.Context, input *DescribeInstanceResourceStatInput, opts ...request.Option) (*DescribeInstanceResourceStatOutput, error) {
	req, out := c.DescribeInstanceResourceStatRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DescribeInstanceResourceStatInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:",omitempty" required:"true"`

	WithGroup *bool `type:"boolean" json:",omitempty"`

	WithPartition *bool `type:"boolean" json:",omitempty"`

	WithTopic *bool `type:"boolean" json:",omitempty"`
}

// String returns the string representation
func (s DescribeInstanceResourceStatInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeInstanceResourceStatInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeInstanceResourceStatInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DescribeInstanceResourceStatInput"}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetInstanceId sets the InstanceId field's value.
func (s *DescribeInstanceResourceStatInput) SetInstanceId(v string) *DescribeInstanceResourceStatInput {
	s.InstanceId = &v
	return s
}

// SetWithGroup sets the WithGroup field's value.
func (s *DescribeInstanceResourceStatInput) SetWithGroup(v bool) *DescribeInstanceResourceStatInput {
	s.WithGroup = &v
	return s
}

// SetWithPartition sets the WithPartition field's value.
func (s *DescribeInstanceResourceStatInput) SetWithPartition(v bool) *DescribeInstanceResourceStatInput {
	s.WithPartition = &v
	return s
}

// SetWithTopic sets the WithTopic field's value.
func (s *DescribeInstanceResourceStatInput) SetWithTopic(v bool) *DescribeInstanceResourceStatInput {
	s.WithTopic = &v
	return s
}

type DescribeInstanceResourceStatOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	InstanceId *string `type:"string" json:",omitempty"`

	TotalGroups *int32 `type:"int32" json:",omitempty"`

	TotalPartitions *int32 `type:"int32" json:",omitempty"`

	TotalTopics *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s DescribeInstanceResourceStatOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeInstanceResourceStatOutput) GoString() string {
	return s.String()
}

// SetInstanceId sets the InstanceId field's value.
func (s *DescribeInstanceResourceStatOutput) SetInstanceId(v string) *DescribeInstanceResourceStatOutput {
	s.InstanceId = &v
	return s
}

// SetTotalGroups sets the TotalGroups field's value.
func (s *DescribeInstanceResourceStatOutput) SetTotalGroups(v int32) *DescribeInstanceResourceStatOutput {
	s.TotalGroups = &v
	return s
}

// SetTotalPartitions sets the TotalPartitions field's value.
func (s *DescribeInstanceResourceStatOutput) SetTotalPartitions(v int32) *DescribeInstanceResourceStatOutput {
	s.TotalPartitions = &v
	return s
}

// SetTotalTopics sets the TotalTopics field's value.
func (s *DescribeInstanceResourceStatOutput) SetTotalTopics(v int32) *DescribeInstanceResourceStatOutput {
	s.TotalTopics = &v
	return s
}
