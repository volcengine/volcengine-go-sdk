// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package bmq

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opCreateInstanceCommon = "CreateInstance"

// CreateInstanceCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateInstanceCommon operation. The "output" return
// value will be populated with the CreateInstanceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateInstanceCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateInstanceCommon Send returns without error.
//
// See CreateInstanceCommon for more information on using the CreateInstanceCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateInstanceCommonRequest method.
//    req, resp := client.CreateInstanceCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BMQ) CreateInstanceCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateInstanceCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateInstanceCommon API operation for BMQ.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BMQ's
// API operation CreateInstanceCommon for usage and error information.
func (c *BMQ) CreateInstanceCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateInstanceCommonRequest(input)
	return out, req.Send()
}

// CreateInstanceCommonWithContext is the same as CreateInstanceCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateInstanceCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BMQ) CreateInstanceCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateInstanceCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateInstance = "CreateInstance"

// CreateInstanceRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateInstance operation. The "output" return
// value will be populated with the CreateInstanceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateInstanceCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateInstanceCommon Send returns without error.
//
// See CreateInstance for more information on using the CreateInstance
// API call, and error handling.
//
//    // Example sending a request using the CreateInstanceRequest method.
//    req, resp := client.CreateInstanceRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BMQ) CreateInstanceRequest(input *CreateInstanceInput) (req *request.Request, output *CreateInstanceOutput) {
	op := &request.Operation{
		Name:       opCreateInstance,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateInstanceInput{}
	}

	output = &CreateInstanceOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateInstance API operation for BMQ.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BMQ's
// API operation CreateInstance for usage and error information.
func (c *BMQ) CreateInstance(input *CreateInstanceInput) (*CreateInstanceOutput, error) {
	req, out := c.CreateInstanceRequest(input)
	return out, req.Send()
}

// CreateInstanceWithContext is the same as CreateInstance with the addition of
// the ability to pass a context and additional request options.
//
// See CreateInstance for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BMQ) CreateInstanceWithContext(ctx volcengine.Context, input *CreateInstanceInput, opts ...request.Option) (*CreateInstanceOutput, error) {
	req, out := c.CreateInstanceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type CreateInstanceInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	AutoRenew *bool `type:"boolean" json:",omitempty"`

	BillingPeriod *string `type:"string" json:",omitempty" enum:"EnumOfBillingPeriodForCreateInstanceInput"`

	// BillingType is a required field
	BillingType *string `type:"string" json:",omitempty" required:"true" enum:"EnumOfBillingTypeForCreateInstanceInput"`

	Description *string `type:"string" json:",omitempty"`

	EipId *string `type:"string" json:",omitempty"`

	MessageRetention *int32 `max:"336" type:"int32" json:",omitempty"`

	// Name is a required field
	Name *string `min:"3" max:"128" type:"string" json:",omitempty" required:"true"`

	ProjectName *string `type:"string" json:",omitempty"`

	SecurityGroupIdList []*string `type:"list" json:",omitempty"`

	// Specification is a required field
	Specification *string `type:"string" json:",omitempty" required:"true"`

	SubnetIdList []*string `type:"list" json:",omitempty"`

	Times *int32 `type:"int32" json:",omitempty"`

	// VpcId is a required field
	VpcId *string `type:"string" json:",omitempty" required:"true"`

	ZoneIdList []*string `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s CreateInstanceInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateInstanceInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateInstanceInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CreateInstanceInput"}
	if s.BillingType == nil {
		invalidParams.Add(request.NewErrParamRequired("BillingType"))
	}
	if s.MessageRetention != nil && *s.MessageRetention > 336 {
		invalidParams.Add(request.NewErrParamMaxValue("MessageRetention", 336))
	}
	if s.Name == nil {
		invalidParams.Add(request.NewErrParamRequired("Name"))
	}
	if s.Name != nil && len(*s.Name) < 3 {
		invalidParams.Add(request.NewErrParamMinLen("Name", 3))
	}
	if s.Name != nil && len(*s.Name) > 128 {
		invalidParams.Add(request.NewErrParamMaxLen("Name", 128, *s.Name))
	}
	if s.Specification == nil {
		invalidParams.Add(request.NewErrParamRequired("Specification"))
	}
	if s.VpcId == nil {
		invalidParams.Add(request.NewErrParamRequired("VpcId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAutoRenew sets the AutoRenew field's value.
func (s *CreateInstanceInput) SetAutoRenew(v bool) *CreateInstanceInput {
	s.AutoRenew = &v
	return s
}

// SetBillingPeriod sets the BillingPeriod field's value.
func (s *CreateInstanceInput) SetBillingPeriod(v string) *CreateInstanceInput {
	s.BillingPeriod = &v
	return s
}

// SetBillingType sets the BillingType field's value.
func (s *CreateInstanceInput) SetBillingType(v string) *CreateInstanceInput {
	s.BillingType = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *CreateInstanceInput) SetDescription(v string) *CreateInstanceInput {
	s.Description = &v
	return s
}

// SetEipId sets the EipId field's value.
func (s *CreateInstanceInput) SetEipId(v string) *CreateInstanceInput {
	s.EipId = &v
	return s
}

// SetMessageRetention sets the MessageRetention field's value.
func (s *CreateInstanceInput) SetMessageRetention(v int32) *CreateInstanceInput {
	s.MessageRetention = &v
	return s
}

// SetName sets the Name field's value.
func (s *CreateInstanceInput) SetName(v string) *CreateInstanceInput {
	s.Name = &v
	return s
}

// SetProjectName sets the ProjectName field's value.
func (s *CreateInstanceInput) SetProjectName(v string) *CreateInstanceInput {
	s.ProjectName = &v
	return s
}

// SetSecurityGroupIdList sets the SecurityGroupIdList field's value.
func (s *CreateInstanceInput) SetSecurityGroupIdList(v []*string) *CreateInstanceInput {
	s.SecurityGroupIdList = v
	return s
}

// SetSpecification sets the Specification field's value.
func (s *CreateInstanceInput) SetSpecification(v string) *CreateInstanceInput {
	s.Specification = &v
	return s
}

// SetSubnetIdList sets the SubnetIdList field's value.
func (s *CreateInstanceInput) SetSubnetIdList(v []*string) *CreateInstanceInput {
	s.SubnetIdList = v
	return s
}

// SetTimes sets the Times field's value.
func (s *CreateInstanceInput) SetTimes(v int32) *CreateInstanceInput {
	s.Times = &v
	return s
}

// SetVpcId sets the VpcId field's value.
func (s *CreateInstanceInput) SetVpcId(v string) *CreateInstanceInput {
	s.VpcId = &v
	return s
}

// SetZoneIdList sets the ZoneIdList field's value.
func (s *CreateInstanceInput) SetZoneIdList(v []*string) *CreateInstanceInput {
	s.ZoneIdList = v
	return s
}

type CreateInstanceOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	InstanceId *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s CreateInstanceOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateInstanceOutput) GoString() string {
	return s.String()
}

// SetInstanceId sets the InstanceId field's value.
func (s *CreateInstanceOutput) SetInstanceId(v string) *CreateInstanceOutput {
	s.InstanceId = &v
	return s
}

const (
	// EnumOfBillingPeriodForCreateInstanceInputHourly is a EnumOfBillingPeriodForCreateInstanceInput enum value
	EnumOfBillingPeriodForCreateInstanceInputHourly = "HOURLY"

	// EnumOfBillingPeriodForCreateInstanceInputMonthly is a EnumOfBillingPeriodForCreateInstanceInput enum value
	EnumOfBillingPeriodForCreateInstanceInputMonthly = "MONTHLY"
)

const (
	// EnumOfBillingTypeForCreateInstanceInputMix is a EnumOfBillingTypeForCreateInstanceInput enum value
	EnumOfBillingTypeForCreateInstanceInputMix = "MIX"

	// EnumOfBillingTypeForCreateInstanceInputPost is a EnumOfBillingTypeForCreateInstanceInput enum value
	EnumOfBillingTypeForCreateInstanceInputPost = "POST"

	// EnumOfBillingTypeForCreateInstanceInputPre is a EnumOfBillingTypeForCreateInstanceInput enum value
	EnumOfBillingTypeForCreateInstanceInputPre = "PRE"
)
