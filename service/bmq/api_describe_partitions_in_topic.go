// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package bmq

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDescribePartitionsInTopicCommon = "DescribePartitionsInTopic"

// DescribePartitionsInTopicCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribePartitionsInTopicCommon operation. The "output" return
// value will be populated with the DescribePartitionsInTopicCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribePartitionsInTopicCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribePartitionsInTopicCommon Send returns without error.
//
// See DescribePartitionsInTopicCommon for more information on using the DescribePartitionsInTopicCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribePartitionsInTopicCommonRequest method.
//    req, resp := client.DescribePartitionsInTopicCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BMQ) DescribePartitionsInTopicCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribePartitionsInTopicCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribePartitionsInTopicCommon API operation for BMQ.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BMQ's
// API operation DescribePartitionsInTopicCommon for usage and error information.
func (c *BMQ) DescribePartitionsInTopicCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribePartitionsInTopicCommonRequest(input)
	return out, req.Send()
}

// DescribePartitionsInTopicCommonWithContext is the same as DescribePartitionsInTopicCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribePartitionsInTopicCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BMQ) DescribePartitionsInTopicCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribePartitionsInTopicCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribePartitionsInTopic = "DescribePartitionsInTopic"

// DescribePartitionsInTopicRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribePartitionsInTopic operation. The "output" return
// value will be populated with the DescribePartitionsInTopicCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribePartitionsInTopicCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribePartitionsInTopicCommon Send returns without error.
//
// See DescribePartitionsInTopic for more information on using the DescribePartitionsInTopic
// API call, and error handling.
//
//    // Example sending a request using the DescribePartitionsInTopicRequest method.
//    req, resp := client.DescribePartitionsInTopicRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BMQ) DescribePartitionsInTopicRequest(input *DescribePartitionsInTopicInput) (req *request.Request, output *DescribePartitionsInTopicOutput) {
	op := &request.Operation{
		Name:       opDescribePartitionsInTopic,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribePartitionsInTopicInput{}
	}

	output = &DescribePartitionsInTopicOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribePartitionsInTopic API operation for BMQ.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BMQ's
// API operation DescribePartitionsInTopic for usage and error information.
func (c *BMQ) DescribePartitionsInTopic(input *DescribePartitionsInTopicInput) (*DescribePartitionsInTopicOutput, error) {
	req, out := c.DescribePartitionsInTopicRequest(input)
	return out, req.Send()
}

// DescribePartitionsInTopicWithContext is the same as DescribePartitionsInTopic with the addition of
// the ability to pass a context and additional request options.
//
// See DescribePartitionsInTopic for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BMQ) DescribePartitionsInTopicWithContext(ctx volcengine.Context, input *DescribePartitionsInTopicInput, opts ...request.Option) (*DescribePartitionsInTopicOutput, error) {
	req, out := c.DescribePartitionsInTopicRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DescribePartitionsInTopicInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	TopicId *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s DescribePartitionsInTopicInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribePartitionsInTopicInput) GoString() string {
	return s.String()
}

// SetTopicId sets the TopicId field's value.
func (s *DescribePartitionsInTopicInput) SetTopicId(v string) *DescribePartitionsInTopicInput {
	s.TopicId = &v
	return s
}

type DescribePartitionsInTopicOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Items []*ItemForDescribePartitionsInTopicOutput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s DescribePartitionsInTopicOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribePartitionsInTopicOutput) GoString() string {
	return s.String()
}

// SetItems sets the Items field's value.
func (s *DescribePartitionsInTopicOutput) SetItems(v []*ItemForDescribePartitionsInTopicOutput) *DescribePartitionsInTopicOutput {
	s.Items = v
	return s
}

type ItemForDescribePartitionsInTopicOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	EarliestOffset *int64 `type:"int64" json:",omitempty"`

	LatestOffset *int64 `type:"int64" json:",omitempty"`

	PartitionId *int32 `type:"int32" json:",omitempty"`

	TopicId *string `type:"string" json:",omitempty"`

	TopicName *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ItemForDescribePartitionsInTopicOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ItemForDescribePartitionsInTopicOutput) GoString() string {
	return s.String()
}

// SetEarliestOffset sets the EarliestOffset field's value.
func (s *ItemForDescribePartitionsInTopicOutput) SetEarliestOffset(v int64) *ItemForDescribePartitionsInTopicOutput {
	s.EarliestOffset = &v
	return s
}

// SetLatestOffset sets the LatestOffset field's value.
func (s *ItemForDescribePartitionsInTopicOutput) SetLatestOffset(v int64) *ItemForDescribePartitionsInTopicOutput {
	s.LatestOffset = &v
	return s
}

// SetPartitionId sets the PartitionId field's value.
func (s *ItemForDescribePartitionsInTopicOutput) SetPartitionId(v int32) *ItemForDescribePartitionsInTopicOutput {
	s.PartitionId = &v
	return s
}

// SetTopicId sets the TopicId field's value.
func (s *ItemForDescribePartitionsInTopicOutput) SetTopicId(v string) *ItemForDescribePartitionsInTopicOutput {
	s.TopicId = &v
	return s
}

// SetTopicName sets the TopicName field's value.
func (s *ItemForDescribePartitionsInTopicOutput) SetTopicName(v string) *ItemForDescribePartitionsInTopicOutput {
	s.TopicName = &v
	return s
}
