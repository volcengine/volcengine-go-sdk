// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package bmq

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opListInstanceResourceStatsCommon = "ListInstanceResourceStats"

// ListInstanceResourceStatsCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ListInstanceResourceStatsCommon operation. The "output" return
// value will be populated with the ListInstanceResourceStatsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListInstanceResourceStatsCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListInstanceResourceStatsCommon Send returns without error.
//
// See ListInstanceResourceStatsCommon for more information on using the ListInstanceResourceStatsCommon
// API call, and error handling.
//
//    // Example sending a request using the ListInstanceResourceStatsCommonRequest method.
//    req, resp := client.ListInstanceResourceStatsCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BMQ) ListInstanceResourceStatsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opListInstanceResourceStatsCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListInstanceResourceStatsCommon API operation for BMQ.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BMQ's
// API operation ListInstanceResourceStatsCommon for usage and error information.
func (c *BMQ) ListInstanceResourceStatsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ListInstanceResourceStatsCommonRequest(input)
	return out, req.Send()
}

// ListInstanceResourceStatsCommonWithContext is the same as ListInstanceResourceStatsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ListInstanceResourceStatsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BMQ) ListInstanceResourceStatsCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ListInstanceResourceStatsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListInstanceResourceStats = "ListInstanceResourceStats"

// ListInstanceResourceStatsRequest generates a "volcengine/request.Request" representing the
// client's request for the ListInstanceResourceStats operation. The "output" return
// value will be populated with the ListInstanceResourceStatsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListInstanceResourceStatsCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListInstanceResourceStatsCommon Send returns without error.
//
// See ListInstanceResourceStats for more information on using the ListInstanceResourceStats
// API call, and error handling.
//
//    // Example sending a request using the ListInstanceResourceStatsRequest method.
//    req, resp := client.ListInstanceResourceStatsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BMQ) ListInstanceResourceStatsRequest(input *ListInstanceResourceStatsInput) (req *request.Request, output *ListInstanceResourceStatsOutput) {
	op := &request.Operation{
		Name:       opListInstanceResourceStats,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListInstanceResourceStatsInput{}
	}

	output = &ListInstanceResourceStatsOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListInstanceResourceStats API operation for BMQ.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BMQ's
// API operation ListInstanceResourceStats for usage and error information.
func (c *BMQ) ListInstanceResourceStats(input *ListInstanceResourceStatsInput) (*ListInstanceResourceStatsOutput, error) {
	req, out := c.ListInstanceResourceStatsRequest(input)
	return out, req.Send()
}

// ListInstanceResourceStatsWithContext is the same as ListInstanceResourceStats with the addition of
// the ability to pass a context and additional request options.
//
// See ListInstanceResourceStats for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BMQ) ListInstanceResourceStatsWithContext(ctx volcengine.Context, input *ListInstanceResourceStatsInput, opts ...request.Option) (*ListInstanceResourceStatsOutput, error) {
	req, out := c.ListInstanceResourceStatsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ItemForListInstanceResourceStatsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	InstanceId *string `type:"string" json:",omitempty"`

	TotalGroups *int32 `type:"int32" json:",omitempty"`

	TotalPartitions *int32 `type:"int32" json:",omitempty"`

	TotalTopics *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s ItemForListInstanceResourceStatsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ItemForListInstanceResourceStatsOutput) GoString() string {
	return s.String()
}

// SetInstanceId sets the InstanceId field's value.
func (s *ItemForListInstanceResourceStatsOutput) SetInstanceId(v string) *ItemForListInstanceResourceStatsOutput {
	s.InstanceId = &v
	return s
}

// SetTotalGroups sets the TotalGroups field's value.
func (s *ItemForListInstanceResourceStatsOutput) SetTotalGroups(v int32) *ItemForListInstanceResourceStatsOutput {
	s.TotalGroups = &v
	return s
}

// SetTotalPartitions sets the TotalPartitions field's value.
func (s *ItemForListInstanceResourceStatsOutput) SetTotalPartitions(v int32) *ItemForListInstanceResourceStatsOutput {
	s.TotalPartitions = &v
	return s
}

// SetTotalTopics sets the TotalTopics field's value.
func (s *ItemForListInstanceResourceStatsOutput) SetTotalTopics(v int32) *ItemForListInstanceResourceStatsOutput {
	s.TotalTopics = &v
	return s
}

type ListInstanceResourceStatsInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// InstanceIds is a required field
	InstanceIds *string `type:"string" json:",omitempty" required:"true"`

	WithGroup *bool `type:"boolean" json:",omitempty"`

	WithPartition *bool `type:"boolean" json:",omitempty"`

	WithTopic *bool `type:"boolean" json:",omitempty"`
}

// String returns the string representation
func (s ListInstanceResourceStatsInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListInstanceResourceStatsInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ListInstanceResourceStatsInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ListInstanceResourceStatsInput"}
	if s.InstanceIds == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceIds"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetInstanceIds sets the InstanceIds field's value.
func (s *ListInstanceResourceStatsInput) SetInstanceIds(v string) *ListInstanceResourceStatsInput {
	s.InstanceIds = &v
	return s
}

// SetWithGroup sets the WithGroup field's value.
func (s *ListInstanceResourceStatsInput) SetWithGroup(v bool) *ListInstanceResourceStatsInput {
	s.WithGroup = &v
	return s
}

// SetWithPartition sets the WithPartition field's value.
func (s *ListInstanceResourceStatsInput) SetWithPartition(v bool) *ListInstanceResourceStatsInput {
	s.WithPartition = &v
	return s
}

// SetWithTopic sets the WithTopic field's value.
func (s *ListInstanceResourceStatsInput) SetWithTopic(v bool) *ListInstanceResourceStatsInput {
	s.WithTopic = &v
	return s
}

type ListInstanceResourceStatsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Items []*ItemForListInstanceResourceStatsOutput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s ListInstanceResourceStatsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListInstanceResourceStatsOutput) GoString() string {
	return s.String()
}

// SetItems sets the Items field's value.
func (s *ListInstanceResourceStatsOutput) SetItems(v []*ItemForListInstanceResourceStatsOutput) *ListInstanceResourceStatsOutput {
	s.Items = v
	return s
}
