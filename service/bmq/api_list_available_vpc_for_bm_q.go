// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package bmq

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opListAvailableVPCForBMQCommon = "ListAvailableVPCForBMQ"

// ListAvailableVPCForBMQCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ListAvailableVPCForBMQCommon operation. The "output" return
// value will be populated with the ListAvailableVPCForBMQCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListAvailableVPCForBMQCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListAvailableVPCForBMQCommon Send returns without error.
//
// See ListAvailableVPCForBMQCommon for more information on using the ListAvailableVPCForBMQCommon
// API call, and error handling.
//
//    // Example sending a request using the ListAvailableVPCForBMQCommonRequest method.
//    req, resp := client.ListAvailableVPCForBMQCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BMQ) ListAvailableVPCForBMQCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opListAvailableVPCForBMQCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListAvailableVPCForBMQCommon API operation for BMQ.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BMQ's
// API operation ListAvailableVPCForBMQCommon for usage and error information.
func (c *BMQ) ListAvailableVPCForBMQCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ListAvailableVPCForBMQCommonRequest(input)
	return out, req.Send()
}

// ListAvailableVPCForBMQCommonWithContext is the same as ListAvailableVPCForBMQCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ListAvailableVPCForBMQCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BMQ) ListAvailableVPCForBMQCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ListAvailableVPCForBMQCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListAvailableVPCForBMQ = "ListAvailableVPCForBMQ"

// ListAvailableVPCForBMQRequest generates a "volcengine/request.Request" representing the
// client's request for the ListAvailableVPCForBMQ operation. The "output" return
// value will be populated with the ListAvailableVPCForBMQCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListAvailableVPCForBMQCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListAvailableVPCForBMQCommon Send returns without error.
//
// See ListAvailableVPCForBMQ for more information on using the ListAvailableVPCForBMQ
// API call, and error handling.
//
//    // Example sending a request using the ListAvailableVPCForBMQRequest method.
//    req, resp := client.ListAvailableVPCForBMQRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BMQ) ListAvailableVPCForBMQRequest(input *ListAvailableVPCForBMQInput) (req *request.Request, output *ListAvailableVPCForBMQOutput) {
	op := &request.Operation{
		Name:       opListAvailableVPCForBMQ,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListAvailableVPCForBMQInput{}
	}

	output = &ListAvailableVPCForBMQOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListAvailableVPCForBMQ API operation for BMQ.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BMQ's
// API operation ListAvailableVPCForBMQ for usage and error information.
func (c *BMQ) ListAvailableVPCForBMQ(input *ListAvailableVPCForBMQInput) (*ListAvailableVPCForBMQOutput, error) {
	req, out := c.ListAvailableVPCForBMQRequest(input)
	return out, req.Send()
}

// ListAvailableVPCForBMQWithContext is the same as ListAvailableVPCForBMQ with the addition of
// the ability to pass a context and additional request options.
//
// See ListAvailableVPCForBMQ for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BMQ) ListAvailableVPCForBMQWithContext(ctx volcengine.Context, input *ListAvailableVPCForBMQInput, opts ...request.Option) (*ListAvailableVPCForBMQOutput, error) {
	req, out := c.ListAvailableVPCForBMQRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ItemForListAvailableVPCForBMQOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	CidrBlock *string `type:"string" json:",omitempty"`

	CreateTime *string `type:"string" json:",omitempty"`

	Description *string `type:"string" json:",omitempty"`

	Name *string `type:"string" json:",omitempty"`

	SecurityGroupIds []*string `type:"list" json:",omitempty"`

	Status *string `type:"string" json:",omitempty"`

	SubnetIds []*string `type:"list" json:",omitempty"`

	VpcId *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ItemForListAvailableVPCForBMQOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ItemForListAvailableVPCForBMQOutput) GoString() string {
	return s.String()
}

// SetCidrBlock sets the CidrBlock field's value.
func (s *ItemForListAvailableVPCForBMQOutput) SetCidrBlock(v string) *ItemForListAvailableVPCForBMQOutput {
	s.CidrBlock = &v
	return s
}

// SetCreateTime sets the CreateTime field's value.
func (s *ItemForListAvailableVPCForBMQOutput) SetCreateTime(v string) *ItemForListAvailableVPCForBMQOutput {
	s.CreateTime = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *ItemForListAvailableVPCForBMQOutput) SetDescription(v string) *ItemForListAvailableVPCForBMQOutput {
	s.Description = &v
	return s
}

// SetName sets the Name field's value.
func (s *ItemForListAvailableVPCForBMQOutput) SetName(v string) *ItemForListAvailableVPCForBMQOutput {
	s.Name = &v
	return s
}

// SetSecurityGroupIds sets the SecurityGroupIds field's value.
func (s *ItemForListAvailableVPCForBMQOutput) SetSecurityGroupIds(v []*string) *ItemForListAvailableVPCForBMQOutput {
	s.SecurityGroupIds = v
	return s
}

// SetStatus sets the Status field's value.
func (s *ItemForListAvailableVPCForBMQOutput) SetStatus(v string) *ItemForListAvailableVPCForBMQOutput {
	s.Status = &v
	return s
}

// SetSubnetIds sets the SubnetIds field's value.
func (s *ItemForListAvailableVPCForBMQOutput) SetSubnetIds(v []*string) *ItemForListAvailableVPCForBMQOutput {
	s.SubnetIds = v
	return s
}

// SetVpcId sets the VpcId field's value.
func (s *ItemForListAvailableVPCForBMQOutput) SetVpcId(v string) *ItemForListAvailableVPCForBMQOutput {
	s.VpcId = &v
	return s
}

type ListAvailableVPCForBMQInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	InstanceId *string `type:"string" json:",omitempty"`

	MaxResults *int32 `min:"1" max:"100" type:"int32" json:",omitempty"`

	Name *string `type:"string" json:",omitempty"`

	NextToken *string `type:"string" json:",omitempty"`

	VpcIds []*string `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s ListAvailableVPCForBMQInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListAvailableVPCForBMQInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ListAvailableVPCForBMQInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ListAvailableVPCForBMQInput"}
	if s.MaxResults != nil && *s.MaxResults < 1 {
		invalidParams.Add(request.NewErrParamMinValue("MaxResults", 1))
	}
	if s.MaxResults != nil && *s.MaxResults > 100 {
		invalidParams.Add(request.NewErrParamMaxValue("MaxResults", 100))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetInstanceId sets the InstanceId field's value.
func (s *ListAvailableVPCForBMQInput) SetInstanceId(v string) *ListAvailableVPCForBMQInput {
	s.InstanceId = &v
	return s
}

// SetMaxResults sets the MaxResults field's value.
func (s *ListAvailableVPCForBMQInput) SetMaxResults(v int32) *ListAvailableVPCForBMQInput {
	s.MaxResults = &v
	return s
}

// SetName sets the Name field's value.
func (s *ListAvailableVPCForBMQInput) SetName(v string) *ListAvailableVPCForBMQInput {
	s.Name = &v
	return s
}

// SetNextToken sets the NextToken field's value.
func (s *ListAvailableVPCForBMQInput) SetNextToken(v string) *ListAvailableVPCForBMQInput {
	s.NextToken = &v
	return s
}

// SetVpcIds sets the VpcIds field's value.
func (s *ListAvailableVPCForBMQInput) SetVpcIds(v []*string) *ListAvailableVPCForBMQInput {
	s.VpcIds = v
	return s
}

type ListAvailableVPCForBMQOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Items []*ItemForListAvailableVPCForBMQOutput `type:"list" json:",omitempty"`

	NextToken *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ListAvailableVPCForBMQOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListAvailableVPCForBMQOutput) GoString() string {
	return s.String()
}

// SetItems sets the Items field's value.
func (s *ListAvailableVPCForBMQOutput) SetItems(v []*ItemForListAvailableVPCForBMQOutput) *ListAvailableVPCForBMQOutput {
	s.Items = v
	return s
}

// SetNextToken sets the NextToken field's value.
func (s *ListAvailableVPCForBMQOutput) SetNextToken(v string) *ListAvailableVPCForBMQOutput {
	s.NextToken = &v
	return s
}
