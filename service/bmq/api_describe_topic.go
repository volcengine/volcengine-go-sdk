// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package bmq

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDescribeTopicCommon = "DescribeTopic"

// DescribeTopicCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeTopicCommon operation. The "output" return
// value will be populated with the DescribeTopicCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeTopicCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeTopicCommon Send returns without error.
//
// See DescribeTopicCommon for more information on using the DescribeTopicCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeTopicCommonRequest method.
//    req, resp := client.DescribeTopicCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BMQ) DescribeTopicCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeTopicCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeTopicCommon API operation for BMQ.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BMQ's
// API operation DescribeTopicCommon for usage and error information.
func (c *BMQ) DescribeTopicCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeTopicCommonRequest(input)
	return out, req.Send()
}

// DescribeTopicCommonWithContext is the same as DescribeTopicCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeTopicCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BMQ) DescribeTopicCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeTopicCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeTopic = "DescribeTopic"

// DescribeTopicRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeTopic operation. The "output" return
// value will be populated with the DescribeTopicCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeTopicCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeTopicCommon Send returns without error.
//
// See DescribeTopic for more information on using the DescribeTopic
// API call, and error handling.
//
//    // Example sending a request using the DescribeTopicRequest method.
//    req, resp := client.DescribeTopicRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BMQ) DescribeTopicRequest(input *DescribeTopicInput) (req *request.Request, output *DescribeTopicOutput) {
	op := &request.Operation{
		Name:       opDescribeTopic,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeTopicInput{}
	}

	output = &DescribeTopicOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeTopic API operation for BMQ.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BMQ's
// API operation DescribeTopic for usage and error information.
func (c *BMQ) DescribeTopic(input *DescribeTopicInput) (*DescribeTopicOutput, error) {
	req, out := c.DescribeTopicRequest(input)
	return out, req.Send()
}

// DescribeTopicWithContext is the same as DescribeTopic with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeTopic for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BMQ) DescribeTopicWithContext(ctx volcengine.Context, input *DescribeTopicInput, opts ...request.Option) (*DescribeTopicOutput, error) {
	req, out := c.DescribeTopicRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DescribeTopicInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	InstanceId *string `type:"string" json:",omitempty"`

	TopicId *string `type:"string" json:",omitempty"`

	TopicName *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s DescribeTopicInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeTopicInput) GoString() string {
	return s.String()
}

// SetInstanceId sets the InstanceId field's value.
func (s *DescribeTopicInput) SetInstanceId(v string) *DescribeTopicInput {
	s.InstanceId = &v
	return s
}

// SetTopicId sets the TopicId field's value.
func (s *DescribeTopicInput) SetTopicId(v string) *DescribeTopicInput {
	s.TopicId = &v
	return s
}

// SetTopicName sets the TopicName field's value.
func (s *DescribeTopicInput) SetTopicName(v string) *DescribeTopicInput {
	s.TopicName = &v
	return s
}

type DescribeTopicOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	CreateTime *string `type:"string" json:",omitempty"`

	Description *string `type:"string" json:",omitempty"`

	InstanceId *string `type:"string" json:",omitempty"`

	OwnerName *string `type:"string" json:",omitempty"`

	Partitions *int32 `type:"int32" json:",omitempty"`

	Retention *int32 `type:"int32" json:",omitempty"`

	Status *string `type:"string" json:",omitempty"`

	TopicId *string `type:"string" json:",omitempty"`

	TopicName *string `type:"string" json:",omitempty"`

	Usage *UsageForDescribeTopicOutput `type:"structure" json:",omitempty"`
}

// String returns the string representation
func (s DescribeTopicOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeTopicOutput) GoString() string {
	return s.String()
}

// SetCreateTime sets the CreateTime field's value.
func (s *DescribeTopicOutput) SetCreateTime(v string) *DescribeTopicOutput {
	s.CreateTime = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *DescribeTopicOutput) SetDescription(v string) *DescribeTopicOutput {
	s.Description = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *DescribeTopicOutput) SetInstanceId(v string) *DescribeTopicOutput {
	s.InstanceId = &v
	return s
}

// SetOwnerName sets the OwnerName field's value.
func (s *DescribeTopicOutput) SetOwnerName(v string) *DescribeTopicOutput {
	s.OwnerName = &v
	return s
}

// SetPartitions sets the Partitions field's value.
func (s *DescribeTopicOutput) SetPartitions(v int32) *DescribeTopicOutput {
	s.Partitions = &v
	return s
}

// SetRetention sets the Retention field's value.
func (s *DescribeTopicOutput) SetRetention(v int32) *DescribeTopicOutput {
	s.Retention = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *DescribeTopicOutput) SetStatus(v string) *DescribeTopicOutput {
	s.Status = &v
	return s
}

// SetTopicId sets the TopicId field's value.
func (s *DescribeTopicOutput) SetTopicId(v string) *DescribeTopicOutput {
	s.TopicId = &v
	return s
}

// SetTopicName sets the TopicName field's value.
func (s *DescribeTopicOutput) SetTopicName(v string) *DescribeTopicOutput {
	s.TopicName = &v
	return s
}

// SetUsage sets the Usage field's value.
func (s *DescribeTopicOutput) SetUsage(v *UsageForDescribeTopicOutput) *DescribeTopicOutput {
	s.Usage = v
	return s
}

type UsageForDescribeTopicOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	CfsDataUsage *int64 `type:"int64" json:",omitempty"`

	TopicId *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s UsageForDescribeTopicOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UsageForDescribeTopicOutput) GoString() string {
	return s.String()
}

// SetCfsDataUsage sets the CfsDataUsage field's value.
func (s *UsageForDescribeTopicOutput) SetCfsDataUsage(v int64) *UsageForDescribeTopicOutput {
	s.CfsDataUsage = &v
	return s
}

// SetTopicId sets the TopicId field's value.
func (s *UsageForDescribeTopicOutput) SetTopicId(v string) *UsageForDescribeTopicOutput {
	s.TopicId = &v
	return s
}
