// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package bmq

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opListSpecificationsCommon = "ListSpecifications"

// ListSpecificationsCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ListSpecificationsCommon operation. The "output" return
// value will be populated with the ListSpecificationsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListSpecificationsCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListSpecificationsCommon Send returns without error.
//
// See ListSpecificationsCommon for more information on using the ListSpecificationsCommon
// API call, and error handling.
//
//    // Example sending a request using the ListSpecificationsCommonRequest method.
//    req, resp := client.ListSpecificationsCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BMQ) ListSpecificationsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opListSpecificationsCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListSpecificationsCommon API operation for BMQ.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BMQ's
// API operation ListSpecificationsCommon for usage and error information.
func (c *BMQ) ListSpecificationsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ListSpecificationsCommonRequest(input)
	return out, req.Send()
}

// ListSpecificationsCommonWithContext is the same as ListSpecificationsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ListSpecificationsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BMQ) ListSpecificationsCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ListSpecificationsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListSpecifications = "ListSpecifications"

// ListSpecificationsRequest generates a "volcengine/request.Request" representing the
// client's request for the ListSpecifications operation. The "output" return
// value will be populated with the ListSpecificationsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListSpecificationsCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListSpecificationsCommon Send returns without error.
//
// See ListSpecifications for more information on using the ListSpecifications
// API call, and error handling.
//
//    // Example sending a request using the ListSpecificationsRequest method.
//    req, resp := client.ListSpecificationsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BMQ) ListSpecificationsRequest(input *ListSpecificationsInput) (req *request.Request, output *ListSpecificationsOutput) {
	op := &request.Operation{
		Name:       opListSpecifications,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListSpecificationsInput{}
	}

	output = &ListSpecificationsOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListSpecifications API operation for BMQ.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BMQ's
// API operation ListSpecifications for usage and error information.
func (c *BMQ) ListSpecifications(input *ListSpecificationsInput) (*ListSpecificationsOutput, error) {
	req, out := c.ListSpecificationsRequest(input)
	return out, req.Send()
}

// ListSpecificationsWithContext is the same as ListSpecifications with the addition of
// the ability to pass a context and additional request options.
//
// See ListSpecifications for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BMQ) ListSpecificationsWithContext(ctx volcengine.Context, input *ListSpecificationsInput, opts ...request.Option) (*ListSpecificationsOutput, error) {
	req, out := c.ListSpecificationsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ItemForListSpecificationsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	GroupLimit *int32 `type:"int32" json:",omitempty"`

	Name *string `type:"string" json:",omitempty"`

	PartitionLimit *int32 `type:"int32" json:",omitempty"`

	Ranking *float64 `type:"double" json:",omitempty"`

	ReadBandwidth *int32 `type:"int32" json:",omitempty"`

	RequiredEnis *int32 `type:"int32" json:",omitempty"`

	TopicLimit *int32 `type:"int32" json:",omitempty"`

	WriteBandwidth *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s ItemForListSpecificationsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ItemForListSpecificationsOutput) GoString() string {
	return s.String()
}

// SetGroupLimit sets the GroupLimit field's value.
func (s *ItemForListSpecificationsOutput) SetGroupLimit(v int32) *ItemForListSpecificationsOutput {
	s.GroupLimit = &v
	return s
}

// SetName sets the Name field's value.
func (s *ItemForListSpecificationsOutput) SetName(v string) *ItemForListSpecificationsOutput {
	s.Name = &v
	return s
}

// SetPartitionLimit sets the PartitionLimit field's value.
func (s *ItemForListSpecificationsOutput) SetPartitionLimit(v int32) *ItemForListSpecificationsOutput {
	s.PartitionLimit = &v
	return s
}

// SetRanking sets the Ranking field's value.
func (s *ItemForListSpecificationsOutput) SetRanking(v float64) *ItemForListSpecificationsOutput {
	s.Ranking = &v
	return s
}

// SetReadBandwidth sets the ReadBandwidth field's value.
func (s *ItemForListSpecificationsOutput) SetReadBandwidth(v int32) *ItemForListSpecificationsOutput {
	s.ReadBandwidth = &v
	return s
}

// SetRequiredEnis sets the RequiredEnis field's value.
func (s *ItemForListSpecificationsOutput) SetRequiredEnis(v int32) *ItemForListSpecificationsOutput {
	s.RequiredEnis = &v
	return s
}

// SetTopicLimit sets the TopicLimit field's value.
func (s *ItemForListSpecificationsOutput) SetTopicLimit(v int32) *ItemForListSpecificationsOutput {
	s.TopicLimit = &v
	return s
}

// SetWriteBandwidth sets the WriteBandwidth field's value.
func (s *ItemForListSpecificationsOutput) SetWriteBandwidth(v int32) *ItemForListSpecificationsOutput {
	s.WriteBandwidth = &v
	return s
}

type ListSpecificationsInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Type *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ListSpecificationsInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListSpecificationsInput) GoString() string {
	return s.String()
}

// SetType sets the Type field's value.
func (s *ListSpecificationsInput) SetType(v string) *ListSpecificationsInput {
	s.Type = &v
	return s
}

type ListSpecificationsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Items []*ItemForListSpecificationsOutput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s ListSpecificationsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListSpecificationsOutput) GoString() string {
	return s.String()
}

// SetItems sets the Items field's value.
func (s *ListSpecificationsOutput) SetItems(v []*ItemForListSpecificationsOutput) *ListSpecificationsOutput {
	s.Items = v
	return s
}
