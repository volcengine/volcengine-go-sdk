// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package bmq

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opSearchTopicsCommon = "SearchTopics"

// SearchTopicsCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the SearchTopicsCommon operation. The "output" return
// value will be populated with the SearchTopicsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned SearchTopicsCommon Request to send the API call to the service.
// the "output" return value is not valid until after SearchTopicsCommon Send returns without error.
//
// See SearchTopicsCommon for more information on using the SearchTopicsCommon
// API call, and error handling.
//
//    // Example sending a request using the SearchTopicsCommonRequest method.
//    req, resp := client.SearchTopicsCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BMQ) SearchTopicsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opSearchTopicsCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// SearchTopicsCommon API operation for BMQ.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BMQ's
// API operation SearchTopicsCommon for usage and error information.
func (c *BMQ) SearchTopicsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.SearchTopicsCommonRequest(input)
	return out, req.Send()
}

// SearchTopicsCommonWithContext is the same as SearchTopicsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See SearchTopicsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BMQ) SearchTopicsCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.SearchTopicsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opSearchTopics = "SearchTopics"

// SearchTopicsRequest generates a "volcengine/request.Request" representing the
// client's request for the SearchTopics operation. The "output" return
// value will be populated with the SearchTopicsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned SearchTopicsCommon Request to send the API call to the service.
// the "output" return value is not valid until after SearchTopicsCommon Send returns without error.
//
// See SearchTopics for more information on using the SearchTopics
// API call, and error handling.
//
//    // Example sending a request using the SearchTopicsRequest method.
//    req, resp := client.SearchTopicsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BMQ) SearchTopicsRequest(input *SearchTopicsInput) (req *request.Request, output *SearchTopicsOutput) {
	op := &request.Operation{
		Name:       opSearchTopics,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &SearchTopicsInput{}
	}

	output = &SearchTopicsOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// SearchTopics API operation for BMQ.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BMQ's
// API operation SearchTopics for usage and error information.
func (c *BMQ) SearchTopics(input *SearchTopicsInput) (*SearchTopicsOutput, error) {
	req, out := c.SearchTopicsRequest(input)
	return out, req.Send()
}

// SearchTopicsWithContext is the same as SearchTopics with the addition of
// the ability to pass a context and additional request options.
//
// See SearchTopics for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BMQ) SearchTopicsWithContext(ctx volcengine.Context, input *SearchTopicsInput, opts ...request.Option) (*SearchTopicsOutput, error) {
	req, out := c.SearchTopicsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ItemForSearchTopicsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	CreateTime *string `type:"string" json:",omitempty"`

	Description *string `type:"string" json:",omitempty"`

	InstanceId *string `type:"string" json:",omitempty"`

	OwnerName *string `type:"string" json:",omitempty"`

	Partitions *int32 `type:"int32" json:",omitempty"`

	Retention *int32 `type:"int32" json:",omitempty"`

	Status *string `type:"string" json:",omitempty" enum:"EnumOfStatusForSearchTopicsOutput"`

	TopicId *string `type:"string" json:",omitempty"`

	TopicName *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ItemForSearchTopicsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ItemForSearchTopicsOutput) GoString() string {
	return s.String()
}

// SetCreateTime sets the CreateTime field's value.
func (s *ItemForSearchTopicsOutput) SetCreateTime(v string) *ItemForSearchTopicsOutput {
	s.CreateTime = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *ItemForSearchTopicsOutput) SetDescription(v string) *ItemForSearchTopicsOutput {
	s.Description = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *ItemForSearchTopicsOutput) SetInstanceId(v string) *ItemForSearchTopicsOutput {
	s.InstanceId = &v
	return s
}

// SetOwnerName sets the OwnerName field's value.
func (s *ItemForSearchTopicsOutput) SetOwnerName(v string) *ItemForSearchTopicsOutput {
	s.OwnerName = &v
	return s
}

// SetPartitions sets the Partitions field's value.
func (s *ItemForSearchTopicsOutput) SetPartitions(v int32) *ItemForSearchTopicsOutput {
	s.Partitions = &v
	return s
}

// SetRetention sets the Retention field's value.
func (s *ItemForSearchTopicsOutput) SetRetention(v int32) *ItemForSearchTopicsOutput {
	s.Retention = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *ItemForSearchTopicsOutput) SetStatus(v string) *ItemForSearchTopicsOutput {
	s.Status = &v
	return s
}

// SetTopicId sets the TopicId field's value.
func (s *ItemForSearchTopicsOutput) SetTopicId(v string) *ItemForSearchTopicsOutput {
	s.TopicId = &v
	return s
}

// SetTopicName sets the TopicName field's value.
func (s *ItemForSearchTopicsOutput) SetTopicName(v string) *ItemForSearchTopicsOutput {
	s.TopicName = &v
	return s
}

type SearchTopicsInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	CreateTimeOrder *string `type:"string" json:",omitempty"`

	InstanceId *string `type:"string" json:",omitempty"`

	PageNumber *int32 `type:"int32" json:",omitempty"`

	PageSize *int32 `type:"int32" json:",omitempty"`

	SearchKey *string `type:"string" json:",omitempty"`

	Status []*string `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s SearchTopicsInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s SearchTopicsInput) GoString() string {
	return s.String()
}

// SetCreateTimeOrder sets the CreateTimeOrder field's value.
func (s *SearchTopicsInput) SetCreateTimeOrder(v string) *SearchTopicsInput {
	s.CreateTimeOrder = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *SearchTopicsInput) SetInstanceId(v string) *SearchTopicsInput {
	s.InstanceId = &v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *SearchTopicsInput) SetPageNumber(v int32) *SearchTopicsInput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *SearchTopicsInput) SetPageSize(v int32) *SearchTopicsInput {
	s.PageSize = &v
	return s
}

// SetSearchKey sets the SearchKey field's value.
func (s *SearchTopicsInput) SetSearchKey(v string) *SearchTopicsInput {
	s.SearchKey = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *SearchTopicsInput) SetStatus(v []*string) *SearchTopicsInput {
	s.Status = v
	return s
}

type SearchTopicsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Items []*ItemForSearchTopicsOutput `type:"list" json:",omitempty"`

	PageCount *int32 `type:"int32" json:",omitempty"`

	PageNumber *int32 `type:"int32" json:",omitempty"`

	PageSize *int32 `type:"int32" json:",omitempty"`

	TotalCount *int64 `type:"int64" json:",omitempty"`
}

// String returns the string representation
func (s SearchTopicsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s SearchTopicsOutput) GoString() string {
	return s.String()
}

// SetItems sets the Items field's value.
func (s *SearchTopicsOutput) SetItems(v []*ItemForSearchTopicsOutput) *SearchTopicsOutput {
	s.Items = v
	return s
}

// SetPageCount sets the PageCount field's value.
func (s *SearchTopicsOutput) SetPageCount(v int32) *SearchTopicsOutput {
	s.PageCount = &v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *SearchTopicsOutput) SetPageNumber(v int32) *SearchTopicsOutput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *SearchTopicsOutput) SetPageSize(v int32) *SearchTopicsOutput {
	s.PageSize = &v
	return s
}

// SetTotalCount sets the TotalCount field's value.
func (s *SearchTopicsOutput) SetTotalCount(v int64) *SearchTopicsOutput {
	s.TotalCount = &v
	return s
}

const (
	// EnumOfStatusForSearchTopicsOutputCreating is a EnumOfStatusForSearchTopicsOutput enum value
	EnumOfStatusForSearchTopicsOutputCreating = "CREATING"

	// EnumOfStatusForSearchTopicsOutputRunning is a EnumOfStatusForSearchTopicsOutput enum value
	EnumOfStatusForSearchTopicsOutputRunning = "RUNNING"

	// EnumOfStatusForSearchTopicsOutputDeleting is a EnumOfStatusForSearchTopicsOutput enum value
	EnumOfStatusForSearchTopicsOutputDeleting = "DELETING"
)
