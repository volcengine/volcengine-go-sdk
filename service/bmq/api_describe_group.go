// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package bmq

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDescribeGroupCommon = "DescribeGroup"

// DescribeGroupCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeGroupCommon operation. The "output" return
// value will be populated with the DescribeGroupCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeGroupCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeGroupCommon Send returns without error.
//
// See DescribeGroupCommon for more information on using the DescribeGroupCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeGroupCommonRequest method.
//    req, resp := client.DescribeGroupCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BMQ) DescribeGroupCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeGroupCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeGroupCommon API operation for BMQ.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BMQ's
// API operation DescribeGroupCommon for usage and error information.
func (c *BMQ) DescribeGroupCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeGroupCommonRequest(input)
	return out, req.Send()
}

// DescribeGroupCommonWithContext is the same as DescribeGroupCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeGroupCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BMQ) DescribeGroupCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeGroupCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeGroup = "DescribeGroup"

// DescribeGroupRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeGroup operation. The "output" return
// value will be populated with the DescribeGroupCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeGroupCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeGroupCommon Send returns without error.
//
// See DescribeGroup for more information on using the DescribeGroup
// API call, and error handling.
//
//    // Example sending a request using the DescribeGroupRequest method.
//    req, resp := client.DescribeGroupRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BMQ) DescribeGroupRequest(input *DescribeGroupInput) (req *request.Request, output *DescribeGroupOutput) {
	op := &request.Operation{
		Name:       opDescribeGroup,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeGroupInput{}
	}

	output = &DescribeGroupOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeGroup API operation for BMQ.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BMQ's
// API operation DescribeGroup for usage and error information.
func (c *BMQ) DescribeGroup(input *DescribeGroupInput) (*DescribeGroupOutput, error) {
	req, out := c.DescribeGroupRequest(input)
	return out, req.Send()
}

// DescribeGroupWithContext is the same as DescribeGroup with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeGroup for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BMQ) DescribeGroupWithContext(ctx volcengine.Context, input *DescribeGroupInput, opts ...request.Option) (*DescribeGroupOutput, error) {
	req, out := c.DescribeGroupRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DescribeGroupInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	GroupId *string `type:"string" json:",omitempty"`

	GroupName *string `type:"string" json:",omitempty"`

	InstanceId *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s DescribeGroupInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeGroupInput) GoString() string {
	return s.String()
}

// SetGroupId sets the GroupId field's value.
func (s *DescribeGroupInput) SetGroupId(v string) *DescribeGroupInput {
	s.GroupId = &v
	return s
}

// SetGroupName sets the GroupName field's value.
func (s *DescribeGroupInput) SetGroupName(v string) *DescribeGroupInput {
	s.GroupName = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *DescribeGroupInput) SetInstanceId(v string) *DescribeGroupInput {
	s.InstanceId = &v
	return s
}

type DescribeGroupOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	CreateTime *string `type:"string" json:",omitempty"`

	Description *string `type:"string" json:",omitempty"`

	GroupId *string `type:"string" json:",omitempty"`

	GroupName *string `type:"string" json:",omitempty"`

	InstanceId *string `type:"string" json:",omitempty"`

	OwnerId *string `type:"string" json:",omitempty"`

	OwnerName *string `type:"string" json:",omitempty"`

	Status *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s DescribeGroupOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeGroupOutput) GoString() string {
	return s.String()
}

// SetCreateTime sets the CreateTime field's value.
func (s *DescribeGroupOutput) SetCreateTime(v string) *DescribeGroupOutput {
	s.CreateTime = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *DescribeGroupOutput) SetDescription(v string) *DescribeGroupOutput {
	s.Description = &v
	return s
}

// SetGroupId sets the GroupId field's value.
func (s *DescribeGroupOutput) SetGroupId(v string) *DescribeGroupOutput {
	s.GroupId = &v
	return s
}

// SetGroupName sets the GroupName field's value.
func (s *DescribeGroupOutput) SetGroupName(v string) *DescribeGroupOutput {
	s.GroupName = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *DescribeGroupOutput) SetInstanceId(v string) *DescribeGroupOutput {
	s.InstanceId = &v
	return s
}

// SetOwnerId sets the OwnerId field's value.
func (s *DescribeGroupOutput) SetOwnerId(v string) *DescribeGroupOutput {
	s.OwnerId = &v
	return s
}

// SetOwnerName sets the OwnerName field's value.
func (s *DescribeGroupOutput) SetOwnerName(v string) *DescribeGroupOutput {
	s.OwnerName = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *DescribeGroupOutput) SetStatus(v string) *DescribeGroupOutput {
	s.Status = &v
	return s
}
