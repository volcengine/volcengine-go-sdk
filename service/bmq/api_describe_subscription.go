// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package bmq

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDescribeSubscriptionCommon = "DescribeSubscription"

// DescribeSubscriptionCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeSubscriptionCommon operation. The "output" return
// value will be populated with the DescribeSubscriptionCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeSubscriptionCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeSubscriptionCommon Send returns without error.
//
// See DescribeSubscriptionCommon for more information on using the DescribeSubscriptionCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeSubscriptionCommonRequest method.
//    req, resp := client.DescribeSubscriptionCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BMQ) DescribeSubscriptionCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeSubscriptionCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeSubscriptionCommon API operation for BMQ.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BMQ's
// API operation DescribeSubscriptionCommon for usage and error information.
func (c *BMQ) DescribeSubscriptionCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeSubscriptionCommonRequest(input)
	return out, req.Send()
}

// DescribeSubscriptionCommonWithContext is the same as DescribeSubscriptionCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeSubscriptionCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BMQ) DescribeSubscriptionCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeSubscriptionCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeSubscription = "DescribeSubscription"

// DescribeSubscriptionRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeSubscription operation. The "output" return
// value will be populated with the DescribeSubscriptionCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeSubscriptionCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeSubscriptionCommon Send returns without error.
//
// See DescribeSubscription for more information on using the DescribeSubscription
// API call, and error handling.
//
//    // Example sending a request using the DescribeSubscriptionRequest method.
//    req, resp := client.DescribeSubscriptionRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BMQ) DescribeSubscriptionRequest(input *DescribeSubscriptionInput) (req *request.Request, output *DescribeSubscriptionOutput) {
	op := &request.Operation{
		Name:       opDescribeSubscription,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeSubscriptionInput{}
	}

	output = &DescribeSubscriptionOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeSubscription API operation for BMQ.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BMQ's
// API operation DescribeSubscription for usage and error information.
func (c *BMQ) DescribeSubscription(input *DescribeSubscriptionInput) (*DescribeSubscriptionOutput, error) {
	req, out := c.DescribeSubscriptionRequest(input)
	return out, req.Send()
}

// DescribeSubscriptionWithContext is the same as DescribeSubscription with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeSubscription for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BMQ) DescribeSubscriptionWithContext(ctx volcengine.Context, input *DescribeSubscriptionInput, opts ...request.Option) (*DescribeSubscriptionOutput, error) {
	req, out := c.DescribeSubscriptionRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DescribeSubscriptionInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// GroupId is a required field
	GroupId *string `type:"string" json:",omitempty" required:"true"`

	// TopicId is a required field
	TopicId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s DescribeSubscriptionInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeSubscriptionInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeSubscriptionInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DescribeSubscriptionInput"}
	if s.GroupId == nil {
		invalidParams.Add(request.NewErrParamRequired("GroupId"))
	}
	if s.TopicId == nil {
		invalidParams.Add(request.NewErrParamRequired("TopicId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetGroupId sets the GroupId field's value.
func (s *DescribeSubscriptionInput) SetGroupId(v string) *DescribeSubscriptionInput {
	s.GroupId = &v
	return s
}

// SetTopicId sets the TopicId field's value.
func (s *DescribeSubscriptionInput) SetTopicId(v string) *DescribeSubscriptionInput {
	s.TopicId = &v
	return s
}

type DescribeSubscriptionOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Items []*ItemForDescribeSubscriptionOutput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s DescribeSubscriptionOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeSubscriptionOutput) GoString() string {
	return s.String()
}

// SetItems sets the Items field's value.
func (s *DescribeSubscriptionOutput) SetItems(v []*ItemForDescribeSubscriptionOutput) *DescribeSubscriptionOutput {
	s.Items = v
	return s
}

type ItemForDescribeSubscriptionOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	CurrentOffset *int64 `type:"int64" json:",omitempty"`

	GroupName *string `type:"string" json:",omitempty"`

	Lag *int64 `type:"int64" json:",omitempty"`

	LatestOffset *int64 `type:"int64" json:",omitempty"`

	PartitionId *int32 `type:"int32" json:",omitempty"`

	TopicName *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ItemForDescribeSubscriptionOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ItemForDescribeSubscriptionOutput) GoString() string {
	return s.String()
}

// SetCurrentOffset sets the CurrentOffset field's value.
func (s *ItemForDescribeSubscriptionOutput) SetCurrentOffset(v int64) *ItemForDescribeSubscriptionOutput {
	s.CurrentOffset = &v
	return s
}

// SetGroupName sets the GroupName field's value.
func (s *ItemForDescribeSubscriptionOutput) SetGroupName(v string) *ItemForDescribeSubscriptionOutput {
	s.GroupName = &v
	return s
}

// SetLag sets the Lag field's value.
func (s *ItemForDescribeSubscriptionOutput) SetLag(v int64) *ItemForDescribeSubscriptionOutput {
	s.Lag = &v
	return s
}

// SetLatestOffset sets the LatestOffset field's value.
func (s *ItemForDescribeSubscriptionOutput) SetLatestOffset(v int64) *ItemForDescribeSubscriptionOutput {
	s.LatestOffset = &v
	return s
}

// SetPartitionId sets the PartitionId field's value.
func (s *ItemForDescribeSubscriptionOutput) SetPartitionId(v int32) *ItemForDescribeSubscriptionOutput {
	s.PartitionId = &v
	return s
}

// SetTopicName sets the TopicName field's value.
func (s *ItemForDescribeSubscriptionOutput) SetTopicName(v string) *ItemForDescribeSubscriptionOutput {
	s.TopicName = &v
	return s
}
