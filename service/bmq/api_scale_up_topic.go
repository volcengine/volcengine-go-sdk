// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package bmq

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opScaleUpTopicCommon = "ScaleUpTopic"

// ScaleUpTopicCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ScaleUpTopicCommon operation. The "output" return
// value will be populated with the ScaleUpTopicCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ScaleUpTopicCommon Request to send the API call to the service.
// the "output" return value is not valid until after ScaleUpTopicCommon Send returns without error.
//
// See ScaleUpTopicCommon for more information on using the ScaleUpTopicCommon
// API call, and error handling.
//
//    // Example sending a request using the ScaleUpTopicCommonRequest method.
//    req, resp := client.ScaleUpTopicCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BMQ) ScaleUpTopicCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opScaleUpTopicCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ScaleUpTopicCommon API operation for BMQ.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BMQ's
// API operation ScaleUpTopicCommon for usage and error information.
func (c *BMQ) ScaleUpTopicCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ScaleUpTopicCommonRequest(input)
	return out, req.Send()
}

// ScaleUpTopicCommonWithContext is the same as ScaleUpTopicCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ScaleUpTopicCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BMQ) ScaleUpTopicCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ScaleUpTopicCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opScaleUpTopic = "ScaleUpTopic"

// ScaleUpTopicRequest generates a "volcengine/request.Request" representing the
// client's request for the ScaleUpTopic operation. The "output" return
// value will be populated with the ScaleUpTopicCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ScaleUpTopicCommon Request to send the API call to the service.
// the "output" return value is not valid until after ScaleUpTopicCommon Send returns without error.
//
// See ScaleUpTopic for more information on using the ScaleUpTopic
// API call, and error handling.
//
//    // Example sending a request using the ScaleUpTopicRequest method.
//    req, resp := client.ScaleUpTopicRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BMQ) ScaleUpTopicRequest(input *ScaleUpTopicInput) (req *request.Request, output *ScaleUpTopicOutput) {
	op := &request.Operation{
		Name:       opScaleUpTopic,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ScaleUpTopicInput{}
	}

	output = &ScaleUpTopicOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ScaleUpTopic API operation for BMQ.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BMQ's
// API operation ScaleUpTopic for usage and error information.
func (c *BMQ) ScaleUpTopic(input *ScaleUpTopicInput) (*ScaleUpTopicOutput, error) {
	req, out := c.ScaleUpTopicRequest(input)
	return out, req.Send()
}

// ScaleUpTopicWithContext is the same as ScaleUpTopic with the addition of
// the ability to pass a context and additional request options.
//
// See ScaleUpTopic for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BMQ) ScaleUpTopicWithContext(ctx volcengine.Context, input *ScaleUpTopicInput, opts ...request.Option) (*ScaleUpTopicOutput, error) {
	req, out := c.ScaleUpTopicRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ScaleUpTopicInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// Partitions is a required field
	Partitions *int32 `type:"int32" json:",omitempty" required:"true"`

	// TopicId is a required field
	TopicId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s ScaleUpTopicInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ScaleUpTopicInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ScaleUpTopicInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ScaleUpTopicInput"}
	if s.Partitions == nil {
		invalidParams.Add(request.NewErrParamRequired("Partitions"))
	}
	if s.TopicId == nil {
		invalidParams.Add(request.NewErrParamRequired("TopicId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetPartitions sets the Partitions field's value.
func (s *ScaleUpTopicInput) SetPartitions(v int32) *ScaleUpTopicInput {
	s.Partitions = &v
	return s
}

// SetTopicId sets the TopicId field's value.
func (s *ScaleUpTopicInput) SetTopicId(v string) *ScaleUpTopicInput {
	s.TopicId = &v
	return s
}

type ScaleUpTopicOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Message *string `type:"string" json:",omitempty"`

	Status *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ScaleUpTopicOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ScaleUpTopicOutput) GoString() string {
	return s.String()
}

// SetMessage sets the Message field's value.
func (s *ScaleUpTopicOutput) SetMessage(v string) *ScaleUpTopicOutput {
	s.Message = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *ScaleUpTopicOutput) SetStatus(v string) *ScaleUpTopicOutput {
	s.Status = &v
	return s
}
