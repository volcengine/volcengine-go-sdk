// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package bmq

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opListAvailableSubnetsForBMQCommon = "ListAvailableSubnetsForBMQ"

// ListAvailableSubnetsForBMQCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ListAvailableSubnetsForBMQCommon operation. The "output" return
// value will be populated with the ListAvailableSubnetsForBMQCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListAvailableSubnetsForBMQCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListAvailableSubnetsForBMQCommon Send returns without error.
//
// See ListAvailableSubnetsForBMQCommon for more information on using the ListAvailableSubnetsForBMQCommon
// API call, and error handling.
//
//    // Example sending a request using the ListAvailableSubnetsForBMQCommonRequest method.
//    req, resp := client.ListAvailableSubnetsForBMQCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BMQ) ListAvailableSubnetsForBMQCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opListAvailableSubnetsForBMQCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListAvailableSubnetsForBMQCommon API operation for BMQ.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BMQ's
// API operation ListAvailableSubnetsForBMQCommon for usage and error information.
func (c *BMQ) ListAvailableSubnetsForBMQCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ListAvailableSubnetsForBMQCommonRequest(input)
	return out, req.Send()
}

// ListAvailableSubnetsForBMQCommonWithContext is the same as ListAvailableSubnetsForBMQCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ListAvailableSubnetsForBMQCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BMQ) ListAvailableSubnetsForBMQCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ListAvailableSubnetsForBMQCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListAvailableSubnetsForBMQ = "ListAvailableSubnetsForBMQ"

// ListAvailableSubnetsForBMQRequest generates a "volcengine/request.Request" representing the
// client's request for the ListAvailableSubnetsForBMQ operation. The "output" return
// value will be populated with the ListAvailableSubnetsForBMQCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListAvailableSubnetsForBMQCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListAvailableSubnetsForBMQCommon Send returns without error.
//
// See ListAvailableSubnetsForBMQ for more information on using the ListAvailableSubnetsForBMQ
// API call, and error handling.
//
//    // Example sending a request using the ListAvailableSubnetsForBMQRequest method.
//    req, resp := client.ListAvailableSubnetsForBMQRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BMQ) ListAvailableSubnetsForBMQRequest(input *ListAvailableSubnetsForBMQInput) (req *request.Request, output *ListAvailableSubnetsForBMQOutput) {
	op := &request.Operation{
		Name:       opListAvailableSubnetsForBMQ,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListAvailableSubnetsForBMQInput{}
	}

	output = &ListAvailableSubnetsForBMQOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListAvailableSubnetsForBMQ API operation for BMQ.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BMQ's
// API operation ListAvailableSubnetsForBMQ for usage and error information.
func (c *BMQ) ListAvailableSubnetsForBMQ(input *ListAvailableSubnetsForBMQInput) (*ListAvailableSubnetsForBMQOutput, error) {
	req, out := c.ListAvailableSubnetsForBMQRequest(input)
	return out, req.Send()
}

// ListAvailableSubnetsForBMQWithContext is the same as ListAvailableSubnetsForBMQ with the addition of
// the ability to pass a context and additional request options.
//
// See ListAvailableSubnetsForBMQ for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BMQ) ListAvailableSubnetsForBMQWithContext(ctx volcengine.Context, input *ListAvailableSubnetsForBMQInput, opts ...request.Option) (*ListAvailableSubnetsForBMQOutput, error) {
	req, out := c.ListAvailableSubnetsForBMQRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ItemForListAvailableSubnetsForBMQOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	AvailableIpAddressCount *int32 `type:"int32" json:",omitempty"`

	CidrBlock *string `type:"string" json:",omitempty"`

	RegionId *string `type:"string" json:",omitempty"`

	Status *string `type:"string" json:",omitempty"`

	SubnetId *string `type:"string" json:",omitempty"`

	SubnetName *string `type:"string" json:",omitempty"`

	VpcId *string `type:"string" json:",omitempty"`

	ZoneId *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ItemForListAvailableSubnetsForBMQOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ItemForListAvailableSubnetsForBMQOutput) GoString() string {
	return s.String()
}

// SetAvailableIpAddressCount sets the AvailableIpAddressCount field's value.
func (s *ItemForListAvailableSubnetsForBMQOutput) SetAvailableIpAddressCount(v int32) *ItemForListAvailableSubnetsForBMQOutput {
	s.AvailableIpAddressCount = &v
	return s
}

// SetCidrBlock sets the CidrBlock field's value.
func (s *ItemForListAvailableSubnetsForBMQOutput) SetCidrBlock(v string) *ItemForListAvailableSubnetsForBMQOutput {
	s.CidrBlock = &v
	return s
}

// SetRegionId sets the RegionId field's value.
func (s *ItemForListAvailableSubnetsForBMQOutput) SetRegionId(v string) *ItemForListAvailableSubnetsForBMQOutput {
	s.RegionId = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *ItemForListAvailableSubnetsForBMQOutput) SetStatus(v string) *ItemForListAvailableSubnetsForBMQOutput {
	s.Status = &v
	return s
}

// SetSubnetId sets the SubnetId field's value.
func (s *ItemForListAvailableSubnetsForBMQOutput) SetSubnetId(v string) *ItemForListAvailableSubnetsForBMQOutput {
	s.SubnetId = &v
	return s
}

// SetSubnetName sets the SubnetName field's value.
func (s *ItemForListAvailableSubnetsForBMQOutput) SetSubnetName(v string) *ItemForListAvailableSubnetsForBMQOutput {
	s.SubnetName = &v
	return s
}

// SetVpcId sets the VpcId field's value.
func (s *ItemForListAvailableSubnetsForBMQOutput) SetVpcId(v string) *ItemForListAvailableSubnetsForBMQOutput {
	s.VpcId = &v
	return s
}

// SetZoneId sets the ZoneId field's value.
func (s *ItemForListAvailableSubnetsForBMQOutput) SetZoneId(v string) *ItemForListAvailableSubnetsForBMQOutput {
	s.ZoneId = &v
	return s
}

type ListAvailableSubnetsForBMQInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	ProjectName *string `type:"string" json:",omitempty"`

	// VpcId is a required field
	VpcId *string `type:"string" json:",omitempty" required:"true"`

	ZoneIds []*string `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s ListAvailableSubnetsForBMQInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListAvailableSubnetsForBMQInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ListAvailableSubnetsForBMQInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ListAvailableSubnetsForBMQInput"}
	if s.VpcId == nil {
		invalidParams.Add(request.NewErrParamRequired("VpcId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetProjectName sets the ProjectName field's value.
func (s *ListAvailableSubnetsForBMQInput) SetProjectName(v string) *ListAvailableSubnetsForBMQInput {
	s.ProjectName = &v
	return s
}

// SetVpcId sets the VpcId field's value.
func (s *ListAvailableSubnetsForBMQInput) SetVpcId(v string) *ListAvailableSubnetsForBMQInput {
	s.VpcId = &v
	return s
}

// SetZoneIds sets the ZoneIds field's value.
func (s *ListAvailableSubnetsForBMQInput) SetZoneIds(v []*string) *ListAvailableSubnetsForBMQInput {
	s.ZoneIds = v
	return s
}

type ListAvailableSubnetsForBMQOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Items []*ItemForListAvailableSubnetsForBMQOutput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s ListAvailableSubnetsForBMQOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListAvailableSubnetsForBMQOutput) GoString() string {
	return s.String()
}

// SetItems sets the Items field's value.
func (s *ListAvailableSubnetsForBMQOutput) SetItems(v []*ItemForListAvailableSubnetsForBMQOutput) *ListAvailableSubnetsForBMQOutput {
	s.Items = v
	return s
}
