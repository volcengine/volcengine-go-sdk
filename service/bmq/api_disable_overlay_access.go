// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package bmq

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDisableOverlayAccessCommon = "DisableOverlayAccess"

// DisableOverlayAccessCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DisableOverlayAccessCommon operation. The "output" return
// value will be populated with the DisableOverlayAccessCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DisableOverlayAccessCommon Request to send the API call to the service.
// the "output" return value is not valid until after DisableOverlayAccessCommon Send returns without error.
//
// See DisableOverlayAccessCommon for more information on using the DisableOverlayAccessCommon
// API call, and error handling.
//
//    // Example sending a request using the DisableOverlayAccessCommonRequest method.
//    req, resp := client.DisableOverlayAccessCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BMQ) DisableOverlayAccessCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDisableOverlayAccessCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DisableOverlayAccessCommon API operation for BMQ.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BMQ's
// API operation DisableOverlayAccessCommon for usage and error information.
func (c *BMQ) DisableOverlayAccessCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DisableOverlayAccessCommonRequest(input)
	return out, req.Send()
}

// DisableOverlayAccessCommonWithContext is the same as DisableOverlayAccessCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DisableOverlayAccessCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BMQ) DisableOverlayAccessCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DisableOverlayAccessCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDisableOverlayAccess = "DisableOverlayAccess"

// DisableOverlayAccessRequest generates a "volcengine/request.Request" representing the
// client's request for the DisableOverlayAccess operation. The "output" return
// value will be populated with the DisableOverlayAccessCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DisableOverlayAccessCommon Request to send the API call to the service.
// the "output" return value is not valid until after DisableOverlayAccessCommon Send returns without error.
//
// See DisableOverlayAccess for more information on using the DisableOverlayAccess
// API call, and error handling.
//
//    // Example sending a request using the DisableOverlayAccessRequest method.
//    req, resp := client.DisableOverlayAccessRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BMQ) DisableOverlayAccessRequest(input *DisableOverlayAccessInput) (req *request.Request, output *DisableOverlayAccessOutput) {
	op := &request.Operation{
		Name:       opDisableOverlayAccess,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DisableOverlayAccessInput{}
	}

	output = &DisableOverlayAccessOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DisableOverlayAccess API operation for BMQ.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BMQ's
// API operation DisableOverlayAccess for usage and error information.
func (c *BMQ) DisableOverlayAccess(input *DisableOverlayAccessInput) (*DisableOverlayAccessOutput, error) {
	req, out := c.DisableOverlayAccessRequest(input)
	return out, req.Send()
}

// DisableOverlayAccessWithContext is the same as DisableOverlayAccess with the addition of
// the ability to pass a context and additional request options.
//
// See DisableOverlayAccess for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BMQ) DisableOverlayAccessWithContext(ctx volcengine.Context, input *DisableOverlayAccessInput, opts ...request.Option) (*DisableOverlayAccessOutput, error) {
	req, out := c.DisableOverlayAccessRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DisableOverlayAccessInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s DisableOverlayAccessInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DisableOverlayAccessInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DisableOverlayAccessInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DisableOverlayAccessInput"}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetInstanceId sets the InstanceId field's value.
func (s *DisableOverlayAccessInput) SetInstanceId(v string) *DisableOverlayAccessInput {
	s.InstanceId = &v
	return s
}

type DisableOverlayAccessOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Message *string `type:"string" json:",omitempty"`

	Status *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s DisableOverlayAccessOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DisableOverlayAccessOutput) GoString() string {
	return s.String()
}

// SetMessage sets the Message field's value.
func (s *DisableOverlayAccessOutput) SetMessage(v string) *DisableOverlayAccessOutput {
	s.Message = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *DisableOverlayAccessOutput) SetStatus(v string) *DisableOverlayAccessOutput {
	s.Status = &v
	return s
}
