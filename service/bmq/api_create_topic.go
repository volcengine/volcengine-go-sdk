// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package bmq

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opCreateTopicCommon = "CreateTopic"

// CreateTopicCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateTopicCommon operation. The "output" return
// value will be populated with the CreateTopicCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateTopicCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateTopicCommon Send returns without error.
//
// See CreateTopicCommon for more information on using the CreateTopicCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateTopicCommonRequest method.
//    req, resp := client.CreateTopicCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BMQ) CreateTopicCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateTopicCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateTopicCommon API operation for BMQ.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BMQ's
// API operation CreateTopicCommon for usage and error information.
func (c *BMQ) CreateTopicCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateTopicCommonRequest(input)
	return out, req.Send()
}

// CreateTopicCommonWithContext is the same as CreateTopicCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateTopicCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BMQ) CreateTopicCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateTopicCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateTopic = "CreateTopic"

// CreateTopicRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateTopic operation. The "output" return
// value will be populated with the CreateTopicCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateTopicCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateTopicCommon Send returns without error.
//
// See CreateTopic for more information on using the CreateTopic
// API call, and error handling.
//
//    // Example sending a request using the CreateTopicRequest method.
//    req, resp := client.CreateTopicRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BMQ) CreateTopicRequest(input *CreateTopicInput) (req *request.Request, output *CreateTopicOutput) {
	op := &request.Operation{
		Name:       opCreateTopic,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateTopicInput{}
	}

	output = &CreateTopicOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateTopic API operation for BMQ.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BMQ's
// API operation CreateTopic for usage and error information.
func (c *BMQ) CreateTopic(input *CreateTopicInput) (*CreateTopicOutput, error) {
	req, out := c.CreateTopicRequest(input)
	return out, req.Send()
}

// CreateTopicWithContext is the same as CreateTopic with the addition of
// the ability to pass a context and additional request options.
//
// See CreateTopic for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BMQ) CreateTopicWithContext(ctx volcengine.Context, input *CreateTopicInput, opts ...request.Option) (*CreateTopicOutput, error) {
	req, out := c.CreateTopicRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type CreateTopicInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Description *string `max:"255" type:"string" json:",omitempty"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:",omitempty" required:"true"`

	// Partitions is a required field
	Partitions *int32 `type:"int32" json:",omitempty" required:"true"`

	// Retention is a required field
	Retention *int32 `max:"336" type:"int32" json:",omitempty" required:"true"`

	// Topic is a required field
	Topic *string `min:"3" max:"128" type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s CreateTopicInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateTopicInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateTopicInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CreateTopicInput"}
	if s.Description != nil && len(*s.Description) > 255 {
		invalidParams.Add(request.NewErrParamMaxLen("Description", 255, *s.Description))
	}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}
	if s.Partitions == nil {
		invalidParams.Add(request.NewErrParamRequired("Partitions"))
	}
	if s.Retention == nil {
		invalidParams.Add(request.NewErrParamRequired("Retention"))
	}
	if s.Retention != nil && *s.Retention > 336 {
		invalidParams.Add(request.NewErrParamMaxValue("Retention", 336))
	}
	if s.Topic == nil {
		invalidParams.Add(request.NewErrParamRequired("Topic"))
	}
	if s.Topic != nil && len(*s.Topic) < 3 {
		invalidParams.Add(request.NewErrParamMinLen("Topic", 3))
	}
	if s.Topic != nil && len(*s.Topic) > 128 {
		invalidParams.Add(request.NewErrParamMaxLen("Topic", 128, *s.Topic))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDescription sets the Description field's value.
func (s *CreateTopicInput) SetDescription(v string) *CreateTopicInput {
	s.Description = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *CreateTopicInput) SetInstanceId(v string) *CreateTopicInput {
	s.InstanceId = &v
	return s
}

// SetPartitions sets the Partitions field's value.
func (s *CreateTopicInput) SetPartitions(v int32) *CreateTopicInput {
	s.Partitions = &v
	return s
}

// SetRetention sets the Retention field's value.
func (s *CreateTopicInput) SetRetention(v int32) *CreateTopicInput {
	s.Retention = &v
	return s
}

// SetTopic sets the Topic field's value.
func (s *CreateTopicInput) SetTopic(v string) *CreateTopicInput {
	s.Topic = &v
	return s
}

type CreateTopicOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	TopicId *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s CreateTopicOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateTopicOutput) GoString() string {
	return s.String()
}

// SetTopicId sets the TopicId field's value.
func (s *CreateTopicOutput) SetTopicId(v string) *CreateTopicOutput {
	s.TopicId = &v
	return s
}
