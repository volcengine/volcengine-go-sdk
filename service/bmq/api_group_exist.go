// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package bmq

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opGroupExistCommon = "GroupExist"

// GroupExistCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the GroupExistCommon operation. The "output" return
// value will be populated with the GroupExistCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GroupExistCommon Request to send the API call to the service.
// the "output" return value is not valid until after GroupExistCommon Send returns without error.
//
// See GroupExistCommon for more information on using the GroupExistCommon
// API call, and error handling.
//
//    // Example sending a request using the GroupExistCommonRequest method.
//    req, resp := client.GroupExistCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BMQ) GroupExistCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opGroupExistCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GroupExistCommon API operation for BMQ.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BMQ's
// API operation GroupExistCommon for usage and error information.
func (c *BMQ) GroupExistCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.GroupExistCommonRequest(input)
	return out, req.Send()
}

// GroupExistCommonWithContext is the same as GroupExistCommon with the addition of
// the ability to pass a context and additional request options.
//
// See GroupExistCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BMQ) GroupExistCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.GroupExistCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opGroupExist = "GroupExist"

// GroupExistRequest generates a "volcengine/request.Request" representing the
// client's request for the GroupExist operation. The "output" return
// value will be populated with the GroupExistCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GroupExistCommon Request to send the API call to the service.
// the "output" return value is not valid until after GroupExistCommon Send returns without error.
//
// See GroupExist for more information on using the GroupExist
// API call, and error handling.
//
//    // Example sending a request using the GroupExistRequest method.
//    req, resp := client.GroupExistRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BMQ) GroupExistRequest(input *GroupExistInput) (req *request.Request, output *GroupExistOutput) {
	op := &request.Operation{
		Name:       opGroupExist,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &GroupExistInput{}
	}

	output = &GroupExistOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GroupExist API operation for BMQ.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BMQ's
// API operation GroupExist for usage and error information.
func (c *BMQ) GroupExist(input *GroupExistInput) (*GroupExistOutput, error) {
	req, out := c.GroupExistRequest(input)
	return out, req.Send()
}

// GroupExistWithContext is the same as GroupExist with the addition of
// the ability to pass a context and additional request options.
//
// See GroupExist for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BMQ) GroupExistWithContext(ctx volcengine.Context, input *GroupExistInput, opts ...request.Option) (*GroupExistOutput, error) {
	req, out := c.GroupExistRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type GroupExistInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	GroupId *string `type:"string" json:",omitempty"`

	GroupName *string `type:"string" json:",omitempty"`

	InstanceId *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s GroupExistInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GroupExistInput) GoString() string {
	return s.String()
}

// SetGroupId sets the GroupId field's value.
func (s *GroupExistInput) SetGroupId(v string) *GroupExistInput {
	s.GroupId = &v
	return s
}

// SetGroupName sets the GroupName field's value.
func (s *GroupExistInput) SetGroupName(v string) *GroupExistInput {
	s.GroupName = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *GroupExistInput) SetInstanceId(v string) *GroupExistInput {
	s.InstanceId = &v
	return s
}

type GroupExistOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Existed *bool `type:"boolean" json:",omitempty"`
}

// String returns the string representation
func (s GroupExistOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GroupExistOutput) GoString() string {
	return s.String()
}

// SetExisted sets the Existed field's value.
func (s *GroupExistOutput) SetExisted(v bool) *GroupExistOutput {
	s.Existed = &v
	return s
}
