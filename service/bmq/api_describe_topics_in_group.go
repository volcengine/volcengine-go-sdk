// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package bmq

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDescribeTopicsInGroupCommon = "DescribeTopicsInGroup"

// DescribeTopicsInGroupCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeTopicsInGroupCommon operation. The "output" return
// value will be populated with the DescribeTopicsInGroupCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeTopicsInGroupCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeTopicsInGroupCommon Send returns without error.
//
// See DescribeTopicsInGroupCommon for more information on using the DescribeTopicsInGroupCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeTopicsInGroupCommonRequest method.
//    req, resp := client.DescribeTopicsInGroupCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BMQ) DescribeTopicsInGroupCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeTopicsInGroupCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeTopicsInGroupCommon API operation for BMQ.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BMQ's
// API operation DescribeTopicsInGroupCommon for usage and error information.
func (c *BMQ) DescribeTopicsInGroupCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeTopicsInGroupCommonRequest(input)
	return out, req.Send()
}

// DescribeTopicsInGroupCommonWithContext is the same as DescribeTopicsInGroupCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeTopicsInGroupCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BMQ) DescribeTopicsInGroupCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeTopicsInGroupCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeTopicsInGroup = "DescribeTopicsInGroup"

// DescribeTopicsInGroupRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeTopicsInGroup operation. The "output" return
// value will be populated with the DescribeTopicsInGroupCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeTopicsInGroupCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeTopicsInGroupCommon Send returns without error.
//
// See DescribeTopicsInGroup for more information on using the DescribeTopicsInGroup
// API call, and error handling.
//
//    // Example sending a request using the DescribeTopicsInGroupRequest method.
//    req, resp := client.DescribeTopicsInGroupRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BMQ) DescribeTopicsInGroupRequest(input *DescribeTopicsInGroupInput) (req *request.Request, output *DescribeTopicsInGroupOutput) {
	op := &request.Operation{
		Name:       opDescribeTopicsInGroup,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeTopicsInGroupInput{}
	}

	output = &DescribeTopicsInGroupOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeTopicsInGroup API operation for BMQ.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BMQ's
// API operation DescribeTopicsInGroup for usage and error information.
func (c *BMQ) DescribeTopicsInGroup(input *DescribeTopicsInGroupInput) (*DescribeTopicsInGroupOutput, error) {
	req, out := c.DescribeTopicsInGroupRequest(input)
	return out, req.Send()
}

// DescribeTopicsInGroupWithContext is the same as DescribeTopicsInGroup with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeTopicsInGroup for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BMQ) DescribeTopicsInGroupWithContext(ctx volcengine.Context, input *DescribeTopicsInGroupInput, opts ...request.Option) (*DescribeTopicsInGroupOutput, error) {
	req, out := c.DescribeTopicsInGroupRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DescribeTopicsInGroupInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// GroupId is a required field
	GroupId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s DescribeTopicsInGroupInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeTopicsInGroupInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeTopicsInGroupInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DescribeTopicsInGroupInput"}
	if s.GroupId == nil {
		invalidParams.Add(request.NewErrParamRequired("GroupId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetGroupId sets the GroupId field's value.
func (s *DescribeTopicsInGroupInput) SetGroupId(v string) *DescribeTopicsInGroupInput {
	s.GroupId = &v
	return s
}

type DescribeTopicsInGroupOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Items []*ItemForDescribeTopicsInGroupOutput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s DescribeTopicsInGroupOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeTopicsInGroupOutput) GoString() string {
	return s.String()
}

// SetItems sets the Items field's value.
func (s *DescribeTopicsInGroupOutput) SetItems(v []*ItemForDescribeTopicsInGroupOutput) *DescribeTopicsInGroupOutput {
	s.Items = v
	return s
}

type ItemForDescribeTopicsInGroupOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	CreateTime *string `type:"string" json:",omitempty"`

	Description *string `type:"string" json:",omitempty"`

	Lag *int64 `type:"int64" json:",omitempty"`

	Partitions *int32 `type:"int32" json:",omitempty"`

	Retention *int32 `type:"int32" json:",omitempty"`

	Status *string `type:"string" json:",omitempty" enum:"EnumOfStatusForDescribeTopicsInGroupOutput"`

	TopicId *string `type:"string" json:",omitempty"`

	TopicName *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ItemForDescribeTopicsInGroupOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ItemForDescribeTopicsInGroupOutput) GoString() string {
	return s.String()
}

// SetCreateTime sets the CreateTime field's value.
func (s *ItemForDescribeTopicsInGroupOutput) SetCreateTime(v string) *ItemForDescribeTopicsInGroupOutput {
	s.CreateTime = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *ItemForDescribeTopicsInGroupOutput) SetDescription(v string) *ItemForDescribeTopicsInGroupOutput {
	s.Description = &v
	return s
}

// SetLag sets the Lag field's value.
func (s *ItemForDescribeTopicsInGroupOutput) SetLag(v int64) *ItemForDescribeTopicsInGroupOutput {
	s.Lag = &v
	return s
}

// SetPartitions sets the Partitions field's value.
func (s *ItemForDescribeTopicsInGroupOutput) SetPartitions(v int32) *ItemForDescribeTopicsInGroupOutput {
	s.Partitions = &v
	return s
}

// SetRetention sets the Retention field's value.
func (s *ItemForDescribeTopicsInGroupOutput) SetRetention(v int32) *ItemForDescribeTopicsInGroupOutput {
	s.Retention = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *ItemForDescribeTopicsInGroupOutput) SetStatus(v string) *ItemForDescribeTopicsInGroupOutput {
	s.Status = &v
	return s
}

// SetTopicId sets the TopicId field's value.
func (s *ItemForDescribeTopicsInGroupOutput) SetTopicId(v string) *ItemForDescribeTopicsInGroupOutput {
	s.TopicId = &v
	return s
}

// SetTopicName sets the TopicName field's value.
func (s *ItemForDescribeTopicsInGroupOutput) SetTopicName(v string) *ItemForDescribeTopicsInGroupOutput {
	s.TopicName = &v
	return s
}

const (
	// EnumOfStatusForDescribeTopicsInGroupOutputCreating is a EnumOfStatusForDescribeTopicsInGroupOutput enum value
	EnumOfStatusForDescribeTopicsInGroupOutputCreating = "CREATING"

	// EnumOfStatusForDescribeTopicsInGroupOutputRunning is a EnumOfStatusForDescribeTopicsInGroupOutput enum value
	EnumOfStatusForDescribeTopicsInGroupOutputRunning = "RUNNING"

	// EnumOfStatusForDescribeTopicsInGroupOutputDeleting is a EnumOfStatusForDescribeTopicsInGroupOutput enum value
	EnumOfStatusForDescribeTopicsInGroupOutputDeleting = "DELETING"
)
