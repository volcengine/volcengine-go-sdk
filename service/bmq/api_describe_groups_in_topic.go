// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package bmq

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDescribeGroupsInTopicCommon = "DescribeGroupsInTopic"

// DescribeGroupsInTopicCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeGroupsInTopicCommon operation. The "output" return
// value will be populated with the DescribeGroupsInTopicCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeGroupsInTopicCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeGroupsInTopicCommon Send returns without error.
//
// See DescribeGroupsInTopicCommon for more information on using the DescribeGroupsInTopicCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeGroupsInTopicCommonRequest method.
//    req, resp := client.DescribeGroupsInTopicCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BMQ) DescribeGroupsInTopicCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeGroupsInTopicCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeGroupsInTopicCommon API operation for BMQ.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BMQ's
// API operation DescribeGroupsInTopicCommon for usage and error information.
func (c *BMQ) DescribeGroupsInTopicCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeGroupsInTopicCommonRequest(input)
	return out, req.Send()
}

// DescribeGroupsInTopicCommonWithContext is the same as DescribeGroupsInTopicCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeGroupsInTopicCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BMQ) DescribeGroupsInTopicCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeGroupsInTopicCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeGroupsInTopic = "DescribeGroupsInTopic"

// DescribeGroupsInTopicRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeGroupsInTopic operation. The "output" return
// value will be populated with the DescribeGroupsInTopicCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeGroupsInTopicCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeGroupsInTopicCommon Send returns without error.
//
// See DescribeGroupsInTopic for more information on using the DescribeGroupsInTopic
// API call, and error handling.
//
//    // Example sending a request using the DescribeGroupsInTopicRequest method.
//    req, resp := client.DescribeGroupsInTopicRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BMQ) DescribeGroupsInTopicRequest(input *DescribeGroupsInTopicInput) (req *request.Request, output *DescribeGroupsInTopicOutput) {
	op := &request.Operation{
		Name:       opDescribeGroupsInTopic,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeGroupsInTopicInput{}
	}

	output = &DescribeGroupsInTopicOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeGroupsInTopic API operation for BMQ.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BMQ's
// API operation DescribeGroupsInTopic for usage and error information.
func (c *BMQ) DescribeGroupsInTopic(input *DescribeGroupsInTopicInput) (*DescribeGroupsInTopicOutput, error) {
	req, out := c.DescribeGroupsInTopicRequest(input)
	return out, req.Send()
}

// DescribeGroupsInTopicWithContext is the same as DescribeGroupsInTopic with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeGroupsInTopic for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BMQ) DescribeGroupsInTopicWithContext(ctx volcengine.Context, input *DescribeGroupsInTopicInput, opts ...request.Option) (*DescribeGroupsInTopicOutput, error) {
	req, out := c.DescribeGroupsInTopicRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DescribeGroupsInTopicInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	TopicId *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s DescribeGroupsInTopicInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeGroupsInTopicInput) GoString() string {
	return s.String()
}

// SetTopicId sets the TopicId field's value.
func (s *DescribeGroupsInTopicInput) SetTopicId(v string) *DescribeGroupsInTopicInput {
	s.TopicId = &v
	return s
}

type DescribeGroupsInTopicOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Items []*ItemForDescribeGroupsInTopicOutput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s DescribeGroupsInTopicOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeGroupsInTopicOutput) GoString() string {
	return s.String()
}

// SetItems sets the Items field's value.
func (s *DescribeGroupsInTopicOutput) SetItems(v []*ItemForDescribeGroupsInTopicOutput) *DescribeGroupsInTopicOutput {
	s.Items = v
	return s
}

type ItemForDescribeGroupsInTopicOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Description *string `type:"string" json:",omitempty"`

	GroupId *string `type:"string" json:",omitempty"`

	GroupName *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ItemForDescribeGroupsInTopicOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ItemForDescribeGroupsInTopicOutput) GoString() string {
	return s.String()
}

// SetDescription sets the Description field's value.
func (s *ItemForDescribeGroupsInTopicOutput) SetDescription(v string) *ItemForDescribeGroupsInTopicOutput {
	s.Description = &v
	return s
}

// SetGroupId sets the GroupId field's value.
func (s *ItemForDescribeGroupsInTopicOutput) SetGroupId(v string) *ItemForDescribeGroupsInTopicOutput {
	s.GroupId = &v
	return s
}

// SetGroupName sets the GroupName field's value.
func (s *ItemForDescribeGroupsInTopicOutput) SetGroupName(v string) *ItemForDescribeGroupsInTopicOutput {
	s.GroupName = &v
	return s
}
