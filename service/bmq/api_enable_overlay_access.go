// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package bmq

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opEnableOverlayAccessCommon = "EnableOverlayAccess"

// EnableOverlayAccessCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the EnableOverlayAccessCommon operation. The "output" return
// value will be populated with the EnableOverlayAccessCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned EnableOverlayAccessCommon Request to send the API call to the service.
// the "output" return value is not valid until after EnableOverlayAccessCommon Send returns without error.
//
// See EnableOverlayAccessCommon for more information on using the EnableOverlayAccessCommon
// API call, and error handling.
//
//    // Example sending a request using the EnableOverlayAccessCommonRequest method.
//    req, resp := client.EnableOverlayAccessCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BMQ) EnableOverlayAccessCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opEnableOverlayAccessCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// EnableOverlayAccessCommon API operation for BMQ.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BMQ's
// API operation EnableOverlayAccessCommon for usage and error information.
func (c *BMQ) EnableOverlayAccessCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.EnableOverlayAccessCommonRequest(input)
	return out, req.Send()
}

// EnableOverlayAccessCommonWithContext is the same as EnableOverlayAccessCommon with the addition of
// the ability to pass a context and additional request options.
//
// See EnableOverlayAccessCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BMQ) EnableOverlayAccessCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.EnableOverlayAccessCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opEnableOverlayAccess = "EnableOverlayAccess"

// EnableOverlayAccessRequest generates a "volcengine/request.Request" representing the
// client's request for the EnableOverlayAccess operation. The "output" return
// value will be populated with the EnableOverlayAccessCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned EnableOverlayAccessCommon Request to send the API call to the service.
// the "output" return value is not valid until after EnableOverlayAccessCommon Send returns without error.
//
// See EnableOverlayAccess for more information on using the EnableOverlayAccess
// API call, and error handling.
//
//    // Example sending a request using the EnableOverlayAccessRequest method.
//    req, resp := client.EnableOverlayAccessRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BMQ) EnableOverlayAccessRequest(input *EnableOverlayAccessInput) (req *request.Request, output *EnableOverlayAccessOutput) {
	op := &request.Operation{
		Name:       opEnableOverlayAccess,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &EnableOverlayAccessInput{}
	}

	output = &EnableOverlayAccessOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// EnableOverlayAccess API operation for BMQ.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BMQ's
// API operation EnableOverlayAccess for usage and error information.
func (c *BMQ) EnableOverlayAccess(input *EnableOverlayAccessInput) (*EnableOverlayAccessOutput, error) {
	req, out := c.EnableOverlayAccessRequest(input)
	return out, req.Send()
}

// EnableOverlayAccessWithContext is the same as EnableOverlayAccess with the addition of
// the ability to pass a context and additional request options.
//
// See EnableOverlayAccess for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BMQ) EnableOverlayAccessWithContext(ctx volcengine.Context, input *EnableOverlayAccessInput, opts ...request.Option) (*EnableOverlayAccessOutput, error) {
	req, out := c.EnableOverlayAccessRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type EnableOverlayAccessInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s EnableOverlayAccessInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s EnableOverlayAccessInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *EnableOverlayAccessInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "EnableOverlayAccessInput"}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetInstanceId sets the InstanceId field's value.
func (s *EnableOverlayAccessInput) SetInstanceId(v string) *EnableOverlayAccessInput {
	s.InstanceId = &v
	return s
}

type EnableOverlayAccessOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Message *string `type:"string" json:",omitempty"`

	Status *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s EnableOverlayAccessOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s EnableOverlayAccessOutput) GoString() string {
	return s.String()
}

// SetMessage sets the Message field's value.
func (s *EnableOverlayAccessOutput) SetMessage(v string) *EnableOverlayAccessOutput {
	s.Message = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *EnableOverlayAccessOutput) SetStatus(v string) *EnableOverlayAccessOutput {
	s.Status = &v
	return s
}
