// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package bmq

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDescribeTopicTimeRangeCommon = "DescribeTopicTimeRange"

// DescribeTopicTimeRangeCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeTopicTimeRangeCommon operation. The "output" return
// value will be populated with the DescribeTopicTimeRangeCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeTopicTimeRangeCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeTopicTimeRangeCommon Send returns without error.
//
// See DescribeTopicTimeRangeCommon for more information on using the DescribeTopicTimeRangeCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeTopicTimeRangeCommonRequest method.
//    req, resp := client.DescribeTopicTimeRangeCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BMQ) DescribeTopicTimeRangeCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeTopicTimeRangeCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeTopicTimeRangeCommon API operation for BMQ.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BMQ's
// API operation DescribeTopicTimeRangeCommon for usage and error information.
func (c *BMQ) DescribeTopicTimeRangeCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeTopicTimeRangeCommonRequest(input)
	return out, req.Send()
}

// DescribeTopicTimeRangeCommonWithContext is the same as DescribeTopicTimeRangeCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeTopicTimeRangeCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BMQ) DescribeTopicTimeRangeCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeTopicTimeRangeCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeTopicTimeRange = "DescribeTopicTimeRange"

// DescribeTopicTimeRangeRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeTopicTimeRange operation. The "output" return
// value will be populated with the DescribeTopicTimeRangeCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeTopicTimeRangeCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeTopicTimeRangeCommon Send returns without error.
//
// See DescribeTopicTimeRange for more information on using the DescribeTopicTimeRange
// API call, and error handling.
//
//    // Example sending a request using the DescribeTopicTimeRangeRequest method.
//    req, resp := client.DescribeTopicTimeRangeRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BMQ) DescribeTopicTimeRangeRequest(input *DescribeTopicTimeRangeInput) (req *request.Request, output *DescribeTopicTimeRangeOutput) {
	op := &request.Operation{
		Name:       opDescribeTopicTimeRange,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeTopicTimeRangeInput{}
	}

	output = &DescribeTopicTimeRangeOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeTopicTimeRange API operation for BMQ.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BMQ's
// API operation DescribeTopicTimeRange for usage and error information.
func (c *BMQ) DescribeTopicTimeRange(input *DescribeTopicTimeRangeInput) (*DescribeTopicTimeRangeOutput, error) {
	req, out := c.DescribeTopicTimeRangeRequest(input)
	return out, req.Send()
}

// DescribeTopicTimeRangeWithContext is the same as DescribeTopicTimeRange with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeTopicTimeRange for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BMQ) DescribeTopicTimeRangeWithContext(ctx volcengine.Context, input *DescribeTopicTimeRangeInput, opts ...request.Option) (*DescribeTopicTimeRangeOutput, error) {
	req, out := c.DescribeTopicTimeRangeRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DescribeTopicTimeRangeInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// TopicId is a required field
	TopicId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s DescribeTopicTimeRangeInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeTopicTimeRangeInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeTopicTimeRangeInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DescribeTopicTimeRangeInput"}
	if s.TopicId == nil {
		invalidParams.Add(request.NewErrParamRequired("TopicId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetTopicId sets the TopicId field's value.
func (s *DescribeTopicTimeRangeInput) SetTopicId(v string) *DescribeTopicTimeRangeInput {
	s.TopicId = &v
	return s
}

type DescribeTopicTimeRangeOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	EndTime *int64 `type:"int64" json:",omitempty"`

	HasRecord *bool `type:"boolean" json:",omitempty"`

	StartTime *int64 `type:"int64" json:",omitempty"`
}

// String returns the string representation
func (s DescribeTopicTimeRangeOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeTopicTimeRangeOutput) GoString() string {
	return s.String()
}

// SetEndTime sets the EndTime field's value.
func (s *DescribeTopicTimeRangeOutput) SetEndTime(v int64) *DescribeTopicTimeRangeOutput {
	s.EndTime = &v
	return s
}

// SetHasRecord sets the HasRecord field's value.
func (s *DescribeTopicTimeRangeOutput) SetHasRecord(v bool) *DescribeTopicTimeRangeOutput {
	s.HasRecord = &v
	return s
}

// SetStartTime sets the StartTime field's value.
func (s *DescribeTopicTimeRangeOutput) SetStartTime(v int64) *DescribeTopicTimeRangeOutput {
	s.StartTime = &v
	return s
}
