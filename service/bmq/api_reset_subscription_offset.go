// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package bmq

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opResetSubscriptionOffsetCommon = "ResetSubscriptionOffset"

// ResetSubscriptionOffsetCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ResetSubscriptionOffsetCommon operation. The "output" return
// value will be populated with the ResetSubscriptionOffsetCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ResetSubscriptionOffsetCommon Request to send the API call to the service.
// the "output" return value is not valid until after ResetSubscriptionOffsetCommon Send returns without error.
//
// See ResetSubscriptionOffsetCommon for more information on using the ResetSubscriptionOffsetCommon
// API call, and error handling.
//
//    // Example sending a request using the ResetSubscriptionOffsetCommonRequest method.
//    req, resp := client.ResetSubscriptionOffsetCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BMQ) ResetSubscriptionOffsetCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opResetSubscriptionOffsetCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ResetSubscriptionOffsetCommon API operation for BMQ.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BMQ's
// API operation ResetSubscriptionOffsetCommon for usage and error information.
func (c *BMQ) ResetSubscriptionOffsetCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ResetSubscriptionOffsetCommonRequest(input)
	return out, req.Send()
}

// ResetSubscriptionOffsetCommonWithContext is the same as ResetSubscriptionOffsetCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ResetSubscriptionOffsetCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BMQ) ResetSubscriptionOffsetCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ResetSubscriptionOffsetCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opResetSubscriptionOffset = "ResetSubscriptionOffset"

// ResetSubscriptionOffsetRequest generates a "volcengine/request.Request" representing the
// client's request for the ResetSubscriptionOffset operation. The "output" return
// value will be populated with the ResetSubscriptionOffsetCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ResetSubscriptionOffsetCommon Request to send the API call to the service.
// the "output" return value is not valid until after ResetSubscriptionOffsetCommon Send returns without error.
//
// See ResetSubscriptionOffset for more information on using the ResetSubscriptionOffset
// API call, and error handling.
//
//    // Example sending a request using the ResetSubscriptionOffsetRequest method.
//    req, resp := client.ResetSubscriptionOffsetRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BMQ) ResetSubscriptionOffsetRequest(input *ResetSubscriptionOffsetInput) (req *request.Request, output *ResetSubscriptionOffsetOutput) {
	op := &request.Operation{
		Name:       opResetSubscriptionOffset,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ResetSubscriptionOffsetInput{}
	}

	output = &ResetSubscriptionOffsetOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ResetSubscriptionOffset API operation for BMQ.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BMQ's
// API operation ResetSubscriptionOffset for usage and error information.
func (c *BMQ) ResetSubscriptionOffset(input *ResetSubscriptionOffsetInput) (*ResetSubscriptionOffsetOutput, error) {
	req, out := c.ResetSubscriptionOffsetRequest(input)
	return out, req.Send()
}

// ResetSubscriptionOffsetWithContext is the same as ResetSubscriptionOffset with the addition of
// the ability to pass a context and additional request options.
//
// See ResetSubscriptionOffset for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BMQ) ResetSubscriptionOffsetWithContext(ctx volcengine.Context, input *ResetSubscriptionOffsetInput, opts ...request.Option) (*ResetSubscriptionOffsetOutput, error) {
	req, out := c.ResetSubscriptionOffsetRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ResetSubscriptionOffsetInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// GroupId is a required field
	GroupId *string `type:"string" json:",omitempty" required:"true"`

	OffsetType *string `type:"string" json:",omitempty" enum:"EnumOfOffsetTypeForResetSubscriptionOffsetInput"`

	PartitionId *int32 `type:"int32" json:",omitempty"`

	// ResetBy is a required field
	ResetBy *string `type:"string" json:",omitempty" required:"true" enum:"EnumOfResetByForResetSubscriptionOffsetInput"`

	// ResetValue is a required field
	ResetValue *int64 `type:"int64" json:",omitempty" required:"true"`

	// TopicId is a required field
	TopicId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s ResetSubscriptionOffsetInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ResetSubscriptionOffsetInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ResetSubscriptionOffsetInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ResetSubscriptionOffsetInput"}
	if s.GroupId == nil {
		invalidParams.Add(request.NewErrParamRequired("GroupId"))
	}
	if s.ResetBy == nil {
		invalidParams.Add(request.NewErrParamRequired("ResetBy"))
	}
	if s.ResetValue == nil {
		invalidParams.Add(request.NewErrParamRequired("ResetValue"))
	}
	if s.TopicId == nil {
		invalidParams.Add(request.NewErrParamRequired("TopicId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetGroupId sets the GroupId field's value.
func (s *ResetSubscriptionOffsetInput) SetGroupId(v string) *ResetSubscriptionOffsetInput {
	s.GroupId = &v
	return s
}

// SetOffsetType sets the OffsetType field's value.
func (s *ResetSubscriptionOffsetInput) SetOffsetType(v string) *ResetSubscriptionOffsetInput {
	s.OffsetType = &v
	return s
}

// SetPartitionId sets the PartitionId field's value.
func (s *ResetSubscriptionOffsetInput) SetPartitionId(v int32) *ResetSubscriptionOffsetInput {
	s.PartitionId = &v
	return s
}

// SetResetBy sets the ResetBy field's value.
func (s *ResetSubscriptionOffsetInput) SetResetBy(v string) *ResetSubscriptionOffsetInput {
	s.ResetBy = &v
	return s
}

// SetResetValue sets the ResetValue field's value.
func (s *ResetSubscriptionOffsetInput) SetResetValue(v int64) *ResetSubscriptionOffsetInput {
	s.ResetValue = &v
	return s
}

// SetTopicId sets the TopicId field's value.
func (s *ResetSubscriptionOffsetInput) SetTopicId(v string) *ResetSubscriptionOffsetInput {
	s.TopicId = &v
	return s
}

type ResetSubscriptionOffsetOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Message *string `type:"string" json:",omitempty"`

	Status *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ResetSubscriptionOffsetOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ResetSubscriptionOffsetOutput) GoString() string {
	return s.String()
}

// SetMessage sets the Message field's value.
func (s *ResetSubscriptionOffsetOutput) SetMessage(v string) *ResetSubscriptionOffsetOutput {
	s.Message = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *ResetSubscriptionOffsetOutput) SetStatus(v string) *ResetSubscriptionOffsetOutput {
	s.Status = &v
	return s
}

const (
	// EnumOfOffsetTypeForResetSubscriptionOffsetInputEarliest is a EnumOfOffsetTypeForResetSubscriptionOffsetInput enum value
	EnumOfOffsetTypeForResetSubscriptionOffsetInputEarliest = "EARLIEST"

	// EnumOfOffsetTypeForResetSubscriptionOffsetInputCurrent is a EnumOfOffsetTypeForResetSubscriptionOffsetInput enum value
	EnumOfOffsetTypeForResetSubscriptionOffsetInputCurrent = "CURRENT"

	// EnumOfOffsetTypeForResetSubscriptionOffsetInputLatest is a EnumOfOffsetTypeForResetSubscriptionOffsetInput enum value
	EnumOfOffsetTypeForResetSubscriptionOffsetInputLatest = "LATEST"
)

const (
	// EnumOfResetByForResetSubscriptionOffsetInputTimestamp is a EnumOfResetByForResetSubscriptionOffsetInput enum value
	EnumOfResetByForResetSubscriptionOffsetInputTimestamp = "TIMESTAMP"

	// EnumOfResetByForResetSubscriptionOffsetInputOffset is a EnumOfResetByForResetSubscriptionOffsetInput enum value
	EnumOfResetByForResetSubscriptionOffsetInputOffset = "OFFSET"
)
