// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package bmq

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opEnablePublicAccessCommon = "EnablePublicAccess"

// EnablePublicAccessCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the EnablePublicAccessCommon operation. The "output" return
// value will be populated with the EnablePublicAccessCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned EnablePublicAccessCommon Request to send the API call to the service.
// the "output" return value is not valid until after EnablePublicAccessCommon Send returns without error.
//
// See EnablePublicAccessCommon for more information on using the EnablePublicAccessCommon
// API call, and error handling.
//
//    // Example sending a request using the EnablePublicAccessCommonRequest method.
//    req, resp := client.EnablePublicAccessCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BMQ) EnablePublicAccessCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opEnablePublicAccessCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// EnablePublicAccessCommon API operation for BMQ.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BMQ's
// API operation EnablePublicAccessCommon for usage and error information.
func (c *BMQ) EnablePublicAccessCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.EnablePublicAccessCommonRequest(input)
	return out, req.Send()
}

// EnablePublicAccessCommonWithContext is the same as EnablePublicAccessCommon with the addition of
// the ability to pass a context and additional request options.
//
// See EnablePublicAccessCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BMQ) EnablePublicAccessCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.EnablePublicAccessCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opEnablePublicAccess = "EnablePublicAccess"

// EnablePublicAccessRequest generates a "volcengine/request.Request" representing the
// client's request for the EnablePublicAccess operation. The "output" return
// value will be populated with the EnablePublicAccessCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned EnablePublicAccessCommon Request to send the API call to the service.
// the "output" return value is not valid until after EnablePublicAccessCommon Send returns without error.
//
// See EnablePublicAccess for more information on using the EnablePublicAccess
// API call, and error handling.
//
//    // Example sending a request using the EnablePublicAccessRequest method.
//    req, resp := client.EnablePublicAccessRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BMQ) EnablePublicAccessRequest(input *EnablePublicAccessInput) (req *request.Request, output *EnablePublicAccessOutput) {
	op := &request.Operation{
		Name:       opEnablePublicAccess,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &EnablePublicAccessInput{}
	}

	output = &EnablePublicAccessOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// EnablePublicAccess API operation for BMQ.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BMQ's
// API operation EnablePublicAccess for usage and error information.
func (c *BMQ) EnablePublicAccess(input *EnablePublicAccessInput) (*EnablePublicAccessOutput, error) {
	req, out := c.EnablePublicAccessRequest(input)
	return out, req.Send()
}

// EnablePublicAccessWithContext is the same as EnablePublicAccess with the addition of
// the ability to pass a context and additional request options.
//
// See EnablePublicAccess for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BMQ) EnablePublicAccessWithContext(ctx volcengine.Context, input *EnablePublicAccessInput, opts ...request.Option) (*EnablePublicAccessOutput, error) {
	req, out := c.EnablePublicAccessRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type EnablePublicAccessInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// EipId is a required field
	EipId *string `type:"string" json:",omitempty" required:"true"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s EnablePublicAccessInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s EnablePublicAccessInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *EnablePublicAccessInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "EnablePublicAccessInput"}
	if s.EipId == nil {
		invalidParams.Add(request.NewErrParamRequired("EipId"))
	}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetEipId sets the EipId field's value.
func (s *EnablePublicAccessInput) SetEipId(v string) *EnablePublicAccessInput {
	s.EipId = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *EnablePublicAccessInput) SetInstanceId(v string) *EnablePublicAccessInput {
	s.InstanceId = &v
	return s
}

type EnablePublicAccessOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Message *string `type:"string" json:",omitempty"`

	Status *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s EnablePublicAccessOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s EnablePublicAccessOutput) GoString() string {
	return s.String()
}

// SetMessage sets the Message field's value.
func (s *EnablePublicAccessOutput) SetMessage(v string) *EnablePublicAccessOutput {
	s.Message = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *EnablePublicAccessOutput) SetStatus(v string) *EnablePublicAccessOutput {
	s.Status = &v
	return s
}
