// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package bmq20240901

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDeleteDashboardEndpointCommon = "DeleteDashboardEndpoint"

// DeleteDashboardEndpointCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteDashboardEndpointCommon operation. The "output" return
// value will be populated with the DeleteDashboardEndpointCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteDashboardEndpointCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteDashboardEndpointCommon Send returns without error.
//
// See DeleteDashboardEndpointCommon for more information on using the DeleteDashboardEndpointCommon
// API call, and error handling.
//
//    // Example sending a request using the DeleteDashboardEndpointCommonRequest method.
//    req, resp := client.DeleteDashboardEndpointCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BMQ20240901) DeleteDashboardEndpointCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteDashboardEndpointCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DeleteDashboardEndpointCommon API operation for BMQ20240901.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BMQ20240901's
// API operation DeleteDashboardEndpointCommon for usage and error information.
func (c *BMQ20240901) DeleteDashboardEndpointCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteDashboardEndpointCommonRequest(input)
	return out, req.Send()
}

// DeleteDashboardEndpointCommonWithContext is the same as DeleteDashboardEndpointCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteDashboardEndpointCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BMQ20240901) DeleteDashboardEndpointCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteDashboardEndpointCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteDashboardEndpoint = "DeleteDashboardEndpoint"

// DeleteDashboardEndpointRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteDashboardEndpoint operation. The "output" return
// value will be populated with the DeleteDashboardEndpointCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteDashboardEndpointCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteDashboardEndpointCommon Send returns without error.
//
// See DeleteDashboardEndpoint for more information on using the DeleteDashboardEndpoint
// API call, and error handling.
//
//    // Example sending a request using the DeleteDashboardEndpointRequest method.
//    req, resp := client.DeleteDashboardEndpointRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BMQ20240901) DeleteDashboardEndpointRequest(input *DeleteDashboardEndpointInput) (req *request.Request, output *DeleteDashboardEndpointOutput) {
	op := &request.Operation{
		Name:       opDeleteDashboardEndpoint,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteDashboardEndpointInput{}
	}

	output = &DeleteDashboardEndpointOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DeleteDashboardEndpoint API operation for BMQ20240901.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BMQ20240901's
// API operation DeleteDashboardEndpoint for usage and error information.
func (c *BMQ20240901) DeleteDashboardEndpoint(input *DeleteDashboardEndpointInput) (*DeleteDashboardEndpointOutput, error) {
	req, out := c.DeleteDashboardEndpointRequest(input)
	return out, req.Send()
}

// DeleteDashboardEndpointWithContext is the same as DeleteDashboardEndpoint with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteDashboardEndpoint for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BMQ20240901) DeleteDashboardEndpointWithContext(ctx volcengine.Context, input *DeleteDashboardEndpointInput, opts ...request.Option) (*DeleteDashboardEndpointOutput, error) {
	req, out := c.DeleteDashboardEndpointRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DeleteDashboardEndpointInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s DeleteDashboardEndpointInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteDashboardEndpointInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeleteDashboardEndpointInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DeleteDashboardEndpointInput"}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetInstanceId sets the InstanceId field's value.
func (s *DeleteDashboardEndpointInput) SetInstanceId(v string) *DeleteDashboardEndpointInput {
	s.InstanceId = &v
	return s
}

type DeleteDashboardEndpointOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Message *string `type:"string" json:",omitempty"`

	Status *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s DeleteDashboardEndpointOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteDashboardEndpointOutput) GoString() string {
	return s.String()
}

// SetMessage sets the Message field's value.
func (s *DeleteDashboardEndpointOutput) SetMessage(v string) *DeleteDashboardEndpointOutput {
	s.Message = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *DeleteDashboardEndpointOutput) SetStatus(v string) *DeleteDashboardEndpointOutput {
	s.Status = &v
	return s
}
