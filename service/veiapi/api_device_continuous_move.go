// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package veiapi

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDeviceContinuousMoveCommon = "DeviceContinuousMove"

// DeviceContinuousMoveCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DeviceContinuousMoveCommon operation. The "output" return
// value will be populated with the DeviceContinuousMoveCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeviceContinuousMoveCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeviceContinuousMoveCommon Send returns without error.
//
// See DeviceContinuousMoveCommon for more information on using the DeviceContinuousMoveCommon
// API call, and error handling.
//
//    // Example sending a request using the DeviceContinuousMoveCommonRequest method.
//    req, resp := client.DeviceContinuousMoveCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VEIAPI) DeviceContinuousMoveCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeviceContinuousMoveCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DeviceContinuousMoveCommon API operation for VEI_API.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VEI_API's
// API operation DeviceContinuousMoveCommon for usage and error information.
func (c *VEIAPI) DeviceContinuousMoveCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeviceContinuousMoveCommonRequest(input)
	return out, req.Send()
}

// DeviceContinuousMoveCommonWithContext is the same as DeviceContinuousMoveCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeviceContinuousMoveCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VEIAPI) DeviceContinuousMoveCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeviceContinuousMoveCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeviceContinuousMove = "DeviceContinuousMove"

// DeviceContinuousMoveRequest generates a "volcengine/request.Request" representing the
// client's request for the DeviceContinuousMove operation. The "output" return
// value will be populated with the DeviceContinuousMoveCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeviceContinuousMoveCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeviceContinuousMoveCommon Send returns without error.
//
// See DeviceContinuousMove for more information on using the DeviceContinuousMove
// API call, and error handling.
//
//    // Example sending a request using the DeviceContinuousMoveRequest method.
//    req, resp := client.DeviceContinuousMoveRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VEIAPI) DeviceContinuousMoveRequest(input *DeviceContinuousMoveInput) (req *request.Request, output *DeviceContinuousMoveOutput) {
	op := &request.Operation{
		Name:       opDeviceContinuousMove,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeviceContinuousMoveInput{}
	}

	output = &DeviceContinuousMoveOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DeviceContinuousMove API operation for VEI_API.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VEI_API's
// API operation DeviceContinuousMove for usage and error information.
func (c *VEIAPI) DeviceContinuousMove(input *DeviceContinuousMoveInput) (*DeviceContinuousMoveOutput, error) {
	req, out := c.DeviceContinuousMoveRequest(input)
	return out, req.Send()
}

// DeviceContinuousMoveWithContext is the same as DeviceContinuousMove with the addition of
// the ability to pass a context and additional request options.
//
// See DeviceContinuousMove for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VEIAPI) DeviceContinuousMoveWithContext(ctx volcengine.Context, input *DeviceContinuousMoveInput, opts ...request.Option) (*DeviceContinuousMoveOutput, error) {
	req, out := c.DeviceContinuousMoveRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DeviceContinuousMoveInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// Device_id is a required field
	Device_id *string `type:"string" json:"device_id,omitempty" required:"true"`

	Pan_tilt_x *float64 `type:"double" json:"pan_tilt_x,omitempty"`

	Pan_tilt_y *float64 `type:"double" json:"pan_tilt_y,omitempty"`

	Time_out *int32 `type:"int32" json:"time_out,omitempty"`

	Zoom_x *float64 `type:"double" json:"zoom_x,omitempty"`
}

// String returns the string representation
func (s DeviceContinuousMoveInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeviceContinuousMoveInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeviceContinuousMoveInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DeviceContinuousMoveInput"}
	if s.Device_id == nil {
		invalidParams.Add(request.NewErrParamRequired("Device_id"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDevice_id sets the Device_id field's value.
func (s *DeviceContinuousMoveInput) SetDevice_id(v string) *DeviceContinuousMoveInput {
	s.Device_id = &v
	return s
}

// SetPan_tilt_x sets the Pan_tilt_x field's value.
func (s *DeviceContinuousMoveInput) SetPan_tilt_x(v float64) *DeviceContinuousMoveInput {
	s.Pan_tilt_x = &v
	return s
}

// SetPan_tilt_y sets the Pan_tilt_y field's value.
func (s *DeviceContinuousMoveInput) SetPan_tilt_y(v float64) *DeviceContinuousMoveInput {
	s.Pan_tilt_y = &v
	return s
}

// SetTime_out sets the Time_out field's value.
func (s *DeviceContinuousMoveInput) SetTime_out(v int32) *DeviceContinuousMoveInput {
	s.Time_out = &v
	return s
}

// SetZoom_x sets the Zoom_x field's value.
func (s *DeviceContinuousMoveInput) SetZoom_x(v float64) *DeviceContinuousMoveInput {
	s.Zoom_x = &v
	return s
}

type DeviceContinuousMoveOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Id *string `type:"string" json:"id,omitempty"`
}

// String returns the string representation
func (s DeviceContinuousMoveOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeviceContinuousMoveOutput) GoString() string {
	return s.String()
}

// SetId sets the Id field's value.
func (s *DeviceContinuousMoveOutput) SetId(v string) *DeviceContinuousMoveOutput {
	s.Id = &v
	return s
}
