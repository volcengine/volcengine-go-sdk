// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package veiapi

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opListMediapipeEventCommon = "ListMediapipeEvent"

// ListMediapipeEventCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ListMediapipeEventCommon operation. The "output" return
// value will be populated with the ListMediapipeEventCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListMediapipeEventCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListMediapipeEventCommon Send returns without error.
//
// See ListMediapipeEventCommon for more information on using the ListMediapipeEventCommon
// API call, and error handling.
//
//    // Example sending a request using the ListMediapipeEventCommonRequest method.
//    req, resp := client.ListMediapipeEventCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VEIAPI) ListMediapipeEventCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opListMediapipeEventCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListMediapipeEventCommon API operation for VEI_API.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VEI_API's
// API operation ListMediapipeEventCommon for usage and error information.
func (c *VEIAPI) ListMediapipeEventCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ListMediapipeEventCommonRequest(input)
	return out, req.Send()
}

// ListMediapipeEventCommonWithContext is the same as ListMediapipeEventCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ListMediapipeEventCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VEIAPI) ListMediapipeEventCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ListMediapipeEventCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListMediapipeEvent = "ListMediapipeEvent"

// ListMediapipeEventRequest generates a "volcengine/request.Request" representing the
// client's request for the ListMediapipeEvent operation. The "output" return
// value will be populated with the ListMediapipeEventCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListMediapipeEventCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListMediapipeEventCommon Send returns without error.
//
// See ListMediapipeEvent for more information on using the ListMediapipeEvent
// API call, and error handling.
//
//    // Example sending a request using the ListMediapipeEventRequest method.
//    req, resp := client.ListMediapipeEventRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VEIAPI) ListMediapipeEventRequest(input *ListMediapipeEventInput) (req *request.Request, output *ListMediapipeEventOutput) {
	op := &request.Operation{
		Name:       opListMediapipeEvent,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListMediapipeEventInput{}
	}

	output = &ListMediapipeEventOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListMediapipeEvent API operation for VEI_API.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VEI_API's
// API operation ListMediapipeEvent for usage and error information.
func (c *VEIAPI) ListMediapipeEvent(input *ListMediapipeEventInput) (*ListMediapipeEventOutput, error) {
	req, out := c.ListMediapipeEventRequest(input)
	return out, req.Send()
}

// ListMediapipeEventWithContext is the same as ListMediapipeEvent with the addition of
// the ability to pass a context and additional request options.
//
// See ListMediapipeEvent for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VEIAPI) ListMediapipeEventWithContext(ctx volcengine.Context, input *ListMediapipeEventInput, opts ...request.Option) (*ListMediapipeEventOutput, error) {
	req, out := c.ListMediapipeEventRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ClassifierForListMediapipeEventOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Label *string `type:"string" json:"label,omitempty"`

	Prob *float64 `type:"double" json:"prob,omitempty"`
}

// String returns the string representation
func (s ClassifierForListMediapipeEventOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ClassifierForListMediapipeEventOutput) GoString() string {
	return s.String()
}

// SetLabel sets the Label field's value.
func (s *ClassifierForListMediapipeEventOutput) SetLabel(v string) *ClassifierForListMediapipeEventOutput {
	s.Label = &v
	return s
}

// SetProb sets the Prob field's value.
func (s *ClassifierForListMediapipeEventOutput) SetProb(v float64) *ClassifierForListMediapipeEventOutput {
	s.Prob = &v
	return s
}

type ItemForListMediapipeEventOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Classifier []*ClassifierForListMediapipeEventOutput `type:"list" json:"classifier,omitempty"`

	Height *string `type:"string" json:"height,omitempty"`

	Id *int32 `type:"int32" json:"id,omitempty"`

	Label *string `type:"string" json:"label,omitempty"`

	Left *float64 `type:"double" json:"left,omitempty"`

	Prob *float64 `type:"double" json:"prob,omitempty"`

	Top *string `type:"string" json:"top,omitempty"`

	Width *float64 `type:"double" json:"width,omitempty"`
}

// String returns the string representation
func (s ItemForListMediapipeEventOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ItemForListMediapipeEventOutput) GoString() string {
	return s.String()
}

// SetClassifier sets the Classifier field's value.
func (s *ItemForListMediapipeEventOutput) SetClassifier(v []*ClassifierForListMediapipeEventOutput) *ItemForListMediapipeEventOutput {
	s.Classifier = v
	return s
}

// SetHeight sets the Height field's value.
func (s *ItemForListMediapipeEventOutput) SetHeight(v string) *ItemForListMediapipeEventOutput {
	s.Height = &v
	return s
}

// SetId sets the Id field's value.
func (s *ItemForListMediapipeEventOutput) SetId(v int32) *ItemForListMediapipeEventOutput {
	s.Id = &v
	return s
}

// SetLabel sets the Label field's value.
func (s *ItemForListMediapipeEventOutput) SetLabel(v string) *ItemForListMediapipeEventOutput {
	s.Label = &v
	return s
}

// SetLeft sets the Left field's value.
func (s *ItemForListMediapipeEventOutput) SetLeft(v float64) *ItemForListMediapipeEventOutput {
	s.Left = &v
	return s
}

// SetProb sets the Prob field's value.
func (s *ItemForListMediapipeEventOutput) SetProb(v float64) *ItemForListMediapipeEventOutput {
	s.Prob = &v
	return s
}

// SetTop sets the Top field's value.
func (s *ItemForListMediapipeEventOutput) SetTop(v string) *ItemForListMediapipeEventOutput {
	s.Top = &v
	return s
}

// SetWidth sets the Width field's value.
func (s *ItemForListMediapipeEventOutput) SetWidth(v float64) *ItemForListMediapipeEventOutput {
	s.Width = &v
	return s
}

type ListMediapipeEventInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Created_orderby *int32 `type:"int32" json:"created_orderby,omitempty"`

	End_time *int32 `type:"int32" json:"end_time,omitempty"`

	Event_type *string `type:"string" json:"event_type,omitempty"`

	Instance_id *string `type:"string" json:"instance_id,omitempty"`

	Instance_name *string `type:"string" json:"instance_name,omitempty"`

	Node_id *string `type:"string" json:"node_id,omitempty"`

	// Page_index is a required field
	Page_index *int32 `min:"1" type:"int32" json:"page_index,omitempty" required:"true"`

	// Page_size is a required field
	Page_size *int32 `type:"int32" json:"page_size,omitempty" required:"true"`

	Project_id *string `type:"string" json:"project_id,omitempty"`

	Source_id *string `type:"string" json:"source_id,omitempty"`

	Source_type *int32 `type:"int32" json:"source_type,omitempty"`

	Start_time *int32 `type:"int32" json:"start_time,omitempty"`
}

// String returns the string representation
func (s ListMediapipeEventInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListMediapipeEventInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ListMediapipeEventInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ListMediapipeEventInput"}
	if s.Page_index == nil {
		invalidParams.Add(request.NewErrParamRequired("Page_index"))
	}
	if s.Page_index != nil && *s.Page_index < 1 {
		invalidParams.Add(request.NewErrParamMinValue("Page_index", 1))
	}
	if s.Page_size == nil {
		invalidParams.Add(request.NewErrParamRequired("Page_size"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetCreated_orderby sets the Created_orderby field's value.
func (s *ListMediapipeEventInput) SetCreated_orderby(v int32) *ListMediapipeEventInput {
	s.Created_orderby = &v
	return s
}

// SetEnd_time sets the End_time field's value.
func (s *ListMediapipeEventInput) SetEnd_time(v int32) *ListMediapipeEventInput {
	s.End_time = &v
	return s
}

// SetEvent_type sets the Event_type field's value.
func (s *ListMediapipeEventInput) SetEvent_type(v string) *ListMediapipeEventInput {
	s.Event_type = &v
	return s
}

// SetInstance_id sets the Instance_id field's value.
func (s *ListMediapipeEventInput) SetInstance_id(v string) *ListMediapipeEventInput {
	s.Instance_id = &v
	return s
}

// SetInstance_name sets the Instance_name field's value.
func (s *ListMediapipeEventInput) SetInstance_name(v string) *ListMediapipeEventInput {
	s.Instance_name = &v
	return s
}

// SetNode_id sets the Node_id field's value.
func (s *ListMediapipeEventInput) SetNode_id(v string) *ListMediapipeEventInput {
	s.Node_id = &v
	return s
}

// SetPage_index sets the Page_index field's value.
func (s *ListMediapipeEventInput) SetPage_index(v int32) *ListMediapipeEventInput {
	s.Page_index = &v
	return s
}

// SetPage_size sets the Page_size field's value.
func (s *ListMediapipeEventInput) SetPage_size(v int32) *ListMediapipeEventInput {
	s.Page_size = &v
	return s
}

// SetProject_id sets the Project_id field's value.
func (s *ListMediapipeEventInput) SetProject_id(v string) *ListMediapipeEventInput {
	s.Project_id = &v
	return s
}

// SetSource_id sets the Source_id field's value.
func (s *ListMediapipeEventInput) SetSource_id(v string) *ListMediapipeEventInput {
	s.Source_id = &v
	return s
}

// SetSource_type sets the Source_type field's value.
func (s *ListMediapipeEventInput) SetSource_type(v int32) *ListMediapipeEventInput {
	s.Source_type = &v
	return s
}

// SetStart_time sets the Start_time field's value.
func (s *ListMediapipeEventInput) SetStart_time(v int32) *ListMediapipeEventInput {
	s.Start_time = &v
	return s
}

type ListMediapipeEventOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Items []*ItemForListMediapipeEventOutput `type:"list" json:"items,omitempty"`

	Pageinator *PageinatorForListMediapipeEventOutput `type:"structure" json:"pageinator,omitempty"`
}

// String returns the string representation
func (s ListMediapipeEventOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListMediapipeEventOutput) GoString() string {
	return s.String()
}

// SetItems sets the Items field's value.
func (s *ListMediapipeEventOutput) SetItems(v []*ItemForListMediapipeEventOutput) *ListMediapipeEventOutput {
	s.Items = v
	return s
}

// SetPageinator sets the Pageinator field's value.
func (s *ListMediapipeEventOutput) SetPageinator(v *PageinatorForListMediapipeEventOutput) *ListMediapipeEventOutput {
	s.Pageinator = v
	return s
}

type PageinatorForListMediapipeEventOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Index *int32 `type:"int32" json:"index,omitempty"`

	Size *int32 `type:"int32" json:"size,omitempty"`

	Total_items *int32 `type:"int32" json:"total_items,omitempty"`

	Total_pages *int32 `type:"int32" json:"total_pages,omitempty"`
}

// String returns the string representation
func (s PageinatorForListMediapipeEventOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s PageinatorForListMediapipeEventOutput) GoString() string {
	return s.String()
}

// SetIndex sets the Index field's value.
func (s *PageinatorForListMediapipeEventOutput) SetIndex(v int32) *PageinatorForListMediapipeEventOutput {
	s.Index = &v
	return s
}

// SetSize sets the Size field's value.
func (s *PageinatorForListMediapipeEventOutput) SetSize(v int32) *PageinatorForListMediapipeEventOutput {
	s.Size = &v
	return s
}

// SetTotal_items sets the Total_items field's value.
func (s *PageinatorForListMediapipeEventOutput) SetTotal_items(v int32) *PageinatorForListMediapipeEventOutput {
	s.Total_items = &v
	return s
}

// SetTotal_pages sets the Total_pages field's value.
func (s *PageinatorForListMediapipeEventOutput) SetTotal_pages(v int32) *PageinatorForListMediapipeEventOutput {
	s.Total_pages = &v
	return s
}
