// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package veiapi

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opUpdateNodeGroupCommon = "UpdateNodeGroup"

// UpdateNodeGroupCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateNodeGroupCommon operation. The "output" return
// value will be populated with the UpdateNodeGroupCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateNodeGroupCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateNodeGroupCommon Send returns without error.
//
// See UpdateNodeGroupCommon for more information on using the UpdateNodeGroupCommon
// API call, and error handling.
//
//    // Example sending a request using the UpdateNodeGroupCommonRequest method.
//    req, resp := client.UpdateNodeGroupCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VEIAPI) UpdateNodeGroupCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opUpdateNodeGroupCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateNodeGroupCommon API operation for VEI_API.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VEI_API's
// API operation UpdateNodeGroupCommon for usage and error information.
func (c *VEIAPI) UpdateNodeGroupCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.UpdateNodeGroupCommonRequest(input)
	return out, req.Send()
}

// UpdateNodeGroupCommonWithContext is the same as UpdateNodeGroupCommon with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateNodeGroupCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VEIAPI) UpdateNodeGroupCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.UpdateNodeGroupCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opUpdateNodeGroup = "UpdateNodeGroup"

// UpdateNodeGroupRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateNodeGroup operation. The "output" return
// value will be populated with the UpdateNodeGroupCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateNodeGroupCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateNodeGroupCommon Send returns without error.
//
// See UpdateNodeGroup for more information on using the UpdateNodeGroup
// API call, and error handling.
//
//    // Example sending a request using the UpdateNodeGroupRequest method.
//    req, resp := client.UpdateNodeGroupRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VEIAPI) UpdateNodeGroupRequest(input *UpdateNodeGroupInput) (req *request.Request, output *UpdateNodeGroupOutput) {
	op := &request.Operation{
		Name:       opUpdateNodeGroup,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UpdateNodeGroupInput{}
	}

	output = &UpdateNodeGroupOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateNodeGroup API operation for VEI_API.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VEI_API's
// API operation UpdateNodeGroup for usage and error information.
func (c *VEIAPI) UpdateNodeGroup(input *UpdateNodeGroupInput) (*UpdateNodeGroupOutput, error) {
	req, out := c.UpdateNodeGroupRequest(input)
	return out, req.Send()
}

// UpdateNodeGroupWithContext is the same as UpdateNodeGroup with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateNodeGroup for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VEIAPI) UpdateNodeGroupWithContext(ctx volcengine.Context, input *UpdateNodeGroupInput, opts ...request.Option) (*UpdateNodeGroupOutput, error) {
	req, out := c.UpdateNodeGroupRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type TagForUpdateNodeGroupInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Key *string `type:"string" json:"key,omitempty"`

	Value *string `type:"string" json:"value,omitempty"`
}

// String returns the string representation
func (s TagForUpdateNodeGroupInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s TagForUpdateNodeGroupInput) GoString() string {
	return s.String()
}

// SetKey sets the Key field's value.
func (s *TagForUpdateNodeGroupInput) SetKey(v string) *TagForUpdateNodeGroupInput {
	s.Key = &v
	return s
}

// SetValue sets the Value field's value.
func (s *TagForUpdateNodeGroupInput) SetValue(v string) *TagForUpdateNodeGroupInput {
	s.Value = &v
	return s
}

type UpdateNodeGroupInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Description *string `type:"string" json:"description,omitempty"`

	NodeGroupID *string `type:"string" json:"nodeGroupID,omitempty"`

	NodeGroupName *string `type:"string" json:"nodeGroupName,omitempty"`

	NodeNames []*string `type:"list" json:"nodeNames,omitempty"`

	PatchNode *bool `type:"boolean" json:"patchNode,omitempty"`

	ProjectID *string `type:"string" json:"projectID,omitempty"`

	Tags []*TagForUpdateNodeGroupInput `type:"list" json:"tags,omitempty"`
}

// String returns the string representation
func (s UpdateNodeGroupInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateNodeGroupInput) GoString() string {
	return s.String()
}

// SetDescription sets the Description field's value.
func (s *UpdateNodeGroupInput) SetDescription(v string) *UpdateNodeGroupInput {
	s.Description = &v
	return s
}

// SetNodeGroupID sets the NodeGroupID field's value.
func (s *UpdateNodeGroupInput) SetNodeGroupID(v string) *UpdateNodeGroupInput {
	s.NodeGroupID = &v
	return s
}

// SetNodeGroupName sets the NodeGroupName field's value.
func (s *UpdateNodeGroupInput) SetNodeGroupName(v string) *UpdateNodeGroupInput {
	s.NodeGroupName = &v
	return s
}

// SetNodeNames sets the NodeNames field's value.
func (s *UpdateNodeGroupInput) SetNodeNames(v []*string) *UpdateNodeGroupInput {
	s.NodeNames = v
	return s
}

// SetPatchNode sets the PatchNode field's value.
func (s *UpdateNodeGroupInput) SetPatchNode(v bool) *UpdateNodeGroupInput {
	s.PatchNode = &v
	return s
}

// SetProjectID sets the ProjectID field's value.
func (s *UpdateNodeGroupInput) SetProjectID(v string) *UpdateNodeGroupInput {
	s.ProjectID = &v
	return s
}

// SetTags sets the Tags field's value.
func (s *UpdateNodeGroupInput) SetTags(v []*TagForUpdateNodeGroupInput) *UpdateNodeGroupInput {
	s.Tags = v
	return s
}

type UpdateNodeGroupOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s UpdateNodeGroupOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateNodeGroupOutput) GoString() string {
	return s.String()
}
