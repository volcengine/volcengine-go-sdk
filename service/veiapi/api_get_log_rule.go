// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package veiapi

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opGetLogRuleCommon = "GetLogRule"

// GetLogRuleCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the GetLogRuleCommon operation. The "output" return
// value will be populated with the GetLogRuleCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetLogRuleCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetLogRuleCommon Send returns without error.
//
// See GetLogRuleCommon for more information on using the GetLogRuleCommon
// API call, and error handling.
//
//    // Example sending a request using the GetLogRuleCommonRequest method.
//    req, resp := client.GetLogRuleCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VEIAPI) GetLogRuleCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opGetLogRuleCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetLogRuleCommon API operation for VEI_API.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VEI_API's
// API operation GetLogRuleCommon for usage and error information.
func (c *VEIAPI) GetLogRuleCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.GetLogRuleCommonRequest(input)
	return out, req.Send()
}

// GetLogRuleCommonWithContext is the same as GetLogRuleCommon with the addition of
// the ability to pass a context and additional request options.
//
// See GetLogRuleCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VEIAPI) GetLogRuleCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.GetLogRuleCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opGetLogRule = "GetLogRule"

// GetLogRuleRequest generates a "volcengine/request.Request" representing the
// client's request for the GetLogRule operation. The "output" return
// value will be populated with the GetLogRuleCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetLogRuleCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetLogRuleCommon Send returns without error.
//
// See GetLogRule for more information on using the GetLogRule
// API call, and error handling.
//
//    // Example sending a request using the GetLogRuleRequest method.
//    req, resp := client.GetLogRuleRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VEIAPI) GetLogRuleRequest(input *GetLogRuleInput) (req *request.Request, output *GetLogRuleOutput) {
	op := &request.Operation{
		Name:       opGetLogRule,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &GetLogRuleInput{}
	}

	output = &GetLogRuleOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetLogRule API operation for VEI_API.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VEI_API's
// API operation GetLogRule for usage and error information.
func (c *VEIAPI) GetLogRule(input *GetLogRuleInput) (*GetLogRuleOutput, error) {
	req, out := c.GetLogRuleRequest(input)
	return out, req.Send()
}

// GetLogRuleWithContext is the same as GetLogRule with the addition of
// the ability to pass a context and additional request options.
//
// See GetLogRule for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VEIAPI) GetLogRuleWithContext(ctx volcengine.Context, input *GetLogRuleInput, opts ...request.Option) (*GetLogRuleOutput, error) {
	req, out := c.GetLogRuleRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type GetLogRuleInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Node_name *string `type:"string" json:"node_name,omitempty"`

	Project_id *string `type:"string" json:"project_id,omitempty"`
}

// String returns the string representation
func (s GetLogRuleInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetLogRuleInput) GoString() string {
	return s.String()
}

// SetNode_name sets the Node_name field's value.
func (s *GetLogRuleInput) SetNode_name(v string) *GetLogRuleInput {
	s.Node_name = &v
	return s
}

// SetProject_id sets the Project_id field's value.
func (s *GetLogRuleInput) SetProject_id(v string) *GetLogRuleInput {
	s.Project_id = &v
	return s
}

type GetLogRuleOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	File_path []*string `type:"list" json:"file_path,omitempty"`

	Is_running *bool `type:"boolean" json:"is_running,omitempty"`

	Pod_name []*string `type:"list" json:"pod_name,omitempty"`

	Pod_range *int32 `type:"int32" json:"pod_range,omitempty"`

	Rule_id *string `type:"string" json:"rule_id,omitempty"`

	Rule_name *string `type:"string" json:"rule_name,omitempty"`

	Rule_type *string `type:"string" json:"rule_type,omitempty"`

	Tls_project *string `type:"string" json:"tls_project,omitempty"`

	Tls_tag *string `type:"string" json:"tls_tag,omitempty"`

	Tls_topic *string `type:"string" json:"tls_topic,omitempty"`
}

// String returns the string representation
func (s GetLogRuleOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetLogRuleOutput) GoString() string {
	return s.String()
}

// SetFile_path sets the File_path field's value.
func (s *GetLogRuleOutput) SetFile_path(v []*string) *GetLogRuleOutput {
	s.File_path = v
	return s
}

// SetIs_running sets the Is_running field's value.
func (s *GetLogRuleOutput) SetIs_running(v bool) *GetLogRuleOutput {
	s.Is_running = &v
	return s
}

// SetPod_name sets the Pod_name field's value.
func (s *GetLogRuleOutput) SetPod_name(v []*string) *GetLogRuleOutput {
	s.Pod_name = v
	return s
}

// SetPod_range sets the Pod_range field's value.
func (s *GetLogRuleOutput) SetPod_range(v int32) *GetLogRuleOutput {
	s.Pod_range = &v
	return s
}

// SetRule_id sets the Rule_id field's value.
func (s *GetLogRuleOutput) SetRule_id(v string) *GetLogRuleOutput {
	s.Rule_id = &v
	return s
}

// SetRule_name sets the Rule_name field's value.
func (s *GetLogRuleOutput) SetRule_name(v string) *GetLogRuleOutput {
	s.Rule_name = &v
	return s
}

// SetRule_type sets the Rule_type field's value.
func (s *GetLogRuleOutput) SetRule_type(v string) *GetLogRuleOutput {
	s.Rule_type = &v
	return s
}

// SetTls_project sets the Tls_project field's value.
func (s *GetLogRuleOutput) SetTls_project(v string) *GetLogRuleOutput {
	s.Tls_project = &v
	return s
}

// SetTls_tag sets the Tls_tag field's value.
func (s *GetLogRuleOutput) SetTls_tag(v string) *GetLogRuleOutput {
	s.Tls_tag = &v
	return s
}

// SetTls_topic sets the Tls_topic field's value.
func (s *GetLogRuleOutput) SetTls_topic(v string) *GetLogRuleOutput {
	s.Tls_topic = &v
	return s
}
