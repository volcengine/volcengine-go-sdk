// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package veiapi

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opListHCINewCommon = "ListHCINew"

// ListHCINewCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ListHCINewCommon operation. The "output" return
// value will be populated with the ListHCINewCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListHCINewCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListHCINewCommon Send returns without error.
//
// See ListHCINewCommon for more information on using the ListHCINewCommon
// API call, and error handling.
//
//    // Example sending a request using the ListHCINewCommonRequest method.
//    req, resp := client.ListHCINewCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VEIAPI) ListHCINewCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opListHCINewCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListHCINewCommon API operation for VEI_API.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VEI_API's
// API operation ListHCINewCommon for usage and error information.
func (c *VEIAPI) ListHCINewCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ListHCINewCommonRequest(input)
	return out, req.Send()
}

// ListHCINewCommonWithContext is the same as ListHCINewCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ListHCINewCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VEIAPI) ListHCINewCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ListHCINewCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListHCINew = "ListHCINew"

// ListHCINewRequest generates a "volcengine/request.Request" representing the
// client's request for the ListHCINew operation. The "output" return
// value will be populated with the ListHCINewCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListHCINewCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListHCINewCommon Send returns without error.
//
// See ListHCINew for more information on using the ListHCINew
// API call, and error handling.
//
//    // Example sending a request using the ListHCINewRequest method.
//    req, resp := client.ListHCINewRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VEIAPI) ListHCINewRequest(input *ListHCINewInput) (req *request.Request, output *ListHCINewOutput) {
	op := &request.Operation{
		Name:       opListHCINew,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListHCINewInput{}
	}

	output = &ListHCINewOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListHCINew API operation for VEI_API.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VEI_API's
// API operation ListHCINew for usage and error information.
func (c *VEIAPI) ListHCINew(input *ListHCINewInput) (*ListHCINewOutput, error) {
	req, out := c.ListHCINewRequest(input)
	return out, req.Send()
}

// ListHCINewWithContext is the same as ListHCINew with the addition of
// the ability to pass a context and additional request options.
//
// See ListHCINew for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VEIAPI) ListHCINewWithContext(ctx volcengine.Context, input *ListHCINewInput, opts ...request.Option) (*ListHCINewOutput, error) {
	req, out := c.ListHCINewRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ItemForListHCINewOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Activated_at *string `type:"string" json:"activated_at,omitempty"`

	Alias *string `type:"string" json:"alias,omitempty"`

	Cpu_usage *float64 `type:"double" json:"cpu_usage,omitempty"`

	Hci_model_ref *string `type:"string" json:"hci_model_ref,omitempty"`

	Last_active_at *string `type:"string" json:"last_active_at,omitempty"`

	Memory_usage *float64 `type:"double" json:"memory_usage,omitempty"`

	Monitor_status *int32 `type:"int32" json:"monitor_status,omitempty"`

	Name *string `type:"string" json:"name,omitempty"`

	Node_available_cpu *float64 `type:"double" json:"node_available_cpu,omitempty"`

	Node_available_mem *int32 `type:"int32" json:"node_available_mem,omitempty"`

	Node_workload_count *int32 `type:"int32" json:"node_workload_count,omitempty"`

	Ota_status *Ota_statusForListHCINewOutput `type:"structure" json:"ota_status,omitempty"`

	Project_workload_count *int32 `type:"int32" json:"project_workload_count,omitempty"`

	Status *int32 `type:"int32" json:"status,omitempty"`
}

// String returns the string representation
func (s ItemForListHCINewOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ItemForListHCINewOutput) GoString() string {
	return s.String()
}

// SetActivated_at sets the Activated_at field's value.
func (s *ItemForListHCINewOutput) SetActivated_at(v string) *ItemForListHCINewOutput {
	s.Activated_at = &v
	return s
}

// SetAlias sets the Alias field's value.
func (s *ItemForListHCINewOutput) SetAlias(v string) *ItemForListHCINewOutput {
	s.Alias = &v
	return s
}

// SetCpu_usage sets the Cpu_usage field's value.
func (s *ItemForListHCINewOutput) SetCpu_usage(v float64) *ItemForListHCINewOutput {
	s.Cpu_usage = &v
	return s
}

// SetHci_model_ref sets the Hci_model_ref field's value.
func (s *ItemForListHCINewOutput) SetHci_model_ref(v string) *ItemForListHCINewOutput {
	s.Hci_model_ref = &v
	return s
}

// SetLast_active_at sets the Last_active_at field's value.
func (s *ItemForListHCINewOutput) SetLast_active_at(v string) *ItemForListHCINewOutput {
	s.Last_active_at = &v
	return s
}

// SetMemory_usage sets the Memory_usage field's value.
func (s *ItemForListHCINewOutput) SetMemory_usage(v float64) *ItemForListHCINewOutput {
	s.Memory_usage = &v
	return s
}

// SetMonitor_status sets the Monitor_status field's value.
func (s *ItemForListHCINewOutput) SetMonitor_status(v int32) *ItemForListHCINewOutput {
	s.Monitor_status = &v
	return s
}

// SetName sets the Name field's value.
func (s *ItemForListHCINewOutput) SetName(v string) *ItemForListHCINewOutput {
	s.Name = &v
	return s
}

// SetNode_available_cpu sets the Node_available_cpu field's value.
func (s *ItemForListHCINewOutput) SetNode_available_cpu(v float64) *ItemForListHCINewOutput {
	s.Node_available_cpu = &v
	return s
}

// SetNode_available_mem sets the Node_available_mem field's value.
func (s *ItemForListHCINewOutput) SetNode_available_mem(v int32) *ItemForListHCINewOutput {
	s.Node_available_mem = &v
	return s
}

// SetNode_workload_count sets the Node_workload_count field's value.
func (s *ItemForListHCINewOutput) SetNode_workload_count(v int32) *ItemForListHCINewOutput {
	s.Node_workload_count = &v
	return s
}

// SetOta_status sets the Ota_status field's value.
func (s *ItemForListHCINewOutput) SetOta_status(v *Ota_statusForListHCINewOutput) *ItemForListHCINewOutput {
	s.Ota_status = v
	return s
}

// SetProject_workload_count sets the Project_workload_count field's value.
func (s *ItemForListHCINewOutput) SetProject_workload_count(v int32) *ItemForListHCINewOutput {
	s.Project_workload_count = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *ItemForListHCINewOutput) SetStatus(v int32) *ItemForListHCINewOutput {
	s.Status = &v
	return s
}

type ListHCINewInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Account *string `type:"string" json:"account,omitempty"`

	Alias *string `type:"string" json:"alias,omitempty"`

	Arch *int32 `type:"int32" json:"arch,omitempty"`

	Bind_from *string `type:"string" json:"bind_from,omitempty"`

	// Bind_orderby is a required field
	Bind_orderby *int32 `type:"int32" json:"bind_orderby,omitempty" required:"true"`

	Bind_to *string `type:"string" json:"bind_to,omitempty"`

	Coprocessor *int32 `type:"int32" json:"coprocessor,omitempty"`

	Hci_model_ref *string `type:"string" json:"hci_model_ref,omitempty"`

	// Name is a required field
	Name *string `type:"string" json:"name,omitempty" required:"true"`

	// NodeGroupIDs is a required field
	NodeGroupIDs *string `type:"string" json:"nodeGroupIDs,omitempty" required:"true"`

	// Page_index is a required field
	Page_index *int32 `type:"int32" json:"page_index,omitempty" required:"true"`

	// Page_size is a required field
	Page_size *string `type:"string" json:"page_size,omitempty" required:"true"`

	// ProjectId is a required field
	ProjectId *string `type:"string" json:"projectId,omitempty" required:"true"`

	// Sn is a required field
	Sn *string `type:"string" json:"sn,omitempty" required:"true"`

	Status *string `type:"string" json:"status,omitempty"`

	Tags []*TagForListHCINewInput `type:"list" json:"tags,omitempty"`
}

// String returns the string representation
func (s ListHCINewInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListHCINewInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ListHCINewInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ListHCINewInput"}
	if s.Bind_orderby == nil {
		invalidParams.Add(request.NewErrParamRequired("Bind_orderby"))
	}
	if s.Name == nil {
		invalidParams.Add(request.NewErrParamRequired("Name"))
	}
	if s.NodeGroupIDs == nil {
		invalidParams.Add(request.NewErrParamRequired("NodeGroupIDs"))
	}
	if s.Page_index == nil {
		invalidParams.Add(request.NewErrParamRequired("Page_index"))
	}
	if s.Page_size == nil {
		invalidParams.Add(request.NewErrParamRequired("Page_size"))
	}
	if s.ProjectId == nil {
		invalidParams.Add(request.NewErrParamRequired("ProjectId"))
	}
	if s.Sn == nil {
		invalidParams.Add(request.NewErrParamRequired("Sn"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAccount sets the Account field's value.
func (s *ListHCINewInput) SetAccount(v string) *ListHCINewInput {
	s.Account = &v
	return s
}

// SetAlias sets the Alias field's value.
func (s *ListHCINewInput) SetAlias(v string) *ListHCINewInput {
	s.Alias = &v
	return s
}

// SetArch sets the Arch field's value.
func (s *ListHCINewInput) SetArch(v int32) *ListHCINewInput {
	s.Arch = &v
	return s
}

// SetBind_from sets the Bind_from field's value.
func (s *ListHCINewInput) SetBind_from(v string) *ListHCINewInput {
	s.Bind_from = &v
	return s
}

// SetBind_orderby sets the Bind_orderby field's value.
func (s *ListHCINewInput) SetBind_orderby(v int32) *ListHCINewInput {
	s.Bind_orderby = &v
	return s
}

// SetBind_to sets the Bind_to field's value.
func (s *ListHCINewInput) SetBind_to(v string) *ListHCINewInput {
	s.Bind_to = &v
	return s
}

// SetCoprocessor sets the Coprocessor field's value.
func (s *ListHCINewInput) SetCoprocessor(v int32) *ListHCINewInput {
	s.Coprocessor = &v
	return s
}

// SetHci_model_ref sets the Hci_model_ref field's value.
func (s *ListHCINewInput) SetHci_model_ref(v string) *ListHCINewInput {
	s.Hci_model_ref = &v
	return s
}

// SetName sets the Name field's value.
func (s *ListHCINewInput) SetName(v string) *ListHCINewInput {
	s.Name = &v
	return s
}

// SetNodeGroupIDs sets the NodeGroupIDs field's value.
func (s *ListHCINewInput) SetNodeGroupIDs(v string) *ListHCINewInput {
	s.NodeGroupIDs = &v
	return s
}

// SetPage_index sets the Page_index field's value.
func (s *ListHCINewInput) SetPage_index(v int32) *ListHCINewInput {
	s.Page_index = &v
	return s
}

// SetPage_size sets the Page_size field's value.
func (s *ListHCINewInput) SetPage_size(v string) *ListHCINewInput {
	s.Page_size = &v
	return s
}

// SetProjectId sets the ProjectId field's value.
func (s *ListHCINewInput) SetProjectId(v string) *ListHCINewInput {
	s.ProjectId = &v
	return s
}

// SetSn sets the Sn field's value.
func (s *ListHCINewInput) SetSn(v string) *ListHCINewInput {
	s.Sn = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *ListHCINewInput) SetStatus(v string) *ListHCINewInput {
	s.Status = &v
	return s
}

// SetTags sets the Tags field's value.
func (s *ListHCINewInput) SetTags(v []*TagForListHCINewInput) *ListHCINewInput {
	s.Tags = v
	return s
}

type ListHCINewOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Items []*ItemForListHCINewOutput `type:"list" json:"items,omitempty"`

	Pageinator *PageinatorForListHCINewOutput `type:"structure" json:"pageinator,omitempty"`
}

// String returns the string representation
func (s ListHCINewOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListHCINewOutput) GoString() string {
	return s.String()
}

// SetItems sets the Items field's value.
func (s *ListHCINewOutput) SetItems(v []*ItemForListHCINewOutput) *ListHCINewOutput {
	s.Items = v
	return s
}

// SetPageinator sets the Pageinator field's value.
func (s *ListHCINewOutput) SetPageinator(v *PageinatorForListHCINewOutput) *ListHCINewOutput {
	s.Pageinator = v
	return s
}

type Ota_statusForListHCINewOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Fail_message *string `type:"string" json:"fail_message,omitempty"`

	Need_manual_upgrade *bool `type:"boolean" json:"need_manual_upgrade,omitempty"`

	Need_upgrade *bool `type:"boolean" json:"need_upgrade,omitempty"`

	Ota_job_status *int32 `type:"int32" json:"ota_job_status,omitempty"`

	Ota_version *string `type:"string" json:"ota_version,omitempty"`
}

// String returns the string representation
func (s Ota_statusForListHCINewOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s Ota_statusForListHCINewOutput) GoString() string {
	return s.String()
}

// SetFail_message sets the Fail_message field's value.
func (s *Ota_statusForListHCINewOutput) SetFail_message(v string) *Ota_statusForListHCINewOutput {
	s.Fail_message = &v
	return s
}

// SetNeed_manual_upgrade sets the Need_manual_upgrade field's value.
func (s *Ota_statusForListHCINewOutput) SetNeed_manual_upgrade(v bool) *Ota_statusForListHCINewOutput {
	s.Need_manual_upgrade = &v
	return s
}

// SetNeed_upgrade sets the Need_upgrade field's value.
func (s *Ota_statusForListHCINewOutput) SetNeed_upgrade(v bool) *Ota_statusForListHCINewOutput {
	s.Need_upgrade = &v
	return s
}

// SetOta_job_status sets the Ota_job_status field's value.
func (s *Ota_statusForListHCINewOutput) SetOta_job_status(v int32) *Ota_statusForListHCINewOutput {
	s.Ota_job_status = &v
	return s
}

// SetOta_version sets the Ota_version field's value.
func (s *Ota_statusForListHCINewOutput) SetOta_version(v string) *Ota_statusForListHCINewOutput {
	s.Ota_version = &v
	return s
}

type PageinatorForListHCINewOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Index *int32 `type:"int32" json:"index,omitempty"`

	Size *int32 `type:"int32" json:"size,omitempty"`

	Total_items *int32 `type:"int32" json:"total_items,omitempty"`

	Total_pages *int32 `type:"int32" json:"total_pages,omitempty"`
}

// String returns the string representation
func (s PageinatorForListHCINewOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s PageinatorForListHCINewOutput) GoString() string {
	return s.String()
}

// SetIndex sets the Index field's value.
func (s *PageinatorForListHCINewOutput) SetIndex(v int32) *PageinatorForListHCINewOutput {
	s.Index = &v
	return s
}

// SetSize sets the Size field's value.
func (s *PageinatorForListHCINewOutput) SetSize(v int32) *PageinatorForListHCINewOutput {
	s.Size = &v
	return s
}

// SetTotal_items sets the Total_items field's value.
func (s *PageinatorForListHCINewOutput) SetTotal_items(v int32) *PageinatorForListHCINewOutput {
	s.Total_items = &v
	return s
}

// SetTotal_pages sets the Total_pages field's value.
func (s *PageinatorForListHCINewOutput) SetTotal_pages(v int32) *PageinatorForListHCINewOutput {
	s.Total_pages = &v
	return s
}

type TagForListHCINewInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Key *string `type:"string" json:"key,omitempty"`

	Value *string `type:"string" json:"value,omitempty"`
}

// String returns the string representation
func (s TagForListHCINewInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s TagForListHCINewInput) GoString() string {
	return s.String()
}

// SetKey sets the Key field's value.
func (s *TagForListHCINewInput) SetKey(v string) *TagForListHCINewInput {
	s.Key = &v
	return s
}

// SetValue sets the Value field's value.
func (s *TagForListHCINewInput) SetValue(v string) *TagForListHCINewInput {
	s.Value = &v
	return s
}
