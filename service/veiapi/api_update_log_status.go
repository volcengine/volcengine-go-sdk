// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package veiapi

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opUpdateLogStatusCommon = "UpdateLogStatus"

// UpdateLogStatusCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateLogStatusCommon operation. The "output" return
// value will be populated with the UpdateLogStatusCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateLogStatusCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateLogStatusCommon Send returns without error.
//
// See UpdateLogStatusCommon for more information on using the UpdateLogStatusCommon
// API call, and error handling.
//
//    // Example sending a request using the UpdateLogStatusCommonRequest method.
//    req, resp := client.UpdateLogStatusCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VEIAPI) UpdateLogStatusCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opUpdateLogStatusCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateLogStatusCommon API operation for VEI_API.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VEI_API's
// API operation UpdateLogStatusCommon for usage and error information.
func (c *VEIAPI) UpdateLogStatusCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.UpdateLogStatusCommonRequest(input)
	return out, req.Send()
}

// UpdateLogStatusCommonWithContext is the same as UpdateLogStatusCommon with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateLogStatusCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VEIAPI) UpdateLogStatusCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.UpdateLogStatusCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opUpdateLogStatus = "UpdateLogStatus"

// UpdateLogStatusRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateLogStatus operation. The "output" return
// value will be populated with the UpdateLogStatusCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateLogStatusCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateLogStatusCommon Send returns without error.
//
// See UpdateLogStatus for more information on using the UpdateLogStatus
// API call, and error handling.
//
//    // Example sending a request using the UpdateLogStatusRequest method.
//    req, resp := client.UpdateLogStatusRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VEIAPI) UpdateLogStatusRequest(input *UpdateLogStatusInput) (req *request.Request, output *UpdateLogStatusOutput) {
	op := &request.Operation{
		Name:       opUpdateLogStatus,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UpdateLogStatusInput{}
	}

	output = &UpdateLogStatusOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateLogStatus API operation for VEI_API.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VEI_API's
// API operation UpdateLogStatus for usage and error information.
func (c *VEIAPI) UpdateLogStatus(input *UpdateLogStatusInput) (*UpdateLogStatusOutput, error) {
	req, out := c.UpdateLogStatusRequest(input)
	return out, req.Send()
}

// UpdateLogStatusWithContext is the same as UpdateLogStatus with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateLogStatus for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VEIAPI) UpdateLogStatusWithContext(ctx volcengine.Context, input *UpdateLogStatusInput, opts ...request.Option) (*UpdateLogStatusOutput, error) {
	req, out := c.UpdateLogStatusRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type UpdateLogStatusInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Node_name *string `type:"string" json:"node_name,omitempty"`

	Project_id *string `type:"string" json:"project_id,omitempty"`

	Status *int32 `type:"int32" json:"status,omitempty"`
}

// String returns the string representation
func (s UpdateLogStatusInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateLogStatusInput) GoString() string {
	return s.String()
}

// SetNode_name sets the Node_name field's value.
func (s *UpdateLogStatusInput) SetNode_name(v string) *UpdateLogStatusInput {
	s.Node_name = &v
	return s
}

// SetProject_id sets the Project_id field's value.
func (s *UpdateLogStatusInput) SetProject_id(v string) *UpdateLogStatusInput {
	s.Project_id = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *UpdateLogStatusInput) SetStatus(v int32) *UpdateLogStatusInput {
	s.Status = &v
	return s
}

type UpdateLogStatusOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s UpdateLogStatusOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateLogStatusOutput) GoString() string {
	return s.String()
}
