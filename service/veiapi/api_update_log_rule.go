// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package veiapi

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opUpdateLogRuleCommon = "UpdateLogRule"

// UpdateLogRuleCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateLogRuleCommon operation. The "output" return
// value will be populated with the UpdateLogRuleCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateLogRuleCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateLogRuleCommon Send returns without error.
//
// See UpdateLogRuleCommon for more information on using the UpdateLogRuleCommon
// API call, and error handling.
//
//    // Example sending a request using the UpdateLogRuleCommonRequest method.
//    req, resp := client.UpdateLogRuleCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VEIAPI) UpdateLogRuleCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opUpdateLogRuleCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateLogRuleCommon API operation for VEI_API.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VEI_API's
// API operation UpdateLogRuleCommon for usage and error information.
func (c *VEIAPI) UpdateLogRuleCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.UpdateLogRuleCommonRequest(input)
	return out, req.Send()
}

// UpdateLogRuleCommonWithContext is the same as UpdateLogRuleCommon with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateLogRuleCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VEIAPI) UpdateLogRuleCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.UpdateLogRuleCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opUpdateLogRule = "UpdateLogRule"

// UpdateLogRuleRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateLogRule operation. The "output" return
// value will be populated with the UpdateLogRuleCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateLogRuleCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateLogRuleCommon Send returns without error.
//
// See UpdateLogRule for more information on using the UpdateLogRule
// API call, and error handling.
//
//    // Example sending a request using the UpdateLogRuleRequest method.
//    req, resp := client.UpdateLogRuleRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VEIAPI) UpdateLogRuleRequest(input *UpdateLogRuleInput) (req *request.Request, output *UpdateLogRuleOutput) {
	op := &request.Operation{
		Name:       opUpdateLogRule,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UpdateLogRuleInput{}
	}

	output = &UpdateLogRuleOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateLogRule API operation for VEI_API.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VEI_API's
// API operation UpdateLogRule for usage and error information.
func (c *VEIAPI) UpdateLogRule(input *UpdateLogRuleInput) (*UpdateLogRuleOutput, error) {
	req, out := c.UpdateLogRuleRequest(input)
	return out, req.Send()
}

// UpdateLogRuleWithContext is the same as UpdateLogRule with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateLogRule for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VEIAPI) UpdateLogRuleWithContext(ctx volcengine.Context, input *UpdateLogRuleInput, opts ...request.Option) (*UpdateLogRuleOutput, error) {
	req, out := c.UpdateLogRuleRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type UpdateLogRuleInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	File_path []*string `type:"list" json:"file_path,omitempty"`

	Node_name *string `type:"string" json:"node_name,omitempty"`

	Pod_name []*string `type:"list" json:"pod_name,omitempty"`

	Pod_range *int32 `type:"int32" json:"pod_range,omitempty"`

	// Project_id is a required field
	Project_id *string `type:"string" json:"project_id,omitempty" required:"true"`

	Rule_name *string `type:"string" json:"rule_name,omitempty"`

	Rule_type *int32 `type:"int32" json:"rule_type,omitempty"`
}

// String returns the string representation
func (s UpdateLogRuleInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateLogRuleInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UpdateLogRuleInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "UpdateLogRuleInput"}
	if s.Project_id == nil {
		invalidParams.Add(request.NewErrParamRequired("Project_id"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetFile_path sets the File_path field's value.
func (s *UpdateLogRuleInput) SetFile_path(v []*string) *UpdateLogRuleInput {
	s.File_path = v
	return s
}

// SetNode_name sets the Node_name field's value.
func (s *UpdateLogRuleInput) SetNode_name(v string) *UpdateLogRuleInput {
	s.Node_name = &v
	return s
}

// SetPod_name sets the Pod_name field's value.
func (s *UpdateLogRuleInput) SetPod_name(v []*string) *UpdateLogRuleInput {
	s.Pod_name = v
	return s
}

// SetPod_range sets the Pod_range field's value.
func (s *UpdateLogRuleInput) SetPod_range(v int32) *UpdateLogRuleInput {
	s.Pod_range = &v
	return s
}

// SetProject_id sets the Project_id field's value.
func (s *UpdateLogRuleInput) SetProject_id(v string) *UpdateLogRuleInput {
	s.Project_id = &v
	return s
}

// SetRule_name sets the Rule_name field's value.
func (s *UpdateLogRuleInput) SetRule_name(v string) *UpdateLogRuleInput {
	s.Rule_name = &v
	return s
}

// SetRule_type sets the Rule_type field's value.
func (s *UpdateLogRuleInput) SetRule_type(v int32) *UpdateLogRuleInput {
	s.Rule_type = &v
	return s
}

type UpdateLogRuleOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s UpdateLogRuleOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateLogRuleOutput) GoString() string {
	return s.String()
}
