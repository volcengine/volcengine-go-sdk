// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package veiapi

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opCreateNodeGroupCommon = "CreateNodeGroup"

// CreateNodeGroupCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateNodeGroupCommon operation. The "output" return
// value will be populated with the CreateNodeGroupCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateNodeGroupCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateNodeGroupCommon Send returns without error.
//
// See CreateNodeGroupCommon for more information on using the CreateNodeGroupCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateNodeGroupCommonRequest method.
//    req, resp := client.CreateNodeGroupCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VEIAPI) CreateNodeGroupCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateNodeGroupCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateNodeGroupCommon API operation for VEI_API.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VEI_API's
// API operation CreateNodeGroupCommon for usage and error information.
func (c *VEIAPI) CreateNodeGroupCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateNodeGroupCommonRequest(input)
	return out, req.Send()
}

// CreateNodeGroupCommonWithContext is the same as CreateNodeGroupCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateNodeGroupCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VEIAPI) CreateNodeGroupCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateNodeGroupCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateNodeGroup = "CreateNodeGroup"

// CreateNodeGroupRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateNodeGroup operation. The "output" return
// value will be populated with the CreateNodeGroupCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateNodeGroupCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateNodeGroupCommon Send returns without error.
//
// See CreateNodeGroup for more information on using the CreateNodeGroup
// API call, and error handling.
//
//    // Example sending a request using the CreateNodeGroupRequest method.
//    req, resp := client.CreateNodeGroupRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VEIAPI) CreateNodeGroupRequest(input *CreateNodeGroupInput) (req *request.Request, output *CreateNodeGroupOutput) {
	op := &request.Operation{
		Name:       opCreateNodeGroup,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateNodeGroupInput{}
	}

	output = &CreateNodeGroupOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateNodeGroup API operation for VEI_API.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VEI_API's
// API operation CreateNodeGroup for usage and error information.
func (c *VEIAPI) CreateNodeGroup(input *CreateNodeGroupInput) (*CreateNodeGroupOutput, error) {
	req, out := c.CreateNodeGroupRequest(input)
	return out, req.Send()
}

// CreateNodeGroupWithContext is the same as CreateNodeGroup with the addition of
// the ability to pass a context and additional request options.
//
// See CreateNodeGroup for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VEIAPI) CreateNodeGroupWithContext(ctx volcengine.Context, input *CreateNodeGroupInput, opts ...request.Option) (*CreateNodeGroupOutput, error) {
	req, out := c.CreateNodeGroupRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type CreateNodeGroupInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// Description is a required field
	Description *string `type:"string" json:"description,omitempty" required:"true"`

	NodeGroupName *string `type:"string" json:"nodeGroupName,omitempty"`

	ProjectID *string `type:"string" json:"projectID,omitempty"`

	Tags []*TagForCreateNodeGroupInput `type:"list" json:"tags,omitempty"`
}

// String returns the string representation
func (s CreateNodeGroupInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateNodeGroupInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateNodeGroupInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CreateNodeGroupInput"}
	if s.Description == nil {
		invalidParams.Add(request.NewErrParamRequired("Description"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDescription sets the Description field's value.
func (s *CreateNodeGroupInput) SetDescription(v string) *CreateNodeGroupInput {
	s.Description = &v
	return s
}

// SetNodeGroupName sets the NodeGroupName field's value.
func (s *CreateNodeGroupInput) SetNodeGroupName(v string) *CreateNodeGroupInput {
	s.NodeGroupName = &v
	return s
}

// SetProjectID sets the ProjectID field's value.
func (s *CreateNodeGroupInput) SetProjectID(v string) *CreateNodeGroupInput {
	s.ProjectID = &v
	return s
}

// SetTags sets the Tags field's value.
func (s *CreateNodeGroupInput) SetTags(v []*TagForCreateNodeGroupInput) *CreateNodeGroupInput {
	s.Tags = v
	return s
}

type CreateNodeGroupOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s CreateNodeGroupOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateNodeGroupOutput) GoString() string {
	return s.String()
}

type TagForCreateNodeGroupInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Key *string `type:"string" json:"key,omitempty"`

	Value *string `type:"string" json:"value,omitempty"`
}

// String returns the string representation
func (s TagForCreateNodeGroupInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s TagForCreateNodeGroupInput) GoString() string {
	return s.String()
}

// SetKey sets the Key field's value.
func (s *TagForCreateNodeGroupInput) SetKey(v string) *TagForCreateNodeGroupInput {
	s.Key = &v
	return s
}

// SetValue sets the Value field's value.
func (s *TagForCreateNodeGroupInput) SetValue(v string) *TagForCreateNodeGroupInput {
	s.Value = &v
	return s
}
