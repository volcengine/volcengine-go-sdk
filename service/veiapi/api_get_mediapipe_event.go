// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package veiapi

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opGetMediapipeEventCommon = "GetMediapipeEvent"

// GetMediapipeEventCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the GetMediapipeEventCommon operation. The "output" return
// value will be populated with the GetMediapipeEventCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetMediapipeEventCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetMediapipeEventCommon Send returns without error.
//
// See GetMediapipeEventCommon for more information on using the GetMediapipeEventCommon
// API call, and error handling.
//
//    // Example sending a request using the GetMediapipeEventCommonRequest method.
//    req, resp := client.GetMediapipeEventCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VEIAPI) GetMediapipeEventCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opGetMediapipeEventCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetMediapipeEventCommon API operation for VEI_API.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VEI_API's
// API operation GetMediapipeEventCommon for usage and error information.
func (c *VEIAPI) GetMediapipeEventCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.GetMediapipeEventCommonRequest(input)
	return out, req.Send()
}

// GetMediapipeEventCommonWithContext is the same as GetMediapipeEventCommon with the addition of
// the ability to pass a context and additional request options.
//
// See GetMediapipeEventCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VEIAPI) GetMediapipeEventCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.GetMediapipeEventCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opGetMediapipeEvent = "GetMediapipeEvent"

// GetMediapipeEventRequest generates a "volcengine/request.Request" representing the
// client's request for the GetMediapipeEvent operation. The "output" return
// value will be populated with the GetMediapipeEventCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetMediapipeEventCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetMediapipeEventCommon Send returns without error.
//
// See GetMediapipeEvent for more information on using the GetMediapipeEvent
// API call, and error handling.
//
//    // Example sending a request using the GetMediapipeEventRequest method.
//    req, resp := client.GetMediapipeEventRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VEIAPI) GetMediapipeEventRequest(input *GetMediapipeEventInput) (req *request.Request, output *GetMediapipeEventOutput) {
	op := &request.Operation{
		Name:       opGetMediapipeEvent,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &GetMediapipeEventInput{}
	}

	output = &GetMediapipeEventOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetMediapipeEvent API operation for VEI_API.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VEI_API's
// API operation GetMediapipeEvent for usage and error information.
func (c *VEIAPI) GetMediapipeEvent(input *GetMediapipeEventInput) (*GetMediapipeEventOutput, error) {
	req, out := c.GetMediapipeEventRequest(input)
	return out, req.Send()
}

// GetMediapipeEventWithContext is the same as GetMediapipeEvent with the addition of
// the ability to pass a context and additional request options.
//
// See GetMediapipeEvent for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VEIAPI) GetMediapipeEventWithContext(ctx volcengine.Context, input *GetMediapipeEventInput, opts ...request.Option) (*GetMediapipeEventOutput, error) {
	req, out := c.GetMediapipeEventRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ClassifierForGetMediapipeEventOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Label *string `type:"string" json:"label,omitempty"`

	Prob *float64 `type:"double" json:"prob,omitempty"`
}

// String returns the string representation
func (s ClassifierForGetMediapipeEventOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ClassifierForGetMediapipeEventOutput) GoString() string {
	return s.String()
}

// SetLabel sets the Label field's value.
func (s *ClassifierForGetMediapipeEventOutput) SetLabel(v string) *ClassifierForGetMediapipeEventOutput {
	s.Label = &v
	return s
}

// SetProb sets the Prob field's value.
func (s *ClassifierForGetMediapipeEventOutput) SetProb(v float64) *ClassifierForGetMediapipeEventOutput {
	s.Prob = &v
	return s
}

type GetMediapipeEventInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// Event_id is a required field
	Event_id *string `type:"string" json:"event_id,omitempty" required:"true"`
}

// String returns the string representation
func (s GetMediapipeEventInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetMediapipeEventInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *GetMediapipeEventInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "GetMediapipeEventInput"}
	if s.Event_id == nil {
		invalidParams.Add(request.NewErrParamRequired("Event_id"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetEvent_id sets the Event_id field's value.
func (s *GetMediapipeEventInput) SetEvent_id(v string) *GetMediapipeEventInput {
	s.Event_id = &v
	return s
}

type GetMediapipeEventOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Base64_image_string *string `type:"string" json:"base64_image_string,omitempty"`

	Create_time *string `type:"string" json:"create_time,omitempty"`

	Event_id *string `type:"string" json:"event_id,omitempty"`

	Event_type *string `type:"string" json:"event_type,omitempty"`

	Instance_id *string `type:"string" json:"instance_id,omitempty"`

	Instance_name *string `type:"string" json:"instance_name,omitempty"`

	Json_all_string *string `type:"string" json:"json_all_string,omitempty"`

	Obj_bboxes []*Obj_bboxForGetMediapipeEventOutput `type:"list" json:"obj_bboxes,omitempty"`

	Project_id *string `type:"string" json:"project_id,omitempty"`

	Source_id *string `type:"string" json:"source_id,omitempty"`

	Source_type *string `type:"string" json:"source_type,omitempty"`
}

// String returns the string representation
func (s GetMediapipeEventOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetMediapipeEventOutput) GoString() string {
	return s.String()
}

// SetBase64_image_string sets the Base64_image_string field's value.
func (s *GetMediapipeEventOutput) SetBase64_image_string(v string) *GetMediapipeEventOutput {
	s.Base64_image_string = &v
	return s
}

// SetCreate_time sets the Create_time field's value.
func (s *GetMediapipeEventOutput) SetCreate_time(v string) *GetMediapipeEventOutput {
	s.Create_time = &v
	return s
}

// SetEvent_id sets the Event_id field's value.
func (s *GetMediapipeEventOutput) SetEvent_id(v string) *GetMediapipeEventOutput {
	s.Event_id = &v
	return s
}

// SetEvent_type sets the Event_type field's value.
func (s *GetMediapipeEventOutput) SetEvent_type(v string) *GetMediapipeEventOutput {
	s.Event_type = &v
	return s
}

// SetInstance_id sets the Instance_id field's value.
func (s *GetMediapipeEventOutput) SetInstance_id(v string) *GetMediapipeEventOutput {
	s.Instance_id = &v
	return s
}

// SetInstance_name sets the Instance_name field's value.
func (s *GetMediapipeEventOutput) SetInstance_name(v string) *GetMediapipeEventOutput {
	s.Instance_name = &v
	return s
}

// SetJson_all_string sets the Json_all_string field's value.
func (s *GetMediapipeEventOutput) SetJson_all_string(v string) *GetMediapipeEventOutput {
	s.Json_all_string = &v
	return s
}

// SetObj_bboxes sets the Obj_bboxes field's value.
func (s *GetMediapipeEventOutput) SetObj_bboxes(v []*Obj_bboxForGetMediapipeEventOutput) *GetMediapipeEventOutput {
	s.Obj_bboxes = v
	return s
}

// SetProject_id sets the Project_id field's value.
func (s *GetMediapipeEventOutput) SetProject_id(v string) *GetMediapipeEventOutput {
	s.Project_id = &v
	return s
}

// SetSource_id sets the Source_id field's value.
func (s *GetMediapipeEventOutput) SetSource_id(v string) *GetMediapipeEventOutput {
	s.Source_id = &v
	return s
}

// SetSource_type sets the Source_type field's value.
func (s *GetMediapipeEventOutput) SetSource_type(v string) *GetMediapipeEventOutput {
	s.Source_type = &v
	return s
}

type Obj_bboxForGetMediapipeEventOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Classifier []*ClassifierForGetMediapipeEventOutput `type:"list" json:"classifier,omitempty"`

	Height *string `type:"string" json:"height,omitempty"`

	Id *int32 `type:"int32" json:"id,omitempty"`

	Label *string `type:"string" json:"label,omitempty"`

	Left *float64 `type:"double" json:"left,omitempty"`

	Prob *float64 `type:"double" json:"prob,omitempty"`

	Top *string `type:"string" json:"top,omitempty"`

	Width *float64 `type:"double" json:"width,omitempty"`
}

// String returns the string representation
func (s Obj_bboxForGetMediapipeEventOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s Obj_bboxForGetMediapipeEventOutput) GoString() string {
	return s.String()
}

// SetClassifier sets the Classifier field's value.
func (s *Obj_bboxForGetMediapipeEventOutput) SetClassifier(v []*ClassifierForGetMediapipeEventOutput) *Obj_bboxForGetMediapipeEventOutput {
	s.Classifier = v
	return s
}

// SetHeight sets the Height field's value.
func (s *Obj_bboxForGetMediapipeEventOutput) SetHeight(v string) *Obj_bboxForGetMediapipeEventOutput {
	s.Height = &v
	return s
}

// SetId sets the Id field's value.
func (s *Obj_bboxForGetMediapipeEventOutput) SetId(v int32) *Obj_bboxForGetMediapipeEventOutput {
	s.Id = &v
	return s
}

// SetLabel sets the Label field's value.
func (s *Obj_bboxForGetMediapipeEventOutput) SetLabel(v string) *Obj_bboxForGetMediapipeEventOutput {
	s.Label = &v
	return s
}

// SetLeft sets the Left field's value.
func (s *Obj_bboxForGetMediapipeEventOutput) SetLeft(v float64) *Obj_bboxForGetMediapipeEventOutput {
	s.Left = &v
	return s
}

// SetProb sets the Prob field's value.
func (s *Obj_bboxForGetMediapipeEventOutput) SetProb(v float64) *Obj_bboxForGetMediapipeEventOutput {
	s.Prob = &v
	return s
}

// SetTop sets the Top field's value.
func (s *Obj_bboxForGetMediapipeEventOutput) SetTop(v string) *Obj_bboxForGetMediapipeEventOutput {
	s.Top = &v
	return s
}

// SetWidth sets the Width field's value.
func (s *Obj_bboxForGetMediapipeEventOutput) SetWidth(v float64) *Obj_bboxForGetMediapipeEventOutput {
	s.Width = &v
	return s
}
