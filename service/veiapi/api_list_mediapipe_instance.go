// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package veiapi

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opListMediapipeInstanceCommon = "ListMediapipeInstance"

// ListMediapipeInstanceCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ListMediapipeInstanceCommon operation. The "output" return
// value will be populated with the ListMediapipeInstanceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListMediapipeInstanceCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListMediapipeInstanceCommon Send returns without error.
//
// See ListMediapipeInstanceCommon for more information on using the ListMediapipeInstanceCommon
// API call, and error handling.
//
//    // Example sending a request using the ListMediapipeInstanceCommonRequest method.
//    req, resp := client.ListMediapipeInstanceCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VEIAPI) ListMediapipeInstanceCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opListMediapipeInstanceCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListMediapipeInstanceCommon API operation for VEI_API.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VEI_API's
// API operation ListMediapipeInstanceCommon for usage and error information.
func (c *VEIAPI) ListMediapipeInstanceCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ListMediapipeInstanceCommonRequest(input)
	return out, req.Send()
}

// ListMediapipeInstanceCommonWithContext is the same as ListMediapipeInstanceCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ListMediapipeInstanceCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VEIAPI) ListMediapipeInstanceCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ListMediapipeInstanceCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListMediapipeInstance = "ListMediapipeInstance"

// ListMediapipeInstanceRequest generates a "volcengine/request.Request" representing the
// client's request for the ListMediapipeInstance operation. The "output" return
// value will be populated with the ListMediapipeInstanceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListMediapipeInstanceCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListMediapipeInstanceCommon Send returns without error.
//
// See ListMediapipeInstance for more information on using the ListMediapipeInstance
// API call, and error handling.
//
//    // Example sending a request using the ListMediapipeInstanceRequest method.
//    req, resp := client.ListMediapipeInstanceRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VEIAPI) ListMediapipeInstanceRequest(input *ListMediapipeInstanceInput) (req *request.Request, output *ListMediapipeInstanceOutput) {
	op := &request.Operation{
		Name:       opListMediapipeInstance,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListMediapipeInstanceInput{}
	}

	output = &ListMediapipeInstanceOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListMediapipeInstance API operation for VEI_API.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VEI_API's
// API operation ListMediapipeInstance for usage and error information.
func (c *VEIAPI) ListMediapipeInstance(input *ListMediapipeInstanceInput) (*ListMediapipeInstanceOutput, error) {
	req, out := c.ListMediapipeInstanceRequest(input)
	return out, req.Send()
}

// ListMediapipeInstanceWithContext is the same as ListMediapipeInstance with the addition of
// the ability to pass a context and additional request options.
//
// See ListMediapipeInstance for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VEIAPI) ListMediapipeInstanceWithContext(ctx volcengine.Context, input *ListMediapipeInstanceInput, opts ...request.Option) (*ListMediapipeInstanceOutput, error) {
	req, out := c.ListMediapipeInstanceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ItemForListMediapipeInstanceOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`
}

// String returns the string representation
func (s ItemForListMediapipeInstanceOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ItemForListMediapipeInstanceOutput) GoString() string {
	return s.String()
}

type ListMediapipeInstanceInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Engine_types []*int32 `type:"list" json:"engine_types,omitempty"`

	Hci_alias []*string `type:"list" json:"hci_alias,omitempty"`

	Hci_names []*string `type:"list" json:"hci_names,omitempty"`

	Instance_name *string `type:"string" json:"instance_name,omitempty"`

	// Page_index is a required field
	Page_index *int32 `min:"1" type:"int32" json:"page_index,omitempty" required:"true"`

	// Page_size is a required field
	Page_size *int32 `min:"1" type:"int32" json:"page_size,omitempty" required:"true"`

	Project_ids []*string `type:"list" json:"project_ids,omitempty"`

	Statuses []*int32 `type:"list" json:"statuses,omitempty"`
}

// String returns the string representation
func (s ListMediapipeInstanceInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListMediapipeInstanceInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ListMediapipeInstanceInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ListMediapipeInstanceInput"}
	if s.Page_index == nil {
		invalidParams.Add(request.NewErrParamRequired("Page_index"))
	}
	if s.Page_index != nil && *s.Page_index < 1 {
		invalidParams.Add(request.NewErrParamMinValue("Page_index", 1))
	}
	if s.Page_size == nil {
		invalidParams.Add(request.NewErrParamRequired("Page_size"))
	}
	if s.Page_size != nil && *s.Page_size < 1 {
		invalidParams.Add(request.NewErrParamMinValue("Page_size", 1))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetEngine_types sets the Engine_types field's value.
func (s *ListMediapipeInstanceInput) SetEngine_types(v []*int32) *ListMediapipeInstanceInput {
	s.Engine_types = v
	return s
}

// SetHci_alias sets the Hci_alias field's value.
func (s *ListMediapipeInstanceInput) SetHci_alias(v []*string) *ListMediapipeInstanceInput {
	s.Hci_alias = v
	return s
}

// SetHci_names sets the Hci_names field's value.
func (s *ListMediapipeInstanceInput) SetHci_names(v []*string) *ListMediapipeInstanceInput {
	s.Hci_names = v
	return s
}

// SetInstance_name sets the Instance_name field's value.
func (s *ListMediapipeInstanceInput) SetInstance_name(v string) *ListMediapipeInstanceInput {
	s.Instance_name = &v
	return s
}

// SetPage_index sets the Page_index field's value.
func (s *ListMediapipeInstanceInput) SetPage_index(v int32) *ListMediapipeInstanceInput {
	s.Page_index = &v
	return s
}

// SetPage_size sets the Page_size field's value.
func (s *ListMediapipeInstanceInput) SetPage_size(v int32) *ListMediapipeInstanceInput {
	s.Page_size = &v
	return s
}

// SetProject_ids sets the Project_ids field's value.
func (s *ListMediapipeInstanceInput) SetProject_ids(v []*string) *ListMediapipeInstanceInput {
	s.Project_ids = v
	return s
}

// SetStatuses sets the Statuses field's value.
func (s *ListMediapipeInstanceInput) SetStatuses(v []*int32) *ListMediapipeInstanceInput {
	s.Statuses = v
	return s
}

type ListMediapipeInstanceOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Items []*ItemForListMediapipeInstanceOutput `type:"list" json:"items,omitempty"`

	Pageinator *PageinatorForListMediapipeInstanceOutput `type:"structure" json:"pageinator,omitempty"`
}

// String returns the string representation
func (s ListMediapipeInstanceOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListMediapipeInstanceOutput) GoString() string {
	return s.String()
}

// SetItems sets the Items field's value.
func (s *ListMediapipeInstanceOutput) SetItems(v []*ItemForListMediapipeInstanceOutput) *ListMediapipeInstanceOutput {
	s.Items = v
	return s
}

// SetPageinator sets the Pageinator field's value.
func (s *ListMediapipeInstanceOutput) SetPageinator(v *PageinatorForListMediapipeInstanceOutput) *ListMediapipeInstanceOutput {
	s.Pageinator = v
	return s
}

type PageinatorForListMediapipeInstanceOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Index *int32 `type:"int32" json:"index,omitempty"`

	Size *int32 `type:"int32" json:"size,omitempty"`

	Total_items *int32 `type:"int32" json:"total_items,omitempty"`

	Total_pages *int32 `type:"int32" json:"total_pages,omitempty"`
}

// String returns the string representation
func (s PageinatorForListMediapipeInstanceOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s PageinatorForListMediapipeInstanceOutput) GoString() string {
	return s.String()
}

// SetIndex sets the Index field's value.
func (s *PageinatorForListMediapipeInstanceOutput) SetIndex(v int32) *PageinatorForListMediapipeInstanceOutput {
	s.Index = &v
	return s
}

// SetSize sets the Size field's value.
func (s *PageinatorForListMediapipeInstanceOutput) SetSize(v int32) *PageinatorForListMediapipeInstanceOutput {
	s.Size = &v
	return s
}

// SetTotal_items sets the Total_items field's value.
func (s *PageinatorForListMediapipeInstanceOutput) SetTotal_items(v int32) *PageinatorForListMediapipeInstanceOutput {
	s.Total_items = &v
	return s
}

// SetTotal_pages sets the Total_pages field's value.
func (s *PageinatorForListMediapipeInstanceOutput) SetTotal_pages(v int32) *PageinatorForListMediapipeInstanceOutput {
	s.Total_pages = &v
	return s
}
