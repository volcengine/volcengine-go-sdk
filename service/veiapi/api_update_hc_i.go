// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package veiapi

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opUpdateHCICommon = "UpdateHCI"

// UpdateHCICommonRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateHCICommon operation. The "output" return
// value will be populated with the UpdateHCICommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateHCICommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateHCICommon Send returns without error.
//
// See UpdateHCICommon for more information on using the UpdateHCICommon
// API call, and error handling.
//
//    // Example sending a request using the UpdateHCICommonRequest method.
//    req, resp := client.UpdateHCICommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VEIAPI) UpdateHCICommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opUpdateHCICommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateHCICommon API operation for VEI_API.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VEI_API's
// API operation UpdateHCICommon for usage and error information.
func (c *VEIAPI) UpdateHCICommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.UpdateHCICommonRequest(input)
	return out, req.Send()
}

// UpdateHCICommonWithContext is the same as UpdateHCICommon with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateHCICommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VEIAPI) UpdateHCICommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.UpdateHCICommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opUpdateHCI = "UpdateHCI"

// UpdateHCIRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateHCI operation. The "output" return
// value will be populated with the UpdateHCICommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateHCICommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateHCICommon Send returns without error.
//
// See UpdateHCI for more information on using the UpdateHCI
// API call, and error handling.
//
//    // Example sending a request using the UpdateHCIRequest method.
//    req, resp := client.UpdateHCIRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VEIAPI) UpdateHCIRequest(input *UpdateHCIInput) (req *request.Request, output *UpdateHCIOutput) {
	op := &request.Operation{
		Name:       opUpdateHCI,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UpdateHCIInput{}
	}

	output = &UpdateHCIOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateHCI API operation for VEI_API.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VEI_API's
// API operation UpdateHCI for usage and error information.
func (c *VEIAPI) UpdateHCI(input *UpdateHCIInput) (*UpdateHCIOutput, error) {
	req, out := c.UpdateHCIRequest(input)
	return out, req.Send()
}

// UpdateHCIWithContext is the same as UpdateHCI with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateHCI for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VEIAPI) UpdateHCIWithContext(ctx volcengine.Context, input *UpdateHCIInput, opts ...request.Option) (*UpdateHCIOutput, error) {
	req, out := c.UpdateHCIRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type TagForUpdateHCIInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Key *string `type:"string" json:"key,omitempty"`

	Value *string `type:"string" json:"value,omitempty"`
}

// String returns the string representation
func (s TagForUpdateHCIInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s TagForUpdateHCIInput) GoString() string {
	return s.String()
}

// SetKey sets the Key field's value.
func (s *TagForUpdateHCIInput) SetKey(v string) *TagForUpdateHCIInput {
	s.Key = &v
	return s
}

// SetValue sets the Value field's value.
func (s *TagForUpdateHCIInput) SetValue(v string) *TagForUpdateHCIInput {
	s.Value = &v
	return s
}

type UpdateHCIInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Alias *string `type:"string" json:"alias,omitempty"`

	Description *string `type:"string" json:"description,omitempty"`

	Monitor_status *int32 `type:"int32" json:"monitor_status,omitempty"`

	Name *string `type:"string" json:"name,omitempty"`

	Sn *string `type:"string" json:"sn,omitempty"`

	Tags []*TagForUpdateHCIInput `type:"list" json:"tags,omitempty"`
}

// String returns the string representation
func (s UpdateHCIInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateHCIInput) GoString() string {
	return s.String()
}

// SetAlias sets the Alias field's value.
func (s *UpdateHCIInput) SetAlias(v string) *UpdateHCIInput {
	s.Alias = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *UpdateHCIInput) SetDescription(v string) *UpdateHCIInput {
	s.Description = &v
	return s
}

// SetMonitor_status sets the Monitor_status field's value.
func (s *UpdateHCIInput) SetMonitor_status(v int32) *UpdateHCIInput {
	s.Monitor_status = &v
	return s
}

// SetName sets the Name field's value.
func (s *UpdateHCIInput) SetName(v string) *UpdateHCIInput {
	s.Name = &v
	return s
}

// SetSn sets the Sn field's value.
func (s *UpdateHCIInput) SetSn(v string) *UpdateHCIInput {
	s.Sn = &v
	return s
}

// SetTags sets the Tags field's value.
func (s *UpdateHCIInput) SetTags(v []*TagForUpdateHCIInput) *UpdateHCIInput {
	s.Tags = v
	return s
}

type UpdateHCIOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s UpdateHCIOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateHCIOutput) GoString() string {
	return s.String()
}
