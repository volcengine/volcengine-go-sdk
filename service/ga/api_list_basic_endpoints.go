// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package ga

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opListBasicEndpointsCommon = "ListBasicEndpoints"

// ListBasicEndpointsCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ListBasicEndpointsCommon operation. The "output" return
// value will be populated with the ListBasicEndpointsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListBasicEndpointsCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListBasicEndpointsCommon Send returns without error.
//
// See ListBasicEndpointsCommon for more information on using the ListBasicEndpointsCommon
// API call, and error handling.
//
//    // Example sending a request using the ListBasicEndpointsCommonRequest method.
//    req, resp := client.ListBasicEndpointsCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *GA) ListBasicEndpointsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opListBasicEndpointsCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListBasicEndpointsCommon API operation for GA.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for GA's
// API operation ListBasicEndpointsCommon for usage and error information.
func (c *GA) ListBasicEndpointsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ListBasicEndpointsCommonRequest(input)
	return out, req.Send()
}

// ListBasicEndpointsCommonWithContext is the same as ListBasicEndpointsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ListBasicEndpointsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *GA) ListBasicEndpointsCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ListBasicEndpointsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListBasicEndpoints = "ListBasicEndpoints"

// ListBasicEndpointsRequest generates a "volcengine/request.Request" representing the
// client's request for the ListBasicEndpoints operation. The "output" return
// value will be populated with the ListBasicEndpointsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListBasicEndpointsCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListBasicEndpointsCommon Send returns without error.
//
// See ListBasicEndpoints for more information on using the ListBasicEndpoints
// API call, and error handling.
//
//    // Example sending a request using the ListBasicEndpointsRequest method.
//    req, resp := client.ListBasicEndpointsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *GA) ListBasicEndpointsRequest(input *ListBasicEndpointsInput) (req *request.Request, output *ListBasicEndpointsOutput) {
	op := &request.Operation{
		Name:       opListBasicEndpoints,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListBasicEndpointsInput{}
	}

	output = &ListBasicEndpointsOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListBasicEndpoints API operation for GA.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for GA's
// API operation ListBasicEndpoints for usage and error information.
func (c *GA) ListBasicEndpoints(input *ListBasicEndpointsInput) (*ListBasicEndpointsOutput, error) {
	req, out := c.ListBasicEndpointsRequest(input)
	return out, req.Send()
}

// ListBasicEndpointsWithContext is the same as ListBasicEndpoints with the addition of
// the ability to pass a context and additional request options.
//
// See ListBasicEndpoints for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *GA) ListBasicEndpointsWithContext(ctx volcengine.Context, input *ListBasicEndpointsInput, opts ...request.Option) (*ListBasicEndpointsOutput, error) {
	req, out := c.ListBasicEndpointsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type AccelerateIPForListBasicEndpointsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	AccelerateIP *string `type:"string" json:",omitempty"`

	AccelerateIPId *string `type:"string" json:",omitempty"`

	ISP *string `type:"string" json:",omitempty"`

	State *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s AccelerateIPForListBasicEndpointsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s AccelerateIPForListBasicEndpointsOutput) GoString() string {
	return s.String()
}

// SetAccelerateIP sets the AccelerateIP field's value.
func (s *AccelerateIPForListBasicEndpointsOutput) SetAccelerateIP(v string) *AccelerateIPForListBasicEndpointsOutput {
	s.AccelerateIP = &v
	return s
}

// SetAccelerateIPId sets the AccelerateIPId field's value.
func (s *AccelerateIPForListBasicEndpointsOutput) SetAccelerateIPId(v string) *AccelerateIPForListBasicEndpointsOutput {
	s.AccelerateIPId = &v
	return s
}

// SetISP sets the ISP field's value.
func (s *AccelerateIPForListBasicEndpointsOutput) SetISP(v string) *AccelerateIPForListBasicEndpointsOutput {
	s.ISP = &v
	return s
}

// SetState sets the State field's value.
func (s *AccelerateIPForListBasicEndpointsOutput) SetState(v string) *AccelerateIPForListBasicEndpointsOutput {
	s.State = &v
	return s
}

type EndpointForListBasicEndpointsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	AccelerateIPs []*AccelerateIPForListBasicEndpointsOutput `type:"list" json:",omitempty"`

	AcceleratorId *string `type:"string" json:",omitempty"`

	EdgeNode *string `type:"string" json:",omitempty"`

	EdgeNodeAlias *string `type:"string" json:",omitempty"`

	EndpointAddress *string `type:"string" json:",omitempty"`

	EndpointGroupId *string `type:"string" json:",omitempty"`

	EndpointId *string `type:"string" json:",omitempty"`

	Type *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s EndpointForListBasicEndpointsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s EndpointForListBasicEndpointsOutput) GoString() string {
	return s.String()
}

// SetAccelerateIPs sets the AccelerateIPs field's value.
func (s *EndpointForListBasicEndpointsOutput) SetAccelerateIPs(v []*AccelerateIPForListBasicEndpointsOutput) *EndpointForListBasicEndpointsOutput {
	s.AccelerateIPs = v
	return s
}

// SetAcceleratorId sets the AcceleratorId field's value.
func (s *EndpointForListBasicEndpointsOutput) SetAcceleratorId(v string) *EndpointForListBasicEndpointsOutput {
	s.AcceleratorId = &v
	return s
}

// SetEdgeNode sets the EdgeNode field's value.
func (s *EndpointForListBasicEndpointsOutput) SetEdgeNode(v string) *EndpointForListBasicEndpointsOutput {
	s.EdgeNode = &v
	return s
}

// SetEdgeNodeAlias sets the EdgeNodeAlias field's value.
func (s *EndpointForListBasicEndpointsOutput) SetEdgeNodeAlias(v string) *EndpointForListBasicEndpointsOutput {
	s.EdgeNodeAlias = &v
	return s
}

// SetEndpointAddress sets the EndpointAddress field's value.
func (s *EndpointForListBasicEndpointsOutput) SetEndpointAddress(v string) *EndpointForListBasicEndpointsOutput {
	s.EndpointAddress = &v
	return s
}

// SetEndpointGroupId sets the EndpointGroupId field's value.
func (s *EndpointForListBasicEndpointsOutput) SetEndpointGroupId(v string) *EndpointForListBasicEndpointsOutput {
	s.EndpointGroupId = &v
	return s
}

// SetEndpointId sets the EndpointId field's value.
func (s *EndpointForListBasicEndpointsOutput) SetEndpointId(v string) *EndpointForListBasicEndpointsOutput {
	s.EndpointId = &v
	return s
}

// SetType sets the Type field's value.
func (s *EndpointForListBasicEndpointsOutput) SetType(v string) *EndpointForListBasicEndpointsOutput {
	s.Type = &v
	return s
}

type ListBasicEndpointsInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// AcceleratorId is a required field
	AcceleratorId *string `type:"string" json:",omitempty" required:"true"`

	// EndpointGroupId is a required field
	EndpointGroupId *string `type:"string" json:",omitempty" required:"true"`

	PageNum *int32 `type:"int32" json:",omitempty"`

	PageSize *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s ListBasicEndpointsInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListBasicEndpointsInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ListBasicEndpointsInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ListBasicEndpointsInput"}
	if s.AcceleratorId == nil {
		invalidParams.Add(request.NewErrParamRequired("AcceleratorId"))
	}
	if s.EndpointGroupId == nil {
		invalidParams.Add(request.NewErrParamRequired("EndpointGroupId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAcceleratorId sets the AcceleratorId field's value.
func (s *ListBasicEndpointsInput) SetAcceleratorId(v string) *ListBasicEndpointsInput {
	s.AcceleratorId = &v
	return s
}

// SetEndpointGroupId sets the EndpointGroupId field's value.
func (s *ListBasicEndpointsInput) SetEndpointGroupId(v string) *ListBasicEndpointsInput {
	s.EndpointGroupId = &v
	return s
}

// SetPageNum sets the PageNum field's value.
func (s *ListBasicEndpointsInput) SetPageNum(v int32) *ListBasicEndpointsInput {
	s.PageNum = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *ListBasicEndpointsInput) SetPageSize(v int32) *ListBasicEndpointsInput {
	s.PageSize = &v
	return s
}

type ListBasicEndpointsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Endpoints []*EndpointForListBasicEndpointsOutput `type:"list" json:",omitempty"`

	PageNum *int32 `type:"int32" json:",omitempty"`

	PageSize *int32 `type:"int32" json:",omitempty"`

	TotalCount *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s ListBasicEndpointsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListBasicEndpointsOutput) GoString() string {
	return s.String()
}

// SetEndpoints sets the Endpoints field's value.
func (s *ListBasicEndpointsOutput) SetEndpoints(v []*EndpointForListBasicEndpointsOutput) *ListBasicEndpointsOutput {
	s.Endpoints = v
	return s
}

// SetPageNum sets the PageNum field's value.
func (s *ListBasicEndpointsOutput) SetPageNum(v int32) *ListBasicEndpointsOutput {
	s.PageNum = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *ListBasicEndpointsOutput) SetPageSize(v int32) *ListBasicEndpointsOutput {
	s.PageSize = &v
	return s
}

// SetTotalCount sets the TotalCount field's value.
func (s *ListBasicEndpointsOutput) SetTotalCount(v int32) *ListBasicEndpointsOutput {
	s.TotalCount = &v
	return s
}
