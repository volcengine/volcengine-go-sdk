// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package ga

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opUpdateListenerCommon = "UpdateListener"

// UpdateListenerCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateListenerCommon operation. The "output" return
// value will be populated with the UpdateListenerCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateListenerCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateListenerCommon Send returns without error.
//
// See UpdateListenerCommon for more information on using the UpdateListenerCommon
// API call, and error handling.
//
//    // Example sending a request using the UpdateListenerCommonRequest method.
//    req, resp := client.UpdateListenerCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *GA) UpdateListenerCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opUpdateListenerCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateListenerCommon API operation for GA.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for GA's
// API operation UpdateListenerCommon for usage and error information.
func (c *GA) UpdateListenerCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.UpdateListenerCommonRequest(input)
	return out, req.Send()
}

// UpdateListenerCommonWithContext is the same as UpdateListenerCommon with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateListenerCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *GA) UpdateListenerCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.UpdateListenerCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opUpdateListener = "UpdateListener"

// UpdateListenerRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateListener operation. The "output" return
// value will be populated with the UpdateListenerCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateListenerCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateListenerCommon Send returns without error.
//
// See UpdateListener for more information on using the UpdateListener
// API call, and error handling.
//
//    // Example sending a request using the UpdateListenerRequest method.
//    req, resp := client.UpdateListenerRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *GA) UpdateListenerRequest(input *UpdateListenerInput) (req *request.Request, output *UpdateListenerOutput) {
	op := &request.Operation{
		Name:       opUpdateListener,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UpdateListenerInput{}
	}

	output = &UpdateListenerOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateListener API operation for GA.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for GA's
// API operation UpdateListener for usage and error information.
func (c *GA) UpdateListener(input *UpdateListenerInput) (*UpdateListenerOutput, error) {
	req, out := c.UpdateListenerRequest(input)
	return out, req.Send()
}

// UpdateListenerWithContext is the same as UpdateListener with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateListener for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *GA) UpdateListenerWithContext(ctx volcengine.Context, input *UpdateListenerInput, opts ...request.Option) (*UpdateListenerOutput, error) {
	req, out := c.UpdateListenerRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type FixedSourceReturnForUpdateListenerInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Enable *bool `type:"boolean" json:",omitempty"`
}

// String returns the string representation
func (s FixedSourceReturnForUpdateListenerInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s FixedSourceReturnForUpdateListenerInput) GoString() string {
	return s.String()
}

// SetEnable sets the Enable field's value.
func (s *FixedSourceReturnForUpdateListenerInput) SetEnable(v bool) *FixedSourceReturnForUpdateListenerInput {
	s.Enable = &v
	return s
}

type IPAccessForUpdateListenerInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Enable *bool `type:"boolean" json:",omitempty"`

	FilterList []*string `type:"list" json:",omitempty"`

	FilterType *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s IPAccessForUpdateListenerInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s IPAccessForUpdateListenerInput) GoString() string {
	return s.String()
}

// SetEnable sets the Enable field's value.
func (s *IPAccessForUpdateListenerInput) SetEnable(v bool) *IPAccessForUpdateListenerInput {
	s.Enable = &v
	return s
}

// SetFilterList sets the FilterList field's value.
func (s *IPAccessForUpdateListenerInput) SetFilterList(v []*string) *IPAccessForUpdateListenerInput {
	s.FilterList = v
	return s
}

// SetFilterType sets the FilterType field's value.
func (s *IPAccessForUpdateListenerInput) SetFilterType(v string) *IPAccessForUpdateListenerInput {
	s.FilterType = &v
	return s
}

type PortRangeForUpdateListenerInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	FromPort *int32 `type:"int32" json:",omitempty"`

	ToPort *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s PortRangeForUpdateListenerInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s PortRangeForUpdateListenerInput) GoString() string {
	return s.String()
}

// SetFromPort sets the FromPort field's value.
func (s *PortRangeForUpdateListenerInput) SetFromPort(v int32) *PortRangeForUpdateListenerInput {
	s.FromPort = &v
	return s
}

// SetToPort sets the ToPort field's value.
func (s *PortRangeForUpdateListenerInput) SetToPort(v int32) *PortRangeForUpdateListenerInput {
	s.ToPort = &v
	return s
}

type UpdateListenerInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	AcceleratorId *string `type:"string" json:",omitempty"`

	DisableIsolateTCPNullConn *bool `type:"boolean" json:",omitempty"`

	DisablePreConnect *bool `type:"boolean" json:",omitempty"`

	// EnableAffinity is a required field
	EnableAffinity *bool `type:"boolean" json:",omitempty" required:"true"`

	FixedSourceReturn *FixedSourceReturnForUpdateListenerInput `type:"structure" json:",omitempty"`

	IPAccess *IPAccessForUpdateListenerInput `type:"structure" json:",omitempty"`

	// ListenerId is a required field
	ListenerId *string `type:"string" json:",omitempty" required:"true"`

	Name *string `type:"string" json:",omitempty"`

	PortRanges []*PortRangeForUpdateListenerInput `type:"list" json:",omitempty"`

	Protocol *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s UpdateListenerInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateListenerInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UpdateListenerInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "UpdateListenerInput"}
	if s.EnableAffinity == nil {
		invalidParams.Add(request.NewErrParamRequired("EnableAffinity"))
	}
	if s.ListenerId == nil {
		invalidParams.Add(request.NewErrParamRequired("ListenerId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAcceleratorId sets the AcceleratorId field's value.
func (s *UpdateListenerInput) SetAcceleratorId(v string) *UpdateListenerInput {
	s.AcceleratorId = &v
	return s
}

// SetDisableIsolateTCPNullConn sets the DisableIsolateTCPNullConn field's value.
func (s *UpdateListenerInput) SetDisableIsolateTCPNullConn(v bool) *UpdateListenerInput {
	s.DisableIsolateTCPNullConn = &v
	return s
}

// SetDisablePreConnect sets the DisablePreConnect field's value.
func (s *UpdateListenerInput) SetDisablePreConnect(v bool) *UpdateListenerInput {
	s.DisablePreConnect = &v
	return s
}

// SetEnableAffinity sets the EnableAffinity field's value.
func (s *UpdateListenerInput) SetEnableAffinity(v bool) *UpdateListenerInput {
	s.EnableAffinity = &v
	return s
}

// SetFixedSourceReturn sets the FixedSourceReturn field's value.
func (s *UpdateListenerInput) SetFixedSourceReturn(v *FixedSourceReturnForUpdateListenerInput) *UpdateListenerInput {
	s.FixedSourceReturn = v
	return s
}

// SetIPAccess sets the IPAccess field's value.
func (s *UpdateListenerInput) SetIPAccess(v *IPAccessForUpdateListenerInput) *UpdateListenerInput {
	s.IPAccess = v
	return s
}

// SetListenerId sets the ListenerId field's value.
func (s *UpdateListenerInput) SetListenerId(v string) *UpdateListenerInput {
	s.ListenerId = &v
	return s
}

// SetName sets the Name field's value.
func (s *UpdateListenerInput) SetName(v string) *UpdateListenerInput {
	s.Name = &v
	return s
}

// SetPortRanges sets the PortRanges field's value.
func (s *UpdateListenerInput) SetPortRanges(v []*PortRangeForUpdateListenerInput) *UpdateListenerInput {
	s.PortRanges = v
	return s
}

// SetProtocol sets the Protocol field's value.
func (s *UpdateListenerInput) SetProtocol(v string) *UpdateListenerInput {
	s.Protocol = &v
	return s
}

type UpdateListenerOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s UpdateListenerOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateListenerOutput) GoString() string {
	return s.String()
}
