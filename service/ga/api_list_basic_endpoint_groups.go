// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package ga

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opListBasicEndpointGroupsCommon = "ListBasicEndpointGroups"

// ListBasicEndpointGroupsCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ListBasicEndpointGroupsCommon operation. The "output" return
// value will be populated with the ListBasicEndpointGroupsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListBasicEndpointGroupsCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListBasicEndpointGroupsCommon Send returns without error.
//
// See ListBasicEndpointGroupsCommon for more information on using the ListBasicEndpointGroupsCommon
// API call, and error handling.
//
//    // Example sending a request using the ListBasicEndpointGroupsCommonRequest method.
//    req, resp := client.ListBasicEndpointGroupsCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *GA) ListBasicEndpointGroupsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opListBasicEndpointGroupsCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListBasicEndpointGroupsCommon API operation for GA.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for GA's
// API operation ListBasicEndpointGroupsCommon for usage and error information.
func (c *GA) ListBasicEndpointGroupsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ListBasicEndpointGroupsCommonRequest(input)
	return out, req.Send()
}

// ListBasicEndpointGroupsCommonWithContext is the same as ListBasicEndpointGroupsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ListBasicEndpointGroupsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *GA) ListBasicEndpointGroupsCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ListBasicEndpointGroupsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListBasicEndpointGroups = "ListBasicEndpointGroups"

// ListBasicEndpointGroupsRequest generates a "volcengine/request.Request" representing the
// client's request for the ListBasicEndpointGroups operation. The "output" return
// value will be populated with the ListBasicEndpointGroupsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListBasicEndpointGroupsCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListBasicEndpointGroupsCommon Send returns without error.
//
// See ListBasicEndpointGroups for more information on using the ListBasicEndpointGroups
// API call, and error handling.
//
//    // Example sending a request using the ListBasicEndpointGroupsRequest method.
//    req, resp := client.ListBasicEndpointGroupsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *GA) ListBasicEndpointGroupsRequest(input *ListBasicEndpointGroupsInput) (req *request.Request, output *ListBasicEndpointGroupsOutput) {
	op := &request.Operation{
		Name:       opListBasicEndpointGroups,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListBasicEndpointGroupsInput{}
	}

	output = &ListBasicEndpointGroupsOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListBasicEndpointGroups API operation for GA.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for GA's
// API operation ListBasicEndpointGroups for usage and error information.
func (c *GA) ListBasicEndpointGroups(input *ListBasicEndpointGroupsInput) (*ListBasicEndpointGroupsOutput, error) {
	req, out := c.ListBasicEndpointGroupsRequest(input)
	return out, req.Send()
}

// ListBasicEndpointGroupsWithContext is the same as ListBasicEndpointGroups with the addition of
// the ability to pass a context and additional request options.
//
// See ListBasicEndpointGroups for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *GA) ListBasicEndpointGroupsWithContext(ctx volcengine.Context, input *ListBasicEndpointGroupsInput, opts ...request.Option) (*ListBasicEndpointGroupsOutput, error) {
	req, out := c.ListBasicEndpointGroupsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type EndpointForListBasicEndpointGroupsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	EdgeNodeName *string `type:"string" json:",omitempty"`

	EndpointAddress *string `type:"string" json:",omitempty"`

	EndpointId *string `type:"string" json:",omitempty"`

	Type *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s EndpointForListBasicEndpointGroupsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s EndpointForListBasicEndpointGroupsOutput) GoString() string {
	return s.String()
}

// SetEdgeNodeName sets the EdgeNodeName field's value.
func (s *EndpointForListBasicEndpointGroupsOutput) SetEdgeNodeName(v string) *EndpointForListBasicEndpointGroupsOutput {
	s.EdgeNodeName = &v
	return s
}

// SetEndpointAddress sets the EndpointAddress field's value.
func (s *EndpointForListBasicEndpointGroupsOutput) SetEndpointAddress(v string) *EndpointForListBasicEndpointGroupsOutput {
	s.EndpointAddress = &v
	return s
}

// SetEndpointId sets the EndpointId field's value.
func (s *EndpointForListBasicEndpointGroupsOutput) SetEndpointId(v string) *EndpointForListBasicEndpointGroupsOutput {
	s.EndpointId = &v
	return s
}

// SetType sets the Type field's value.
func (s *EndpointForListBasicEndpointGroupsOutput) SetType(v string) *EndpointForListBasicEndpointGroupsOutput {
	s.Type = &v
	return s
}

type EndpointGroupForListBasicEndpointGroupsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	AcceleratorId *string `type:"string" json:",omitempty"`

	EndpointGroupId *string `type:"string" json:",omitempty"`

	Endpoints []*EndpointForListBasicEndpointGroupsOutput `type:"list" json:",omitempty"`

	ExistBoundEndpoint *bool `type:"boolean" json:",omitempty"`

	Name *string `type:"string" json:",omitempty"`

	Region *string `type:"string" json:",omitempty"`

	State *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s EndpointGroupForListBasicEndpointGroupsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s EndpointGroupForListBasicEndpointGroupsOutput) GoString() string {
	return s.String()
}

// SetAcceleratorId sets the AcceleratorId field's value.
func (s *EndpointGroupForListBasicEndpointGroupsOutput) SetAcceleratorId(v string) *EndpointGroupForListBasicEndpointGroupsOutput {
	s.AcceleratorId = &v
	return s
}

// SetEndpointGroupId sets the EndpointGroupId field's value.
func (s *EndpointGroupForListBasicEndpointGroupsOutput) SetEndpointGroupId(v string) *EndpointGroupForListBasicEndpointGroupsOutput {
	s.EndpointGroupId = &v
	return s
}

// SetEndpoints sets the Endpoints field's value.
func (s *EndpointGroupForListBasicEndpointGroupsOutput) SetEndpoints(v []*EndpointForListBasicEndpointGroupsOutput) *EndpointGroupForListBasicEndpointGroupsOutput {
	s.Endpoints = v
	return s
}

// SetExistBoundEndpoint sets the ExistBoundEndpoint field's value.
func (s *EndpointGroupForListBasicEndpointGroupsOutput) SetExistBoundEndpoint(v bool) *EndpointGroupForListBasicEndpointGroupsOutput {
	s.ExistBoundEndpoint = &v
	return s
}

// SetName sets the Name field's value.
func (s *EndpointGroupForListBasicEndpointGroupsOutput) SetName(v string) *EndpointGroupForListBasicEndpointGroupsOutput {
	s.Name = &v
	return s
}

// SetRegion sets the Region field's value.
func (s *EndpointGroupForListBasicEndpointGroupsOutput) SetRegion(v string) *EndpointGroupForListBasicEndpointGroupsOutput {
	s.Region = &v
	return s
}

// SetState sets the State field's value.
func (s *EndpointGroupForListBasicEndpointGroupsOutput) SetState(v string) *EndpointGroupForListBasicEndpointGroupsOutput {
	s.State = &v
	return s
}

type ListBasicEndpointGroupsInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	AcceleratorId *string `type:"string" json:",omitempty"`

	PageNum *int32 `type:"int32" json:",omitempty"`

	PageSize *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s ListBasicEndpointGroupsInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListBasicEndpointGroupsInput) GoString() string {
	return s.String()
}

// SetAcceleratorId sets the AcceleratorId field's value.
func (s *ListBasicEndpointGroupsInput) SetAcceleratorId(v string) *ListBasicEndpointGroupsInput {
	s.AcceleratorId = &v
	return s
}

// SetPageNum sets the PageNum field's value.
func (s *ListBasicEndpointGroupsInput) SetPageNum(v int32) *ListBasicEndpointGroupsInput {
	s.PageNum = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *ListBasicEndpointGroupsInput) SetPageSize(v int32) *ListBasicEndpointGroupsInput {
	s.PageSize = &v
	return s
}

type ListBasicEndpointGroupsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	EndpointGroups []*EndpointGroupForListBasicEndpointGroupsOutput `type:"list" json:",omitempty"`

	PageNum *int32 `type:"int32" json:",omitempty"`

	PageSize *int32 `type:"int32" json:",omitempty"`

	TotalCount *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s ListBasicEndpointGroupsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListBasicEndpointGroupsOutput) GoString() string {
	return s.String()
}

// SetEndpointGroups sets the EndpointGroups field's value.
func (s *ListBasicEndpointGroupsOutput) SetEndpointGroups(v []*EndpointGroupForListBasicEndpointGroupsOutput) *ListBasicEndpointGroupsOutput {
	s.EndpointGroups = v
	return s
}

// SetPageNum sets the PageNum field's value.
func (s *ListBasicEndpointGroupsOutput) SetPageNum(v int32) *ListBasicEndpointGroupsOutput {
	s.PageNum = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *ListBasicEndpointGroupsOutput) SetPageSize(v int32) *ListBasicEndpointGroupsOutput {
	s.PageSize = &v
	return s
}

// SetTotalCount sets the TotalCount field's value.
func (s *ListBasicEndpointGroupsOutput) SetTotalCount(v int32) *ListBasicEndpointGroupsOutput {
	s.TotalCount = &v
	return s
}
