// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package ga

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDescribeAcceleratorCommon = "DescribeAccelerator"

// DescribeAcceleratorCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeAcceleratorCommon operation. The "output" return
// value will be populated with the DescribeAcceleratorCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeAcceleratorCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeAcceleratorCommon Send returns without error.
//
// See DescribeAcceleratorCommon for more information on using the DescribeAcceleratorCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeAcceleratorCommonRequest method.
//    req, resp := client.DescribeAcceleratorCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *GA) DescribeAcceleratorCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeAcceleratorCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeAcceleratorCommon API operation for GA.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for GA's
// API operation DescribeAcceleratorCommon for usage and error information.
func (c *GA) DescribeAcceleratorCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeAcceleratorCommonRequest(input)
	return out, req.Send()
}

// DescribeAcceleratorCommonWithContext is the same as DescribeAcceleratorCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeAcceleratorCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *GA) DescribeAcceleratorCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeAcceleratorCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeAccelerator = "DescribeAccelerator"

// DescribeAcceleratorRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeAccelerator operation. The "output" return
// value will be populated with the DescribeAcceleratorCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeAcceleratorCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeAcceleratorCommon Send returns without error.
//
// See DescribeAccelerator for more information on using the DescribeAccelerator
// API call, and error handling.
//
//    // Example sending a request using the DescribeAcceleratorRequest method.
//    req, resp := client.DescribeAcceleratorRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *GA) DescribeAcceleratorRequest(input *DescribeAcceleratorInput) (req *request.Request, output *DescribeAcceleratorOutput) {
	op := &request.Operation{
		Name:       opDescribeAccelerator,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeAcceleratorInput{}
	}

	output = &DescribeAcceleratorOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeAccelerator API operation for GA.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for GA's
// API operation DescribeAccelerator for usage and error information.
func (c *GA) DescribeAccelerator(input *DescribeAcceleratorInput) (*DescribeAcceleratorOutput, error) {
	req, out := c.DescribeAcceleratorRequest(input)
	return out, req.Send()
}

// DescribeAcceleratorWithContext is the same as DescribeAccelerator with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeAccelerator for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *GA) DescribeAcceleratorWithContext(ctx volcengine.Context, input *DescribeAcceleratorInput, opts ...request.Option) (*DescribeAcceleratorOutput, error) {
	req, out := c.DescribeAcceleratorRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DescribeAcceleratorInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// AcceleratorId is a required field
	AcceleratorId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s DescribeAcceleratorInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeAcceleratorInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeAcceleratorInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DescribeAcceleratorInput"}
	if s.AcceleratorId == nil {
		invalidParams.Add(request.NewErrParamRequired("AcceleratorId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAcceleratorId sets the AcceleratorId field's value.
func (s *DescribeAcceleratorInput) SetAcceleratorId(v string) *DescribeAcceleratorInput {
	s.AcceleratorId = &v
	return s
}

type DescribeAcceleratorOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	AcceleratorId *string `type:"string" json:",omitempty"`

	AccountID *string `type:"string" json:",omitempty"`

	BandwidthPackageIds []*string `type:"list" json:",omitempty"`

	BillingSpec *string `type:"string" json:",omitempty"`

	BillingSpecEffectiveTime *int32 `type:"int32" json:",omitempty"`

	BillingType *string `type:"string" json:",omitempty"`

	CNAME *string `type:"string" json:",omitempty"`

	ChargeType *string `type:"string" json:",omitempty"`

	CreateTime *int32 `type:"int32" json:",omitempty"`

	CrossDomainBandwidthIds []*string `type:"list" json:",omitempty"`

	ExpiredTime *int32 `type:"int32" json:",omitempty"`

	FullPortSwitch *bool `type:"boolean" json:",omitempty"`

	ListenerCount *int32 `type:"int32" json:",omitempty"`

	Name *string `type:"string" json:",omitempty"`

	ProjectName *string `type:"string" json:",omitempty"`

	RegionCount *int32 `type:"int32" json:",omitempty"`

	RenewType *int32 `type:"int32" json:",omitempty"`

	ResourceTags *ResourceTagsForDescribeAcceleratorOutput `type:"structure" json:",omitempty"`

	State *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s DescribeAcceleratorOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeAcceleratorOutput) GoString() string {
	return s.String()
}

// SetAcceleratorId sets the AcceleratorId field's value.
func (s *DescribeAcceleratorOutput) SetAcceleratorId(v string) *DescribeAcceleratorOutput {
	s.AcceleratorId = &v
	return s
}

// SetAccountID sets the AccountID field's value.
func (s *DescribeAcceleratorOutput) SetAccountID(v string) *DescribeAcceleratorOutput {
	s.AccountID = &v
	return s
}

// SetBandwidthPackageIds sets the BandwidthPackageIds field's value.
func (s *DescribeAcceleratorOutput) SetBandwidthPackageIds(v []*string) *DescribeAcceleratorOutput {
	s.BandwidthPackageIds = v
	return s
}

// SetBillingSpec sets the BillingSpec field's value.
func (s *DescribeAcceleratorOutput) SetBillingSpec(v string) *DescribeAcceleratorOutput {
	s.BillingSpec = &v
	return s
}

// SetBillingSpecEffectiveTime sets the BillingSpecEffectiveTime field's value.
func (s *DescribeAcceleratorOutput) SetBillingSpecEffectiveTime(v int32) *DescribeAcceleratorOutput {
	s.BillingSpecEffectiveTime = &v
	return s
}

// SetBillingType sets the BillingType field's value.
func (s *DescribeAcceleratorOutput) SetBillingType(v string) *DescribeAcceleratorOutput {
	s.BillingType = &v
	return s
}

// SetCNAME sets the CNAME field's value.
func (s *DescribeAcceleratorOutput) SetCNAME(v string) *DescribeAcceleratorOutput {
	s.CNAME = &v
	return s
}

// SetChargeType sets the ChargeType field's value.
func (s *DescribeAcceleratorOutput) SetChargeType(v string) *DescribeAcceleratorOutput {
	s.ChargeType = &v
	return s
}

// SetCreateTime sets the CreateTime field's value.
func (s *DescribeAcceleratorOutput) SetCreateTime(v int32) *DescribeAcceleratorOutput {
	s.CreateTime = &v
	return s
}

// SetCrossDomainBandwidthIds sets the CrossDomainBandwidthIds field's value.
func (s *DescribeAcceleratorOutput) SetCrossDomainBandwidthIds(v []*string) *DescribeAcceleratorOutput {
	s.CrossDomainBandwidthIds = v
	return s
}

// SetExpiredTime sets the ExpiredTime field's value.
func (s *DescribeAcceleratorOutput) SetExpiredTime(v int32) *DescribeAcceleratorOutput {
	s.ExpiredTime = &v
	return s
}

// SetFullPortSwitch sets the FullPortSwitch field's value.
func (s *DescribeAcceleratorOutput) SetFullPortSwitch(v bool) *DescribeAcceleratorOutput {
	s.FullPortSwitch = &v
	return s
}

// SetListenerCount sets the ListenerCount field's value.
func (s *DescribeAcceleratorOutput) SetListenerCount(v int32) *DescribeAcceleratorOutput {
	s.ListenerCount = &v
	return s
}

// SetName sets the Name field's value.
func (s *DescribeAcceleratorOutput) SetName(v string) *DescribeAcceleratorOutput {
	s.Name = &v
	return s
}

// SetProjectName sets the ProjectName field's value.
func (s *DescribeAcceleratorOutput) SetProjectName(v string) *DescribeAcceleratorOutput {
	s.ProjectName = &v
	return s
}

// SetRegionCount sets the RegionCount field's value.
func (s *DescribeAcceleratorOutput) SetRegionCount(v int32) *DescribeAcceleratorOutput {
	s.RegionCount = &v
	return s
}

// SetRenewType sets the RenewType field's value.
func (s *DescribeAcceleratorOutput) SetRenewType(v int32) *DescribeAcceleratorOutput {
	s.RenewType = &v
	return s
}

// SetResourceTags sets the ResourceTags field's value.
func (s *DescribeAcceleratorOutput) SetResourceTags(v *ResourceTagsForDescribeAcceleratorOutput) *DescribeAcceleratorOutput {
	s.ResourceTags = v
	return s
}

// SetState sets the State field's value.
func (s *DescribeAcceleratorOutput) SetState(v string) *DescribeAcceleratorOutput {
	s.State = &v
	return s
}

type ResourceTagsForDescribeAcceleratorOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Key *string `type:"string" json:",omitempty"`

	Value *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ResourceTagsForDescribeAcceleratorOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ResourceTagsForDescribeAcceleratorOutput) GoString() string {
	return s.String()
}

// SetKey sets the Key field's value.
func (s *ResourceTagsForDescribeAcceleratorOutput) SetKey(v string) *ResourceTagsForDescribeAcceleratorOutput {
	s.Key = &v
	return s
}

// SetValue sets the Value field's value.
func (s *ResourceTagsForDescribeAcceleratorOutput) SetValue(v string) *ResourceTagsForDescribeAcceleratorOutput {
	s.Value = &v
	return s
}
