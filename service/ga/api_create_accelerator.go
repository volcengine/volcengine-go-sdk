// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package ga

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opCreateAcceleratorCommon = "CreateAccelerator"

// CreateAcceleratorCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateAcceleratorCommon operation. The "output" return
// value will be populated with the CreateAcceleratorCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateAcceleratorCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateAcceleratorCommon Send returns without error.
//
// See CreateAcceleratorCommon for more information on using the CreateAcceleratorCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateAcceleratorCommonRequest method.
//    req, resp := client.CreateAcceleratorCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *GA) CreateAcceleratorCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateAcceleratorCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateAcceleratorCommon API operation for GA.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for GA's
// API operation CreateAcceleratorCommon for usage and error information.
func (c *GA) CreateAcceleratorCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateAcceleratorCommonRequest(input)
	return out, req.Send()
}

// CreateAcceleratorCommonWithContext is the same as CreateAcceleratorCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateAcceleratorCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *GA) CreateAcceleratorCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateAcceleratorCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateAccelerator = "CreateAccelerator"

// CreateAcceleratorRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateAccelerator operation. The "output" return
// value will be populated with the CreateAcceleratorCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateAcceleratorCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateAcceleratorCommon Send returns without error.
//
// See CreateAccelerator for more information on using the CreateAccelerator
// API call, and error handling.
//
//    // Example sending a request using the CreateAcceleratorRequest method.
//    req, resp := client.CreateAcceleratorRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *GA) CreateAcceleratorRequest(input *CreateAcceleratorInput) (req *request.Request, output *CreateAcceleratorOutput) {
	op := &request.Operation{
		Name:       opCreateAccelerator,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateAcceleratorInput{}
	}

	output = &CreateAcceleratorOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateAccelerator API operation for GA.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for GA's
// API operation CreateAccelerator for usage and error information.
func (c *GA) CreateAccelerator(input *CreateAcceleratorInput) (*CreateAcceleratorOutput, error) {
	req, out := c.CreateAcceleratorRequest(input)
	return out, req.Send()
}

// CreateAcceleratorWithContext is the same as CreateAccelerator with the addition of
// the ability to pass a context and additional request options.
//
// See CreateAccelerator for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *GA) CreateAcceleratorWithContext(ctx volcengine.Context, input *CreateAcceleratorInput, opts ...request.Option) (*CreateAcceleratorOutput, error) {
	req, out := c.CreateAcceleratorRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type CreateAcceleratorInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	BillingPeriod *int32 `type:"int32" json:",omitempty"`

	// BillingSpec is a required field
	BillingSpec *string `type:"string" json:",omitempty" required:"true"`

	BillingType *string `type:"string" json:",omitempty"`

	// ChargeType is a required field
	ChargeType *string `type:"string" json:",omitempty" required:"true"`

	Duration *int32 `type:"int32" json:",omitempty"`

	Name *string `type:"string" json:",omitempty"`

	ProjectName *string `type:"string" json:",omitempty"`

	RenewType *int32 `type:"int32" json:",omitempty"`

	ResourceTags []*ResourceTagForCreateAcceleratorInput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s CreateAcceleratorInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateAcceleratorInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateAcceleratorInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CreateAcceleratorInput"}
	if s.BillingSpec == nil {
		invalidParams.Add(request.NewErrParamRequired("BillingSpec"))
	}
	if s.ChargeType == nil {
		invalidParams.Add(request.NewErrParamRequired("ChargeType"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetBillingPeriod sets the BillingPeriod field's value.
func (s *CreateAcceleratorInput) SetBillingPeriod(v int32) *CreateAcceleratorInput {
	s.BillingPeriod = &v
	return s
}

// SetBillingSpec sets the BillingSpec field's value.
func (s *CreateAcceleratorInput) SetBillingSpec(v string) *CreateAcceleratorInput {
	s.BillingSpec = &v
	return s
}

// SetBillingType sets the BillingType field's value.
func (s *CreateAcceleratorInput) SetBillingType(v string) *CreateAcceleratorInput {
	s.BillingType = &v
	return s
}

// SetChargeType sets the ChargeType field's value.
func (s *CreateAcceleratorInput) SetChargeType(v string) *CreateAcceleratorInput {
	s.ChargeType = &v
	return s
}

// SetDuration sets the Duration field's value.
func (s *CreateAcceleratorInput) SetDuration(v int32) *CreateAcceleratorInput {
	s.Duration = &v
	return s
}

// SetName sets the Name field's value.
func (s *CreateAcceleratorInput) SetName(v string) *CreateAcceleratorInput {
	s.Name = &v
	return s
}

// SetProjectName sets the ProjectName field's value.
func (s *CreateAcceleratorInput) SetProjectName(v string) *CreateAcceleratorInput {
	s.ProjectName = &v
	return s
}

// SetRenewType sets the RenewType field's value.
func (s *CreateAcceleratorInput) SetRenewType(v int32) *CreateAcceleratorInput {
	s.RenewType = &v
	return s
}

// SetResourceTags sets the ResourceTags field's value.
func (s *CreateAcceleratorInput) SetResourceTags(v []*ResourceTagForCreateAcceleratorInput) *CreateAcceleratorInput {
	s.ResourceTags = v
	return s
}

type CreateAcceleratorOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	AcceleratorId *string `type:"string" json:",omitempty"`

	PreorderNumbers []*string `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s CreateAcceleratorOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateAcceleratorOutput) GoString() string {
	return s.String()
}

// SetAcceleratorId sets the AcceleratorId field's value.
func (s *CreateAcceleratorOutput) SetAcceleratorId(v string) *CreateAcceleratorOutput {
	s.AcceleratorId = &v
	return s
}

// SetPreorderNumbers sets the PreorderNumbers field's value.
func (s *CreateAcceleratorOutput) SetPreorderNumbers(v []*string) *CreateAcceleratorOutput {
	s.PreorderNumbers = v
	return s
}

type ResourceTagForCreateAcceleratorInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Key *string `type:"string" json:",omitempty"`

	Value *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ResourceTagForCreateAcceleratorInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ResourceTagForCreateAcceleratorInput) GoString() string {
	return s.String()
}

// SetKey sets the Key field's value.
func (s *ResourceTagForCreateAcceleratorInput) SetKey(v string) *ResourceTagForCreateAcceleratorInput {
	s.Key = &v
	return s
}

// SetValue sets the Value field's value.
func (s *ResourceTagForCreateAcceleratorInput) SetValue(v string) *ResourceTagForCreateAcceleratorInput {
	s.Value = &v
	return s
}
