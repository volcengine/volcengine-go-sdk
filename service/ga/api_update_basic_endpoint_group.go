// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package ga

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opUpdateBasicEndpointGroupCommon = "UpdateBasicEndpointGroup"

// UpdateBasicEndpointGroupCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateBasicEndpointGroupCommon operation. The "output" return
// value will be populated with the UpdateBasicEndpointGroupCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateBasicEndpointGroupCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateBasicEndpointGroupCommon Send returns without error.
//
// See UpdateBasicEndpointGroupCommon for more information on using the UpdateBasicEndpointGroupCommon
// API call, and error handling.
//
//    // Example sending a request using the UpdateBasicEndpointGroupCommonRequest method.
//    req, resp := client.UpdateBasicEndpointGroupCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *GA) UpdateBasicEndpointGroupCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opUpdateBasicEndpointGroupCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateBasicEndpointGroupCommon API operation for GA.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for GA's
// API operation UpdateBasicEndpointGroupCommon for usage and error information.
func (c *GA) UpdateBasicEndpointGroupCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.UpdateBasicEndpointGroupCommonRequest(input)
	return out, req.Send()
}

// UpdateBasicEndpointGroupCommonWithContext is the same as UpdateBasicEndpointGroupCommon with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateBasicEndpointGroupCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *GA) UpdateBasicEndpointGroupCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.UpdateBasicEndpointGroupCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opUpdateBasicEndpointGroup = "UpdateBasicEndpointGroup"

// UpdateBasicEndpointGroupRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateBasicEndpointGroup operation. The "output" return
// value will be populated with the UpdateBasicEndpointGroupCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateBasicEndpointGroupCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateBasicEndpointGroupCommon Send returns without error.
//
// See UpdateBasicEndpointGroup for more information on using the UpdateBasicEndpointGroup
// API call, and error handling.
//
//    // Example sending a request using the UpdateBasicEndpointGroupRequest method.
//    req, resp := client.UpdateBasicEndpointGroupRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *GA) UpdateBasicEndpointGroupRequest(input *UpdateBasicEndpointGroupInput) (req *request.Request, output *UpdateBasicEndpointGroupOutput) {
	op := &request.Operation{
		Name:       opUpdateBasicEndpointGroup,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UpdateBasicEndpointGroupInput{}
	}

	output = &UpdateBasicEndpointGroupOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateBasicEndpointGroup API operation for GA.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for GA's
// API operation UpdateBasicEndpointGroup for usage and error information.
func (c *GA) UpdateBasicEndpointGroup(input *UpdateBasicEndpointGroupInput) (*UpdateBasicEndpointGroupOutput, error) {
	req, out := c.UpdateBasicEndpointGroupRequest(input)
	return out, req.Send()
}

// UpdateBasicEndpointGroupWithContext is the same as UpdateBasicEndpointGroup with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateBasicEndpointGroup for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *GA) UpdateBasicEndpointGroupWithContext(ctx volcengine.Context, input *UpdateBasicEndpointGroupInput, opts ...request.Option) (*UpdateBasicEndpointGroupOutput, error) {
	req, out := c.UpdateBasicEndpointGroupRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type EndpointForUpdateBasicEndpointGroupInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	EdgeNodeName *string `type:"string" json:",omitempty"`

	EndpointAddress *string `type:"string" json:",omitempty"`

	Type *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s EndpointForUpdateBasicEndpointGroupInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s EndpointForUpdateBasicEndpointGroupInput) GoString() string {
	return s.String()
}

// SetEdgeNodeName sets the EdgeNodeName field's value.
func (s *EndpointForUpdateBasicEndpointGroupInput) SetEdgeNodeName(v string) *EndpointForUpdateBasicEndpointGroupInput {
	s.EdgeNodeName = &v
	return s
}

// SetEndpointAddress sets the EndpointAddress field's value.
func (s *EndpointForUpdateBasicEndpointGroupInput) SetEndpointAddress(v string) *EndpointForUpdateBasicEndpointGroupInput {
	s.EndpointAddress = &v
	return s
}

// SetType sets the Type field's value.
func (s *EndpointForUpdateBasicEndpointGroupInput) SetType(v string) *EndpointForUpdateBasicEndpointGroupInput {
	s.Type = &v
	return s
}

type UpdateBasicEndpointGroupInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// AcceleratorId is a required field
	AcceleratorId *string `type:"string" json:",omitempty" required:"true"`

	// EndpointGroupId is a required field
	EndpointGroupId *string `type:"string" json:",omitempty" required:"true"`

	Endpoints []*EndpointForUpdateBasicEndpointGroupInput `type:"list" json:",omitempty"`

	// Name is a required field
	Name *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s UpdateBasicEndpointGroupInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateBasicEndpointGroupInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UpdateBasicEndpointGroupInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "UpdateBasicEndpointGroupInput"}
	if s.AcceleratorId == nil {
		invalidParams.Add(request.NewErrParamRequired("AcceleratorId"))
	}
	if s.EndpointGroupId == nil {
		invalidParams.Add(request.NewErrParamRequired("EndpointGroupId"))
	}
	if s.Name == nil {
		invalidParams.Add(request.NewErrParamRequired("Name"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAcceleratorId sets the AcceleratorId field's value.
func (s *UpdateBasicEndpointGroupInput) SetAcceleratorId(v string) *UpdateBasicEndpointGroupInput {
	s.AcceleratorId = &v
	return s
}

// SetEndpointGroupId sets the EndpointGroupId field's value.
func (s *UpdateBasicEndpointGroupInput) SetEndpointGroupId(v string) *UpdateBasicEndpointGroupInput {
	s.EndpointGroupId = &v
	return s
}

// SetEndpoints sets the Endpoints field's value.
func (s *UpdateBasicEndpointGroupInput) SetEndpoints(v []*EndpointForUpdateBasicEndpointGroupInput) *UpdateBasicEndpointGroupInput {
	s.Endpoints = v
	return s
}

// SetName sets the Name field's value.
func (s *UpdateBasicEndpointGroupInput) SetName(v string) *UpdateBasicEndpointGroupInput {
	s.Name = &v
	return s
}

type UpdateBasicEndpointGroupOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s UpdateBasicEndpointGroupOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateBasicEndpointGroupOutput) GoString() string {
	return s.String()
}
