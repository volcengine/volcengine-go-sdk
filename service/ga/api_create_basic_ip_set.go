// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package ga

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opCreateBasicIPSetCommon = "CreateBasicIPSet"

// CreateBasicIPSetCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateBasicIPSetCommon operation. The "output" return
// value will be populated with the CreateBasicIPSetCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateBasicIPSetCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateBasicIPSetCommon Send returns without error.
//
// See CreateBasicIPSetCommon for more information on using the CreateBasicIPSetCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateBasicIPSetCommonRequest method.
//    req, resp := client.CreateBasicIPSetCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *GA) CreateBasicIPSetCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateBasicIPSetCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateBasicIPSetCommon API operation for GA.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for GA's
// API operation CreateBasicIPSetCommon for usage and error information.
func (c *GA) CreateBasicIPSetCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateBasicIPSetCommonRequest(input)
	return out, req.Send()
}

// CreateBasicIPSetCommonWithContext is the same as CreateBasicIPSetCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateBasicIPSetCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *GA) CreateBasicIPSetCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateBasicIPSetCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateBasicIPSet = "CreateBasicIPSet"

// CreateBasicIPSetRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateBasicIPSet operation. The "output" return
// value will be populated with the CreateBasicIPSetCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateBasicIPSetCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateBasicIPSetCommon Send returns without error.
//
// See CreateBasicIPSet for more information on using the CreateBasicIPSet
// API call, and error handling.
//
//    // Example sending a request using the CreateBasicIPSetRequest method.
//    req, resp := client.CreateBasicIPSetRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *GA) CreateBasicIPSetRequest(input *CreateBasicIPSetInput) (req *request.Request, output *CreateBasicIPSetOutput) {
	op := &request.Operation{
		Name:       opCreateBasicIPSet,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateBasicIPSetInput{}
	}

	output = &CreateBasicIPSetOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateBasicIPSet API operation for GA.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for GA's
// API operation CreateBasicIPSet for usage and error information.
func (c *GA) CreateBasicIPSet(input *CreateBasicIPSetInput) (*CreateBasicIPSetOutput, error) {
	req, out := c.CreateBasicIPSetRequest(input)
	return out, req.Send()
}

// CreateBasicIPSetWithContext is the same as CreateBasicIPSet with the addition of
// the ability to pass a context and additional request options.
//
// See CreateBasicIPSet for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *GA) CreateBasicIPSetWithContext(ctx volcengine.Context, input *CreateBasicIPSetInput, opts ...request.Option) (*CreateBasicIPSetOutput, error) {
	req, out := c.CreateBasicIPSetRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type CreateBasicIPSetInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	AccelerateNode []*string `type:"list" json:"accelerateNode,omitempty"`

	AccelerateRegion *string `type:"string" json:",omitempty"`

	AcceleratorId *string `type:"string" json:",omitempty"`

	IPVersion *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s CreateBasicIPSetInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateBasicIPSetInput) GoString() string {
	return s.String()
}

// SetAccelerateNode sets the AccelerateNode field's value.
func (s *CreateBasicIPSetInput) SetAccelerateNode(v []*string) *CreateBasicIPSetInput {
	s.AccelerateNode = v
	return s
}

// SetAccelerateRegion sets the AccelerateRegion field's value.
func (s *CreateBasicIPSetInput) SetAccelerateRegion(v string) *CreateBasicIPSetInput {
	s.AccelerateRegion = &v
	return s
}

// SetAcceleratorId sets the AcceleratorId field's value.
func (s *CreateBasicIPSetInput) SetAcceleratorId(v string) *CreateBasicIPSetInput {
	s.AcceleratorId = &v
	return s
}

// SetIPVersion sets the IPVersion field's value.
func (s *CreateBasicIPSetInput) SetIPVersion(v string) *CreateBasicIPSetInput {
	s.IPVersion = &v
	return s
}

type CreateBasicIPSetOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	IPSetId *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s CreateBasicIPSetOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateBasicIPSetOutput) GoString() string {
	return s.String()
}

// SetIPSetId sets the IPSetId field's value.
func (s *CreateBasicIPSetOutput) SetIPSetId(v string) *CreateBasicIPSetOutput {
	s.IPSetId = &v
	return s
}
