// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package ga

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opRenewPublicBandwidthPackageCommon = "RenewPublicBandwidthPackage"

// RenewPublicBandwidthPackageCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the RenewPublicBandwidthPackageCommon operation. The "output" return
// value will be populated with the RenewPublicBandwidthPackageCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned RenewPublicBandwidthPackageCommon Request to send the API call to the service.
// the "output" return value is not valid until after RenewPublicBandwidthPackageCommon Send returns without error.
//
// See RenewPublicBandwidthPackageCommon for more information on using the RenewPublicBandwidthPackageCommon
// API call, and error handling.
//
//    // Example sending a request using the RenewPublicBandwidthPackageCommonRequest method.
//    req, resp := client.RenewPublicBandwidthPackageCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *GA) RenewPublicBandwidthPackageCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opRenewPublicBandwidthPackageCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// RenewPublicBandwidthPackageCommon API operation for GA.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for GA's
// API operation RenewPublicBandwidthPackageCommon for usage and error information.
func (c *GA) RenewPublicBandwidthPackageCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.RenewPublicBandwidthPackageCommonRequest(input)
	return out, req.Send()
}

// RenewPublicBandwidthPackageCommonWithContext is the same as RenewPublicBandwidthPackageCommon with the addition of
// the ability to pass a context and additional request options.
//
// See RenewPublicBandwidthPackageCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *GA) RenewPublicBandwidthPackageCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.RenewPublicBandwidthPackageCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opRenewPublicBandwidthPackage = "RenewPublicBandwidthPackage"

// RenewPublicBandwidthPackageRequest generates a "volcengine/request.Request" representing the
// client's request for the RenewPublicBandwidthPackage operation. The "output" return
// value will be populated with the RenewPublicBandwidthPackageCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned RenewPublicBandwidthPackageCommon Request to send the API call to the service.
// the "output" return value is not valid until after RenewPublicBandwidthPackageCommon Send returns without error.
//
// See RenewPublicBandwidthPackage for more information on using the RenewPublicBandwidthPackage
// API call, and error handling.
//
//    // Example sending a request using the RenewPublicBandwidthPackageRequest method.
//    req, resp := client.RenewPublicBandwidthPackageRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *GA) RenewPublicBandwidthPackageRequest(input *RenewPublicBandwidthPackageInput) (req *request.Request, output *RenewPublicBandwidthPackageOutput) {
	op := &request.Operation{
		Name:       opRenewPublicBandwidthPackage,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &RenewPublicBandwidthPackageInput{}
	}

	output = &RenewPublicBandwidthPackageOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// RenewPublicBandwidthPackage API operation for GA.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for GA's
// API operation RenewPublicBandwidthPackage for usage and error information.
func (c *GA) RenewPublicBandwidthPackage(input *RenewPublicBandwidthPackageInput) (*RenewPublicBandwidthPackageOutput, error) {
	req, out := c.RenewPublicBandwidthPackageRequest(input)
	return out, req.Send()
}

// RenewPublicBandwidthPackageWithContext is the same as RenewPublicBandwidthPackage with the addition of
// the ability to pass a context and additional request options.
//
// See RenewPublicBandwidthPackage for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *GA) RenewPublicBandwidthPackageWithContext(ctx volcengine.Context, input *RenewPublicBandwidthPackageInput, opts ...request.Option) (*RenewPublicBandwidthPackageOutput, error) {
	req, out := c.RenewPublicBandwidthPackageRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type RenewPublicBandwidthPackageInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// BandwidthPackageId is a required field
	BandwidthPackageId *string `type:"string" json:",omitempty" required:"true"`

	// Duration is a required field
	Duration *int32 `type:"int32" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s RenewPublicBandwidthPackageInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s RenewPublicBandwidthPackageInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *RenewPublicBandwidthPackageInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "RenewPublicBandwidthPackageInput"}
	if s.BandwidthPackageId == nil {
		invalidParams.Add(request.NewErrParamRequired("BandwidthPackageId"))
	}
	if s.Duration == nil {
		invalidParams.Add(request.NewErrParamRequired("Duration"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetBandwidthPackageId sets the BandwidthPackageId field's value.
func (s *RenewPublicBandwidthPackageInput) SetBandwidthPackageId(v string) *RenewPublicBandwidthPackageInput {
	s.BandwidthPackageId = &v
	return s
}

// SetDuration sets the Duration field's value.
func (s *RenewPublicBandwidthPackageInput) SetDuration(v int32) *RenewPublicBandwidthPackageInput {
	s.Duration = &v
	return s
}

type RenewPublicBandwidthPackageOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	PreorderNumbers []*string `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s RenewPublicBandwidthPackageOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s RenewPublicBandwidthPackageOutput) GoString() string {
	return s.String()
}

// SetPreorderNumbers sets the PreorderNumbers field's value.
func (s *RenewPublicBandwidthPackageOutput) SetPreorderNumbers(v []*string) *RenewPublicBandwidthPackageOutput {
	s.PreorderNumbers = v
	return s
}
