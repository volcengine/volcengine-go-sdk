// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package ga

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDescribeListenerCommon = "DescribeListener"

// DescribeListenerCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeListenerCommon operation. The "output" return
// value will be populated with the DescribeListenerCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeListenerCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeListenerCommon Send returns without error.
//
// See DescribeListenerCommon for more information on using the DescribeListenerCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeListenerCommonRequest method.
//    req, resp := client.DescribeListenerCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *GA) DescribeListenerCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeListenerCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeListenerCommon API operation for GA.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for GA's
// API operation DescribeListenerCommon for usage and error information.
func (c *GA) DescribeListenerCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeListenerCommonRequest(input)
	return out, req.Send()
}

// DescribeListenerCommonWithContext is the same as DescribeListenerCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeListenerCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *GA) DescribeListenerCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeListenerCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeListener = "DescribeListener"

// DescribeListenerRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeListener operation. The "output" return
// value will be populated with the DescribeListenerCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeListenerCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeListenerCommon Send returns without error.
//
// See DescribeListener for more information on using the DescribeListener
// API call, and error handling.
//
//    // Example sending a request using the DescribeListenerRequest method.
//    req, resp := client.DescribeListenerRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *GA) DescribeListenerRequest(input *DescribeListenerInput) (req *request.Request, output *DescribeListenerOutput) {
	op := &request.Operation{
		Name:       opDescribeListener,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeListenerInput{}
	}

	output = &DescribeListenerOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeListener API operation for GA.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for GA's
// API operation DescribeListener for usage and error information.
func (c *GA) DescribeListener(input *DescribeListenerInput) (*DescribeListenerOutput, error) {
	req, out := c.DescribeListenerRequest(input)
	return out, req.Send()
}

// DescribeListenerWithContext is the same as DescribeListener with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeListener for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *GA) DescribeListenerWithContext(ctx volcengine.Context, input *DescribeListenerInput, opts ...request.Option) (*DescribeListenerOutput, error) {
	req, out := c.DescribeListenerRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DescribeListenerInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// ListenerId is a required field
	ListenerId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s DescribeListenerInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeListenerInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeListenerInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DescribeListenerInput"}
	if s.ListenerId == nil {
		invalidParams.Add(request.NewErrParamRequired("ListenerId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetListenerId sets the ListenerId field's value.
func (s *DescribeListenerInput) SetListenerId(v string) *DescribeListenerInput {
	s.ListenerId = &v
	return s
}

type DescribeListenerOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	AcceleratorId *string `type:"string" json:",omitempty"`

	AccountID *string `type:"string" json:",omitempty"`

	BackupEndpointGroupIds []*string `type:"list" json:",omitempty"`

	CreateTime *int32 `type:"int32" json:",omitempty"`

	DisableIsolateTCPNullConn *bool `type:"boolean" json:",omitempty"`

	DisablePreConnect *bool `type:"boolean" json:",omitempty"`

	EnableAffinity *bool `type:"boolean" json:",omitempty"`

	EndpointGroupIds []*string `type:"list" json:",omitempty"`

	FixedSourceReturn *FixedSourceReturnForDescribeListenerOutput `type:"structure" json:",omitempty"`

	IPAccess *IPAccessForDescribeListenerOutput `type:"structure" json:",omitempty"`

	ListenerId *string `type:"string" json:",omitempty"`

	Name *string `type:"string" json:",omitempty"`

	PortRanges []*PortRangeForDescribeListenerOutput `type:"list" json:",omitempty"`

	Protocol *string `type:"string" json:",omitempty"`

	State *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s DescribeListenerOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeListenerOutput) GoString() string {
	return s.String()
}

// SetAcceleratorId sets the AcceleratorId field's value.
func (s *DescribeListenerOutput) SetAcceleratorId(v string) *DescribeListenerOutput {
	s.AcceleratorId = &v
	return s
}

// SetAccountID sets the AccountID field's value.
func (s *DescribeListenerOutput) SetAccountID(v string) *DescribeListenerOutput {
	s.AccountID = &v
	return s
}

// SetBackupEndpointGroupIds sets the BackupEndpointGroupIds field's value.
func (s *DescribeListenerOutput) SetBackupEndpointGroupIds(v []*string) *DescribeListenerOutput {
	s.BackupEndpointGroupIds = v
	return s
}

// SetCreateTime sets the CreateTime field's value.
func (s *DescribeListenerOutput) SetCreateTime(v int32) *DescribeListenerOutput {
	s.CreateTime = &v
	return s
}

// SetDisableIsolateTCPNullConn sets the DisableIsolateTCPNullConn field's value.
func (s *DescribeListenerOutput) SetDisableIsolateTCPNullConn(v bool) *DescribeListenerOutput {
	s.DisableIsolateTCPNullConn = &v
	return s
}

// SetDisablePreConnect sets the DisablePreConnect field's value.
func (s *DescribeListenerOutput) SetDisablePreConnect(v bool) *DescribeListenerOutput {
	s.DisablePreConnect = &v
	return s
}

// SetEnableAffinity sets the EnableAffinity field's value.
func (s *DescribeListenerOutput) SetEnableAffinity(v bool) *DescribeListenerOutput {
	s.EnableAffinity = &v
	return s
}

// SetEndpointGroupIds sets the EndpointGroupIds field's value.
func (s *DescribeListenerOutput) SetEndpointGroupIds(v []*string) *DescribeListenerOutput {
	s.EndpointGroupIds = v
	return s
}

// SetFixedSourceReturn sets the FixedSourceReturn field's value.
func (s *DescribeListenerOutput) SetFixedSourceReturn(v *FixedSourceReturnForDescribeListenerOutput) *DescribeListenerOutput {
	s.FixedSourceReturn = v
	return s
}

// SetIPAccess sets the IPAccess field's value.
func (s *DescribeListenerOutput) SetIPAccess(v *IPAccessForDescribeListenerOutput) *DescribeListenerOutput {
	s.IPAccess = v
	return s
}

// SetListenerId sets the ListenerId field's value.
func (s *DescribeListenerOutput) SetListenerId(v string) *DescribeListenerOutput {
	s.ListenerId = &v
	return s
}

// SetName sets the Name field's value.
func (s *DescribeListenerOutput) SetName(v string) *DescribeListenerOutput {
	s.Name = &v
	return s
}

// SetPortRanges sets the PortRanges field's value.
func (s *DescribeListenerOutput) SetPortRanges(v []*PortRangeForDescribeListenerOutput) *DescribeListenerOutput {
	s.PortRanges = v
	return s
}

// SetProtocol sets the Protocol field's value.
func (s *DescribeListenerOutput) SetProtocol(v string) *DescribeListenerOutput {
	s.Protocol = &v
	return s
}

// SetState sets the State field's value.
func (s *DescribeListenerOutput) SetState(v string) *DescribeListenerOutput {
	s.State = &v
	return s
}

type FixedSourceReturnForDescribeListenerOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Enable *bool `type:"boolean" json:",omitempty"`
}

// String returns the string representation
func (s FixedSourceReturnForDescribeListenerOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s FixedSourceReturnForDescribeListenerOutput) GoString() string {
	return s.String()
}

// SetEnable sets the Enable field's value.
func (s *FixedSourceReturnForDescribeListenerOutput) SetEnable(v bool) *FixedSourceReturnForDescribeListenerOutput {
	s.Enable = &v
	return s
}

type IPAccessForDescribeListenerOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Enable *bool `type:"boolean" json:",omitempty"`

	FilterList []*string `type:"list" json:",omitempty"`

	FilterType *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s IPAccessForDescribeListenerOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s IPAccessForDescribeListenerOutput) GoString() string {
	return s.String()
}

// SetEnable sets the Enable field's value.
func (s *IPAccessForDescribeListenerOutput) SetEnable(v bool) *IPAccessForDescribeListenerOutput {
	s.Enable = &v
	return s
}

// SetFilterList sets the FilterList field's value.
func (s *IPAccessForDescribeListenerOutput) SetFilterList(v []*string) *IPAccessForDescribeListenerOutput {
	s.FilterList = v
	return s
}

// SetFilterType sets the FilterType field's value.
func (s *IPAccessForDescribeListenerOutput) SetFilterType(v string) *IPAccessForDescribeListenerOutput {
	s.FilterType = &v
	return s
}

type PortRangeForDescribeListenerOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	FromPort *int32 `type:"int32" json:",omitempty"`

	ToPort *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s PortRangeForDescribeListenerOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s PortRangeForDescribeListenerOutput) GoString() string {
	return s.String()
}

// SetFromPort sets the FromPort field's value.
func (s *PortRangeForDescribeListenerOutput) SetFromPort(v int32) *PortRangeForDescribeListenerOutput {
	s.FromPort = &v
	return s
}

// SetToPort sets the ToPort field's value.
func (s *PortRangeForDescribeListenerOutput) SetToPort(v int32) *PortRangeForDescribeListenerOutput {
	s.ToPort = &v
	return s
}
