// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package na

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDescribeHistoryDiagnosisCommon = "DescribeHistoryDiagnosis"

// DescribeHistoryDiagnosisCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeHistoryDiagnosisCommon operation. The "output" return
// value will be populated with the DescribeHistoryDiagnosisCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeHistoryDiagnosisCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeHistoryDiagnosisCommon Send returns without error.
//
// See DescribeHistoryDiagnosisCommon for more information on using the DescribeHistoryDiagnosisCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeHistoryDiagnosisCommonRequest method.
//    req, resp := client.DescribeHistoryDiagnosisCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *NA) DescribeHistoryDiagnosisCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeHistoryDiagnosisCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeHistoryDiagnosisCommon API operation for NA.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for NA's
// API operation DescribeHistoryDiagnosisCommon for usage and error information.
func (c *NA) DescribeHistoryDiagnosisCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeHistoryDiagnosisCommonRequest(input)
	return out, req.Send()
}

// DescribeHistoryDiagnosisCommonWithContext is the same as DescribeHistoryDiagnosisCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeHistoryDiagnosisCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *NA) DescribeHistoryDiagnosisCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeHistoryDiagnosisCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeHistoryDiagnosis = "DescribeHistoryDiagnosis"

// DescribeHistoryDiagnosisRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeHistoryDiagnosis operation. The "output" return
// value will be populated with the DescribeHistoryDiagnosisCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeHistoryDiagnosisCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeHistoryDiagnosisCommon Send returns without error.
//
// See DescribeHistoryDiagnosis for more information on using the DescribeHistoryDiagnosis
// API call, and error handling.
//
//    // Example sending a request using the DescribeHistoryDiagnosisRequest method.
//    req, resp := client.DescribeHistoryDiagnosisRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *NA) DescribeHistoryDiagnosisRequest(input *DescribeHistoryDiagnosisInput) (req *request.Request, output *DescribeHistoryDiagnosisOutput) {
	op := &request.Operation{
		Name:       opDescribeHistoryDiagnosis,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeHistoryDiagnosisInput{}
	}

	output = &DescribeHistoryDiagnosisOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeHistoryDiagnosis API operation for NA.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for NA's
// API operation DescribeHistoryDiagnosis for usage and error information.
func (c *NA) DescribeHistoryDiagnosis(input *DescribeHistoryDiagnosisInput) (*DescribeHistoryDiagnosisOutput, error) {
	req, out := c.DescribeHistoryDiagnosisRequest(input)
	return out, req.Send()
}

// DescribeHistoryDiagnosisWithContext is the same as DescribeHistoryDiagnosis with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeHistoryDiagnosis for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *NA) DescribeHistoryDiagnosisWithContext(ctx volcengine.Context, input *DescribeHistoryDiagnosisInput, opts ...request.Option) (*DescribeHistoryDiagnosisOutput, error) {
	req, out := c.DescribeHistoryDiagnosisRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DescribeHistoryDiagnosisInput struct {
	_ struct{} `type:"structure"`

	// ResourceInstanceId is a required field
	ResourceInstanceId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s DescribeHistoryDiagnosisInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeHistoryDiagnosisInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeHistoryDiagnosisInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DescribeHistoryDiagnosisInput"}
	if s.ResourceInstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("ResourceInstanceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetResourceInstanceId sets the ResourceInstanceId field's value.
func (s *DescribeHistoryDiagnosisInput) SetResourceInstanceId(v string) *DescribeHistoryDiagnosisInput {
	s.ResourceInstanceId = &v
	return s
}

type DescribeHistoryDiagnosisOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	HistoryDiagnosis []*HistoryDiagnosisForDescribeHistoryDiagnosisOutput `type:"list"`
}

// String returns the string representation
func (s DescribeHistoryDiagnosisOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeHistoryDiagnosisOutput) GoString() string {
	return s.String()
}

// SetHistoryDiagnosis sets the HistoryDiagnosis field's value.
func (s *DescribeHistoryDiagnosisOutput) SetHistoryDiagnosis(v []*HistoryDiagnosisForDescribeHistoryDiagnosisOutput) *DescribeHistoryDiagnosisOutput {
	s.HistoryDiagnosis = v
	return s
}

type HistoryDiagnosisForDescribeHistoryDiagnosisOutput struct {
	_ struct{} `type:"structure"`

	CreationTime *string `type:"string"`

	DiagnosisInstanceId *string `type:"string"`

	DiagnosisInstanceStatus *string `type:"string"`
}

// String returns the string representation
func (s HistoryDiagnosisForDescribeHistoryDiagnosisOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s HistoryDiagnosisForDescribeHistoryDiagnosisOutput) GoString() string {
	return s.String()
}

// SetCreationTime sets the CreationTime field's value.
func (s *HistoryDiagnosisForDescribeHistoryDiagnosisOutput) SetCreationTime(v string) *HistoryDiagnosisForDescribeHistoryDiagnosisOutput {
	s.CreationTime = &v
	return s
}

// SetDiagnosisInstanceId sets the DiagnosisInstanceId field's value.
func (s *HistoryDiagnosisForDescribeHistoryDiagnosisOutput) SetDiagnosisInstanceId(v string) *HistoryDiagnosisForDescribeHistoryDiagnosisOutput {
	s.DiagnosisInstanceId = &v
	return s
}

// SetDiagnosisInstanceStatus sets the DiagnosisInstanceStatus field's value.
func (s *HistoryDiagnosisForDescribeHistoryDiagnosisOutput) SetDiagnosisInstanceStatus(v string) *HistoryDiagnosisForDescribeHistoryDiagnosisOutput {
	s.DiagnosisInstanceStatus = &v
	return s
}
