// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package na

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opCreateDiagnosisInstanceCommon = "CreateDiagnosisInstance"

// CreateDiagnosisInstanceCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateDiagnosisInstanceCommon operation. The "output" return
// value will be populated with the CreateDiagnosisInstanceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateDiagnosisInstanceCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateDiagnosisInstanceCommon Send returns without error.
//
// See CreateDiagnosisInstanceCommon for more information on using the CreateDiagnosisInstanceCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateDiagnosisInstanceCommonRequest method.
//    req, resp := client.CreateDiagnosisInstanceCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *NA) CreateDiagnosisInstanceCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateDiagnosisInstanceCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// CreateDiagnosisInstanceCommon API operation for NA.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for NA's
// API operation CreateDiagnosisInstanceCommon for usage and error information.
func (c *NA) CreateDiagnosisInstanceCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateDiagnosisInstanceCommonRequest(input)
	return out, req.Send()
}

// CreateDiagnosisInstanceCommonWithContext is the same as CreateDiagnosisInstanceCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateDiagnosisInstanceCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *NA) CreateDiagnosisInstanceCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateDiagnosisInstanceCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateDiagnosisInstance = "CreateDiagnosisInstance"

// CreateDiagnosisInstanceRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateDiagnosisInstance operation. The "output" return
// value will be populated with the CreateDiagnosisInstanceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateDiagnosisInstanceCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateDiagnosisInstanceCommon Send returns without error.
//
// See CreateDiagnosisInstance for more information on using the CreateDiagnosisInstance
// API call, and error handling.
//
//    // Example sending a request using the CreateDiagnosisInstanceRequest method.
//    req, resp := client.CreateDiagnosisInstanceRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *NA) CreateDiagnosisInstanceRequest(input *CreateDiagnosisInstanceInput) (req *request.Request, output *CreateDiagnosisInstanceOutput) {
	op := &request.Operation{
		Name:       opCreateDiagnosisInstance,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateDiagnosisInstanceInput{}
	}

	output = &CreateDiagnosisInstanceOutput{}
	req = c.newRequest(op, input, output)

	return
}

// CreateDiagnosisInstance API operation for NA.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for NA's
// API operation CreateDiagnosisInstance for usage and error information.
func (c *NA) CreateDiagnosisInstance(input *CreateDiagnosisInstanceInput) (*CreateDiagnosisInstanceOutput, error) {
	req, out := c.CreateDiagnosisInstanceRequest(input)
	return out, req.Send()
}

// CreateDiagnosisInstanceWithContext is the same as CreateDiagnosisInstance with the addition of
// the ability to pass a context and additional request options.
//
// See CreateDiagnosisInstance for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *NA) CreateDiagnosisInstanceWithContext(ctx volcengine.Context, input *CreateDiagnosisInstanceInput, opts ...request.Option) (*CreateDiagnosisInstanceOutput, error) {
	req, out := c.CreateDiagnosisInstanceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type CreateDiagnosisInstanceInput struct {
	_ struct{} `type:"structure"`

	// ResourceInstanceId is a required field
	ResourceInstanceId *string `type:"string" required:"true"`

	// ResourceRegion is a required field
	ResourceRegion *string `type:"string" required:"true"`

	// ResourceType is a required field
	ResourceType *string `type:"string" required:"true"`
}

// String returns the string representation
func (s CreateDiagnosisInstanceInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateDiagnosisInstanceInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateDiagnosisInstanceInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CreateDiagnosisInstanceInput"}
	if s.ResourceInstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("ResourceInstanceId"))
	}
	if s.ResourceRegion == nil {
		invalidParams.Add(request.NewErrParamRequired("ResourceRegion"))
	}
	if s.ResourceType == nil {
		invalidParams.Add(request.NewErrParamRequired("ResourceType"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetResourceInstanceId sets the ResourceInstanceId field's value.
func (s *CreateDiagnosisInstanceInput) SetResourceInstanceId(v string) *CreateDiagnosisInstanceInput {
	s.ResourceInstanceId = &v
	return s
}

// SetResourceRegion sets the ResourceRegion field's value.
func (s *CreateDiagnosisInstanceInput) SetResourceRegion(v string) *CreateDiagnosisInstanceInput {
	s.ResourceRegion = &v
	return s
}

// SetResourceType sets the ResourceType field's value.
func (s *CreateDiagnosisInstanceInput) SetResourceType(v string) *CreateDiagnosisInstanceInput {
	s.ResourceType = &v
	return s
}

type CreateDiagnosisInstanceOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	DiagnosisInstanceId *string `type:"string"`

	RequestId *string `type:"string"`
}

// String returns the string representation
func (s CreateDiagnosisInstanceOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateDiagnosisInstanceOutput) GoString() string {
	return s.String()
}

// SetDiagnosisInstanceId sets the DiagnosisInstanceId field's value.
func (s *CreateDiagnosisInstanceOutput) SetDiagnosisInstanceId(v string) *CreateDiagnosisInstanceOutput {
	s.DiagnosisInstanceId = &v
	return s
}

// SetRequestId sets the RequestId field's value.
func (s *CreateDiagnosisInstanceOutput) SetRequestId(v string) *CreateDiagnosisInstanceOutput {
	s.RequestId = &v
	return s
}
