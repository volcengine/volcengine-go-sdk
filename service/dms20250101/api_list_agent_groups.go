// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package dms20250101

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opListAgentGroupsCommon = "ListAgentGroups"

// ListAgentGroupsCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ListAgentGroupsCommon operation. The "output" return
// value will be populated with the ListAgentGroupsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListAgentGroupsCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListAgentGroupsCommon Send returns without error.
//
// See ListAgentGroupsCommon for more information on using the ListAgentGroupsCommon
// API call, and error handling.
//
//    // Example sending a request using the ListAgentGroupsCommonRequest method.
//    req, resp := client.ListAgentGroupsCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DMS20250101) ListAgentGroupsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opListAgentGroupsCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// ListAgentGroupsCommon API operation for DMS20250101.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for DMS20250101's
// API operation ListAgentGroupsCommon for usage and error information.
func (c *DMS20250101) ListAgentGroupsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ListAgentGroupsCommonRequest(input)
	return out, req.Send()
}

// ListAgentGroupsCommonWithContext is the same as ListAgentGroupsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ListAgentGroupsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DMS20250101) ListAgentGroupsCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ListAgentGroupsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListAgentGroups = "ListAgentGroups"

// ListAgentGroupsRequest generates a "volcengine/request.Request" representing the
// client's request for the ListAgentGroups operation. The "output" return
// value will be populated with the ListAgentGroupsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListAgentGroupsCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListAgentGroupsCommon Send returns without error.
//
// See ListAgentGroups for more information on using the ListAgentGroups
// API call, and error handling.
//
//    // Example sending a request using the ListAgentGroupsRequest method.
//    req, resp := client.ListAgentGroupsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DMS20250101) ListAgentGroupsRequest(input *ListAgentGroupsInput) (req *request.Request, output *ListAgentGroupsOutput) {
	op := &request.Operation{
		Name:       opListAgentGroups,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListAgentGroupsInput{}
	}

	output = &ListAgentGroupsOutput{}
	req = c.newRequest(op, input, output)

	return
}

// ListAgentGroups API operation for DMS20250101.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for DMS20250101's
// API operation ListAgentGroups for usage and error information.
func (c *DMS20250101) ListAgentGroups(input *ListAgentGroupsInput) (*ListAgentGroupsOutput, error) {
	req, out := c.ListAgentGroupsRequest(input)
	return out, req.Send()
}

// ListAgentGroupsWithContext is the same as ListAgentGroups with the addition of
// the ability to pass a context and additional request options.
//
// See ListAgentGroups for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DMS20250101) ListAgentGroupsWithContext(ctx volcengine.Context, input *ListAgentGroupsInput, opts ...request.Option) (*ListAgentGroupsOutput, error) {
	req, out := c.ListAgentGroupsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ItemListForListAgentGroupsOutput struct {
	_ struct{} `type:"structure"`

	AccountId *string `type:"string"`

	AgentGroupName *string `type:"string"`

	CreateAt *string `type:"string"`

	DeployArea *string `type:"string"`

	DeployType *string `type:"string"`

	Id *string `type:"string"`

	UpdateAt *string `type:"string"`
}

// String returns the string representation
func (s ItemListForListAgentGroupsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ItemListForListAgentGroupsOutput) GoString() string {
	return s.String()
}

// SetAccountId sets the AccountId field's value.
func (s *ItemListForListAgentGroupsOutput) SetAccountId(v string) *ItemListForListAgentGroupsOutput {
	s.AccountId = &v
	return s
}

// SetAgentGroupName sets the AgentGroupName field's value.
func (s *ItemListForListAgentGroupsOutput) SetAgentGroupName(v string) *ItemListForListAgentGroupsOutput {
	s.AgentGroupName = &v
	return s
}

// SetCreateAt sets the CreateAt field's value.
func (s *ItemListForListAgentGroupsOutput) SetCreateAt(v string) *ItemListForListAgentGroupsOutput {
	s.CreateAt = &v
	return s
}

// SetDeployArea sets the DeployArea field's value.
func (s *ItemListForListAgentGroupsOutput) SetDeployArea(v string) *ItemListForListAgentGroupsOutput {
	s.DeployArea = &v
	return s
}

// SetDeployType sets the DeployType field's value.
func (s *ItemListForListAgentGroupsOutput) SetDeployType(v string) *ItemListForListAgentGroupsOutput {
	s.DeployType = &v
	return s
}

// SetId sets the Id field's value.
func (s *ItemListForListAgentGroupsOutput) SetId(v string) *ItemListForListAgentGroupsOutput {
	s.Id = &v
	return s
}

// SetUpdateAt sets the UpdateAt field's value.
func (s *ItemListForListAgentGroupsOutput) SetUpdateAt(v string) *ItemListForListAgentGroupsOutput {
	s.UpdateAt = &v
	return s
}

type ListAgentGroupsInput struct {
	_ struct{} `type:"structure"`

	FetchCount *bool `type:"boolean"`

	// IdCursor is a required field
	IdCursor *string `type:"string" required:"true"`

	// PageNumber is a required field
	PageNumber *int32 `type:"int32" required:"true"`

	// PageSize is a required field
	PageSize *int32 `type:"int32" required:"true"`
}

// String returns the string representation
func (s ListAgentGroupsInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListAgentGroupsInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ListAgentGroupsInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ListAgentGroupsInput"}
	if s.IdCursor == nil {
		invalidParams.Add(request.NewErrParamRequired("IdCursor"))
	}
	if s.PageNumber == nil {
		invalidParams.Add(request.NewErrParamRequired("PageNumber"))
	}
	if s.PageSize == nil {
		invalidParams.Add(request.NewErrParamRequired("PageSize"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetFetchCount sets the FetchCount field's value.
func (s *ListAgentGroupsInput) SetFetchCount(v bool) *ListAgentGroupsInput {
	s.FetchCount = &v
	return s
}

// SetIdCursor sets the IdCursor field's value.
func (s *ListAgentGroupsInput) SetIdCursor(v string) *ListAgentGroupsInput {
	s.IdCursor = &v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *ListAgentGroupsInput) SetPageNumber(v int32) *ListAgentGroupsInput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *ListAgentGroupsInput) SetPageSize(v int32) *ListAgentGroupsInput {
	s.PageSize = &v
	return s
}

type ListAgentGroupsOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	HasNext *bool `type:"boolean"`

	ItemList []*ItemListForListAgentGroupsOutput `type:"list"`

	TotalCount *int32 `type:"int32"`
}

// String returns the string representation
func (s ListAgentGroupsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListAgentGroupsOutput) GoString() string {
	return s.String()
}

// SetHasNext sets the HasNext field's value.
func (s *ListAgentGroupsOutput) SetHasNext(v bool) *ListAgentGroupsOutput {
	s.HasNext = &v
	return s
}

// SetItemList sets the ItemList field's value.
func (s *ListAgentGroupsOutput) SetItemList(v []*ItemListForListAgentGroupsOutput) *ListAgentGroupsOutput {
	s.ItemList = v
	return s
}

// SetTotalCount sets the TotalCount field's value.
func (s *ListAgentGroupsOutput) SetTotalCount(v int32) *ListAgentGroupsOutput {
	s.TotalCount = &v
	return s
}
