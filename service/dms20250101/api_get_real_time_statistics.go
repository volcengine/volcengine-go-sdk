// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package dms20250101

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opGetRealTimeStatisticsCommon = "GetRealTimeStatistics"

// GetRealTimeStatisticsCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the GetRealTimeStatisticsCommon operation. The "output" return
// value will be populated with the GetRealTimeStatisticsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetRealTimeStatisticsCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetRealTimeStatisticsCommon Send returns without error.
//
// See GetRealTimeStatisticsCommon for more information on using the GetRealTimeStatisticsCommon
// API call, and error handling.
//
//    // Example sending a request using the GetRealTimeStatisticsCommonRequest method.
//    req, resp := client.GetRealTimeStatisticsCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DMS20250101) GetRealTimeStatisticsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opGetRealTimeStatisticsCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetRealTimeStatisticsCommon API operation for DMS20250101.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for DMS20250101's
// API operation GetRealTimeStatisticsCommon for usage and error information.
func (c *DMS20250101) GetRealTimeStatisticsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.GetRealTimeStatisticsCommonRequest(input)
	return out, req.Send()
}

// GetRealTimeStatisticsCommonWithContext is the same as GetRealTimeStatisticsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See GetRealTimeStatisticsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DMS20250101) GetRealTimeStatisticsCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.GetRealTimeStatisticsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opGetRealTimeStatistics = "GetRealTimeStatistics"

// GetRealTimeStatisticsRequest generates a "volcengine/request.Request" representing the
// client's request for the GetRealTimeStatistics operation. The "output" return
// value will be populated with the GetRealTimeStatisticsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetRealTimeStatisticsCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetRealTimeStatisticsCommon Send returns without error.
//
// See GetRealTimeStatistics for more information on using the GetRealTimeStatistics
// API call, and error handling.
//
//    // Example sending a request using the GetRealTimeStatisticsRequest method.
//    req, resp := client.GetRealTimeStatisticsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DMS20250101) GetRealTimeStatisticsRequest(input *GetRealTimeStatisticsInput) (req *request.Request, output *GetRealTimeStatisticsOutput) {
	op := &request.Operation{
		Name:       opGetRealTimeStatistics,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &GetRealTimeStatisticsInput{}
	}

	output = &GetRealTimeStatisticsOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetRealTimeStatistics API operation for DMS20250101.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for DMS20250101's
// API operation GetRealTimeStatistics for usage and error information.
func (c *DMS20250101) GetRealTimeStatistics(input *GetRealTimeStatisticsInput) (*GetRealTimeStatisticsOutput, error) {
	req, out := c.GetRealTimeStatisticsRequest(input)
	return out, req.Send()
}

// GetRealTimeStatisticsWithContext is the same as GetRealTimeStatistics with the addition of
// the ability to pass a context and additional request options.
//
// See GetRealTimeStatistics for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DMS20250101) GetRealTimeStatisticsWithContext(ctx volcengine.Context, input *GetRealTimeStatisticsInput, opts ...request.Option) (*GetRealTimeStatisticsOutput, error) {
	req, out := c.GetRealTimeStatisticsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type GetRealTimeStatisticsInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	FetchTransferContext *bool `type:"boolean" json:",omitempty"`

	// Id is a required field
	Id *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s GetRealTimeStatisticsInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetRealTimeStatisticsInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *GetRealTimeStatisticsInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "GetRealTimeStatisticsInput"}
	if s.Id == nil {
		invalidParams.Add(request.NewErrParamRequired("Id"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetFetchTransferContext sets the FetchTransferContext field's value.
func (s *GetRealTimeStatisticsInput) SetFetchTransferContext(v bool) *GetRealTimeStatisticsInput {
	s.FetchTransferContext = &v
	return s
}

// SetId sets the Id field's value.
func (s *GetRealTimeStatisticsInput) SetId(v string) *GetRealTimeStatisticsInput {
	s.Id = &v
	return s
}

type GetRealTimeStatisticsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Bandwidth *string `type:"string" json:",omitempty"`

	FailedBytes *string `type:"string" json:",omitempty"`

	FailedCount *string `type:"string" json:",omitempty"`

	NonexistentBytes *string `type:"string" json:",omitempty"`

	NonexistentCount *string `type:"string" json:",omitempty"`

	RemainingBytes *string `type:"string" json:",omitempty"`

	RemainingCount *string `type:"string" json:",omitempty"`

	RemainingSeconds *string `type:"string" json:",omitempty"`

	SkippedBytes *string `type:"string" json:",omitempty"`

	SkippedCount *string `type:"string" json:",omitempty"`

	SucceedBytes *string `type:"string" json:",omitempty"`

	SucceedCount *string `type:"string" json:",omitempty"`

	TotalBytes *string `type:"string" json:",omitempty"`

	TotalCount *string `type:"string" json:",omitempty"`

	TotalSeconds *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s GetRealTimeStatisticsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetRealTimeStatisticsOutput) GoString() string {
	return s.String()
}

// SetBandwidth sets the Bandwidth field's value.
func (s *GetRealTimeStatisticsOutput) SetBandwidth(v string) *GetRealTimeStatisticsOutput {
	s.Bandwidth = &v
	return s
}

// SetFailedBytes sets the FailedBytes field's value.
func (s *GetRealTimeStatisticsOutput) SetFailedBytes(v string) *GetRealTimeStatisticsOutput {
	s.FailedBytes = &v
	return s
}

// SetFailedCount sets the FailedCount field's value.
func (s *GetRealTimeStatisticsOutput) SetFailedCount(v string) *GetRealTimeStatisticsOutput {
	s.FailedCount = &v
	return s
}

// SetNonexistentBytes sets the NonexistentBytes field's value.
func (s *GetRealTimeStatisticsOutput) SetNonexistentBytes(v string) *GetRealTimeStatisticsOutput {
	s.NonexistentBytes = &v
	return s
}

// SetNonexistentCount sets the NonexistentCount field's value.
func (s *GetRealTimeStatisticsOutput) SetNonexistentCount(v string) *GetRealTimeStatisticsOutput {
	s.NonexistentCount = &v
	return s
}

// SetRemainingBytes sets the RemainingBytes field's value.
func (s *GetRealTimeStatisticsOutput) SetRemainingBytes(v string) *GetRealTimeStatisticsOutput {
	s.RemainingBytes = &v
	return s
}

// SetRemainingCount sets the RemainingCount field's value.
func (s *GetRealTimeStatisticsOutput) SetRemainingCount(v string) *GetRealTimeStatisticsOutput {
	s.RemainingCount = &v
	return s
}

// SetRemainingSeconds sets the RemainingSeconds field's value.
func (s *GetRealTimeStatisticsOutput) SetRemainingSeconds(v string) *GetRealTimeStatisticsOutput {
	s.RemainingSeconds = &v
	return s
}

// SetSkippedBytes sets the SkippedBytes field's value.
func (s *GetRealTimeStatisticsOutput) SetSkippedBytes(v string) *GetRealTimeStatisticsOutput {
	s.SkippedBytes = &v
	return s
}

// SetSkippedCount sets the SkippedCount field's value.
func (s *GetRealTimeStatisticsOutput) SetSkippedCount(v string) *GetRealTimeStatisticsOutput {
	s.SkippedCount = &v
	return s
}

// SetSucceedBytes sets the SucceedBytes field's value.
func (s *GetRealTimeStatisticsOutput) SetSucceedBytes(v string) *GetRealTimeStatisticsOutput {
	s.SucceedBytes = &v
	return s
}

// SetSucceedCount sets the SucceedCount field's value.
func (s *GetRealTimeStatisticsOutput) SetSucceedCount(v string) *GetRealTimeStatisticsOutput {
	s.SucceedCount = &v
	return s
}

// SetTotalBytes sets the TotalBytes field's value.
func (s *GetRealTimeStatisticsOutput) SetTotalBytes(v string) *GetRealTimeStatisticsOutput {
	s.TotalBytes = &v
	return s
}

// SetTotalCount sets the TotalCount field's value.
func (s *GetRealTimeStatisticsOutput) SetTotalCount(v string) *GetRealTimeStatisticsOutput {
	s.TotalCount = &v
	return s
}

// SetTotalSeconds sets the TotalSeconds field's value.
func (s *GetRealTimeStatisticsOutput) SetTotalSeconds(v string) *GetRealTimeStatisticsOutput {
	s.TotalSeconds = &v
	return s
}
