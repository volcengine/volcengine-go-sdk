// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package speechsaasprod

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opFormalizeResourcePacksCommon = "FormalizeResourcePacks"

// FormalizeResourcePacksCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the FormalizeResourcePacksCommon operation. The "output" return
// value will be populated with the FormalizeResourcePacksCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned FormalizeResourcePacksCommon Request to send the API call to the service.
// the "output" return value is not valid until after FormalizeResourcePacksCommon Send returns without error.
//
// See FormalizeResourcePacksCommon for more information on using the FormalizeResourcePacksCommon
// API call, and error handling.
//
//    // Example sending a request using the FormalizeResourcePacksCommonRequest method.
//    req, resp := client.FormalizeResourcePacksCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SPEECHSAASPROD) FormalizeResourcePacksCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opFormalizeResourcePacksCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// FormalizeResourcePacksCommon API operation for SPEECH_SAAS_PROD.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SPEECH_SAAS_PROD's
// API operation FormalizeResourcePacksCommon for usage and error information.
func (c *SPEECHSAASPROD) FormalizeResourcePacksCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.FormalizeResourcePacksCommonRequest(input)
	return out, req.Send()
}

// FormalizeResourcePacksCommonWithContext is the same as FormalizeResourcePacksCommon with the addition of
// the ability to pass a context and additional request options.
//
// See FormalizeResourcePacksCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SPEECHSAASPROD) FormalizeResourcePacksCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.FormalizeResourcePacksCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opFormalizeResourcePacks = "FormalizeResourcePacks"

// FormalizeResourcePacksRequest generates a "volcengine/request.Request" representing the
// client's request for the FormalizeResourcePacks operation. The "output" return
// value will be populated with the FormalizeResourcePacksCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned FormalizeResourcePacksCommon Request to send the API call to the service.
// the "output" return value is not valid until after FormalizeResourcePacksCommon Send returns without error.
//
// See FormalizeResourcePacks for more information on using the FormalizeResourcePacks
// API call, and error handling.
//
//    // Example sending a request using the FormalizeResourcePacksRequest method.
//    req, resp := client.FormalizeResourcePacksRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SPEECHSAASPROD) FormalizeResourcePacksRequest(input *FormalizeResourcePacksInput) (req *request.Request, output *FormalizeResourcePacksOutput) {
	op := &request.Operation{
		Name:       opFormalizeResourcePacks,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &FormalizeResourcePacksInput{}
	}

	output = &FormalizeResourcePacksOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// FormalizeResourcePacks API operation for SPEECH_SAAS_PROD.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SPEECH_SAAS_PROD's
// API operation FormalizeResourcePacks for usage and error information.
func (c *SPEECHSAASPROD) FormalizeResourcePacks(input *FormalizeResourcePacksInput) (*FormalizeResourcePacksOutput, error) {
	req, out := c.FormalizeResourcePacksRequest(input)
	return out, req.Send()
}

// FormalizeResourcePacksWithContext is the same as FormalizeResourcePacks with the addition of
// the ability to pass a context and additional request options.
//
// See FormalizeResourcePacks for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SPEECHSAASPROD) FormalizeResourcePacksWithContext(ctx volcengine.Context, input *FormalizeResourcePacksInput, opts ...request.Option) (*FormalizeResourcePacksOutput, error) {
	req, out := c.FormalizeResourcePacksRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type FormalizeResourcePacksInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// ProjectName is a required field
	ProjectName *string `type:"string" json:",omitempty" required:"true"`

	Tags []*TagForFormalizeResourcePacksInput `type:"list" json:",omitempty"`

	// Times is a required field
	Times *int32 `type:"int32" json:",omitempty" required:"true"`

	// TrainID is a required field
	TrainID *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s FormalizeResourcePacksInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s FormalizeResourcePacksInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *FormalizeResourcePacksInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "FormalizeResourcePacksInput"}
	if s.ProjectName == nil {
		invalidParams.Add(request.NewErrParamRequired("ProjectName"))
	}
	if s.Times == nil {
		invalidParams.Add(request.NewErrParamRequired("Times"))
	}
	if s.TrainID == nil {
		invalidParams.Add(request.NewErrParamRequired("TrainID"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetProjectName sets the ProjectName field's value.
func (s *FormalizeResourcePacksInput) SetProjectName(v string) *FormalizeResourcePacksInput {
	s.ProjectName = &v
	return s
}

// SetTags sets the Tags field's value.
func (s *FormalizeResourcePacksInput) SetTags(v []*TagForFormalizeResourcePacksInput) *FormalizeResourcePacksInput {
	s.Tags = v
	return s
}

// SetTimes sets the Times field's value.
func (s *FormalizeResourcePacksInput) SetTimes(v int32) *FormalizeResourcePacksInput {
	s.Times = &v
	return s
}

// SetTrainID sets the TrainID field's value.
func (s *FormalizeResourcePacksInput) SetTrainID(v string) *FormalizeResourcePacksInput {
	s.TrainID = &v
	return s
}

type FormalizeResourcePacksOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	OrderIDs []*string `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s FormalizeResourcePacksOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s FormalizeResourcePacksOutput) GoString() string {
	return s.String()
}

// SetOrderIDs sets the OrderIDs field's value.
func (s *FormalizeResourcePacksOutput) SetOrderIDs(v []*string) *FormalizeResourcePacksOutput {
	s.OrderIDs = v
	return s
}

type TagForFormalizeResourcePacksInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Key *string `type:"string" json:",omitempty"`

	Value *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s TagForFormalizeResourcePacksInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s TagForFormalizeResourcePacksInput) GoString() string {
	return s.String()
}

// SetKey sets the Key field's value.
func (s *TagForFormalizeResourcePacksInput) SetKey(v string) *TagForFormalizeResourcePacksInput {
	s.Key = &v
	return s
}

// SetValue sets the Value field's value.
func (s *TagForFormalizeResourcePacksInput) SetValue(v string) *TagForFormalizeResourcePacksInput {
	s.Value = &v
	return s
}
