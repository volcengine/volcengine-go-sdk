// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package speechsaasprod

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opActivateServiceCommon = "ActivateService"

// ActivateServiceCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ActivateServiceCommon operation. The "output" return
// value will be populated with the ActivateServiceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ActivateServiceCommon Request to send the API call to the service.
// the "output" return value is not valid until after ActivateServiceCommon Send returns without error.
//
// See ActivateServiceCommon for more information on using the ActivateServiceCommon
// API call, and error handling.
//
//    // Example sending a request using the ActivateServiceCommonRequest method.
//    req, resp := client.ActivateServiceCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SPEECHSAASPROD) ActivateServiceCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opActivateServiceCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ActivateServiceCommon API operation for SPEECH_SAAS_PROD.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SPEECH_SAAS_PROD's
// API operation ActivateServiceCommon for usage and error information.
func (c *SPEECHSAASPROD) ActivateServiceCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ActivateServiceCommonRequest(input)
	return out, req.Send()
}

// ActivateServiceCommonWithContext is the same as ActivateServiceCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ActivateServiceCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SPEECHSAASPROD) ActivateServiceCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ActivateServiceCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opActivateService = "ActivateService"

// ActivateServiceRequest generates a "volcengine/request.Request" representing the
// client's request for the ActivateService operation. The "output" return
// value will be populated with the ActivateServiceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ActivateServiceCommon Request to send the API call to the service.
// the "output" return value is not valid until after ActivateServiceCommon Send returns without error.
//
// See ActivateService for more information on using the ActivateService
// API call, and error handling.
//
//    // Example sending a request using the ActivateServiceRequest method.
//    req, resp := client.ActivateServiceRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SPEECHSAASPROD) ActivateServiceRequest(input *ActivateServiceInput) (req *request.Request, output *ActivateServiceOutput) {
	op := &request.Operation{
		Name:       opActivateService,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ActivateServiceInput{}
	}

	output = &ActivateServiceOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ActivateService API operation for SPEECH_SAAS_PROD.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SPEECH_SAAS_PROD's
// API operation ActivateService for usage and error information.
func (c *SPEECHSAASPROD) ActivateService(input *ActivateServiceInput) (*ActivateServiceOutput, error) {
	req, out := c.ActivateServiceRequest(input)
	return out, req.Send()
}

// ActivateServiceWithContext is the same as ActivateService with the addition of
// the ability to pass a context and additional request options.
//
// See ActivateService for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SPEECHSAASPROD) ActivateServiceWithContext(ctx volcengine.Context, input *ActivateServiceInput, opts ...request.Option) (*ActivateServiceOutput, error) {
	req, out := c.ActivateServiceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ActivateServiceInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	BlueprintID *int32 `type:"int32" json:",omitempty"`

	// ProjectName is a required field
	ProjectName *string `type:"string" json:",omitempty" required:"true"`

	ResourceID *string `type:"string" json:",omitempty"`

	Tags []*TagForActivateServiceInput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s ActivateServiceInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ActivateServiceInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ActivateServiceInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ActivateServiceInput"}
	if s.ProjectName == nil {
		invalidParams.Add(request.NewErrParamRequired("ProjectName"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetBlueprintID sets the BlueprintID field's value.
func (s *ActivateServiceInput) SetBlueprintID(v int32) *ActivateServiceInput {
	s.BlueprintID = &v
	return s
}

// SetProjectName sets the ProjectName field's value.
func (s *ActivateServiceInput) SetProjectName(v string) *ActivateServiceInput {
	s.ProjectName = &v
	return s
}

// SetResourceID sets the ResourceID field's value.
func (s *ActivateServiceInput) SetResourceID(v string) *ActivateServiceInput {
	s.ResourceID = &v
	return s
}

// SetTags sets the Tags field's value.
func (s *ActivateServiceInput) SetTags(v []*TagForActivateServiceInput) *ActivateServiceInput {
	s.Tags = v
	return s
}

type ActivateServiceOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s ActivateServiceOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ActivateServiceOutput) GoString() string {
	return s.String()
}

type TagForActivateServiceInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Key *string `type:"string" json:",omitempty"`

	Value *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s TagForActivateServiceInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s TagForActivateServiceInput) GoString() string {
	return s.String()
}

// SetKey sets the Key field's value.
func (s *TagForActivateServiceInput) SetKey(v string) *TagForActivateServiceInput {
	s.Key = &v
	return s
}

// SetValue sets the Value field's value.
func (s *TagForActivateServiceInput) SetValue(v string) *TagForActivateServiceInput {
	s.Value = &v
	return s
}
