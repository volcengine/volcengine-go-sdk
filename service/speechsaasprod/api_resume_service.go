// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package speechsaasprod

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opResumeServiceCommon = "ResumeService"

// ResumeServiceCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ResumeServiceCommon operation. The "output" return
// value will be populated with the ResumeServiceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ResumeServiceCommon Request to send the API call to the service.
// the "output" return value is not valid until after ResumeServiceCommon Send returns without error.
//
// See ResumeServiceCommon for more information on using the ResumeServiceCommon
// API call, and error handling.
//
//    // Example sending a request using the ResumeServiceCommonRequest method.
//    req, resp := client.ResumeServiceCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SPEECHSAASPROD) ResumeServiceCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opResumeServiceCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ResumeServiceCommon API operation for SPEECH_SAAS_PROD.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SPEECH_SAAS_PROD's
// API operation ResumeServiceCommon for usage and error information.
func (c *SPEECHSAASPROD) ResumeServiceCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ResumeServiceCommonRequest(input)
	return out, req.Send()
}

// ResumeServiceCommonWithContext is the same as ResumeServiceCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ResumeServiceCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SPEECHSAASPROD) ResumeServiceCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ResumeServiceCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opResumeService = "ResumeService"

// ResumeServiceRequest generates a "volcengine/request.Request" representing the
// client's request for the ResumeService operation. The "output" return
// value will be populated with the ResumeServiceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ResumeServiceCommon Request to send the API call to the service.
// the "output" return value is not valid until after ResumeServiceCommon Send returns without error.
//
// See ResumeService for more information on using the ResumeService
// API call, and error handling.
//
//    // Example sending a request using the ResumeServiceRequest method.
//    req, resp := client.ResumeServiceRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SPEECHSAASPROD) ResumeServiceRequest(input *ResumeServiceInput) (req *request.Request, output *ResumeServiceOutput) {
	op := &request.Operation{
		Name:       opResumeService,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ResumeServiceInput{}
	}

	output = &ResumeServiceOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ResumeService API operation for SPEECH_SAAS_PROD.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SPEECH_SAAS_PROD's
// API operation ResumeService for usage and error information.
func (c *SPEECHSAASPROD) ResumeService(input *ResumeServiceInput) (*ResumeServiceOutput, error) {
	req, out := c.ResumeServiceRequest(input)
	return out, req.Send()
}

// ResumeServiceWithContext is the same as ResumeService with the addition of
// the ability to pass a context and additional request options.
//
// See ResumeService for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SPEECHSAASPROD) ResumeServiceWithContext(ctx volcengine.Context, input *ResumeServiceInput, opts ...request.Option) (*ResumeServiceOutput, error) {
	req, out := c.ResumeServiceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ResumeServiceInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// ProjectName is a required field
	ProjectName *string `type:"string" json:",omitempty" required:"true"`

	ResourceIDs []*string `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s ResumeServiceInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ResumeServiceInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ResumeServiceInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ResumeServiceInput"}
	if s.ProjectName == nil {
		invalidParams.Add(request.NewErrParamRequired("ProjectName"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetProjectName sets the ProjectName field's value.
func (s *ResumeServiceInput) SetProjectName(v string) *ResumeServiceInput {
	s.ProjectName = &v
	return s
}

// SetResourceIDs sets the ResourceIDs field's value.
func (s *ResumeServiceInput) SetResourceIDs(v []*string) *ResumeServiceInput {
	s.ResourceIDs = v
	return s
}

type ResumeServiceOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s ResumeServiceOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ResumeServiceOutput) GoString() string {
	return s.String()
}
