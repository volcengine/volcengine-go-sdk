// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package speechsaasprod

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opTerminateServiceCommon = "TerminateService"

// TerminateServiceCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the TerminateServiceCommon operation. The "output" return
// value will be populated with the TerminateServiceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned TerminateServiceCommon Request to send the API call to the service.
// the "output" return value is not valid until after TerminateServiceCommon Send returns without error.
//
// See TerminateServiceCommon for more information on using the TerminateServiceCommon
// API call, and error handling.
//
//    // Example sending a request using the TerminateServiceCommonRequest method.
//    req, resp := client.TerminateServiceCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SPEECHSAASPROD) TerminateServiceCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opTerminateServiceCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// TerminateServiceCommon API operation for SPEECH_SAAS_PROD.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SPEECH_SAAS_PROD's
// API operation TerminateServiceCommon for usage and error information.
func (c *SPEECHSAASPROD) TerminateServiceCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.TerminateServiceCommonRequest(input)
	return out, req.Send()
}

// TerminateServiceCommonWithContext is the same as TerminateServiceCommon with the addition of
// the ability to pass a context and additional request options.
//
// See TerminateServiceCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SPEECHSAASPROD) TerminateServiceCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.TerminateServiceCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opTerminateService = "TerminateService"

// TerminateServiceRequest generates a "volcengine/request.Request" representing the
// client's request for the TerminateService operation. The "output" return
// value will be populated with the TerminateServiceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned TerminateServiceCommon Request to send the API call to the service.
// the "output" return value is not valid until after TerminateServiceCommon Send returns without error.
//
// See TerminateService for more information on using the TerminateService
// API call, and error handling.
//
//    // Example sending a request using the TerminateServiceRequest method.
//    req, resp := client.TerminateServiceRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SPEECHSAASPROD) TerminateServiceRequest(input *TerminateServiceInput) (req *request.Request, output *TerminateServiceOutput) {
	op := &request.Operation{
		Name:       opTerminateService,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &TerminateServiceInput{}
	}

	output = &TerminateServiceOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// TerminateService API operation for SPEECH_SAAS_PROD.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SPEECH_SAAS_PROD's
// API operation TerminateService for usage and error information.
func (c *SPEECHSAASPROD) TerminateService(input *TerminateServiceInput) (*TerminateServiceOutput, error) {
	req, out := c.TerminateServiceRequest(input)
	return out, req.Send()
}

// TerminateServiceWithContext is the same as TerminateService with the addition of
// the ability to pass a context and additional request options.
//
// See TerminateService for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SPEECHSAASPROD) TerminateServiceWithContext(ctx volcengine.Context, input *TerminateServiceInput, opts ...request.Option) (*TerminateServiceOutput, error) {
	req, out := c.TerminateServiceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type TerminateServiceInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	ProjectName *string `type:"string" json:",omitempty"`

	ResourceIDs []*string `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s TerminateServiceInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s TerminateServiceInput) GoString() string {
	return s.String()
}

// SetProjectName sets the ProjectName field's value.
func (s *TerminateServiceInput) SetProjectName(v string) *TerminateServiceInput {
	s.ProjectName = &v
	return s
}

// SetResourceIDs sets the ResourceIDs field's value.
func (s *TerminateServiceInput) SetResourceIDs(v []*string) *TerminateServiceInput {
	s.ResourceIDs = v
	return s
}

type TerminateServiceOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s TerminateServiceOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s TerminateServiceOutput) GoString() string {
	return s.String()
}
