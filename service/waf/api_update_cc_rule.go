// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package waf

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opUpdateCCRuleCommon = "UpdateCCRule"

// UpdateCCRuleCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateCCRuleCommon operation. The "output" return
// value will be populated with the UpdateCCRuleCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateCCRuleCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateCCRuleCommon Send returns without error.
//
// See UpdateCCRuleCommon for more information on using the UpdateCCRuleCommon
// API call, and error handling.
//
//    // Example sending a request using the UpdateCCRuleCommonRequest method.
//    req, resp := client.UpdateCCRuleCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *WAF) UpdateCCRuleCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opUpdateCCRuleCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateCCRuleCommon API operation for WAF.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for WAF's
// API operation UpdateCCRuleCommon for usage and error information.
func (c *WAF) UpdateCCRuleCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.UpdateCCRuleCommonRequest(input)
	return out, req.Send()
}

// UpdateCCRuleCommonWithContext is the same as UpdateCCRuleCommon with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateCCRuleCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *WAF) UpdateCCRuleCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.UpdateCCRuleCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opUpdateCCRule = "UpdateCCRule"

// UpdateCCRuleRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateCCRule operation. The "output" return
// value will be populated with the UpdateCCRuleCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateCCRuleCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateCCRuleCommon Send returns without error.
//
// See UpdateCCRule for more information on using the UpdateCCRule
// API call, and error handling.
//
//    // Example sending a request using the UpdateCCRuleRequest method.
//    req, resp := client.UpdateCCRuleRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *WAF) UpdateCCRuleRequest(input *UpdateCCRuleInput) (req *request.Request, output *UpdateCCRuleOutput) {
	op := &request.Operation{
		Name:       opUpdateCCRule,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UpdateCCRuleInput{}
	}

	output = &UpdateCCRuleOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateCCRule API operation for WAF.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for WAF's
// API operation UpdateCCRule for usage and error information.
func (c *WAF) UpdateCCRule(input *UpdateCCRuleInput) (*UpdateCCRuleOutput, error) {
	req, out := c.UpdateCCRuleRequest(input)
	return out, req.Send()
}

// UpdateCCRuleWithContext is the same as UpdateCCRule with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateCCRule for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *WAF) UpdateCCRuleWithContext(ctx volcengine.Context, input *UpdateCCRuleInput, opts ...request.Option) (*UpdateCCRuleOutput, error) {
	req, out := c.UpdateCCRuleRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type AccurateGroupForUpdateCCRuleInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	AccurateRules []*AccurateRuleForUpdateCCRuleInput `type:"list" json:",omitempty"`

	Logic *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s AccurateGroupForUpdateCCRuleInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s AccurateGroupForUpdateCCRuleInput) GoString() string {
	return s.String()
}

// SetAccurateRules sets the AccurateRules field's value.
func (s *AccurateGroupForUpdateCCRuleInput) SetAccurateRules(v []*AccurateRuleForUpdateCCRuleInput) *AccurateGroupForUpdateCCRuleInput {
	s.AccurateRules = v
	return s
}

// SetLogic sets the Logic field's value.
func (s *AccurateGroupForUpdateCCRuleInput) SetLogic(v int32) *AccurateGroupForUpdateCCRuleInput {
	s.Logic = &v
	return s
}

type AccurateRuleForUpdateCCRuleInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	HttpObj *string `type:"string" json:",omitempty"`

	ObjType *int32 `type:"int32" json:",omitempty"`

	Opretar *int32 `type:"int32" json:",omitempty"`

	Property *int32 `type:"int32" json:",omitempty"`

	ValueString *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s AccurateRuleForUpdateCCRuleInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s AccurateRuleForUpdateCCRuleInput) GoString() string {
	return s.String()
}

// SetHttpObj sets the HttpObj field's value.
func (s *AccurateRuleForUpdateCCRuleInput) SetHttpObj(v string) *AccurateRuleForUpdateCCRuleInput {
	s.HttpObj = &v
	return s
}

// SetObjType sets the ObjType field's value.
func (s *AccurateRuleForUpdateCCRuleInput) SetObjType(v int32) *AccurateRuleForUpdateCCRuleInput {
	s.ObjType = &v
	return s
}

// SetOpretar sets the Opretar field's value.
func (s *AccurateRuleForUpdateCCRuleInput) SetOpretar(v int32) *AccurateRuleForUpdateCCRuleInput {
	s.Opretar = &v
	return s
}

// SetProperty sets the Property field's value.
func (s *AccurateRuleForUpdateCCRuleInput) SetProperty(v int32) *AccurateRuleForUpdateCCRuleInput {
	s.Property = &v
	return s
}

// SetValueString sets the ValueString field's value.
func (s *AccurateRuleForUpdateCCRuleInput) SetValueString(v string) *AccurateRuleForUpdateCCRuleInput {
	s.ValueString = &v
	return s
}

type CronConfForUpdateCCRuleInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Crontab *string `type:"string" json:",omitempty"`

	PathThreshold *int32 `type:"int32" json:",omitempty"`

	SingleThreshold *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s CronConfForUpdateCCRuleInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CronConfForUpdateCCRuleInput) GoString() string {
	return s.String()
}

// SetCrontab sets the Crontab field's value.
func (s *CronConfForUpdateCCRuleInput) SetCrontab(v string) *CronConfForUpdateCCRuleInput {
	s.Crontab = &v
	return s
}

// SetPathThreshold sets the PathThreshold field's value.
func (s *CronConfForUpdateCCRuleInput) SetPathThreshold(v int32) *CronConfForUpdateCCRuleInput {
	s.PathThreshold = &v
	return s
}

// SetSingleThreshold sets the SingleThreshold field's value.
func (s *CronConfForUpdateCCRuleInput) SetSingleThreshold(v int32) *CronConfForUpdateCCRuleInput {
	s.SingleThreshold = &v
	return s
}

type UpdateCCRuleInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	AccurateGroup *AccurateGroupForUpdateCCRuleInput `type:"structure" json:",omitempty"`

	AccurateGroupPriority *int32 `type:"int32" json:",omitempty"`

	CCType *int32 `type:"int32" json:",omitempty"`

	CountTime *int32 `type:"int32" json:",omitempty"`

	CronConfs []*CronConfForUpdateCCRuleInput `type:"list" json:",omitempty"`

	CronEnable *int32 `type:"int32" json:",omitempty"`

	// EffectTime is a required field
	EffectTime *int32 `type:"int32" json:",omitempty" required:"true"`

	// Enable is a required field
	Enable *int32 `type:"int32" json:",omitempty" required:"true"`

	ExemptionTime *int32 `type:"int32" json:",omitempty"`

	// Field is a required field
	Field *string `type:"string" json:",omitempty" required:"true"`

	// Host is a required field
	Host *string `type:"string" json:",omitempty" required:"true"`

	// Id is a required field
	Id *int32 `type:"int32" json:",omitempty" required:"true"`

	// Name is a required field
	Name *string `type:"string" json:",omitempty" required:"true"`

	PathThreshold *int32 `type:"int32" json:",omitempty"`

	ProjectName *string `type:"string" json:",omitempty"`

	// RulePriority is a required field
	RulePriority *int32 `type:"int32" json:",omitempty" required:"true"`

	RuleTag *string `type:"string" json:",omitempty"`

	SingleThreshold *int32 `type:"int32" json:",omitempty"`

	// Url is a required field
	Url *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s UpdateCCRuleInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateCCRuleInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UpdateCCRuleInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "UpdateCCRuleInput"}
	if s.EffectTime == nil {
		invalidParams.Add(request.NewErrParamRequired("EffectTime"))
	}
	if s.Enable == nil {
		invalidParams.Add(request.NewErrParamRequired("Enable"))
	}
	if s.Field == nil {
		invalidParams.Add(request.NewErrParamRequired("Field"))
	}
	if s.Host == nil {
		invalidParams.Add(request.NewErrParamRequired("Host"))
	}
	if s.Id == nil {
		invalidParams.Add(request.NewErrParamRequired("Id"))
	}
	if s.Name == nil {
		invalidParams.Add(request.NewErrParamRequired("Name"))
	}
	if s.RulePriority == nil {
		invalidParams.Add(request.NewErrParamRequired("RulePriority"))
	}
	if s.Url == nil {
		invalidParams.Add(request.NewErrParamRequired("Url"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAccurateGroup sets the AccurateGroup field's value.
func (s *UpdateCCRuleInput) SetAccurateGroup(v *AccurateGroupForUpdateCCRuleInput) *UpdateCCRuleInput {
	s.AccurateGroup = v
	return s
}

// SetAccurateGroupPriority sets the AccurateGroupPriority field's value.
func (s *UpdateCCRuleInput) SetAccurateGroupPriority(v int32) *UpdateCCRuleInput {
	s.AccurateGroupPriority = &v
	return s
}

// SetCCType sets the CCType field's value.
func (s *UpdateCCRuleInput) SetCCType(v int32) *UpdateCCRuleInput {
	s.CCType = &v
	return s
}

// SetCountTime sets the CountTime field's value.
func (s *UpdateCCRuleInput) SetCountTime(v int32) *UpdateCCRuleInput {
	s.CountTime = &v
	return s
}

// SetCronConfs sets the CronConfs field's value.
func (s *UpdateCCRuleInput) SetCronConfs(v []*CronConfForUpdateCCRuleInput) *UpdateCCRuleInput {
	s.CronConfs = v
	return s
}

// SetCronEnable sets the CronEnable field's value.
func (s *UpdateCCRuleInput) SetCronEnable(v int32) *UpdateCCRuleInput {
	s.CronEnable = &v
	return s
}

// SetEffectTime sets the EffectTime field's value.
func (s *UpdateCCRuleInput) SetEffectTime(v int32) *UpdateCCRuleInput {
	s.EffectTime = &v
	return s
}

// SetEnable sets the Enable field's value.
func (s *UpdateCCRuleInput) SetEnable(v int32) *UpdateCCRuleInput {
	s.Enable = &v
	return s
}

// SetExemptionTime sets the ExemptionTime field's value.
func (s *UpdateCCRuleInput) SetExemptionTime(v int32) *UpdateCCRuleInput {
	s.ExemptionTime = &v
	return s
}

// SetField sets the Field field's value.
func (s *UpdateCCRuleInput) SetField(v string) *UpdateCCRuleInput {
	s.Field = &v
	return s
}

// SetHost sets the Host field's value.
func (s *UpdateCCRuleInput) SetHost(v string) *UpdateCCRuleInput {
	s.Host = &v
	return s
}

// SetId sets the Id field's value.
func (s *UpdateCCRuleInput) SetId(v int32) *UpdateCCRuleInput {
	s.Id = &v
	return s
}

// SetName sets the Name field's value.
func (s *UpdateCCRuleInput) SetName(v string) *UpdateCCRuleInput {
	s.Name = &v
	return s
}

// SetPathThreshold sets the PathThreshold field's value.
func (s *UpdateCCRuleInput) SetPathThreshold(v int32) *UpdateCCRuleInput {
	s.PathThreshold = &v
	return s
}

// SetProjectName sets the ProjectName field's value.
func (s *UpdateCCRuleInput) SetProjectName(v string) *UpdateCCRuleInput {
	s.ProjectName = &v
	return s
}

// SetRulePriority sets the RulePriority field's value.
func (s *UpdateCCRuleInput) SetRulePriority(v int32) *UpdateCCRuleInput {
	s.RulePriority = &v
	return s
}

// SetRuleTag sets the RuleTag field's value.
func (s *UpdateCCRuleInput) SetRuleTag(v string) *UpdateCCRuleInput {
	s.RuleTag = &v
	return s
}

// SetSingleThreshold sets the SingleThreshold field's value.
func (s *UpdateCCRuleInput) SetSingleThreshold(v int32) *UpdateCCRuleInput {
	s.SingleThreshold = &v
	return s
}

// SetUrl sets the Url field's value.
func (s *UpdateCCRuleInput) SetUrl(v string) *UpdateCCRuleInput {
	s.Url = &v
	return s
}

type UpdateCCRuleOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Id *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s UpdateCCRuleOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateCCRuleOutput) GoString() string {
	return s.String()
}

// SetId sets the Id field's value.
func (s *UpdateCCRuleOutput) SetId(v int32) *UpdateCCRuleOutput {
	s.Id = &v
	return s
}
