// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package ecs

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDescribeHpcInstancePositionCommon = "DescribeHpcInstancePosition"

// DescribeHpcInstancePositionCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeHpcInstancePositionCommon operation. The "output" return
// value will be populated with the DescribeHpcInstancePositionCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeHpcInstancePositionCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeHpcInstancePositionCommon Send returns without error.
//
// See DescribeHpcInstancePositionCommon for more information on using the DescribeHpcInstancePositionCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeHpcInstancePositionCommonRequest method.
//    req, resp := client.DescribeHpcInstancePositionCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DescribeHpcInstancePositionCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeHpcInstancePositionCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeHpcInstancePositionCommon API operation for ECS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ECS's
// API operation DescribeHpcInstancePositionCommon for usage and error information.
func (c *ECS) DescribeHpcInstancePositionCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeHpcInstancePositionCommonRequest(input)
	return out, req.Send()
}

// DescribeHpcInstancePositionCommonWithContext is the same as DescribeHpcInstancePositionCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeHpcInstancePositionCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DescribeHpcInstancePositionCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeHpcInstancePositionCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeHpcInstancePosition = "DescribeHpcInstancePosition"

// DescribeHpcInstancePositionRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeHpcInstancePosition operation. The "output" return
// value will be populated with the DescribeHpcInstancePositionCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeHpcInstancePositionCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeHpcInstancePositionCommon Send returns without error.
//
// See DescribeHpcInstancePosition for more information on using the DescribeHpcInstancePosition
// API call, and error handling.
//
//    // Example sending a request using the DescribeHpcInstancePositionRequest method.
//    req, resp := client.DescribeHpcInstancePositionRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DescribeHpcInstancePositionRequest(input *DescribeHpcInstancePositionInput) (req *request.Request, output *DescribeHpcInstancePositionOutput) {
	op := &request.Operation{
		Name:       opDescribeHpcInstancePosition,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeHpcInstancePositionInput{}
	}

	output = &DescribeHpcInstancePositionOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeHpcInstancePosition API operation for ECS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ECS's
// API operation DescribeHpcInstancePosition for usage and error information.
func (c *ECS) DescribeHpcInstancePosition(input *DescribeHpcInstancePositionInput) (*DescribeHpcInstancePositionOutput, error) {
	req, out := c.DescribeHpcInstancePositionRequest(input)
	return out, req.Send()
}

// DescribeHpcInstancePositionWithContext is the same as DescribeHpcInstancePosition with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeHpcInstancePosition for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DescribeHpcInstancePositionWithContext(ctx volcengine.Context, input *DescribeHpcInstancePositionInput, opts ...request.Option) (*DescribeHpcInstancePositionOutput, error) {
	req, out := c.DescribeHpcInstancePositionRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DescribeHpcInstancePositionInput struct {
	_ struct{} `type:"structure"`

	// InstanceId is a required field
	InstanceId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s DescribeHpcInstancePositionInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeHpcInstancePositionInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeHpcInstancePositionInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DescribeHpcInstancePositionInput"}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetInstanceId sets the InstanceId field's value.
func (s *DescribeHpcInstancePositionInput) SetInstanceId(v string) *DescribeHpcInstancePositionInput {
	s.InstanceId = &v
	return s
}

type DescribeHpcInstancePositionOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	HpcInstancePositionInfos []*HpcInstancePositionInfoForDescribeHpcInstancePositionOutput `type:"list"`
}

// String returns the string representation
func (s DescribeHpcInstancePositionOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeHpcInstancePositionOutput) GoString() string {
	return s.String()
}

// SetHpcInstancePositionInfos sets the HpcInstancePositionInfos field's value.
func (s *DescribeHpcInstancePositionOutput) SetHpcInstancePositionInfos(v []*HpcInstancePositionInfoForDescribeHpcInstancePositionOutput) *DescribeHpcInstancePositionOutput {
	s.HpcInstancePositionInfos = v
	return s
}

type HpcInstancePositionInfoForDescribeHpcInstancePositionOutput struct {
	_ struct{} `type:"structure"`

	InstanceId *string `type:"string"`

	RdmaMinipod *string `type:"string"`

	SwitchName *string `type:"string"`
}

// String returns the string representation
func (s HpcInstancePositionInfoForDescribeHpcInstancePositionOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s HpcInstancePositionInfoForDescribeHpcInstancePositionOutput) GoString() string {
	return s.String()
}

// SetInstanceId sets the InstanceId field's value.
func (s *HpcInstancePositionInfoForDescribeHpcInstancePositionOutput) SetInstanceId(v string) *HpcInstancePositionInfoForDescribeHpcInstancePositionOutput {
	s.InstanceId = &v
	return s
}

// SetRdmaMinipod sets the RdmaMinipod field's value.
func (s *HpcInstancePositionInfoForDescribeHpcInstancePositionOutput) SetRdmaMinipod(v string) *HpcInstancePositionInfoForDescribeHpcInstancePositionOutput {
	s.RdmaMinipod = &v
	return s
}

// SetSwitchName sets the SwitchName field's value.
func (s *HpcInstancePositionInfoForDescribeHpcInstancePositionOutput) SetSwitchName(v string) *HpcInstancePositionInfoForDescribeHpcInstancePositionOutput {
	s.SwitchName = &v
	return s
}
