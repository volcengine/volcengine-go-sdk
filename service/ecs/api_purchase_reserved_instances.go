// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package ecs

import (
	"fmt"

	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opPurchaseReservedInstancesCommon = "PurchaseReservedInstances"

// PurchaseReservedInstancesCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the PurchaseReservedInstancesCommon operation. The "output" return
// value will be populated with the PurchaseReservedInstancesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned PurchaseReservedInstancesCommon Request to send the API call to the service.
// the "output" return value is not valid until after PurchaseReservedInstancesCommon Send returns without error.
//
// See PurchaseReservedInstancesCommon for more information on using the PurchaseReservedInstancesCommon
// API call, and error handling.
//
//    // Example sending a request using the PurchaseReservedInstancesCommonRequest method.
//    req, resp := client.PurchaseReservedInstancesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) PurchaseReservedInstancesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opPurchaseReservedInstancesCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// PurchaseReservedInstancesCommon API operation for ECS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ECS's
// API operation PurchaseReservedInstancesCommon for usage and error information.
func (c *ECS) PurchaseReservedInstancesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.PurchaseReservedInstancesCommonRequest(input)
	return out, req.Send()
}

// PurchaseReservedInstancesCommonWithContext is the same as PurchaseReservedInstancesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See PurchaseReservedInstancesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) PurchaseReservedInstancesCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.PurchaseReservedInstancesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opPurchaseReservedInstances = "PurchaseReservedInstances"

// PurchaseReservedInstancesRequest generates a "volcengine/request.Request" representing the
// client's request for the PurchaseReservedInstances operation. The "output" return
// value will be populated with the PurchaseReservedInstancesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned PurchaseReservedInstancesCommon Request to send the API call to the service.
// the "output" return value is not valid until after PurchaseReservedInstancesCommon Send returns without error.
//
// See PurchaseReservedInstances for more information on using the PurchaseReservedInstances
// API call, and error handling.
//
//    // Example sending a request using the PurchaseReservedInstancesRequest method.
//    req, resp := client.PurchaseReservedInstancesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) PurchaseReservedInstancesRequest(input *PurchaseReservedInstancesInput) (req *request.Request, output *PurchaseReservedInstancesOutput) {
	op := &request.Operation{
		Name:       opPurchaseReservedInstances,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &PurchaseReservedInstancesInput{}
	}

	output = &PurchaseReservedInstancesOutput{}
	req = c.newRequest(op, input, output)

	return
}

// PurchaseReservedInstances API operation for ECS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ECS's
// API operation PurchaseReservedInstances for usage and error information.
func (c *ECS) PurchaseReservedInstances(input *PurchaseReservedInstancesInput) (*PurchaseReservedInstancesOutput, error) {
	req, out := c.PurchaseReservedInstancesRequest(input)
	return out, req.Send()
}

// PurchaseReservedInstancesWithContext is the same as PurchaseReservedInstances with the addition of
// the ability to pass a context and additional request options.
//
// See PurchaseReservedInstances for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) PurchaseReservedInstancesWithContext(ctx volcengine.Context, input *PurchaseReservedInstancesInput, opts ...request.Option) (*PurchaseReservedInstancesOutput, error) {
	req, out := c.PurchaseReservedInstancesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type PurchaseReservedInstancesInput struct {
	_ struct{} `type:"structure"`

	AutoRenew *bool `type:"boolean"`

	AutoRenewPeriod *int32 `type:"int32"`

	ClientToken *string `type:"string"`

	Description *string `type:"string"`

	EffectiveAt *string `type:"string"`

	HpcClusterId *string `type:"string"`

	InstanceCount *int32 `type:"int32"`

	// InstanceTypeId is a required field
	InstanceTypeId *string `type:"string" required:"true"`

	Period *int32 `type:"int32"`

	PeriodUnit *string `type:"string"`

	ProjectName *string `type:"string"`

	RegionId *string `type:"string"`

	ReservedCapacity *int32 `type:"int32"`

	// ReservedInstanceName is a required field
	ReservedInstanceName *string `type:"string" required:"true"`

	ReservedStorageCapacityName *string `type:"string"`

	RscAutoRenew *bool `type:"boolean"`

	RscAutoRenewPeriod *int32 `type:"int32"`

	Scope *string `type:"string"`

	Tags []*TagForPurchaseReservedInstancesInput `type:"list"`

	VolumeType *string `type:"string"`

	ZoneId *string `type:"string"`
}

// String returns the string representation
func (s PurchaseReservedInstancesInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s PurchaseReservedInstancesInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *PurchaseReservedInstancesInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "PurchaseReservedInstancesInput"}
	if s.InstanceTypeId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceTypeId"))
	}
	if s.ReservedInstanceName == nil {
		invalidParams.Add(request.NewErrParamRequired("ReservedInstanceName"))
	}
	if s.Tags != nil {
		for i, v := range s.Tags {
			if v == nil {
				continue
			}
			if err := v.Validate(); err != nil {
				invalidParams.AddNested(fmt.Sprintf("%s[%v]", "Tags", i), err.(request.ErrInvalidParams))
			}
		}
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAutoRenew sets the AutoRenew field's value.
func (s *PurchaseReservedInstancesInput) SetAutoRenew(v bool) *PurchaseReservedInstancesInput {
	s.AutoRenew = &v
	return s
}

// SetAutoRenewPeriod sets the AutoRenewPeriod field's value.
func (s *PurchaseReservedInstancesInput) SetAutoRenewPeriod(v int32) *PurchaseReservedInstancesInput {
	s.AutoRenewPeriod = &v
	return s
}

// SetClientToken sets the ClientToken field's value.
func (s *PurchaseReservedInstancesInput) SetClientToken(v string) *PurchaseReservedInstancesInput {
	s.ClientToken = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *PurchaseReservedInstancesInput) SetDescription(v string) *PurchaseReservedInstancesInput {
	s.Description = &v
	return s
}

// SetEffectiveAt sets the EffectiveAt field's value.
func (s *PurchaseReservedInstancesInput) SetEffectiveAt(v string) *PurchaseReservedInstancesInput {
	s.EffectiveAt = &v
	return s
}

// SetHpcClusterId sets the HpcClusterId field's value.
func (s *PurchaseReservedInstancesInput) SetHpcClusterId(v string) *PurchaseReservedInstancesInput {
	s.HpcClusterId = &v
	return s
}

// SetInstanceCount sets the InstanceCount field's value.
func (s *PurchaseReservedInstancesInput) SetInstanceCount(v int32) *PurchaseReservedInstancesInput {
	s.InstanceCount = &v
	return s
}

// SetInstanceTypeId sets the InstanceTypeId field's value.
func (s *PurchaseReservedInstancesInput) SetInstanceTypeId(v string) *PurchaseReservedInstancesInput {
	s.InstanceTypeId = &v
	return s
}

// SetPeriod sets the Period field's value.
func (s *PurchaseReservedInstancesInput) SetPeriod(v int32) *PurchaseReservedInstancesInput {
	s.Period = &v
	return s
}

// SetPeriodUnit sets the PeriodUnit field's value.
func (s *PurchaseReservedInstancesInput) SetPeriodUnit(v string) *PurchaseReservedInstancesInput {
	s.PeriodUnit = &v
	return s
}

// SetProjectName sets the ProjectName field's value.
func (s *PurchaseReservedInstancesInput) SetProjectName(v string) *PurchaseReservedInstancesInput {
	s.ProjectName = &v
	return s
}

// SetRegionId sets the RegionId field's value.
func (s *PurchaseReservedInstancesInput) SetRegionId(v string) *PurchaseReservedInstancesInput {
	s.RegionId = &v
	return s
}

// SetReservedCapacity sets the ReservedCapacity field's value.
func (s *PurchaseReservedInstancesInput) SetReservedCapacity(v int32) *PurchaseReservedInstancesInput {
	s.ReservedCapacity = &v
	return s
}

// SetReservedInstanceName sets the ReservedInstanceName field's value.
func (s *PurchaseReservedInstancesInput) SetReservedInstanceName(v string) *PurchaseReservedInstancesInput {
	s.ReservedInstanceName = &v
	return s
}

// SetReservedStorageCapacityName sets the ReservedStorageCapacityName field's value.
func (s *PurchaseReservedInstancesInput) SetReservedStorageCapacityName(v string) *PurchaseReservedInstancesInput {
	s.ReservedStorageCapacityName = &v
	return s
}

// SetRscAutoRenew sets the RscAutoRenew field's value.
func (s *PurchaseReservedInstancesInput) SetRscAutoRenew(v bool) *PurchaseReservedInstancesInput {
	s.RscAutoRenew = &v
	return s
}

// SetRscAutoRenewPeriod sets the RscAutoRenewPeriod field's value.
func (s *PurchaseReservedInstancesInput) SetRscAutoRenewPeriod(v int32) *PurchaseReservedInstancesInput {
	s.RscAutoRenewPeriod = &v
	return s
}

// SetScope sets the Scope field's value.
func (s *PurchaseReservedInstancesInput) SetScope(v string) *PurchaseReservedInstancesInput {
	s.Scope = &v
	return s
}

// SetTags sets the Tags field's value.
func (s *PurchaseReservedInstancesInput) SetTags(v []*TagForPurchaseReservedInstancesInput) *PurchaseReservedInstancesInput {
	s.Tags = v
	return s
}

// SetVolumeType sets the VolumeType field's value.
func (s *PurchaseReservedInstancesInput) SetVolumeType(v string) *PurchaseReservedInstancesInput {
	s.VolumeType = &v
	return s
}

// SetZoneId sets the ZoneId field's value.
func (s *PurchaseReservedInstancesInput) SetZoneId(v string) *PurchaseReservedInstancesInput {
	s.ZoneId = &v
	return s
}

type PurchaseReservedInstancesOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	ReservedInstanceId *string `type:"string"`

	ReservedStorageCapacityId *string `type:"string"`
}

// String returns the string representation
func (s PurchaseReservedInstancesOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s PurchaseReservedInstancesOutput) GoString() string {
	return s.String()
}

// SetReservedInstanceId sets the ReservedInstanceId field's value.
func (s *PurchaseReservedInstancesOutput) SetReservedInstanceId(v string) *PurchaseReservedInstancesOutput {
	s.ReservedInstanceId = &v
	return s
}

// SetReservedStorageCapacityId sets the ReservedStorageCapacityId field's value.
func (s *PurchaseReservedInstancesOutput) SetReservedStorageCapacityId(v string) *PurchaseReservedInstancesOutput {
	s.ReservedStorageCapacityId = &v
	return s
}

type TagForPurchaseReservedInstancesInput struct {
	_ struct{} `type:"structure"`

	// Key is a required field
	Key *string `type:"string" required:"true"`

	Value *string `type:"string"`
}

// String returns the string representation
func (s TagForPurchaseReservedInstancesInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s TagForPurchaseReservedInstancesInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *TagForPurchaseReservedInstancesInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "TagForPurchaseReservedInstancesInput"}
	if s.Key == nil {
		invalidParams.Add(request.NewErrParamRequired("Key"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetKey sets the Key field's value.
func (s *TagForPurchaseReservedInstancesInput) SetKey(v string) *TagForPurchaseReservedInstancesInput {
	s.Key = &v
	return s
}

// SetValue sets the Value field's value.
func (s *TagForPurchaseReservedInstancesInput) SetValue(v string) *TagForPurchaseReservedInstancesInput {
	s.Value = &v
	return s
}
