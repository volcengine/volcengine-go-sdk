// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package ecs

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opRenewScheduledInstanceCommon = "RenewScheduledInstance"

// RenewScheduledInstanceCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the RenewScheduledInstanceCommon operation. The "output" return
// value will be populated with the RenewScheduledInstanceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned RenewScheduledInstanceCommon Request to send the API call to the service.
// the "output" return value is not valid until after RenewScheduledInstanceCommon Send returns without error.
//
// See RenewScheduledInstanceCommon for more information on using the RenewScheduledInstanceCommon
// API call, and error handling.
//
//    // Example sending a request using the RenewScheduledInstanceCommonRequest method.
//    req, resp := client.RenewScheduledInstanceCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) RenewScheduledInstanceCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opRenewScheduledInstanceCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// RenewScheduledInstanceCommon API operation for ECS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ECS's
// API operation RenewScheduledInstanceCommon for usage and error information.
func (c *ECS) RenewScheduledInstanceCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.RenewScheduledInstanceCommonRequest(input)
	return out, req.Send()
}

// RenewScheduledInstanceCommonWithContext is the same as RenewScheduledInstanceCommon with the addition of
// the ability to pass a context and additional request options.
//
// See RenewScheduledInstanceCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) RenewScheduledInstanceCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.RenewScheduledInstanceCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opRenewScheduledInstance = "RenewScheduledInstance"

// RenewScheduledInstanceRequest generates a "volcengine/request.Request" representing the
// client's request for the RenewScheduledInstance operation. The "output" return
// value will be populated with the RenewScheduledInstanceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned RenewScheduledInstanceCommon Request to send the API call to the service.
// the "output" return value is not valid until after RenewScheduledInstanceCommon Send returns without error.
//
// See RenewScheduledInstance for more information on using the RenewScheduledInstance
// API call, and error handling.
//
//    // Example sending a request using the RenewScheduledInstanceRequest method.
//    req, resp := client.RenewScheduledInstanceRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) RenewScheduledInstanceRequest(input *RenewScheduledInstanceInput) (req *request.Request, output *RenewScheduledInstanceOutput) {
	op := &request.Operation{
		Name:       opRenewScheduledInstance,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &RenewScheduledInstanceInput{}
	}

	output = &RenewScheduledInstanceOutput{}
	req = c.newRequest(op, input, output)

	return
}

// RenewScheduledInstance API operation for ECS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ECS's
// API operation RenewScheduledInstance for usage and error information.
func (c *ECS) RenewScheduledInstance(input *RenewScheduledInstanceInput) (*RenewScheduledInstanceOutput, error) {
	req, out := c.RenewScheduledInstanceRequest(input)
	return out, req.Send()
}

// RenewScheduledInstanceWithContext is the same as RenewScheduledInstance with the addition of
// the ability to pass a context and additional request options.
//
// See RenewScheduledInstance for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) RenewScheduledInstanceWithContext(ctx volcengine.Context, input *RenewScheduledInstanceInput, opts ...request.Option) (*RenewScheduledInstanceOutput, error) {
	req, out := c.RenewScheduledInstanceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type RenewScheduledInstanceInput struct {
	_ struct{} `type:"structure"`

	// AutoReleaseAt is a required field
	AutoReleaseAt *string `type:"string" required:"true"`

	ClientToken *string `type:"string"`

	// ScheduledInstanceId is a required field
	ScheduledInstanceId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s RenewScheduledInstanceInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s RenewScheduledInstanceInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *RenewScheduledInstanceInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "RenewScheduledInstanceInput"}
	if s.AutoReleaseAt == nil {
		invalidParams.Add(request.NewErrParamRequired("AutoReleaseAt"))
	}
	if s.ScheduledInstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("ScheduledInstanceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAutoReleaseAt sets the AutoReleaseAt field's value.
func (s *RenewScheduledInstanceInput) SetAutoReleaseAt(v string) *RenewScheduledInstanceInput {
	s.AutoReleaseAt = &v
	return s
}

// SetClientToken sets the ClientToken field's value.
func (s *RenewScheduledInstanceInput) SetClientToken(v string) *RenewScheduledInstanceInput {
	s.ClientToken = &v
	return s
}

// SetScheduledInstanceId sets the ScheduledInstanceId field's value.
func (s *RenewScheduledInstanceInput) SetScheduledInstanceId(v string) *RenewScheduledInstanceInput {
	s.ScheduledInstanceId = &v
	return s
}

type RenewScheduledInstanceOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s RenewScheduledInstanceOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s RenewScheduledInstanceOutput) GoString() string {
	return s.String()
}
