// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package ecs

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDescribeAutoInstallPackagesCommon = "DescribeAutoInstallPackages"

// DescribeAutoInstallPackagesCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeAutoInstallPackagesCommon operation. The "output" return
// value will be populated with the DescribeAutoInstallPackagesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeAutoInstallPackagesCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeAutoInstallPackagesCommon Send returns without error.
//
// See DescribeAutoInstallPackagesCommon for more information on using the DescribeAutoInstallPackagesCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeAutoInstallPackagesCommonRequest method.
//    req, resp := client.DescribeAutoInstallPackagesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DescribeAutoInstallPackagesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeAutoInstallPackagesCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeAutoInstallPackagesCommon API operation for ECS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ECS's
// API operation DescribeAutoInstallPackagesCommon for usage and error information.
func (c *ECS) DescribeAutoInstallPackagesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeAutoInstallPackagesCommonRequest(input)
	return out, req.Send()
}

// DescribeAutoInstallPackagesCommonWithContext is the same as DescribeAutoInstallPackagesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeAutoInstallPackagesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DescribeAutoInstallPackagesCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeAutoInstallPackagesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeAutoInstallPackages = "DescribeAutoInstallPackages"

// DescribeAutoInstallPackagesRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeAutoInstallPackages operation. The "output" return
// value will be populated with the DescribeAutoInstallPackagesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeAutoInstallPackagesCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeAutoInstallPackagesCommon Send returns without error.
//
// See DescribeAutoInstallPackages for more information on using the DescribeAutoInstallPackages
// API call, and error handling.
//
//    // Example sending a request using the DescribeAutoInstallPackagesRequest method.
//    req, resp := client.DescribeAutoInstallPackagesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DescribeAutoInstallPackagesRequest(input *DescribeAutoInstallPackagesInput) (req *request.Request, output *DescribeAutoInstallPackagesOutput) {
	op := &request.Operation{
		Name:       opDescribeAutoInstallPackages,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeAutoInstallPackagesInput{}
	}

	output = &DescribeAutoInstallPackagesOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeAutoInstallPackages API operation for ECS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ECS's
// API operation DescribeAutoInstallPackages for usage and error information.
func (c *ECS) DescribeAutoInstallPackages(input *DescribeAutoInstallPackagesInput) (*DescribeAutoInstallPackagesOutput, error) {
	req, out := c.DescribeAutoInstallPackagesRequest(input)
	return out, req.Send()
}

// DescribeAutoInstallPackagesWithContext is the same as DescribeAutoInstallPackages with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeAutoInstallPackages for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DescribeAutoInstallPackagesWithContext(ctx volcengine.Context, input *DescribeAutoInstallPackagesInput, opts ...request.Option) (*DescribeAutoInstallPackagesOutput, error) {
	req, out := c.DescribeAutoInstallPackagesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DescribeAutoInstallPackagesInput struct {
	_ struct{} `type:"structure"`

	// ImageId is a required field
	ImageId *string `type:"string" required:"true"`

	// InstanceTypeFamily is a required field
	InstanceTypeFamily *string `type:"string" required:"true"`
}

// String returns the string representation
func (s DescribeAutoInstallPackagesInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeAutoInstallPackagesInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeAutoInstallPackagesInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DescribeAutoInstallPackagesInput"}
	if s.ImageId == nil {
		invalidParams.Add(request.NewErrParamRequired("ImageId"))
	}
	if s.InstanceTypeFamily == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceTypeFamily"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetImageId sets the ImageId field's value.
func (s *DescribeAutoInstallPackagesInput) SetImageId(v string) *DescribeAutoInstallPackagesInput {
	s.ImageId = &v
	return s
}

// SetInstanceTypeFamily sets the InstanceTypeFamily field's value.
func (s *DescribeAutoInstallPackagesInput) SetInstanceTypeFamily(v string) *DescribeAutoInstallPackagesInput {
	s.InstanceTypeFamily = &v
	return s
}

type DescribeAutoInstallPackagesOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	Packages []*PackageForDescribeAutoInstallPackagesOutput `type:"list"`
}

// String returns the string representation
func (s DescribeAutoInstallPackagesOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeAutoInstallPackagesOutput) GoString() string {
	return s.String()
}

// SetPackages sets the Packages field's value.
func (s *DescribeAutoInstallPackagesOutput) SetPackages(v []*PackageForDescribeAutoInstallPackagesOutput) *DescribeAutoInstallPackagesOutput {
	s.Packages = v
	return s
}

type ItemForDescribeAutoInstallPackagesOutput struct {
	_ struct{} `type:"structure"`

	Bin *string `type:"string"`

	Version *string `type:"string"`
}

// String returns the string representation
func (s ItemForDescribeAutoInstallPackagesOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ItemForDescribeAutoInstallPackagesOutput) GoString() string {
	return s.String()
}

// SetBin sets the Bin field's value.
func (s *ItemForDescribeAutoInstallPackagesOutput) SetBin(v string) *ItemForDescribeAutoInstallPackagesOutput {
	s.Bin = &v
	return s
}

// SetVersion sets the Version field's value.
func (s *ItemForDescribeAutoInstallPackagesOutput) SetVersion(v string) *ItemForDescribeAutoInstallPackagesOutput {
	s.Version = &v
	return s
}

type PackageForDescribeAutoInstallPackagesOutput struct {
	_ struct{} `type:"structure"`

	Items []*ItemForDescribeAutoInstallPackagesOutput `type:"list"`

	PackgeId *string `type:"string"`

	ScriptId *string `type:"string"`
}

// String returns the string representation
func (s PackageForDescribeAutoInstallPackagesOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s PackageForDescribeAutoInstallPackagesOutput) GoString() string {
	return s.String()
}

// SetItems sets the Items field's value.
func (s *PackageForDescribeAutoInstallPackagesOutput) SetItems(v []*ItemForDescribeAutoInstallPackagesOutput) *PackageForDescribeAutoInstallPackagesOutput {
	s.Items = v
	return s
}

// SetPackgeId sets the PackgeId field's value.
func (s *PackageForDescribeAutoInstallPackagesOutput) SetPackgeId(v string) *PackageForDescribeAutoInstallPackagesOutput {
	s.PackgeId = &v
	return s
}

// SetScriptId sets the ScriptId field's value.
func (s *PackageForDescribeAutoInstallPackagesOutput) SetScriptId(v string) *PackageForDescribeAutoInstallPackagesOutput {
	s.ScriptId = &v
	return s
}
