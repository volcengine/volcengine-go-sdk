// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package ecs

import (
	"encoding/json"

	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDescribeEventTypesCommon = "DescribeEventTypes"

// DescribeEventTypesCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeEventTypesCommon operation. The "output" return
// value will be populated with the DescribeEventTypesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeEventTypesCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeEventTypesCommon Send returns without error.
//
// See DescribeEventTypesCommon for more information on using the DescribeEventTypesCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeEventTypesCommonRequest method.
//    req, resp := client.DescribeEventTypesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DescribeEventTypesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeEventTypesCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeEventTypesCommon API operation for ECS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ECS's
// API operation DescribeEventTypesCommon for usage and error information.
func (c *ECS) DescribeEventTypesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeEventTypesCommonRequest(input)
	return out, req.Send()
}

// DescribeEventTypesCommonWithContext is the same as DescribeEventTypesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeEventTypesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DescribeEventTypesCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeEventTypesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeEventTypes = "DescribeEventTypes"

// DescribeEventTypesRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeEventTypes operation. The "output" return
// value will be populated with the DescribeEventTypesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeEventTypesCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeEventTypesCommon Send returns without error.
//
// See DescribeEventTypes for more information on using the DescribeEventTypes
// API call, and error handling.
//
//    // Example sending a request using the DescribeEventTypesRequest method.
//    req, resp := client.DescribeEventTypesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DescribeEventTypesRequest(input *DescribeEventTypesInput) (req *request.Request, output *DescribeEventTypesOutput) {
	op := &request.Operation{
		Name:       opDescribeEventTypes,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeEventTypesInput{}
	}

	output = &DescribeEventTypesOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeEventTypes API operation for ECS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ECS's
// API operation DescribeEventTypes for usage and error information.
func (c *ECS) DescribeEventTypes(input *DescribeEventTypesInput) (*DescribeEventTypesOutput, error) {
	req, out := c.DescribeEventTypesRequest(input)
	return out, req.Send()
}

// DescribeEventTypesWithContext is the same as DescribeEventTypes with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeEventTypes for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DescribeEventTypesWithContext(ctx volcengine.Context, input *DescribeEventTypesInput, opts ...request.Option) (*DescribeEventTypesOutput, error) {
	req, out := c.DescribeEventTypesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DescribeEventTypesInput struct {
	_ struct{} `type:"structure"`

	ImpactLevel *string `type:"string"`

	Kind *string `type:"string"`

	MaxResults *json.Number `type:"json_number"`

	NextToken *string `type:"string"`

	ResponseRequired *bool `type:"boolean"`

	Types []*string `type:"list"`
}

// String returns the string representation
func (s DescribeEventTypesInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeEventTypesInput) GoString() string {
	return s.String()
}

// SetImpactLevel sets the ImpactLevel field's value.
func (s *DescribeEventTypesInput) SetImpactLevel(v string) *DescribeEventTypesInput {
	s.ImpactLevel = &v
	return s
}

// SetKind sets the Kind field's value.
func (s *DescribeEventTypesInput) SetKind(v string) *DescribeEventTypesInput {
	s.Kind = &v
	return s
}

// SetMaxResults sets the MaxResults field's value.
func (s *DescribeEventTypesInput) SetMaxResults(v json.Number) *DescribeEventTypesInput {
	s.MaxResults = &v
	return s
}

// SetNextToken sets the NextToken field's value.
func (s *DescribeEventTypesInput) SetNextToken(v string) *DescribeEventTypesInput {
	s.NextToken = &v
	return s
}

// SetResponseRequired sets the ResponseRequired field's value.
func (s *DescribeEventTypesInput) SetResponseRequired(v bool) *DescribeEventTypesInput {
	s.ResponseRequired = &v
	return s
}

// SetTypes sets the Types field's value.
func (s *DescribeEventTypesInput) SetTypes(v []*string) *DescribeEventTypesInput {
	s.Types = v
	return s
}

type DescribeEventTypesOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	EventTypes []*EventTypeForDescribeEventTypesOutput `type:"list"`

	NextToken *string `type:"string"`
}

// String returns the string representation
func (s DescribeEventTypesOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeEventTypesOutput) GoString() string {
	return s.String()
}

// SetEventTypes sets the EventTypes field's value.
func (s *DescribeEventTypesOutput) SetEventTypes(v []*EventTypeForDescribeEventTypesOutput) *DescribeEventTypesOutput {
	s.EventTypes = v
	return s
}

// SetNextToken sets the NextToken field's value.
func (s *DescribeEventTypesOutput) SetNextToken(v string) *DescribeEventTypesOutput {
	s.NextToken = &v
	return s
}

type EventTypeForDescribeEventTypesOutput struct {
	_ struct{} `type:"structure"`

	ImpactLevel *string `type:"string"`

	Kind *string `type:"string"`

	ResponseRequired *bool `type:"boolean"`

	Status []*string `type:"list"`

	Title *string `type:"string"`

	Type *string `type:"string"`
}

// String returns the string representation
func (s EventTypeForDescribeEventTypesOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s EventTypeForDescribeEventTypesOutput) GoString() string {
	return s.String()
}

// SetImpactLevel sets the ImpactLevel field's value.
func (s *EventTypeForDescribeEventTypesOutput) SetImpactLevel(v string) *EventTypeForDescribeEventTypesOutput {
	s.ImpactLevel = &v
	return s
}

// SetKind sets the Kind field's value.
func (s *EventTypeForDescribeEventTypesOutput) SetKind(v string) *EventTypeForDescribeEventTypesOutput {
	s.Kind = &v
	return s
}

// SetResponseRequired sets the ResponseRequired field's value.
func (s *EventTypeForDescribeEventTypesOutput) SetResponseRequired(v bool) *EventTypeForDescribeEventTypesOutput {
	s.ResponseRequired = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *EventTypeForDescribeEventTypesOutput) SetStatus(v []*string) *EventTypeForDescribeEventTypesOutput {
	s.Status = v
	return s
}

// SetTitle sets the Title field's value.
func (s *EventTypeForDescribeEventTypesOutput) SetTitle(v string) *EventTypeForDescribeEventTypesOutput {
	s.Title = &v
	return s
}

// SetType sets the Type field's value.
func (s *EventTypeForDescribeEventTypesOutput) SetType(v string) *EventTypeForDescribeEventTypesOutput {
	s.Type = &v
	return s
}
