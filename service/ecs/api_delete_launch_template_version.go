// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package ecs

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDeleteLaunchTemplateVersionCommon = "DeleteLaunchTemplateVersion"

// DeleteLaunchTemplateVersionCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteLaunchTemplateVersionCommon operation. The "output" return
// value will be populated with the DeleteLaunchTemplateVersionCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteLaunchTemplateVersionCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteLaunchTemplateVersionCommon Send returns without error.
//
// See DeleteLaunchTemplateVersionCommon for more information on using the DeleteLaunchTemplateVersionCommon
// API call, and error handling.
//
//    // Example sending a request using the DeleteLaunchTemplateVersionCommonRequest method.
//    req, resp := client.DeleteLaunchTemplateVersionCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DeleteLaunchTemplateVersionCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteLaunchTemplateVersionCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteLaunchTemplateVersionCommon API operation for ECS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ECS's
// API operation DeleteLaunchTemplateVersionCommon for usage and error information.
func (c *ECS) DeleteLaunchTemplateVersionCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteLaunchTemplateVersionCommonRequest(input)
	return out, req.Send()
}

// DeleteLaunchTemplateVersionCommonWithContext is the same as DeleteLaunchTemplateVersionCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteLaunchTemplateVersionCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DeleteLaunchTemplateVersionCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteLaunchTemplateVersionCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteLaunchTemplateVersion = "DeleteLaunchTemplateVersion"

// DeleteLaunchTemplateVersionRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteLaunchTemplateVersion operation. The "output" return
// value will be populated with the DeleteLaunchTemplateVersionCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteLaunchTemplateVersionCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteLaunchTemplateVersionCommon Send returns without error.
//
// See DeleteLaunchTemplateVersion for more information on using the DeleteLaunchTemplateVersion
// API call, and error handling.
//
//    // Example sending a request using the DeleteLaunchTemplateVersionRequest method.
//    req, resp := client.DeleteLaunchTemplateVersionRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DeleteLaunchTemplateVersionRequest(input *DeleteLaunchTemplateVersionInput) (req *request.Request, output *DeleteLaunchTemplateVersionOutput) {
	op := &request.Operation{
		Name:       opDeleteLaunchTemplateVersion,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteLaunchTemplateVersionInput{}
	}

	output = &DeleteLaunchTemplateVersionOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteLaunchTemplateVersion API operation for ECS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ECS's
// API operation DeleteLaunchTemplateVersion for usage and error information.
func (c *ECS) DeleteLaunchTemplateVersion(input *DeleteLaunchTemplateVersionInput) (*DeleteLaunchTemplateVersionOutput, error) {
	req, out := c.DeleteLaunchTemplateVersionRequest(input)
	return out, req.Send()
}

// DeleteLaunchTemplateVersionWithContext is the same as DeleteLaunchTemplateVersion with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteLaunchTemplateVersion for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DeleteLaunchTemplateVersionWithContext(ctx volcengine.Context, input *DeleteLaunchTemplateVersionInput, opts ...request.Option) (*DeleteLaunchTemplateVersionOutput, error) {
	req, out := c.DeleteLaunchTemplateVersionRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DeleteLaunchTemplateVersionInput struct {
	_ struct{} `type:"structure"`

	// DeleteVersions is a required field
	DeleteVersions []*int32 `type:"list" required:"true"`

	LaunchTemplateId *string `type:"string"`

	LaunchTemplateName *string `type:"string"`
}

// String returns the string representation
func (s DeleteLaunchTemplateVersionInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteLaunchTemplateVersionInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeleteLaunchTemplateVersionInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DeleteLaunchTemplateVersionInput"}
	if s.DeleteVersions == nil {
		invalidParams.Add(request.NewErrParamRequired("DeleteVersions"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDeleteVersions sets the DeleteVersions field's value.
func (s *DeleteLaunchTemplateVersionInput) SetDeleteVersions(v []*int32) *DeleteLaunchTemplateVersionInput {
	s.DeleteVersions = v
	return s
}

// SetLaunchTemplateId sets the LaunchTemplateId field's value.
func (s *DeleteLaunchTemplateVersionInput) SetLaunchTemplateId(v string) *DeleteLaunchTemplateVersionInput {
	s.LaunchTemplateId = &v
	return s
}

// SetLaunchTemplateName sets the LaunchTemplateName field's value.
func (s *DeleteLaunchTemplateVersionInput) SetLaunchTemplateName(v string) *DeleteLaunchTemplateVersionInput {
	s.LaunchTemplateName = &v
	return s
}

type DeleteLaunchTemplateVersionOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s DeleteLaunchTemplateVersionOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteLaunchTemplateVersionOutput) GoString() string {
	return s.String()
}
