// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package ecs

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opReportInstancesStatusCommon = "ReportInstancesStatus"

// ReportInstancesStatusCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ReportInstancesStatusCommon operation. The "output" return
// value will be populated with the ReportInstancesStatusCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ReportInstancesStatusCommon Request to send the API call to the service.
// the "output" return value is not valid until after ReportInstancesStatusCommon Send returns without error.
//
// See ReportInstancesStatusCommon for more information on using the ReportInstancesStatusCommon
// API call, and error handling.
//
//    // Example sending a request using the ReportInstancesStatusCommonRequest method.
//    req, resp := client.ReportInstancesStatusCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) ReportInstancesStatusCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opReportInstancesStatusCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// ReportInstancesStatusCommon API operation for ECS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ECS's
// API operation ReportInstancesStatusCommon for usage and error information.
func (c *ECS) ReportInstancesStatusCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ReportInstancesStatusCommonRequest(input)
	return out, req.Send()
}

// ReportInstancesStatusCommonWithContext is the same as ReportInstancesStatusCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ReportInstancesStatusCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) ReportInstancesStatusCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ReportInstancesStatusCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opReportInstancesStatus = "ReportInstancesStatus"

// ReportInstancesStatusRequest generates a "volcengine/request.Request" representing the
// client's request for the ReportInstancesStatus operation. The "output" return
// value will be populated with the ReportInstancesStatusCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ReportInstancesStatusCommon Request to send the API call to the service.
// the "output" return value is not valid until after ReportInstancesStatusCommon Send returns without error.
//
// See ReportInstancesStatus for more information on using the ReportInstancesStatus
// API call, and error handling.
//
//    // Example sending a request using the ReportInstancesStatusRequest method.
//    req, resp := client.ReportInstancesStatusRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) ReportInstancesStatusRequest(input *ReportInstancesStatusInput) (req *request.Request, output *ReportInstancesStatusOutput) {
	op := &request.Operation{
		Name:       opReportInstancesStatus,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ReportInstancesStatusInput{}
	}

	output = &ReportInstancesStatusOutput{}
	req = c.newRequest(op, input, output)

	return
}

// ReportInstancesStatus API operation for ECS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ECS's
// API operation ReportInstancesStatus for usage and error information.
func (c *ECS) ReportInstancesStatus(input *ReportInstancesStatusInput) (*ReportInstancesStatusOutput, error) {
	req, out := c.ReportInstancesStatusRequest(input)
	return out, req.Send()
}

// ReportInstancesStatusWithContext is the same as ReportInstancesStatus with the addition of
// the ability to pass a context and additional request options.
//
// See ReportInstancesStatus for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) ReportInstancesStatusWithContext(ctx volcengine.Context, input *ReportInstancesStatusInput, opts ...request.Option) (*ReportInstancesStatusOutput, error) {
	req, out := c.ReportInstancesStatusRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ReportInstancesStatusInput struct {
	_ struct{} `type:"structure"`

	// Description is a required field
	Description *string `type:"string" required:"true"`

	DeviceNames []*string `type:"list"`

	DiskIds []*string `type:"list"`

	EndTime *string `type:"string"`

	// InstanceIds is a required field
	InstanceIds []*string `type:"list" required:"true"`

	Reason *string `type:"string"`

	StartTime *string `type:"string"`
}

// String returns the string representation
func (s ReportInstancesStatusInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ReportInstancesStatusInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ReportInstancesStatusInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ReportInstancesStatusInput"}
	if s.Description == nil {
		invalidParams.Add(request.NewErrParamRequired("Description"))
	}
	if s.InstanceIds == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceIds"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDescription sets the Description field's value.
func (s *ReportInstancesStatusInput) SetDescription(v string) *ReportInstancesStatusInput {
	s.Description = &v
	return s
}

// SetDeviceNames sets the DeviceNames field's value.
func (s *ReportInstancesStatusInput) SetDeviceNames(v []*string) *ReportInstancesStatusInput {
	s.DeviceNames = v
	return s
}

// SetDiskIds sets the DiskIds field's value.
func (s *ReportInstancesStatusInput) SetDiskIds(v []*string) *ReportInstancesStatusInput {
	s.DiskIds = v
	return s
}

// SetEndTime sets the EndTime field's value.
func (s *ReportInstancesStatusInput) SetEndTime(v string) *ReportInstancesStatusInput {
	s.EndTime = &v
	return s
}

// SetInstanceIds sets the InstanceIds field's value.
func (s *ReportInstancesStatusInput) SetInstanceIds(v []*string) *ReportInstancesStatusInput {
	s.InstanceIds = v
	return s
}

// SetReason sets the Reason field's value.
func (s *ReportInstancesStatusInput) SetReason(v string) *ReportInstancesStatusInput {
	s.Reason = &v
	return s
}

// SetStartTime sets the StartTime field's value.
func (s *ReportInstancesStatusInput) SetStartTime(v string) *ReportInstancesStatusInput {
	s.StartTime = &v
	return s
}

type ReportInstancesStatusOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s ReportInstancesStatusOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ReportInstancesStatusOutput) GoString() string {
	return s.String()
}
