// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package mongodb

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opModifyDBEndpointPortCommon = "ModifyDBEndpointPort"

// ModifyDBEndpointPortCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ModifyDBEndpointPortCommon operation. The "output" return
// value will be populated with the ModifyDBEndpointPortCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyDBEndpointPortCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyDBEndpointPortCommon Send returns without error.
//
// See ModifyDBEndpointPortCommon for more information on using the ModifyDBEndpointPortCommon
// API call, and error handling.
//
//    // Example sending a request using the ModifyDBEndpointPortCommonRequest method.
//    req, resp := client.ModifyDBEndpointPortCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *MONGODB) ModifyDBEndpointPortCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opModifyDBEndpointPortCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ModifyDBEndpointPortCommon API operation for MONGODB.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for MONGODB's
// API operation ModifyDBEndpointPortCommon for usage and error information.
func (c *MONGODB) ModifyDBEndpointPortCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ModifyDBEndpointPortCommonRequest(input)
	return out, req.Send()
}

// ModifyDBEndpointPortCommonWithContext is the same as ModifyDBEndpointPortCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyDBEndpointPortCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *MONGODB) ModifyDBEndpointPortCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ModifyDBEndpointPortCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyDBEndpointPort = "ModifyDBEndpointPort"

// ModifyDBEndpointPortRequest generates a "volcengine/request.Request" representing the
// client's request for the ModifyDBEndpointPort operation. The "output" return
// value will be populated with the ModifyDBEndpointPortCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyDBEndpointPortCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyDBEndpointPortCommon Send returns without error.
//
// See ModifyDBEndpointPort for more information on using the ModifyDBEndpointPort
// API call, and error handling.
//
//    // Example sending a request using the ModifyDBEndpointPortRequest method.
//    req, resp := client.ModifyDBEndpointPortRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *MONGODB) ModifyDBEndpointPortRequest(input *ModifyDBEndpointPortInput) (req *request.Request, output *ModifyDBEndpointPortOutput) {
	op := &request.Operation{
		Name:       opModifyDBEndpointPort,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ModifyDBEndpointPortInput{}
	}

	output = &ModifyDBEndpointPortOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ModifyDBEndpointPort API operation for MONGODB.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for MONGODB's
// API operation ModifyDBEndpointPort for usage and error information.
func (c *MONGODB) ModifyDBEndpointPort(input *ModifyDBEndpointPortInput) (*ModifyDBEndpointPortOutput, error) {
	req, out := c.ModifyDBEndpointPortRequest(input)
	return out, req.Send()
}

// ModifyDBEndpointPortWithContext is the same as ModifyDBEndpointPort with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyDBEndpointPort for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *MONGODB) ModifyDBEndpointPortWithContext(ctx volcengine.Context, input *ModifyDBEndpointPortInput, opts ...request.Option) (*ModifyDBEndpointPortOutput, error) {
	req, out := c.ModifyDBEndpointPortRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ModifyDBEndpointPortInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:",omitempty" required:"true"`

	// Port is a required field
	Port *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s ModifyDBEndpointPortInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyDBEndpointPortInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ModifyDBEndpointPortInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ModifyDBEndpointPortInput"}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}
	if s.Port == nil {
		invalidParams.Add(request.NewErrParamRequired("Port"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetInstanceId sets the InstanceId field's value.
func (s *ModifyDBEndpointPortInput) SetInstanceId(v string) *ModifyDBEndpointPortInput {
	s.InstanceId = &v
	return s
}

// SetPort sets the Port field's value.
func (s *ModifyDBEndpointPortInput) SetPort(v string) *ModifyDBEndpointPortInput {
	s.Port = &v
	return s
}

type ModifyDBEndpointPortOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s ModifyDBEndpointPortOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyDBEndpointPortOutput) GoString() string {
	return s.String()
}
