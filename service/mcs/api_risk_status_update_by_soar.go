// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package mcs

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opRiskStatusUpdateBySoarCommon = "RiskStatusUpdateBySoar"

// RiskStatusUpdateBySoarCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the RiskStatusUpdateBySoarCommon operation. The "output" return
// value will be populated with the RiskStatusUpdateBySoarCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned RiskStatusUpdateBySoarCommon Request to send the API call to the service.
// the "output" return value is not valid until after RiskStatusUpdateBySoarCommon Send returns without error.
//
// See RiskStatusUpdateBySoarCommon for more information on using the RiskStatusUpdateBySoarCommon
// API call, and error handling.
//
//    // Example sending a request using the RiskStatusUpdateBySoarCommonRequest method.
//    req, resp := client.RiskStatusUpdateBySoarCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *MCS) RiskStatusUpdateBySoarCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opRiskStatusUpdateBySoarCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// RiskStatusUpdateBySoarCommon API operation for MCS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for MCS's
// API operation RiskStatusUpdateBySoarCommon for usage and error information.
func (c *MCS) RiskStatusUpdateBySoarCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.RiskStatusUpdateBySoarCommonRequest(input)
	return out, req.Send()
}

// RiskStatusUpdateBySoarCommonWithContext is the same as RiskStatusUpdateBySoarCommon with the addition of
// the ability to pass a context and additional request options.
//
// See RiskStatusUpdateBySoarCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *MCS) RiskStatusUpdateBySoarCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.RiskStatusUpdateBySoarCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opRiskStatusUpdateBySoar = "RiskStatusUpdateBySoar"

// RiskStatusUpdateBySoarRequest generates a "volcengine/request.Request" representing the
// client's request for the RiskStatusUpdateBySoar operation. The "output" return
// value will be populated with the RiskStatusUpdateBySoarCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned RiskStatusUpdateBySoarCommon Request to send the API call to the service.
// the "output" return value is not valid until after RiskStatusUpdateBySoarCommon Send returns without error.
//
// See RiskStatusUpdateBySoar for more information on using the RiskStatusUpdateBySoar
// API call, and error handling.
//
//    // Example sending a request using the RiskStatusUpdateBySoarRequest method.
//    req, resp := client.RiskStatusUpdateBySoarRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *MCS) RiskStatusUpdateBySoarRequest(input *RiskStatusUpdateBySoarInput) (req *request.Request, output *RiskStatusUpdateBySoarOutput) {
	op := &request.Operation{
		Name:       opRiskStatusUpdateBySoar,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &RiskStatusUpdateBySoarInput{}
	}

	output = &RiskStatusUpdateBySoarOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// RiskStatusUpdateBySoar API operation for MCS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for MCS's
// API operation RiskStatusUpdateBySoar for usage and error information.
func (c *MCS) RiskStatusUpdateBySoar(input *RiskStatusUpdateBySoarInput) (*RiskStatusUpdateBySoarOutput, error) {
	req, out := c.RiskStatusUpdateBySoarRequest(input)
	return out, req.Send()
}

// RiskStatusUpdateBySoarWithContext is the same as RiskStatusUpdateBySoar with the addition of
// the ability to pass a context and additional request options.
//
// See RiskStatusUpdateBySoar for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *MCS) RiskStatusUpdateBySoarWithContext(ctx volcengine.Context, input *RiskStatusUpdateBySoarInput, opts ...request.Option) (*RiskStatusUpdateBySoarOutput, error) {
	req, out := c.RiskStatusUpdateBySoarRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type RiskStatusUpdateBySoarInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// AlarmID is a required field
	AlarmID *string `type:"string" json:",omitempty" required:"true"`

	DisposalReason *string `type:"string" json:",omitempty"`

	// DisposalResult is a required field
	DisposalResult *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s RiskStatusUpdateBySoarInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s RiskStatusUpdateBySoarInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *RiskStatusUpdateBySoarInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "RiskStatusUpdateBySoarInput"}
	if s.AlarmID == nil {
		invalidParams.Add(request.NewErrParamRequired("AlarmID"))
	}
	if s.DisposalResult == nil {
		invalidParams.Add(request.NewErrParamRequired("DisposalResult"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAlarmID sets the AlarmID field's value.
func (s *RiskStatusUpdateBySoarInput) SetAlarmID(v string) *RiskStatusUpdateBySoarInput {
	s.AlarmID = &v
	return s
}

// SetDisposalReason sets the DisposalReason field's value.
func (s *RiskStatusUpdateBySoarInput) SetDisposalReason(v string) *RiskStatusUpdateBySoarInput {
	s.DisposalReason = &v
	return s
}

// SetDisposalResult sets the DisposalResult field's value.
func (s *RiskStatusUpdateBySoarInput) SetDisposalResult(v string) *RiskStatusUpdateBySoarInput {
	s.DisposalResult = &v
	return s
}

type RiskStatusUpdateBySoarOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	OpResult *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s RiskStatusUpdateBySoarOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s RiskStatusUpdateBySoarOutput) GoString() string {
	return s.String()
}

// SetOpResult sets the OpResult field's value.
func (s *RiskStatusUpdateBySoarOutput) SetOpResult(v string) *RiskStatusUpdateBySoarOutput {
	s.OpResult = &v
	return s
}
