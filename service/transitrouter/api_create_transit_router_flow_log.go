// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package transitrouter

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opCreateTransitRouterFlowLogCommon = "CreateTransitRouterFlowLog"

// CreateTransitRouterFlowLogCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateTransitRouterFlowLogCommon operation. The "output" return
// value will be populated with the CreateTransitRouterFlowLogCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateTransitRouterFlowLogCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateTransitRouterFlowLogCommon Send returns without error.
//
// See CreateTransitRouterFlowLogCommon for more information on using the CreateTransitRouterFlowLogCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateTransitRouterFlowLogCommonRequest method.
//    req, resp := client.CreateTransitRouterFlowLogCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *TRANSITROUTER) CreateTransitRouterFlowLogCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateTransitRouterFlowLogCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// CreateTransitRouterFlowLogCommon API operation for TRANSITROUTER.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for TRANSITROUTER's
// API operation CreateTransitRouterFlowLogCommon for usage and error information.
func (c *TRANSITROUTER) CreateTransitRouterFlowLogCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateTransitRouterFlowLogCommonRequest(input)
	return out, req.Send()
}

// CreateTransitRouterFlowLogCommonWithContext is the same as CreateTransitRouterFlowLogCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateTransitRouterFlowLogCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *TRANSITROUTER) CreateTransitRouterFlowLogCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateTransitRouterFlowLogCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateTransitRouterFlowLog = "CreateTransitRouterFlowLog"

// CreateTransitRouterFlowLogRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateTransitRouterFlowLog operation. The "output" return
// value will be populated with the CreateTransitRouterFlowLogCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateTransitRouterFlowLogCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateTransitRouterFlowLogCommon Send returns without error.
//
// See CreateTransitRouterFlowLog for more information on using the CreateTransitRouterFlowLog
// API call, and error handling.
//
//    // Example sending a request using the CreateTransitRouterFlowLogRequest method.
//    req, resp := client.CreateTransitRouterFlowLogRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *TRANSITROUTER) CreateTransitRouterFlowLogRequest(input *CreateTransitRouterFlowLogInput) (req *request.Request, output *CreateTransitRouterFlowLogOutput) {
	op := &request.Operation{
		Name:       opCreateTransitRouterFlowLog,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateTransitRouterFlowLogInput{}
	}

	output = &CreateTransitRouterFlowLogOutput{}
	req = c.newRequest(op, input, output)

	return
}

// CreateTransitRouterFlowLog API operation for TRANSITROUTER.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for TRANSITROUTER's
// API operation CreateTransitRouterFlowLog for usage and error information.
func (c *TRANSITROUTER) CreateTransitRouterFlowLog(input *CreateTransitRouterFlowLogInput) (*CreateTransitRouterFlowLogOutput, error) {
	req, out := c.CreateTransitRouterFlowLogRequest(input)
	return out, req.Send()
}

// CreateTransitRouterFlowLogWithContext is the same as CreateTransitRouterFlowLog with the addition of
// the ability to pass a context and additional request options.
//
// See CreateTransitRouterFlowLog for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *TRANSITROUTER) CreateTransitRouterFlowLogWithContext(ctx volcengine.Context, input *CreateTransitRouterFlowLogInput, opts ...request.Option) (*CreateTransitRouterFlowLogOutput, error) {
	req, out := c.CreateTransitRouterFlowLogRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type CreateTransitRouterFlowLogInput struct {
	_ struct{} `type:"structure"`

	AggregationInterval *int32 `type:"int32"`

	ClientToken *string `type:"string"`

	Description *string `type:"string"`

	LogFormatString *string `type:"string"`

	// ResourceId is a required field
	ResourceId *string `type:"string" required:"true"`

	// ResourceType is a required field
	ResourceType *string `type:"string" required:"true"`

	Tags []*TagForCreateTransitRouterFlowLogInput `type:"list"`

	// TlsProjectName is a required field
	TlsProjectName *string `type:"string" required:"true"`

	// TlsTopicName is a required field
	TlsTopicName *string `type:"string" required:"true"`

	TransitRouterFlowLogName *string `type:"string"`

	// TransitRouterId is a required field
	TransitRouterId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s CreateTransitRouterFlowLogInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateTransitRouterFlowLogInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateTransitRouterFlowLogInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CreateTransitRouterFlowLogInput"}
	if s.ResourceId == nil {
		invalidParams.Add(request.NewErrParamRequired("ResourceId"))
	}
	if s.ResourceType == nil {
		invalidParams.Add(request.NewErrParamRequired("ResourceType"))
	}
	if s.TlsProjectName == nil {
		invalidParams.Add(request.NewErrParamRequired("TlsProjectName"))
	}
	if s.TlsTopicName == nil {
		invalidParams.Add(request.NewErrParamRequired("TlsTopicName"))
	}
	if s.TransitRouterId == nil {
		invalidParams.Add(request.NewErrParamRequired("TransitRouterId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAggregationInterval sets the AggregationInterval field's value.
func (s *CreateTransitRouterFlowLogInput) SetAggregationInterval(v int32) *CreateTransitRouterFlowLogInput {
	s.AggregationInterval = &v
	return s
}

// SetClientToken sets the ClientToken field's value.
func (s *CreateTransitRouterFlowLogInput) SetClientToken(v string) *CreateTransitRouterFlowLogInput {
	s.ClientToken = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *CreateTransitRouterFlowLogInput) SetDescription(v string) *CreateTransitRouterFlowLogInput {
	s.Description = &v
	return s
}

// SetLogFormatString sets the LogFormatString field's value.
func (s *CreateTransitRouterFlowLogInput) SetLogFormatString(v string) *CreateTransitRouterFlowLogInput {
	s.LogFormatString = &v
	return s
}

// SetResourceId sets the ResourceId field's value.
func (s *CreateTransitRouterFlowLogInput) SetResourceId(v string) *CreateTransitRouterFlowLogInput {
	s.ResourceId = &v
	return s
}

// SetResourceType sets the ResourceType field's value.
func (s *CreateTransitRouterFlowLogInput) SetResourceType(v string) *CreateTransitRouterFlowLogInput {
	s.ResourceType = &v
	return s
}

// SetTags sets the Tags field's value.
func (s *CreateTransitRouterFlowLogInput) SetTags(v []*TagForCreateTransitRouterFlowLogInput) *CreateTransitRouterFlowLogInput {
	s.Tags = v
	return s
}

// SetTlsProjectName sets the TlsProjectName field's value.
func (s *CreateTransitRouterFlowLogInput) SetTlsProjectName(v string) *CreateTransitRouterFlowLogInput {
	s.TlsProjectName = &v
	return s
}

// SetTlsTopicName sets the TlsTopicName field's value.
func (s *CreateTransitRouterFlowLogInput) SetTlsTopicName(v string) *CreateTransitRouterFlowLogInput {
	s.TlsTopicName = &v
	return s
}

// SetTransitRouterFlowLogName sets the TransitRouterFlowLogName field's value.
func (s *CreateTransitRouterFlowLogInput) SetTransitRouterFlowLogName(v string) *CreateTransitRouterFlowLogInput {
	s.TransitRouterFlowLogName = &v
	return s
}

// SetTransitRouterId sets the TransitRouterId field's value.
func (s *CreateTransitRouterFlowLogInput) SetTransitRouterId(v string) *CreateTransitRouterFlowLogInput {
	s.TransitRouterId = &v
	return s
}

type CreateTransitRouterFlowLogOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	TransitRouterFlowLogId *string `type:"string"`
}

// String returns the string representation
func (s CreateTransitRouterFlowLogOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateTransitRouterFlowLogOutput) GoString() string {
	return s.String()
}

// SetTransitRouterFlowLogId sets the TransitRouterFlowLogId field's value.
func (s *CreateTransitRouterFlowLogOutput) SetTransitRouterFlowLogId(v string) *CreateTransitRouterFlowLogOutput {
	s.TransitRouterFlowLogId = &v
	return s
}

type TagForCreateTransitRouterFlowLogInput struct {
	_ struct{} `type:"structure"`

	Key *string `type:"string"`

	Value *string `type:"string"`
}

// String returns the string representation
func (s TagForCreateTransitRouterFlowLogInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s TagForCreateTransitRouterFlowLogInput) GoString() string {
	return s.String()
}

// SetKey sets the Key field's value.
func (s *TagForCreateTransitRouterFlowLogInput) SetKey(v string) *TagForCreateTransitRouterFlowLogInput {
	s.Key = &v
	return s
}

// SetValue sets the Value field's value.
func (s *TagForCreateTransitRouterFlowLogInput) SetValue(v string) *TagForCreateTransitRouterFlowLogInput {
	s.Value = &v
	return s
}
