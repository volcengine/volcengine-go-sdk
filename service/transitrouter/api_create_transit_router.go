// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package transitrouter

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opCreateTransitRouterCommon = "CreateTransitRouter"

// CreateTransitRouterCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateTransitRouterCommon operation. The "output" return
// value will be populated with the CreateTransitRouterCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateTransitRouterCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateTransitRouterCommon Send returns without error.
//
// See CreateTransitRouterCommon for more information on using the CreateTransitRouterCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateTransitRouterCommonRequest method.
//    req, resp := client.CreateTransitRouterCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *TRANSITROUTER) CreateTransitRouterCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateTransitRouterCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// CreateTransitRouterCommon API operation for TRANSITROUTER.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for TRANSITROUTER's
// API operation CreateTransitRouterCommon for usage and error information.
func (c *TRANSITROUTER) CreateTransitRouterCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateTransitRouterCommonRequest(input)
	return out, req.Send()
}

// CreateTransitRouterCommonWithContext is the same as CreateTransitRouterCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateTransitRouterCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *TRANSITROUTER) CreateTransitRouterCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateTransitRouterCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateTransitRouter = "CreateTransitRouter"

// CreateTransitRouterRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateTransitRouter operation. The "output" return
// value will be populated with the CreateTransitRouterCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateTransitRouterCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateTransitRouterCommon Send returns without error.
//
// See CreateTransitRouter for more information on using the CreateTransitRouter
// API call, and error handling.
//
//    // Example sending a request using the CreateTransitRouterRequest method.
//    req, resp := client.CreateTransitRouterRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *TRANSITROUTER) CreateTransitRouterRequest(input *CreateTransitRouterInput) (req *request.Request, output *CreateTransitRouterOutput) {
	op := &request.Operation{
		Name:       opCreateTransitRouter,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateTransitRouterInput{}
	}

	output = &CreateTransitRouterOutput{}
	req = c.newRequest(op, input, output)

	return
}

// CreateTransitRouter API operation for TRANSITROUTER.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for TRANSITROUTER's
// API operation CreateTransitRouter for usage and error information.
func (c *TRANSITROUTER) CreateTransitRouter(input *CreateTransitRouterInput) (*CreateTransitRouterOutput, error) {
	req, out := c.CreateTransitRouterRequest(input)
	return out, req.Send()
}

// CreateTransitRouterWithContext is the same as CreateTransitRouter with the addition of
// the ability to pass a context and additional request options.
//
// See CreateTransitRouter for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *TRANSITROUTER) CreateTransitRouterWithContext(ctx volcengine.Context, input *CreateTransitRouterInput, opts ...request.Option) (*CreateTransitRouterOutput, error) {
	req, out := c.CreateTransitRouterRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type CreateTransitRouterInput struct {
	_ struct{} `type:"structure"`

	Asn *int64 `type:"int64"`

	ClientToken *string `type:"string"`

	Description *string `type:"string"`

	MulticastEnabled *bool `type:"boolean"`

	ProjectName *string `type:"string"`

	Tags []*TagForCreateTransitRouterInput `type:"list"`

	TransitRouterName *string `type:"string"`
}

// String returns the string representation
func (s CreateTransitRouterInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateTransitRouterInput) GoString() string {
	return s.String()
}

// SetAsn sets the Asn field's value.
func (s *CreateTransitRouterInput) SetAsn(v int64) *CreateTransitRouterInput {
	s.Asn = &v
	return s
}

// SetClientToken sets the ClientToken field's value.
func (s *CreateTransitRouterInput) SetClientToken(v string) *CreateTransitRouterInput {
	s.ClientToken = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *CreateTransitRouterInput) SetDescription(v string) *CreateTransitRouterInput {
	s.Description = &v
	return s
}

// SetMulticastEnabled sets the MulticastEnabled field's value.
func (s *CreateTransitRouterInput) SetMulticastEnabled(v bool) *CreateTransitRouterInput {
	s.MulticastEnabled = &v
	return s
}

// SetProjectName sets the ProjectName field's value.
func (s *CreateTransitRouterInput) SetProjectName(v string) *CreateTransitRouterInput {
	s.ProjectName = &v
	return s
}

// SetTags sets the Tags field's value.
func (s *CreateTransitRouterInput) SetTags(v []*TagForCreateTransitRouterInput) *CreateTransitRouterInput {
	s.Tags = v
	return s
}

// SetTransitRouterName sets the TransitRouterName field's value.
func (s *CreateTransitRouterInput) SetTransitRouterName(v string) *CreateTransitRouterInput {
	s.TransitRouterName = &v
	return s
}

type CreateTransitRouterOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	TransitRouterId *string `type:"string"`
}

// String returns the string representation
func (s CreateTransitRouterOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateTransitRouterOutput) GoString() string {
	return s.String()
}

// SetTransitRouterId sets the TransitRouterId field's value.
func (s *CreateTransitRouterOutput) SetTransitRouterId(v string) *CreateTransitRouterOutput {
	s.TransitRouterId = &v
	return s
}

type TagForCreateTransitRouterInput struct {
	_ struct{} `type:"structure"`

	Key *string `type:"string"`

	Value *string `type:"string"`
}

// String returns the string representation
func (s TagForCreateTransitRouterInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s TagForCreateTransitRouterInput) GoString() string {
	return s.String()
}

// SetKey sets the Key field's value.
func (s *TagForCreateTransitRouterInput) SetKey(v string) *TagForCreateTransitRouterInput {
	s.Key = &v
	return s
}

// SetValue sets the Value field's value.
func (s *TagForCreateTransitRouterInput) SetValue(v string) *TagForCreateTransitRouterInput {
	s.Value = &v
	return s
}
