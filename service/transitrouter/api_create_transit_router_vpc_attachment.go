// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package transitrouter

import (
	"fmt"

	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opCreateTransitRouterVpcAttachmentCommon = "CreateTransitRouterVpcAttachment"

// CreateTransitRouterVpcAttachmentCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateTransitRouterVpcAttachmentCommon operation. The "output" return
// value will be populated with the CreateTransitRouterVpcAttachmentCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateTransitRouterVpcAttachmentCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateTransitRouterVpcAttachmentCommon Send returns without error.
//
// See CreateTransitRouterVpcAttachmentCommon for more information on using the CreateTransitRouterVpcAttachmentCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateTransitRouterVpcAttachmentCommonRequest method.
//    req, resp := client.CreateTransitRouterVpcAttachmentCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *TRANSITROUTER) CreateTransitRouterVpcAttachmentCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateTransitRouterVpcAttachmentCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// CreateTransitRouterVpcAttachmentCommon API operation for TRANSITROUTER.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for TRANSITROUTER's
// API operation CreateTransitRouterVpcAttachmentCommon for usage and error information.
func (c *TRANSITROUTER) CreateTransitRouterVpcAttachmentCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateTransitRouterVpcAttachmentCommonRequest(input)
	return out, req.Send()
}

// CreateTransitRouterVpcAttachmentCommonWithContext is the same as CreateTransitRouterVpcAttachmentCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateTransitRouterVpcAttachmentCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *TRANSITROUTER) CreateTransitRouterVpcAttachmentCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateTransitRouterVpcAttachmentCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateTransitRouterVpcAttachment = "CreateTransitRouterVpcAttachment"

// CreateTransitRouterVpcAttachmentRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateTransitRouterVpcAttachment operation. The "output" return
// value will be populated with the CreateTransitRouterVpcAttachmentCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateTransitRouterVpcAttachmentCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateTransitRouterVpcAttachmentCommon Send returns without error.
//
// See CreateTransitRouterVpcAttachment for more information on using the CreateTransitRouterVpcAttachment
// API call, and error handling.
//
//    // Example sending a request using the CreateTransitRouterVpcAttachmentRequest method.
//    req, resp := client.CreateTransitRouterVpcAttachmentRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *TRANSITROUTER) CreateTransitRouterVpcAttachmentRequest(input *CreateTransitRouterVpcAttachmentInput) (req *request.Request, output *CreateTransitRouterVpcAttachmentOutput) {
	op := &request.Operation{
		Name:       opCreateTransitRouterVpcAttachment,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateTransitRouterVpcAttachmentInput{}
	}

	output = &CreateTransitRouterVpcAttachmentOutput{}
	req = c.newRequest(op, input, output)

	return
}

// CreateTransitRouterVpcAttachment API operation for TRANSITROUTER.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for TRANSITROUTER's
// API operation CreateTransitRouterVpcAttachment for usage and error information.
func (c *TRANSITROUTER) CreateTransitRouterVpcAttachment(input *CreateTransitRouterVpcAttachmentInput) (*CreateTransitRouterVpcAttachmentOutput, error) {
	req, out := c.CreateTransitRouterVpcAttachmentRequest(input)
	return out, req.Send()
}

// CreateTransitRouterVpcAttachmentWithContext is the same as CreateTransitRouterVpcAttachment with the addition of
// the ability to pass a context and additional request options.
//
// See CreateTransitRouterVpcAttachment for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *TRANSITROUTER) CreateTransitRouterVpcAttachmentWithContext(ctx volcengine.Context, input *CreateTransitRouterVpcAttachmentInput, opts ...request.Option) (*CreateTransitRouterVpcAttachmentOutput, error) {
	req, out := c.CreateTransitRouterVpcAttachmentRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type AttachPointForCreateTransitRouterVpcAttachmentInput struct {
	_ struct{} `type:"structure"`

	// SubnetId is a required field
	SubnetId *string `type:"string" required:"true"`

	// ZoneId is a required field
	ZoneId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s AttachPointForCreateTransitRouterVpcAttachmentInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s AttachPointForCreateTransitRouterVpcAttachmentInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *AttachPointForCreateTransitRouterVpcAttachmentInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "AttachPointForCreateTransitRouterVpcAttachmentInput"}
	if s.SubnetId == nil {
		invalidParams.Add(request.NewErrParamRequired("SubnetId"))
	}
	if s.ZoneId == nil {
		invalidParams.Add(request.NewErrParamRequired("ZoneId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetSubnetId sets the SubnetId field's value.
func (s *AttachPointForCreateTransitRouterVpcAttachmentInput) SetSubnetId(v string) *AttachPointForCreateTransitRouterVpcAttachmentInput {
	s.SubnetId = &v
	return s
}

// SetZoneId sets the ZoneId field's value.
func (s *AttachPointForCreateTransitRouterVpcAttachmentInput) SetZoneId(v string) *AttachPointForCreateTransitRouterVpcAttachmentInput {
	s.ZoneId = &v
	return s
}

type CreateTransitRouterVpcAttachmentInput struct {
	_ struct{} `type:"structure"`

	AttachPoints []*AttachPointForCreateTransitRouterVpcAttachmentInput `type:"list"`

	AutoPublishRouteEnabled *bool `type:"boolean"`

	ClientToken *string `type:"string"`

	Description *string `type:"string"`

	Ipv6Enabled *bool `type:"boolean"`

	Tags []*TagForCreateTransitRouterVpcAttachmentInput `type:"list"`

	TransitRouterAttachmentName *string `type:"string"`

	// TransitRouterId is a required field
	TransitRouterId *string `type:"string" required:"true"`

	// VpcId is a required field
	VpcId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s CreateTransitRouterVpcAttachmentInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateTransitRouterVpcAttachmentInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateTransitRouterVpcAttachmentInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CreateTransitRouterVpcAttachmentInput"}
	if s.TransitRouterId == nil {
		invalidParams.Add(request.NewErrParamRequired("TransitRouterId"))
	}
	if s.VpcId == nil {
		invalidParams.Add(request.NewErrParamRequired("VpcId"))
	}
	if s.AttachPoints != nil {
		for i, v := range s.AttachPoints {
			if v == nil {
				continue
			}
			if err := v.Validate(); err != nil {
				invalidParams.AddNested(fmt.Sprintf("%s[%v]", "AttachPoints", i), err.(request.ErrInvalidParams))
			}
		}
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAttachPoints sets the AttachPoints field's value.
func (s *CreateTransitRouterVpcAttachmentInput) SetAttachPoints(v []*AttachPointForCreateTransitRouterVpcAttachmentInput) *CreateTransitRouterVpcAttachmentInput {
	s.AttachPoints = v
	return s
}

// SetAutoPublishRouteEnabled sets the AutoPublishRouteEnabled field's value.
func (s *CreateTransitRouterVpcAttachmentInput) SetAutoPublishRouteEnabled(v bool) *CreateTransitRouterVpcAttachmentInput {
	s.AutoPublishRouteEnabled = &v
	return s
}

// SetClientToken sets the ClientToken field's value.
func (s *CreateTransitRouterVpcAttachmentInput) SetClientToken(v string) *CreateTransitRouterVpcAttachmentInput {
	s.ClientToken = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *CreateTransitRouterVpcAttachmentInput) SetDescription(v string) *CreateTransitRouterVpcAttachmentInput {
	s.Description = &v
	return s
}

// SetIpv6Enabled sets the Ipv6Enabled field's value.
func (s *CreateTransitRouterVpcAttachmentInput) SetIpv6Enabled(v bool) *CreateTransitRouterVpcAttachmentInput {
	s.Ipv6Enabled = &v
	return s
}

// SetTags sets the Tags field's value.
func (s *CreateTransitRouterVpcAttachmentInput) SetTags(v []*TagForCreateTransitRouterVpcAttachmentInput) *CreateTransitRouterVpcAttachmentInput {
	s.Tags = v
	return s
}

// SetTransitRouterAttachmentName sets the TransitRouterAttachmentName field's value.
func (s *CreateTransitRouterVpcAttachmentInput) SetTransitRouterAttachmentName(v string) *CreateTransitRouterVpcAttachmentInput {
	s.TransitRouterAttachmentName = &v
	return s
}

// SetTransitRouterId sets the TransitRouterId field's value.
func (s *CreateTransitRouterVpcAttachmentInput) SetTransitRouterId(v string) *CreateTransitRouterVpcAttachmentInput {
	s.TransitRouterId = &v
	return s
}

// SetVpcId sets the VpcId field's value.
func (s *CreateTransitRouterVpcAttachmentInput) SetVpcId(v string) *CreateTransitRouterVpcAttachmentInput {
	s.VpcId = &v
	return s
}

type CreateTransitRouterVpcAttachmentOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	TransitRouterAttachmentId *string `type:"string"`
}

// String returns the string representation
func (s CreateTransitRouterVpcAttachmentOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateTransitRouterVpcAttachmentOutput) GoString() string {
	return s.String()
}

// SetTransitRouterAttachmentId sets the TransitRouterAttachmentId field's value.
func (s *CreateTransitRouterVpcAttachmentOutput) SetTransitRouterAttachmentId(v string) *CreateTransitRouterVpcAttachmentOutput {
	s.TransitRouterAttachmentId = &v
	return s
}

type TagForCreateTransitRouterVpcAttachmentInput struct {
	_ struct{} `type:"structure"`

	Key *string `type:"string"`

	Value *string `type:"string"`
}

// String returns the string representation
func (s TagForCreateTransitRouterVpcAttachmentInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s TagForCreateTransitRouterVpcAttachmentInput) GoString() string {
	return s.String()
}

// SetKey sets the Key field's value.
func (s *TagForCreateTransitRouterVpcAttachmentInput) SetKey(v string) *TagForCreateTransitRouterVpcAttachmentInput {
	s.Key = &v
	return s
}

// SetValue sets the Value field's value.
func (s *TagForCreateTransitRouterVpcAttachmentInput) SetValue(v string) *TagForCreateTransitRouterVpcAttachmentInput {
	s.Value = &v
	return s
}
