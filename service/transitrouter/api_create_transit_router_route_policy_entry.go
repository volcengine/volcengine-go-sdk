// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package transitrouter

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opCreateTransitRouterRoutePolicyEntryCommon = "CreateTransitRouterRoutePolicyEntry"

// CreateTransitRouterRoutePolicyEntryCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateTransitRouterRoutePolicyEntryCommon operation. The "output" return
// value will be populated with the CreateTransitRouterRoutePolicyEntryCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateTransitRouterRoutePolicyEntryCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateTransitRouterRoutePolicyEntryCommon Send returns without error.
//
// See CreateTransitRouterRoutePolicyEntryCommon for more information on using the CreateTransitRouterRoutePolicyEntryCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateTransitRouterRoutePolicyEntryCommonRequest method.
//    req, resp := client.CreateTransitRouterRoutePolicyEntryCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *TRANSITROUTER) CreateTransitRouterRoutePolicyEntryCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateTransitRouterRoutePolicyEntryCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// CreateTransitRouterRoutePolicyEntryCommon API operation for TRANSITROUTER.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for TRANSITROUTER's
// API operation CreateTransitRouterRoutePolicyEntryCommon for usage and error information.
func (c *TRANSITROUTER) CreateTransitRouterRoutePolicyEntryCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateTransitRouterRoutePolicyEntryCommonRequest(input)
	return out, req.Send()
}

// CreateTransitRouterRoutePolicyEntryCommonWithContext is the same as CreateTransitRouterRoutePolicyEntryCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateTransitRouterRoutePolicyEntryCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *TRANSITROUTER) CreateTransitRouterRoutePolicyEntryCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateTransitRouterRoutePolicyEntryCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateTransitRouterRoutePolicyEntry = "CreateTransitRouterRoutePolicyEntry"

// CreateTransitRouterRoutePolicyEntryRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateTransitRouterRoutePolicyEntry operation. The "output" return
// value will be populated with the CreateTransitRouterRoutePolicyEntryCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateTransitRouterRoutePolicyEntryCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateTransitRouterRoutePolicyEntryCommon Send returns without error.
//
// See CreateTransitRouterRoutePolicyEntry for more information on using the CreateTransitRouterRoutePolicyEntry
// API call, and error handling.
//
//    // Example sending a request using the CreateTransitRouterRoutePolicyEntryRequest method.
//    req, resp := client.CreateTransitRouterRoutePolicyEntryRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *TRANSITROUTER) CreateTransitRouterRoutePolicyEntryRequest(input *CreateTransitRouterRoutePolicyEntryInput) (req *request.Request, output *CreateTransitRouterRoutePolicyEntryOutput) {
	op := &request.Operation{
		Name:       opCreateTransitRouterRoutePolicyEntry,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateTransitRouterRoutePolicyEntryInput{}
	}

	output = &CreateTransitRouterRoutePolicyEntryOutput{}
	req = c.newRequest(op, input, output)

	return
}

// CreateTransitRouterRoutePolicyEntry API operation for TRANSITROUTER.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for TRANSITROUTER's
// API operation CreateTransitRouterRoutePolicyEntry for usage and error information.
func (c *TRANSITROUTER) CreateTransitRouterRoutePolicyEntry(input *CreateTransitRouterRoutePolicyEntryInput) (*CreateTransitRouterRoutePolicyEntryOutput, error) {
	req, out := c.CreateTransitRouterRoutePolicyEntryRequest(input)
	return out, req.Send()
}

// CreateTransitRouterRoutePolicyEntryWithContext is the same as CreateTransitRouterRoutePolicyEntry with the addition of
// the ability to pass a context and additional request options.
//
// See CreateTransitRouterRoutePolicyEntry for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *TRANSITROUTER) CreateTransitRouterRoutePolicyEntryWithContext(ctx volcengine.Context, input *CreateTransitRouterRoutePolicyEntryInput, opts ...request.Option) (*CreateTransitRouterRoutePolicyEntryOutput, error) {
	req, out := c.CreateTransitRouterRoutePolicyEntryRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type CreateTransitRouterRoutePolicyEntryInput struct {
	_ struct{} `type:"structure"`

	// ActionResult is a required field
	ActionResult *string `type:"string" required:"true"`

	ApplyAsPathValues []*string `type:"list"`

	AsPathOperateMode *string `type:"string"`

	ClientToken *string `type:"string"`

	Description *string `type:"string"`

	DestinationResourceIds []*string `type:"list"`

	DestinationResourceTypes []*string `type:"list"`

	IpPrefixMatchMode *string `type:"string"`

	IpPrefixes []*string `type:"list"`

	// Priority is a required field
	Priority *int32 `type:"int32" required:"true"`

	SourceResourceIds []*string `type:"list"`

	SourceResourceTypes []*string `type:"list"`

	// TransitRouterRoutePolicyTableId is a required field
	TransitRouterRoutePolicyTableId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s CreateTransitRouterRoutePolicyEntryInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateTransitRouterRoutePolicyEntryInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateTransitRouterRoutePolicyEntryInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CreateTransitRouterRoutePolicyEntryInput"}
	if s.ActionResult == nil {
		invalidParams.Add(request.NewErrParamRequired("ActionResult"))
	}
	if s.Priority == nil {
		invalidParams.Add(request.NewErrParamRequired("Priority"))
	}
	if s.TransitRouterRoutePolicyTableId == nil {
		invalidParams.Add(request.NewErrParamRequired("TransitRouterRoutePolicyTableId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetActionResult sets the ActionResult field's value.
func (s *CreateTransitRouterRoutePolicyEntryInput) SetActionResult(v string) *CreateTransitRouterRoutePolicyEntryInput {
	s.ActionResult = &v
	return s
}

// SetApplyAsPathValues sets the ApplyAsPathValues field's value.
func (s *CreateTransitRouterRoutePolicyEntryInput) SetApplyAsPathValues(v []*string) *CreateTransitRouterRoutePolicyEntryInput {
	s.ApplyAsPathValues = v
	return s
}

// SetAsPathOperateMode sets the AsPathOperateMode field's value.
func (s *CreateTransitRouterRoutePolicyEntryInput) SetAsPathOperateMode(v string) *CreateTransitRouterRoutePolicyEntryInput {
	s.AsPathOperateMode = &v
	return s
}

// SetClientToken sets the ClientToken field's value.
func (s *CreateTransitRouterRoutePolicyEntryInput) SetClientToken(v string) *CreateTransitRouterRoutePolicyEntryInput {
	s.ClientToken = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *CreateTransitRouterRoutePolicyEntryInput) SetDescription(v string) *CreateTransitRouterRoutePolicyEntryInput {
	s.Description = &v
	return s
}

// SetDestinationResourceIds sets the DestinationResourceIds field's value.
func (s *CreateTransitRouterRoutePolicyEntryInput) SetDestinationResourceIds(v []*string) *CreateTransitRouterRoutePolicyEntryInput {
	s.DestinationResourceIds = v
	return s
}

// SetDestinationResourceTypes sets the DestinationResourceTypes field's value.
func (s *CreateTransitRouterRoutePolicyEntryInput) SetDestinationResourceTypes(v []*string) *CreateTransitRouterRoutePolicyEntryInput {
	s.DestinationResourceTypes = v
	return s
}

// SetIpPrefixMatchMode sets the IpPrefixMatchMode field's value.
func (s *CreateTransitRouterRoutePolicyEntryInput) SetIpPrefixMatchMode(v string) *CreateTransitRouterRoutePolicyEntryInput {
	s.IpPrefixMatchMode = &v
	return s
}

// SetIpPrefixes sets the IpPrefixes field's value.
func (s *CreateTransitRouterRoutePolicyEntryInput) SetIpPrefixes(v []*string) *CreateTransitRouterRoutePolicyEntryInput {
	s.IpPrefixes = v
	return s
}

// SetPriority sets the Priority field's value.
func (s *CreateTransitRouterRoutePolicyEntryInput) SetPriority(v int32) *CreateTransitRouterRoutePolicyEntryInput {
	s.Priority = &v
	return s
}

// SetSourceResourceIds sets the SourceResourceIds field's value.
func (s *CreateTransitRouterRoutePolicyEntryInput) SetSourceResourceIds(v []*string) *CreateTransitRouterRoutePolicyEntryInput {
	s.SourceResourceIds = v
	return s
}

// SetSourceResourceTypes sets the SourceResourceTypes field's value.
func (s *CreateTransitRouterRoutePolicyEntryInput) SetSourceResourceTypes(v []*string) *CreateTransitRouterRoutePolicyEntryInput {
	s.SourceResourceTypes = v
	return s
}

// SetTransitRouterRoutePolicyTableId sets the TransitRouterRoutePolicyTableId field's value.
func (s *CreateTransitRouterRoutePolicyEntryInput) SetTransitRouterRoutePolicyTableId(v string) *CreateTransitRouterRoutePolicyEntryInput {
	s.TransitRouterRoutePolicyTableId = &v
	return s
}

type CreateTransitRouterRoutePolicyEntryOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	TransitRouterRoutePolicyEntryId *string `type:"string"`
}

// String returns the string representation
func (s CreateTransitRouterRoutePolicyEntryOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateTransitRouterRoutePolicyEntryOutput) GoString() string {
	return s.String()
}

// SetTransitRouterRoutePolicyEntryId sets the TransitRouterRoutePolicyEntryId field's value.
func (s *CreateTransitRouterRoutePolicyEntryOutput) SetTransitRouterRoutePolicyEntryId(v string) *CreateTransitRouterRoutePolicyEntryOutput {
	s.TransitRouterRoutePolicyEntryId = &v
	return s
}
