// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package transitrouter

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opCreateTransitRouterMulticastGroupSourceCommon = "CreateTransitRouterMulticastGroupSource"

// CreateTransitRouterMulticastGroupSourceCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateTransitRouterMulticastGroupSourceCommon operation. The "output" return
// value will be populated with the CreateTransitRouterMulticastGroupSourceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateTransitRouterMulticastGroupSourceCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateTransitRouterMulticastGroupSourceCommon Send returns without error.
//
// See CreateTransitRouterMulticastGroupSourceCommon for more information on using the CreateTransitRouterMulticastGroupSourceCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateTransitRouterMulticastGroupSourceCommonRequest method.
//    req, resp := client.CreateTransitRouterMulticastGroupSourceCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *TRANSITROUTER) CreateTransitRouterMulticastGroupSourceCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateTransitRouterMulticastGroupSourceCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// CreateTransitRouterMulticastGroupSourceCommon API operation for TRANSITROUTER.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for TRANSITROUTER's
// API operation CreateTransitRouterMulticastGroupSourceCommon for usage and error information.
func (c *TRANSITROUTER) CreateTransitRouterMulticastGroupSourceCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateTransitRouterMulticastGroupSourceCommonRequest(input)
	return out, req.Send()
}

// CreateTransitRouterMulticastGroupSourceCommonWithContext is the same as CreateTransitRouterMulticastGroupSourceCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateTransitRouterMulticastGroupSourceCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *TRANSITROUTER) CreateTransitRouterMulticastGroupSourceCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateTransitRouterMulticastGroupSourceCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateTransitRouterMulticastGroupSource = "CreateTransitRouterMulticastGroupSource"

// CreateTransitRouterMulticastGroupSourceRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateTransitRouterMulticastGroupSource operation. The "output" return
// value will be populated with the CreateTransitRouterMulticastGroupSourceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateTransitRouterMulticastGroupSourceCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateTransitRouterMulticastGroupSourceCommon Send returns without error.
//
// See CreateTransitRouterMulticastGroupSource for more information on using the CreateTransitRouterMulticastGroupSource
// API call, and error handling.
//
//    // Example sending a request using the CreateTransitRouterMulticastGroupSourceRequest method.
//    req, resp := client.CreateTransitRouterMulticastGroupSourceRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *TRANSITROUTER) CreateTransitRouterMulticastGroupSourceRequest(input *CreateTransitRouterMulticastGroupSourceInput) (req *request.Request, output *CreateTransitRouterMulticastGroupSourceOutput) {
	op := &request.Operation{
		Name:       opCreateTransitRouterMulticastGroupSource,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateTransitRouterMulticastGroupSourceInput{}
	}

	output = &CreateTransitRouterMulticastGroupSourceOutput{}
	req = c.newRequest(op, input, output)

	return
}

// CreateTransitRouterMulticastGroupSource API operation for TRANSITROUTER.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for TRANSITROUTER's
// API operation CreateTransitRouterMulticastGroupSource for usage and error information.
func (c *TRANSITROUTER) CreateTransitRouterMulticastGroupSource(input *CreateTransitRouterMulticastGroupSourceInput) (*CreateTransitRouterMulticastGroupSourceOutput, error) {
	req, out := c.CreateTransitRouterMulticastGroupSourceRequest(input)
	return out, req.Send()
}

// CreateTransitRouterMulticastGroupSourceWithContext is the same as CreateTransitRouterMulticastGroupSource with the addition of
// the ability to pass a context and additional request options.
//
// See CreateTransitRouterMulticastGroupSource for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *TRANSITROUTER) CreateTransitRouterMulticastGroupSourceWithContext(ctx volcengine.Context, input *CreateTransitRouterMulticastGroupSourceInput, opts ...request.Option) (*CreateTransitRouterMulticastGroupSourceOutput, error) {
	req, out := c.CreateTransitRouterMulticastGroupSourceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type CreateTransitRouterMulticastGroupSourceInput struct {
	_ struct{} `type:"structure"`

	ClientToken *string `type:"string"`

	// GroupIpAddress is a required field
	GroupIpAddress *string `type:"string" required:"true"`

	// NetworkInterfaceId is a required field
	NetworkInterfaceId *string `type:"string" required:"true"`

	// TransitRouterMulticastDomainId is a required field
	TransitRouterMulticastDomainId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s CreateTransitRouterMulticastGroupSourceInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateTransitRouterMulticastGroupSourceInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateTransitRouterMulticastGroupSourceInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CreateTransitRouterMulticastGroupSourceInput"}
	if s.GroupIpAddress == nil {
		invalidParams.Add(request.NewErrParamRequired("GroupIpAddress"))
	}
	if s.NetworkInterfaceId == nil {
		invalidParams.Add(request.NewErrParamRequired("NetworkInterfaceId"))
	}
	if s.TransitRouterMulticastDomainId == nil {
		invalidParams.Add(request.NewErrParamRequired("TransitRouterMulticastDomainId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetClientToken sets the ClientToken field's value.
func (s *CreateTransitRouterMulticastGroupSourceInput) SetClientToken(v string) *CreateTransitRouterMulticastGroupSourceInput {
	s.ClientToken = &v
	return s
}

// SetGroupIpAddress sets the GroupIpAddress field's value.
func (s *CreateTransitRouterMulticastGroupSourceInput) SetGroupIpAddress(v string) *CreateTransitRouterMulticastGroupSourceInput {
	s.GroupIpAddress = &v
	return s
}

// SetNetworkInterfaceId sets the NetworkInterfaceId field's value.
func (s *CreateTransitRouterMulticastGroupSourceInput) SetNetworkInterfaceId(v string) *CreateTransitRouterMulticastGroupSourceInput {
	s.NetworkInterfaceId = &v
	return s
}

// SetTransitRouterMulticastDomainId sets the TransitRouterMulticastDomainId field's value.
func (s *CreateTransitRouterMulticastGroupSourceInput) SetTransitRouterMulticastDomainId(v string) *CreateTransitRouterMulticastGroupSourceInput {
	s.TransitRouterMulticastDomainId = &v
	return s
}

type CreateTransitRouterMulticastGroupSourceOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s CreateTransitRouterMulticastGroupSourceOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateTransitRouterMulticastGroupSourceOutput) GoString() string {
	return s.String()
}
