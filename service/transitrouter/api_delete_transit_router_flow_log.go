// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package transitrouter

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDeleteTransitRouterFlowLogCommon = "DeleteTransitRouterFlowLog"

// DeleteTransitRouterFlowLogCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteTransitRouterFlowLogCommon operation. The "output" return
// value will be populated with the DeleteTransitRouterFlowLogCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteTransitRouterFlowLogCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteTransitRouterFlowLogCommon Send returns without error.
//
// See DeleteTransitRouterFlowLogCommon for more information on using the DeleteTransitRouterFlowLogCommon
// API call, and error handling.
//
//    // Example sending a request using the DeleteTransitRouterFlowLogCommonRequest method.
//    req, resp := client.DeleteTransitRouterFlowLogCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *TRANSITROUTER) DeleteTransitRouterFlowLogCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteTransitRouterFlowLogCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteTransitRouterFlowLogCommon API operation for TRANSITROUTER.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for TRANSITROUTER's
// API operation DeleteTransitRouterFlowLogCommon for usage and error information.
func (c *TRANSITROUTER) DeleteTransitRouterFlowLogCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteTransitRouterFlowLogCommonRequest(input)
	return out, req.Send()
}

// DeleteTransitRouterFlowLogCommonWithContext is the same as DeleteTransitRouterFlowLogCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteTransitRouterFlowLogCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *TRANSITROUTER) DeleteTransitRouterFlowLogCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteTransitRouterFlowLogCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteTransitRouterFlowLog = "DeleteTransitRouterFlowLog"

// DeleteTransitRouterFlowLogRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteTransitRouterFlowLog operation. The "output" return
// value will be populated with the DeleteTransitRouterFlowLogCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteTransitRouterFlowLogCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteTransitRouterFlowLogCommon Send returns without error.
//
// See DeleteTransitRouterFlowLog for more information on using the DeleteTransitRouterFlowLog
// API call, and error handling.
//
//    // Example sending a request using the DeleteTransitRouterFlowLogRequest method.
//    req, resp := client.DeleteTransitRouterFlowLogRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *TRANSITROUTER) DeleteTransitRouterFlowLogRequest(input *DeleteTransitRouterFlowLogInput) (req *request.Request, output *DeleteTransitRouterFlowLogOutput) {
	op := &request.Operation{
		Name:       opDeleteTransitRouterFlowLog,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteTransitRouterFlowLogInput{}
	}

	output = &DeleteTransitRouterFlowLogOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteTransitRouterFlowLog API operation for TRANSITROUTER.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for TRANSITROUTER's
// API operation DeleteTransitRouterFlowLog for usage and error information.
func (c *TRANSITROUTER) DeleteTransitRouterFlowLog(input *DeleteTransitRouterFlowLogInput) (*DeleteTransitRouterFlowLogOutput, error) {
	req, out := c.DeleteTransitRouterFlowLogRequest(input)
	return out, req.Send()
}

// DeleteTransitRouterFlowLogWithContext is the same as DeleteTransitRouterFlowLog with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteTransitRouterFlowLog for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *TRANSITROUTER) DeleteTransitRouterFlowLogWithContext(ctx volcengine.Context, input *DeleteTransitRouterFlowLogInput, opts ...request.Option) (*DeleteTransitRouterFlowLogOutput, error) {
	req, out := c.DeleteTransitRouterFlowLogRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DeleteTransitRouterFlowLogInput struct {
	_ struct{} `type:"structure"`

	// TransitRouterFlowLogId is a required field
	TransitRouterFlowLogId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s DeleteTransitRouterFlowLogInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteTransitRouterFlowLogInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeleteTransitRouterFlowLogInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DeleteTransitRouterFlowLogInput"}
	if s.TransitRouterFlowLogId == nil {
		invalidParams.Add(request.NewErrParamRequired("TransitRouterFlowLogId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetTransitRouterFlowLogId sets the TransitRouterFlowLogId field's value.
func (s *DeleteTransitRouterFlowLogInput) SetTransitRouterFlowLogId(v string) *DeleteTransitRouterFlowLogInput {
	s.TransitRouterFlowLogId = &v
	return s
}

type DeleteTransitRouterFlowLogOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s DeleteTransitRouterFlowLogOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteTransitRouterFlowLogOutput) GoString() string {
	return s.String()
}
