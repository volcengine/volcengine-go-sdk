// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package cloudmonitor

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opUpdateSilencePolicyCommon = "UpdateSilencePolicy"

// UpdateSilencePolicyCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateSilencePolicyCommon operation. The "output" return
// value will be populated with the UpdateSilencePolicyCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateSilencePolicyCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateSilencePolicyCommon Send returns without error.
//
// See UpdateSilencePolicyCommon for more information on using the UpdateSilencePolicyCommon
// API call, and error handling.
//
//    // Example sending a request using the UpdateSilencePolicyCommonRequest method.
//    req, resp := client.UpdateSilencePolicyCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLOUDMONITOR) UpdateSilencePolicyCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opUpdateSilencePolicyCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateSilencePolicyCommon API operation for CLOUDMONITOR.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for CLOUDMONITOR's
// API operation UpdateSilencePolicyCommon for usage and error information.
func (c *CLOUDMONITOR) UpdateSilencePolicyCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.UpdateSilencePolicyCommonRequest(input)
	return out, req.Send()
}

// UpdateSilencePolicyCommonWithContext is the same as UpdateSilencePolicyCommon with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateSilencePolicyCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLOUDMONITOR) UpdateSilencePolicyCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.UpdateSilencePolicyCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opUpdateSilencePolicy = "UpdateSilencePolicy"

// UpdateSilencePolicyRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateSilencePolicy operation. The "output" return
// value will be populated with the UpdateSilencePolicyCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateSilencePolicyCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateSilencePolicyCommon Send returns without error.
//
// See UpdateSilencePolicy for more information on using the UpdateSilencePolicy
// API call, and error handling.
//
//    // Example sending a request using the UpdateSilencePolicyRequest method.
//    req, resp := client.UpdateSilencePolicyRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLOUDMONITOR) UpdateSilencePolicyRequest(input *UpdateSilencePolicyInput) (req *request.Request, output *UpdateSilencePolicyOutput) {
	op := &request.Operation{
		Name:       opUpdateSilencePolicy,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UpdateSilencePolicyInput{}
	}

	output = &UpdateSilencePolicyOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateSilencePolicy API operation for CLOUDMONITOR.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for CLOUDMONITOR's
// API operation UpdateSilencePolicy for usage and error information.
func (c *CLOUDMONITOR) UpdateSilencePolicy(input *UpdateSilencePolicyInput) (*UpdateSilencePolicyOutput, error) {
	req, out := c.UpdateSilencePolicyRequest(input)
	return out, req.Send()
}

// UpdateSilencePolicyWithContext is the same as UpdateSilencePolicy with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateSilencePolicy for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLOUDMONITOR) UpdateSilencePolicyWithContext(ctx volcengine.Context, input *UpdateSilencePolicyInput, opts ...request.Option) (*UpdateSilencePolicyOutput, error) {
	req, out := c.UpdateSilencePolicyRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type EffectTimeForUpdateSilencePolicyInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Range []*RangeForUpdateSilencePolicyInput `type:"list" json:",omitempty"`

	Type *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s EffectTimeForUpdateSilencePolicyInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s EffectTimeForUpdateSilencePolicyInput) GoString() string {
	return s.String()
}

// SetRange sets the Range field's value.
func (s *EffectTimeForUpdateSilencePolicyInput) SetRange(v []*RangeForUpdateSilencePolicyInput) *EffectTimeForUpdateSilencePolicyInput {
	s.Range = v
	return s
}

// SetType sets the Type field's value.
func (s *EffectTimeForUpdateSilencePolicyInput) SetType(v string) *EffectTimeForUpdateSilencePolicyInput {
	s.Type = &v
	return s
}

type MetaConditionForUpdateSilencePolicyInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Condition *string `type:"string" json:",omitempty"`

	Metas []*MetaForUpdateSilencePolicyInput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s MetaConditionForUpdateSilencePolicyInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s MetaConditionForUpdateSilencePolicyInput) GoString() string {
	return s.String()
}

// SetCondition sets the Condition field's value.
func (s *MetaConditionForUpdateSilencePolicyInput) SetCondition(v string) *MetaConditionForUpdateSilencePolicyInput {
	s.Condition = &v
	return s
}

// SetMetas sets the Metas field's value.
func (s *MetaConditionForUpdateSilencePolicyInput) SetMetas(v []*MetaForUpdateSilencePolicyInput) *MetaConditionForUpdateSilencePolicyInput {
	s.Metas = v
	return s
}

type MetaForUpdateSilencePolicyInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Comparator *string `type:"string" json:",omitempty"`

	Key *string `type:"string" json:",omitempty"`

	Values []*string `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s MetaForUpdateSilencePolicyInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s MetaForUpdateSilencePolicyInput) GoString() string {
	return s.String()
}

// SetComparator sets the Comparator field's value.
func (s *MetaForUpdateSilencePolicyInput) SetComparator(v string) *MetaForUpdateSilencePolicyInput {
	s.Comparator = &v
	return s
}

// SetKey sets the Key field's value.
func (s *MetaForUpdateSilencePolicyInput) SetKey(v string) *MetaForUpdateSilencePolicyInput {
	s.Key = &v
	return s
}

// SetValues sets the Values field's value.
func (s *MetaForUpdateSilencePolicyInput) SetValues(v []*string) *MetaForUpdateSilencePolicyInput {
	s.Values = v
	return s
}

type RangeForUpdateSilencePolicyInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	EndDate *string `type:"string" json:",omitempty"`

	EndTime *string `type:"string" json:",omitempty"`

	StartDate *string `type:"string" json:",omitempty"`

	StartTime *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s RangeForUpdateSilencePolicyInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s RangeForUpdateSilencePolicyInput) GoString() string {
	return s.String()
}

// SetEndDate sets the EndDate field's value.
func (s *RangeForUpdateSilencePolicyInput) SetEndDate(v string) *RangeForUpdateSilencePolicyInput {
	s.EndDate = &v
	return s
}

// SetEndTime sets the EndTime field's value.
func (s *RangeForUpdateSilencePolicyInput) SetEndTime(v string) *RangeForUpdateSilencePolicyInput {
	s.EndTime = &v
	return s
}

// SetStartDate sets the StartDate field's value.
func (s *RangeForUpdateSilencePolicyInput) SetStartDate(v string) *RangeForUpdateSilencePolicyInput {
	s.StartDate = &v
	return s
}

// SetStartTime sets the StartTime field's value.
func (s *RangeForUpdateSilencePolicyInput) SetStartTime(v string) *RangeForUpdateSilencePolicyInput {
	s.StartTime = &v
	return s
}

type SilenceConditionsForUpdateSilencePolicyInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	EventType []*string `type:"list" json:",omitempty"`

	MetaCondition *MetaConditionForUpdateSilencePolicyInput `type:"structure" json:",omitempty"`

	RuleId *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s SilenceConditionsForUpdateSilencePolicyInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s SilenceConditionsForUpdateSilencePolicyInput) GoString() string {
	return s.String()
}

// SetEventType sets the EventType field's value.
func (s *SilenceConditionsForUpdateSilencePolicyInput) SetEventType(v []*string) *SilenceConditionsForUpdateSilencePolicyInput {
	s.EventType = v
	return s
}

// SetMetaCondition sets the MetaCondition field's value.
func (s *SilenceConditionsForUpdateSilencePolicyInput) SetMetaCondition(v *MetaConditionForUpdateSilencePolicyInput) *SilenceConditionsForUpdateSilencePolicyInput {
	s.MetaCondition = v
	return s
}

// SetRuleId sets the RuleId field's value.
func (s *SilenceConditionsForUpdateSilencePolicyInput) SetRuleId(v string) *SilenceConditionsForUpdateSilencePolicyInput {
	s.RuleId = &v
	return s
}

type UpdateSilencePolicyInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Description *string `type:"string" json:",omitempty"`

	EffectTime *EffectTimeForUpdateSilencePolicyInput `type:"structure" json:",omitempty"`

	// Id is a required field
	Id *string `type:"string" json:",omitempty" required:"true"`

	// Name is a required field
	Name *string `type:"string" json:",omitempty" required:"true"`

	// Namespace is a required field
	Namespace *string `type:"string" json:",omitempty" required:"true"`

	SilenceConditions *SilenceConditionsForUpdateSilencePolicyInput `type:"structure" json:",omitempty"`

	// SilenceType is a required field
	SilenceType *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s UpdateSilencePolicyInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateSilencePolicyInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UpdateSilencePolicyInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "UpdateSilencePolicyInput"}
	if s.Id == nil {
		invalidParams.Add(request.NewErrParamRequired("Id"))
	}
	if s.Name == nil {
		invalidParams.Add(request.NewErrParamRequired("Name"))
	}
	if s.Namespace == nil {
		invalidParams.Add(request.NewErrParamRequired("Namespace"))
	}
	if s.SilenceType == nil {
		invalidParams.Add(request.NewErrParamRequired("SilenceType"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDescription sets the Description field's value.
func (s *UpdateSilencePolicyInput) SetDescription(v string) *UpdateSilencePolicyInput {
	s.Description = &v
	return s
}

// SetEffectTime sets the EffectTime field's value.
func (s *UpdateSilencePolicyInput) SetEffectTime(v *EffectTimeForUpdateSilencePolicyInput) *UpdateSilencePolicyInput {
	s.EffectTime = v
	return s
}

// SetId sets the Id field's value.
func (s *UpdateSilencePolicyInput) SetId(v string) *UpdateSilencePolicyInput {
	s.Id = &v
	return s
}

// SetName sets the Name field's value.
func (s *UpdateSilencePolicyInput) SetName(v string) *UpdateSilencePolicyInput {
	s.Name = &v
	return s
}

// SetNamespace sets the Namespace field's value.
func (s *UpdateSilencePolicyInput) SetNamespace(v string) *UpdateSilencePolicyInput {
	s.Namespace = &v
	return s
}

// SetSilenceConditions sets the SilenceConditions field's value.
func (s *UpdateSilencePolicyInput) SetSilenceConditions(v *SilenceConditionsForUpdateSilencePolicyInput) *UpdateSilencePolicyInput {
	s.SilenceConditions = v
	return s
}

// SetSilenceType sets the SilenceType field's value.
func (s *UpdateSilencePolicyInput) SetSilenceType(v string) *UpdateSilencePolicyInput {
	s.SilenceType = &v
	return s
}

type UpdateSilencePolicyOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Data []*string `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s UpdateSilencePolicyOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateSilencePolicyOutput) GoString() string {
	return s.String()
}

// SetData sets the Data field's value.
func (s *UpdateSilencePolicyOutput) SetData(v []*string) *UpdateSilencePolicyOutput {
	s.Data = v
	return s
}
