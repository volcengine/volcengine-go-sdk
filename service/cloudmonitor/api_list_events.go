// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package cloudmonitor

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opListEventsCommon = "ListEvents"

// ListEventsCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ListEventsCommon operation. The "output" return
// value will be populated with the ListEventsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListEventsCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListEventsCommon Send returns without error.
//
// See ListEventsCommon for more information on using the ListEventsCommon
// API call, and error handling.
//
//    // Example sending a request using the ListEventsCommonRequest method.
//    req, resp := client.ListEventsCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLOUDMONITOR) ListEventsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opListEventsCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListEventsCommon API operation for CLOUDMONITOR.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for CLOUDMONITOR's
// API operation ListEventsCommon for usage and error information.
func (c *CLOUDMONITOR) ListEventsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ListEventsCommonRequest(input)
	return out, req.Send()
}

// ListEventsCommonWithContext is the same as ListEventsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ListEventsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLOUDMONITOR) ListEventsCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ListEventsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListEvents = "ListEvents"

// ListEventsRequest generates a "volcengine/request.Request" representing the
// client's request for the ListEvents operation. The "output" return
// value will be populated with the ListEventsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListEventsCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListEventsCommon Send returns without error.
//
// See ListEvents for more information on using the ListEvents
// API call, and error handling.
//
//    // Example sending a request using the ListEventsRequest method.
//    req, resp := client.ListEventsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLOUDMONITOR) ListEventsRequest(input *ListEventsInput) (req *request.Request, output *ListEventsOutput) {
	op := &request.Operation{
		Name:       opListEvents,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListEventsInput{}
	}

	output = &ListEventsOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListEvents API operation for CLOUDMONITOR.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for CLOUDMONITOR's
// API operation ListEvents for usage and error information.
func (c *CLOUDMONITOR) ListEvents(input *ListEventsInput) (*ListEventsOutput, error) {
	req, out := c.ListEventsRequest(input)
	return out, req.Send()
}

// ListEventsWithContext is the same as ListEvents with the addition of
// the ability to pass a context and additional request options.
//
// See ListEvents for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLOUDMONITOR) ListEventsWithContext(ctx volcengine.Context, input *ListEventsInput, opts ...request.Option) (*ListEventsOutput, error) {
	req, out := c.ListEventsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DataForListEventsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Detail map[string]*interface{} `type:"map" json:",omitempty"`

	EventBusName *string `type:"string" json:",omitempty"`

	EventType *string `type:"string" json:",omitempty"`

	HappenTime *int32 `type:"int32" json:",omitempty"`

	ID *string `type:"string" json:",omitempty"`

	Region *string `type:"string" json:",omitempty"`

	Source *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s DataForListEventsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DataForListEventsOutput) GoString() string {
	return s.String()
}

// SetDetail sets the Detail field's value.
func (s *DataForListEventsOutput) SetDetail(v map[string]*interface{}) *DataForListEventsOutput {
	s.Detail = v
	return s
}

// SetEventBusName sets the EventBusName field's value.
func (s *DataForListEventsOutput) SetEventBusName(v string) *DataForListEventsOutput {
	s.EventBusName = &v
	return s
}

// SetEventType sets the EventType field's value.
func (s *DataForListEventsOutput) SetEventType(v string) *DataForListEventsOutput {
	s.EventType = &v
	return s
}

// SetHappenTime sets the HappenTime field's value.
func (s *DataForListEventsOutput) SetHappenTime(v int32) *DataForListEventsOutput {
	s.HappenTime = &v
	return s
}

// SetID sets the ID field's value.
func (s *DataForListEventsOutput) SetID(v string) *DataForListEventsOutput {
	s.ID = &v
	return s
}

// SetRegion sets the Region field's value.
func (s *DataForListEventsOutput) SetRegion(v string) *DataForListEventsOutput {
	s.Region = &v
	return s
}

// SetSource sets the Source field's value.
func (s *DataForListEventsOutput) SetSource(v string) *DataForListEventsOutput {
	s.Source = &v
	return s
}

type ListEventsInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Asc *bool `type:"boolean" json:",omitempty"`

	EndTime *int32 `type:"int32" json:",omitempty"`

	EventType []*string `type:"list" json:",omitempty"`

	ID []*string `type:"list" json:",omitempty"`

	OrderBy *string `type:"string" json:",omitempty" enum:"EnumOfOrderByForListEventsInput"`

	PageNumber *int32 `type:"int32" json:",omitempty"`

	PageSize *int32 `type:"int32" json:",omitempty"`

	Region *string `type:"string" json:",omitempty"`

	Source []*string `type:"list" json:",omitempty"`

	StartTime *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s ListEventsInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListEventsInput) GoString() string {
	return s.String()
}

// SetAsc sets the Asc field's value.
func (s *ListEventsInput) SetAsc(v bool) *ListEventsInput {
	s.Asc = &v
	return s
}

// SetEndTime sets the EndTime field's value.
func (s *ListEventsInput) SetEndTime(v int32) *ListEventsInput {
	s.EndTime = &v
	return s
}

// SetEventType sets the EventType field's value.
func (s *ListEventsInput) SetEventType(v []*string) *ListEventsInput {
	s.EventType = v
	return s
}

// SetID sets the ID field's value.
func (s *ListEventsInput) SetID(v []*string) *ListEventsInput {
	s.ID = v
	return s
}

// SetOrderBy sets the OrderBy field's value.
func (s *ListEventsInput) SetOrderBy(v string) *ListEventsInput {
	s.OrderBy = &v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *ListEventsInput) SetPageNumber(v int32) *ListEventsInput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *ListEventsInput) SetPageSize(v int32) *ListEventsInput {
	s.PageSize = &v
	return s
}

// SetRegion sets the Region field's value.
func (s *ListEventsInput) SetRegion(v string) *ListEventsInput {
	s.Region = &v
	return s
}

// SetSource sets the Source field's value.
func (s *ListEventsInput) SetSource(v []*string) *ListEventsInput {
	s.Source = v
	return s
}

// SetStartTime sets the StartTime field's value.
func (s *ListEventsInput) SetStartTime(v int32) *ListEventsInput {
	s.StartTime = &v
	return s
}

type ListEventsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Asc *bool `type:"boolean" json:",omitempty"`

	Data []*DataForListEventsOutput `type:"list" json:",omitempty"`

	OrderBy *string `type:"string" json:",omitempty"`

	PageNumber *int32 `type:"int32" json:",omitempty"`

	PageSize *int32 `type:"int32" json:",omitempty"`

	TotalCount *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s ListEventsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListEventsOutput) GoString() string {
	return s.String()
}

// SetAsc sets the Asc field's value.
func (s *ListEventsOutput) SetAsc(v bool) *ListEventsOutput {
	s.Asc = &v
	return s
}

// SetData sets the Data field's value.
func (s *ListEventsOutput) SetData(v []*DataForListEventsOutput) *ListEventsOutput {
	s.Data = v
	return s
}

// SetOrderBy sets the OrderBy field's value.
func (s *ListEventsOutput) SetOrderBy(v string) *ListEventsOutput {
	s.OrderBy = &v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *ListEventsOutput) SetPageNumber(v int32) *ListEventsOutput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *ListEventsOutput) SetPageSize(v int32) *ListEventsOutput {
	s.PageSize = &v
	return s
}

// SetTotalCount sets the TotalCount field's value.
func (s *ListEventsOutput) SetTotalCount(v int32) *ListEventsOutput {
	s.TotalCount = &v
	return s
}

const (
	// EnumOfOrderByForListEventsInputHappenTime is a EnumOfOrderByForListEventsInput enum value
	EnumOfOrderByForListEventsInputHappenTime = "HappenTime"
)
