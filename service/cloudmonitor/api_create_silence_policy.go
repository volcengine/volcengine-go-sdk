// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package cloudmonitor

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opCreateSilencePolicyCommon = "CreateSilencePolicy"

// CreateSilencePolicyCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateSilencePolicyCommon operation. The "output" return
// value will be populated with the CreateSilencePolicyCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateSilencePolicyCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateSilencePolicyCommon Send returns without error.
//
// See CreateSilencePolicyCommon for more information on using the CreateSilencePolicyCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateSilencePolicyCommonRequest method.
//    req, resp := client.CreateSilencePolicyCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLOUDMONITOR) CreateSilencePolicyCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateSilencePolicyCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateSilencePolicyCommon API operation for CLOUDMONITOR.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for CLOUDMONITOR's
// API operation CreateSilencePolicyCommon for usage and error information.
func (c *CLOUDMONITOR) CreateSilencePolicyCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateSilencePolicyCommonRequest(input)
	return out, req.Send()
}

// CreateSilencePolicyCommonWithContext is the same as CreateSilencePolicyCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateSilencePolicyCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLOUDMONITOR) CreateSilencePolicyCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateSilencePolicyCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateSilencePolicy = "CreateSilencePolicy"

// CreateSilencePolicyRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateSilencePolicy operation. The "output" return
// value will be populated with the CreateSilencePolicyCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateSilencePolicyCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateSilencePolicyCommon Send returns without error.
//
// See CreateSilencePolicy for more information on using the CreateSilencePolicy
// API call, and error handling.
//
//    // Example sending a request using the CreateSilencePolicyRequest method.
//    req, resp := client.CreateSilencePolicyRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLOUDMONITOR) CreateSilencePolicyRequest(input *CreateSilencePolicyInput) (req *request.Request, output *CreateSilencePolicyOutput) {
	op := &request.Operation{
		Name:       opCreateSilencePolicy,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateSilencePolicyInput{}
	}

	output = &CreateSilencePolicyOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateSilencePolicy API operation for CLOUDMONITOR.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for CLOUDMONITOR's
// API operation CreateSilencePolicy for usage and error information.
func (c *CLOUDMONITOR) CreateSilencePolicy(input *CreateSilencePolicyInput) (*CreateSilencePolicyOutput, error) {
	req, out := c.CreateSilencePolicyRequest(input)
	return out, req.Send()
}

// CreateSilencePolicyWithContext is the same as CreateSilencePolicy with the addition of
// the ability to pass a context and additional request options.
//
// See CreateSilencePolicy for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLOUDMONITOR) CreateSilencePolicyWithContext(ctx volcengine.Context, input *CreateSilencePolicyInput, opts ...request.Option) (*CreateSilencePolicyOutput, error) {
	req, out := c.CreateSilencePolicyRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type CreateSilencePolicyInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Description *string `type:"string" json:",omitempty"`

	EffectTime *EffectTimeForCreateSilencePolicyInput `type:"structure" json:",omitempty"`

	// Name is a required field
	Name *string `type:"string" json:",omitempty" required:"true"`

	// Namespace is a required field
	Namespace *string `type:"string" json:",omitempty" required:"true"`

	SilenceConditions *SilenceConditionsForCreateSilencePolicyInput `type:"structure" json:",omitempty"`

	// SilenceType is a required field
	SilenceType *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s CreateSilencePolicyInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateSilencePolicyInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateSilencePolicyInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CreateSilencePolicyInput"}
	if s.Name == nil {
		invalidParams.Add(request.NewErrParamRequired("Name"))
	}
	if s.Namespace == nil {
		invalidParams.Add(request.NewErrParamRequired("Namespace"))
	}
	if s.SilenceType == nil {
		invalidParams.Add(request.NewErrParamRequired("SilenceType"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDescription sets the Description field's value.
func (s *CreateSilencePolicyInput) SetDescription(v string) *CreateSilencePolicyInput {
	s.Description = &v
	return s
}

// SetEffectTime sets the EffectTime field's value.
func (s *CreateSilencePolicyInput) SetEffectTime(v *EffectTimeForCreateSilencePolicyInput) *CreateSilencePolicyInput {
	s.EffectTime = v
	return s
}

// SetName sets the Name field's value.
func (s *CreateSilencePolicyInput) SetName(v string) *CreateSilencePolicyInput {
	s.Name = &v
	return s
}

// SetNamespace sets the Namespace field's value.
func (s *CreateSilencePolicyInput) SetNamespace(v string) *CreateSilencePolicyInput {
	s.Namespace = &v
	return s
}

// SetSilenceConditions sets the SilenceConditions field's value.
func (s *CreateSilencePolicyInput) SetSilenceConditions(v *SilenceConditionsForCreateSilencePolicyInput) *CreateSilencePolicyInput {
	s.SilenceConditions = v
	return s
}

// SetSilenceType sets the SilenceType field's value.
func (s *CreateSilencePolicyInput) SetSilenceType(v string) *CreateSilencePolicyInput {
	s.SilenceType = &v
	return s
}

type CreateSilencePolicyOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Data []*string `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s CreateSilencePolicyOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateSilencePolicyOutput) GoString() string {
	return s.String()
}

// SetData sets the Data field's value.
func (s *CreateSilencePolicyOutput) SetData(v []*string) *CreateSilencePolicyOutput {
	s.Data = v
	return s
}

type EffectTimeForCreateSilencePolicyInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Range []*RangeForCreateSilencePolicyInput `type:"list" json:",omitempty"`

	Type *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s EffectTimeForCreateSilencePolicyInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s EffectTimeForCreateSilencePolicyInput) GoString() string {
	return s.String()
}

// SetRange sets the Range field's value.
func (s *EffectTimeForCreateSilencePolicyInput) SetRange(v []*RangeForCreateSilencePolicyInput) *EffectTimeForCreateSilencePolicyInput {
	s.Range = v
	return s
}

// SetType sets the Type field's value.
func (s *EffectTimeForCreateSilencePolicyInput) SetType(v string) *EffectTimeForCreateSilencePolicyInput {
	s.Type = &v
	return s
}

type MetaConditionForCreateSilencePolicyInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Condition *string `type:"string" json:",omitempty"`

	Metas []*MetaForCreateSilencePolicyInput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s MetaConditionForCreateSilencePolicyInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s MetaConditionForCreateSilencePolicyInput) GoString() string {
	return s.String()
}

// SetCondition sets the Condition field's value.
func (s *MetaConditionForCreateSilencePolicyInput) SetCondition(v string) *MetaConditionForCreateSilencePolicyInput {
	s.Condition = &v
	return s
}

// SetMetas sets the Metas field's value.
func (s *MetaConditionForCreateSilencePolicyInput) SetMetas(v []*MetaForCreateSilencePolicyInput) *MetaConditionForCreateSilencePolicyInput {
	s.Metas = v
	return s
}

type MetaForCreateSilencePolicyInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Comparator *string `type:"string" json:",omitempty"`

	Key *string `type:"string" json:",omitempty"`

	Values []*string `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s MetaForCreateSilencePolicyInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s MetaForCreateSilencePolicyInput) GoString() string {
	return s.String()
}

// SetComparator sets the Comparator field's value.
func (s *MetaForCreateSilencePolicyInput) SetComparator(v string) *MetaForCreateSilencePolicyInput {
	s.Comparator = &v
	return s
}

// SetKey sets the Key field's value.
func (s *MetaForCreateSilencePolicyInput) SetKey(v string) *MetaForCreateSilencePolicyInput {
	s.Key = &v
	return s
}

// SetValues sets the Values field's value.
func (s *MetaForCreateSilencePolicyInput) SetValues(v []*string) *MetaForCreateSilencePolicyInput {
	s.Values = v
	return s
}

type RangeForCreateSilencePolicyInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	EndDate *string `type:"string" json:",omitempty"`

	EndTime *string `type:"string" json:",omitempty"`

	StartDate *string `type:"string" json:",omitempty"`

	StartTime *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s RangeForCreateSilencePolicyInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s RangeForCreateSilencePolicyInput) GoString() string {
	return s.String()
}

// SetEndDate sets the EndDate field's value.
func (s *RangeForCreateSilencePolicyInput) SetEndDate(v string) *RangeForCreateSilencePolicyInput {
	s.EndDate = &v
	return s
}

// SetEndTime sets the EndTime field's value.
func (s *RangeForCreateSilencePolicyInput) SetEndTime(v string) *RangeForCreateSilencePolicyInput {
	s.EndTime = &v
	return s
}

// SetStartDate sets the StartDate field's value.
func (s *RangeForCreateSilencePolicyInput) SetStartDate(v string) *RangeForCreateSilencePolicyInput {
	s.StartDate = &v
	return s
}

// SetStartTime sets the StartTime field's value.
func (s *RangeForCreateSilencePolicyInput) SetStartTime(v string) *RangeForCreateSilencePolicyInput {
	s.StartTime = &v
	return s
}

type SilenceConditionsForCreateSilencePolicyInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	EventType []*string `type:"list" json:",omitempty"`

	MetaCondition *MetaConditionForCreateSilencePolicyInput `type:"structure" json:",omitempty"`

	RuleId *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s SilenceConditionsForCreateSilencePolicyInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s SilenceConditionsForCreateSilencePolicyInput) GoString() string {
	return s.String()
}

// SetEventType sets the EventType field's value.
func (s *SilenceConditionsForCreateSilencePolicyInput) SetEventType(v []*string) *SilenceConditionsForCreateSilencePolicyInput {
	s.EventType = v
	return s
}

// SetMetaCondition sets the MetaCondition field's value.
func (s *SilenceConditionsForCreateSilencePolicyInput) SetMetaCondition(v *MetaConditionForCreateSilencePolicyInput) *SilenceConditionsForCreateSilencePolicyInput {
	s.MetaCondition = v
	return s
}

// SetRuleId sets the RuleId field's value.
func (s *SilenceConditionsForCreateSilencePolicyInput) SetRuleId(v string) *SilenceConditionsForCreateSilencePolicyInput {
	s.RuleId = &v
	return s
}
