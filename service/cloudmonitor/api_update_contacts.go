// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package cloudmonitor

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opUpdateContactsCommon = "UpdateContacts"

// UpdateContactsCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateContactsCommon operation. The "output" return
// value will be populated with the UpdateContactsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateContactsCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateContactsCommon Send returns without error.
//
// See UpdateContactsCommon for more information on using the UpdateContactsCommon
// API call, and error handling.
//
//    // Example sending a request using the UpdateContactsCommonRequest method.
//    req, resp := client.UpdateContactsCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLOUDMONITOR) UpdateContactsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opUpdateContactsCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateContactsCommon API operation for CLOUDMONITOR.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for CLOUDMONITOR's
// API operation UpdateContactsCommon for usage and error information.
func (c *CLOUDMONITOR) UpdateContactsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.UpdateContactsCommonRequest(input)
	return out, req.Send()
}

// UpdateContactsCommonWithContext is the same as UpdateContactsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateContactsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLOUDMONITOR) UpdateContactsCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.UpdateContactsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opUpdateContacts = "UpdateContacts"

// UpdateContactsRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateContacts operation. The "output" return
// value will be populated with the UpdateContactsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateContactsCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateContactsCommon Send returns without error.
//
// See UpdateContacts for more information on using the UpdateContacts
// API call, and error handling.
//
//    // Example sending a request using the UpdateContactsRequest method.
//    req, resp := client.UpdateContactsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLOUDMONITOR) UpdateContactsRequest(input *UpdateContactsInput) (req *request.Request, output *UpdateContactsOutput) {
	op := &request.Operation{
		Name:       opUpdateContacts,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UpdateContactsInput{}
	}

	output = &UpdateContactsOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateContacts API operation for CLOUDMONITOR.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for CLOUDMONITOR's
// API operation UpdateContacts for usage and error information.
func (c *CLOUDMONITOR) UpdateContacts(input *UpdateContactsInput) (*UpdateContactsOutput, error) {
	req, out := c.UpdateContactsRequest(input)
	return out, req.Send()
}

// UpdateContactsWithContext is the same as UpdateContacts with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateContacts for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLOUDMONITOR) UpdateContactsWithContext(ctx volcengine.Context, input *UpdateContactsInput, opts ...request.Option) (*UpdateContactsOutput, error) {
	req, out := c.UpdateContactsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type UpdateContactsInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// Email is a required field
	Email *string `type:"string" json:",omitempty" required:"true"`

	// Id is a required field
	Id *string `type:"string" json:",omitempty" required:"true"`

	// Name is a required field
	Name *string `type:"string" json:",omitempty" required:"true"`

	Phone *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s UpdateContactsInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateContactsInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UpdateContactsInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "UpdateContactsInput"}
	if s.Email == nil {
		invalidParams.Add(request.NewErrParamRequired("Email"))
	}
	if s.Id == nil {
		invalidParams.Add(request.NewErrParamRequired("Id"))
	}
	if s.Name == nil {
		invalidParams.Add(request.NewErrParamRequired("Name"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetEmail sets the Email field's value.
func (s *UpdateContactsInput) SetEmail(v string) *UpdateContactsInput {
	s.Email = &v
	return s
}

// SetId sets the Id field's value.
func (s *UpdateContactsInput) SetId(v string) *UpdateContactsInput {
	s.Id = &v
	return s
}

// SetName sets the Name field's value.
func (s *UpdateContactsInput) SetName(v string) *UpdateContactsInput {
	s.Name = &v
	return s
}

// SetPhone sets the Phone field's value.
func (s *UpdateContactsInput) SetPhone(v string) *UpdateContactsInput {
	s.Phone = &v
	return s
}

type UpdateContactsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Data []*string `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s UpdateContactsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateContactsOutput) GoString() string {
	return s.String()
}

// SetData sets the Data field's value.
func (s *UpdateContactsOutput) SetData(v []*string) *UpdateContactsOutput {
	s.Data = v
	return s
}
