// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package cloudmonitor

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDeleteSilencePolicyByIdsCommon = "DeleteSilencePolicyByIds"

// DeleteSilencePolicyByIdsCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteSilencePolicyByIdsCommon operation. The "output" return
// value will be populated with the DeleteSilencePolicyByIdsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteSilencePolicyByIdsCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteSilencePolicyByIdsCommon Send returns without error.
//
// See DeleteSilencePolicyByIdsCommon for more information on using the DeleteSilencePolicyByIdsCommon
// API call, and error handling.
//
//    // Example sending a request using the DeleteSilencePolicyByIdsCommonRequest method.
//    req, resp := client.DeleteSilencePolicyByIdsCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLOUDMONITOR) DeleteSilencePolicyByIdsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteSilencePolicyByIdsCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DeleteSilencePolicyByIdsCommon API operation for CLOUDMONITOR.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for CLOUDMONITOR's
// API operation DeleteSilencePolicyByIdsCommon for usage and error information.
func (c *CLOUDMONITOR) DeleteSilencePolicyByIdsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteSilencePolicyByIdsCommonRequest(input)
	return out, req.Send()
}

// DeleteSilencePolicyByIdsCommonWithContext is the same as DeleteSilencePolicyByIdsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteSilencePolicyByIdsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLOUDMONITOR) DeleteSilencePolicyByIdsCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteSilencePolicyByIdsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteSilencePolicyByIds = "DeleteSilencePolicyByIds"

// DeleteSilencePolicyByIdsRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteSilencePolicyByIds operation. The "output" return
// value will be populated with the DeleteSilencePolicyByIdsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteSilencePolicyByIdsCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteSilencePolicyByIdsCommon Send returns without error.
//
// See DeleteSilencePolicyByIds for more information on using the DeleteSilencePolicyByIds
// API call, and error handling.
//
//    // Example sending a request using the DeleteSilencePolicyByIdsRequest method.
//    req, resp := client.DeleteSilencePolicyByIdsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLOUDMONITOR) DeleteSilencePolicyByIdsRequest(input *DeleteSilencePolicyByIdsInput) (req *request.Request, output *DeleteSilencePolicyByIdsOutput) {
	op := &request.Operation{
		Name:       opDeleteSilencePolicyByIds,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteSilencePolicyByIdsInput{}
	}

	output = &DeleteSilencePolicyByIdsOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DeleteSilencePolicyByIds API operation for CLOUDMONITOR.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for CLOUDMONITOR's
// API operation DeleteSilencePolicyByIds for usage and error information.
func (c *CLOUDMONITOR) DeleteSilencePolicyByIds(input *DeleteSilencePolicyByIdsInput) (*DeleteSilencePolicyByIdsOutput, error) {
	req, out := c.DeleteSilencePolicyByIdsRequest(input)
	return out, req.Send()
}

// DeleteSilencePolicyByIdsWithContext is the same as DeleteSilencePolicyByIds with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteSilencePolicyByIds for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLOUDMONITOR) DeleteSilencePolicyByIdsWithContext(ctx volcengine.Context, input *DeleteSilencePolicyByIdsInput, opts ...request.Option) (*DeleteSilencePolicyByIdsOutput, error) {
	req, out := c.DeleteSilencePolicyByIdsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DeleteSilencePolicyByIdsInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Ids []*string `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s DeleteSilencePolicyByIdsInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteSilencePolicyByIdsInput) GoString() string {
	return s.String()
}

// SetIds sets the Ids field's value.
func (s *DeleteSilencePolicyByIdsInput) SetIds(v []*string) *DeleteSilencePolicyByIdsInput {
	s.Ids = v
	return s
}

type DeleteSilencePolicyByIdsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Data []*string `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s DeleteSilencePolicyByIdsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteSilencePolicyByIdsOutput) GoString() string {
	return s.String()
}

// SetData sets the Data field's value.
func (s *DeleteSilencePolicyByIdsOutput) SetData(v []*string) *DeleteSilencePolicyByIdsOutput {
	s.Data = v
	return s
}
