// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package redis

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDescribeDBInstanceAclCommandsCommon = "DescribeDBInstanceAclCommands"

// DescribeDBInstanceAclCommandsCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeDBInstanceAclCommandsCommon operation. The "output" return
// value will be populated with the DescribeDBInstanceAclCommandsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeDBInstanceAclCommandsCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeDBInstanceAclCommandsCommon Send returns without error.
//
// See DescribeDBInstanceAclCommandsCommon for more information on using the DescribeDBInstanceAclCommandsCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeDBInstanceAclCommandsCommonRequest method.
//    req, resp := client.DescribeDBInstanceAclCommandsCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *REDIS) DescribeDBInstanceAclCommandsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeDBInstanceAclCommandsCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeDBInstanceAclCommandsCommon API operation for REDIS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for REDIS's
// API operation DescribeDBInstanceAclCommandsCommon for usage and error information.
func (c *REDIS) DescribeDBInstanceAclCommandsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeDBInstanceAclCommandsCommonRequest(input)
	return out, req.Send()
}

// DescribeDBInstanceAclCommandsCommonWithContext is the same as DescribeDBInstanceAclCommandsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeDBInstanceAclCommandsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *REDIS) DescribeDBInstanceAclCommandsCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeDBInstanceAclCommandsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeDBInstanceAclCommands = "DescribeDBInstanceAclCommands"

// DescribeDBInstanceAclCommandsRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeDBInstanceAclCommands operation. The "output" return
// value will be populated with the DescribeDBInstanceAclCommandsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeDBInstanceAclCommandsCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeDBInstanceAclCommandsCommon Send returns without error.
//
// See DescribeDBInstanceAclCommands for more information on using the DescribeDBInstanceAclCommands
// API call, and error handling.
//
//    // Example sending a request using the DescribeDBInstanceAclCommandsRequest method.
//    req, resp := client.DescribeDBInstanceAclCommandsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *REDIS) DescribeDBInstanceAclCommandsRequest(input *DescribeDBInstanceAclCommandsInput) (req *request.Request, output *DescribeDBInstanceAclCommandsOutput) {
	op := &request.Operation{
		Name:       opDescribeDBInstanceAclCommands,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeDBInstanceAclCommandsInput{}
	}

	output = &DescribeDBInstanceAclCommandsOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeDBInstanceAclCommands API operation for REDIS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for REDIS's
// API operation DescribeDBInstanceAclCommands for usage and error information.
func (c *REDIS) DescribeDBInstanceAclCommands(input *DescribeDBInstanceAclCommandsInput) (*DescribeDBInstanceAclCommandsOutput, error) {
	req, out := c.DescribeDBInstanceAclCommandsRequest(input)
	return out, req.Send()
}

// DescribeDBInstanceAclCommandsWithContext is the same as DescribeDBInstanceAclCommands with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeDBInstanceAclCommands for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *REDIS) DescribeDBInstanceAclCommandsWithContext(ctx volcengine.Context, input *DescribeDBInstanceAclCommandsInput, opts ...request.Option) (*DescribeDBInstanceAclCommandsOutput, error) {
	req, out := c.DescribeDBInstanceAclCommandsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DescribeDBInstanceAclCommandsInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// Category is a required field
	Category *string `type:"string" json:",omitempty" required:"true"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s DescribeDBInstanceAclCommandsInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeDBInstanceAclCommandsInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeDBInstanceAclCommandsInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DescribeDBInstanceAclCommandsInput"}
	if s.Category == nil {
		invalidParams.Add(request.NewErrParamRequired("Category"))
	}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetCategory sets the Category field's value.
func (s *DescribeDBInstanceAclCommandsInput) SetCategory(v string) *DescribeDBInstanceAclCommandsInput {
	s.Category = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *DescribeDBInstanceAclCommandsInput) SetInstanceId(v string) *DescribeDBInstanceAclCommandsInput {
	s.InstanceId = &v
	return s
}

type DescribeDBInstanceAclCommandsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Commands []*string `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s DescribeDBInstanceAclCommandsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeDBInstanceAclCommandsOutput) GoString() string {
	return s.String()
}

// SetCommands sets the Commands field's value.
func (s *DescribeDBInstanceAclCommandsOutput) SetCommands(v []*string) *DescribeDBInstanceAclCommandsOutput {
	s.Commands = v
	return s
}
