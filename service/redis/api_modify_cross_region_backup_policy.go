// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package redis

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opModifyCrossRegionBackupPolicyCommon = "ModifyCrossRegionBackupPolicy"

// ModifyCrossRegionBackupPolicyCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ModifyCrossRegionBackupPolicyCommon operation. The "output" return
// value will be populated with the ModifyCrossRegionBackupPolicyCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyCrossRegionBackupPolicyCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyCrossRegionBackupPolicyCommon Send returns without error.
//
// See ModifyCrossRegionBackupPolicyCommon for more information on using the ModifyCrossRegionBackupPolicyCommon
// API call, and error handling.
//
//    // Example sending a request using the ModifyCrossRegionBackupPolicyCommonRequest method.
//    req, resp := client.ModifyCrossRegionBackupPolicyCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *REDIS) ModifyCrossRegionBackupPolicyCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opModifyCrossRegionBackupPolicyCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ModifyCrossRegionBackupPolicyCommon API operation for REDIS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for REDIS's
// API operation ModifyCrossRegionBackupPolicyCommon for usage and error information.
func (c *REDIS) ModifyCrossRegionBackupPolicyCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ModifyCrossRegionBackupPolicyCommonRequest(input)
	return out, req.Send()
}

// ModifyCrossRegionBackupPolicyCommonWithContext is the same as ModifyCrossRegionBackupPolicyCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyCrossRegionBackupPolicyCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *REDIS) ModifyCrossRegionBackupPolicyCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ModifyCrossRegionBackupPolicyCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyCrossRegionBackupPolicy = "ModifyCrossRegionBackupPolicy"

// ModifyCrossRegionBackupPolicyRequest generates a "volcengine/request.Request" representing the
// client's request for the ModifyCrossRegionBackupPolicy operation. The "output" return
// value will be populated with the ModifyCrossRegionBackupPolicyCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyCrossRegionBackupPolicyCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyCrossRegionBackupPolicyCommon Send returns without error.
//
// See ModifyCrossRegionBackupPolicy for more information on using the ModifyCrossRegionBackupPolicy
// API call, and error handling.
//
//    // Example sending a request using the ModifyCrossRegionBackupPolicyRequest method.
//    req, resp := client.ModifyCrossRegionBackupPolicyRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *REDIS) ModifyCrossRegionBackupPolicyRequest(input *ModifyCrossRegionBackupPolicyInput) (req *request.Request, output *ModifyCrossRegionBackupPolicyOutput) {
	op := &request.Operation{
		Name:       opModifyCrossRegionBackupPolicy,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ModifyCrossRegionBackupPolicyInput{}
	}

	output = &ModifyCrossRegionBackupPolicyOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ModifyCrossRegionBackupPolicy API operation for REDIS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for REDIS's
// API operation ModifyCrossRegionBackupPolicy for usage and error information.
func (c *REDIS) ModifyCrossRegionBackupPolicy(input *ModifyCrossRegionBackupPolicyInput) (*ModifyCrossRegionBackupPolicyOutput, error) {
	req, out := c.ModifyCrossRegionBackupPolicyRequest(input)
	return out, req.Send()
}

// ModifyCrossRegionBackupPolicyWithContext is the same as ModifyCrossRegionBackupPolicy with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyCrossRegionBackupPolicy for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *REDIS) ModifyCrossRegionBackupPolicyWithContext(ctx volcengine.Context, input *ModifyCrossRegionBackupPolicyInput, opts ...request.Option) (*ModifyCrossRegionBackupPolicyOutput, error) {
	req, out := c.ModifyCrossRegionBackupPolicyRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ModifyCrossRegionBackupPolicyInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// Active is a required field
	Active *bool `type:"boolean" json:",omitempty" required:"true"`

	ClientToken *string `type:"string" json:",omitempty"`

	CrossBackupRegion *string `type:"string" json:",omitempty"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s ModifyCrossRegionBackupPolicyInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyCrossRegionBackupPolicyInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ModifyCrossRegionBackupPolicyInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ModifyCrossRegionBackupPolicyInput"}
	if s.Active == nil {
		invalidParams.Add(request.NewErrParamRequired("Active"))
	}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetActive sets the Active field's value.
func (s *ModifyCrossRegionBackupPolicyInput) SetActive(v bool) *ModifyCrossRegionBackupPolicyInput {
	s.Active = &v
	return s
}

// SetClientToken sets the ClientToken field's value.
func (s *ModifyCrossRegionBackupPolicyInput) SetClientToken(v string) *ModifyCrossRegionBackupPolicyInput {
	s.ClientToken = &v
	return s
}

// SetCrossBackupRegion sets the CrossBackupRegion field's value.
func (s *ModifyCrossRegionBackupPolicyInput) SetCrossBackupRegion(v string) *ModifyCrossRegionBackupPolicyInput {
	s.CrossBackupRegion = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *ModifyCrossRegionBackupPolicyInput) SetInstanceId(v string) *ModifyCrossRegionBackupPolicyInput {
	s.InstanceId = &v
	return s
}

type ModifyCrossRegionBackupPolicyOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s ModifyCrossRegionBackupPolicyOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyCrossRegionBackupPolicyOutput) GoString() string {
	return s.String()
}
