// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package aiotvideo20231001

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opStopPlaybackCommon = "StopPlayback"

// StopPlaybackCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the StopPlaybackCommon operation. The "output" return
// value will be populated with the StopPlaybackCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned StopPlaybackCommon Request to send the API call to the service.
// the "output" return value is not valid until after StopPlaybackCommon Send returns without error.
//
// See StopPlaybackCommon for more information on using the StopPlaybackCommon
// API call, and error handling.
//
//    // Example sending a request using the StopPlaybackCommonRequest method.
//    req, resp := client.StopPlaybackCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *AIOTVIDEO20231001) StopPlaybackCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opStopPlaybackCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// StopPlaybackCommon API operation for AIOTVIDEO20231001.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for AIOTVIDEO20231001's
// API operation StopPlaybackCommon for usage and error information.
func (c *AIOTVIDEO20231001) StopPlaybackCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.StopPlaybackCommonRequest(input)
	return out, req.Send()
}

// StopPlaybackCommonWithContext is the same as StopPlaybackCommon with the addition of
// the ability to pass a context and additional request options.
//
// See StopPlaybackCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *AIOTVIDEO20231001) StopPlaybackCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.StopPlaybackCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opStopPlayback = "StopPlayback"

// StopPlaybackRequest generates a "volcengine/request.Request" representing the
// client's request for the StopPlayback operation. The "output" return
// value will be populated with the StopPlaybackCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned StopPlaybackCommon Request to send the API call to the service.
// the "output" return value is not valid until after StopPlaybackCommon Send returns without error.
//
// See StopPlayback for more information on using the StopPlayback
// API call, and error handling.
//
//    // Example sending a request using the StopPlaybackRequest method.
//    req, resp := client.StopPlaybackRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *AIOTVIDEO20231001) StopPlaybackRequest(input *StopPlaybackInput) (req *request.Request, output *StopPlaybackOutput) {
	op := &request.Operation{
		Name:       opStopPlayback,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &StopPlaybackInput{}
	}

	output = &StopPlaybackOutput{}
	req = c.newRequest(op, input, output)

	return
}

// StopPlayback API operation for AIOTVIDEO20231001.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for AIOTVIDEO20231001's
// API operation StopPlayback for usage and error information.
func (c *AIOTVIDEO20231001) StopPlayback(input *StopPlaybackInput) (*StopPlaybackOutput, error) {
	req, out := c.StopPlaybackRequest(input)
	return out, req.Send()
}

// StopPlaybackWithContext is the same as StopPlayback with the addition of
// the ability to pass a context and additional request options.
//
// See StopPlayback for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *AIOTVIDEO20231001) StopPlaybackWithContext(ctx volcengine.Context, input *StopPlaybackInput, opts ...request.Option) (*StopPlaybackOutput, error) {
	req, out := c.StopPlaybackRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type StopPlaybackInput struct {
	_ struct{} `type:"structure"`

	// PlaybackID is a required field
	PlaybackID *string `type:"string" required:"true"`
}

// String returns the string representation
func (s StopPlaybackInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s StopPlaybackInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *StopPlaybackInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "StopPlaybackInput"}
	if s.PlaybackID == nil {
		invalidParams.Add(request.NewErrParamRequired("PlaybackID"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetPlaybackID sets the PlaybackID field's value.
func (s *StopPlaybackInput) SetPlaybackID(v string) *StopPlaybackInput {
	s.PlaybackID = &v
	return s
}

type StopPlaybackOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s StopPlaybackOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s StopPlaybackOutput) GoString() string {
	return s.String()
}
