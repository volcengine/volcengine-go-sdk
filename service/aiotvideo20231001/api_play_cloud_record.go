// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package aiotvideo20231001

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opPlayCloudRecordCommon = "PlayCloudRecord"

// PlayCloudRecordCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the PlayCloudRecordCommon operation. The "output" return
// value will be populated with the PlayCloudRecordCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned PlayCloudRecordCommon Request to send the API call to the service.
// the "output" return value is not valid until after PlayCloudRecordCommon Send returns without error.
//
// See PlayCloudRecordCommon for more information on using the PlayCloudRecordCommon
// API call, and error handling.
//
//    // Example sending a request using the PlayCloudRecordCommonRequest method.
//    req, resp := client.PlayCloudRecordCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *AIOTVIDEO20231001) PlayCloudRecordCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opPlayCloudRecordCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// PlayCloudRecordCommon API operation for AIOTVIDEO20231001.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for AIOTVIDEO20231001's
// API operation PlayCloudRecordCommon for usage and error information.
func (c *AIOTVIDEO20231001) PlayCloudRecordCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.PlayCloudRecordCommonRequest(input)
	return out, req.Send()
}

// PlayCloudRecordCommonWithContext is the same as PlayCloudRecordCommon with the addition of
// the ability to pass a context and additional request options.
//
// See PlayCloudRecordCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *AIOTVIDEO20231001) PlayCloudRecordCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.PlayCloudRecordCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opPlayCloudRecord = "PlayCloudRecord"

// PlayCloudRecordRequest generates a "volcengine/request.Request" representing the
// client's request for the PlayCloudRecord operation. The "output" return
// value will be populated with the PlayCloudRecordCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned PlayCloudRecordCommon Request to send the API call to the service.
// the "output" return value is not valid until after PlayCloudRecordCommon Send returns without error.
//
// See PlayCloudRecord for more information on using the PlayCloudRecord
// API call, and error handling.
//
//    // Example sending a request using the PlayCloudRecordRequest method.
//    req, resp := client.PlayCloudRecordRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *AIOTVIDEO20231001) PlayCloudRecordRequest(input *PlayCloudRecordInput) (req *request.Request, output *PlayCloudRecordOutput) {
	op := &request.Operation{
		Name:       opPlayCloudRecord,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &PlayCloudRecordInput{}
	}

	output = &PlayCloudRecordOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// PlayCloudRecord API operation for AIOTVIDEO20231001.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for AIOTVIDEO20231001's
// API operation PlayCloudRecord for usage and error information.
func (c *AIOTVIDEO20231001) PlayCloudRecord(input *PlayCloudRecordInput) (*PlayCloudRecordOutput, error) {
	req, out := c.PlayCloudRecordRequest(input)
	return out, req.Send()
}

// PlayCloudRecordWithContext is the same as PlayCloudRecord with the addition of
// the ability to pass a context and additional request options.
//
// See PlayCloudRecord for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *AIOTVIDEO20231001) PlayCloudRecordWithContext(ctx volcengine.Context, input *PlayCloudRecordInput, opts ...request.Option) (*PlayCloudRecordOutput, error) {
	req, out := c.PlayCloudRecordRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type PlayCloudRecordInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// EndTime is a required field
	EndTime *int64 `type:"int64" json:",omitempty" required:"true"`

	Resolution *string `type:"string" json:",omitempty"`

	SpaceID *string `type:"string" json:",omitempty"`

	// StartTime is a required field
	StartTime *int64 `type:"int64" json:",omitempty" required:"true"`

	// StreamID is a required field
	StreamID *string `type:"string" json:",omitempty" required:"true"`

	StreamingIndex *int32 `type:"int32" json:",omitempty"`

	TokenValid *int32 `type:"int32" json:",omitempty"`

	WithSub *bool `type:"boolean" json:",omitempty"`
}

// String returns the string representation
func (s PlayCloudRecordInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s PlayCloudRecordInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *PlayCloudRecordInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "PlayCloudRecordInput"}
	if s.EndTime == nil {
		invalidParams.Add(request.NewErrParamRequired("EndTime"))
	}
	if s.StartTime == nil {
		invalidParams.Add(request.NewErrParamRequired("StartTime"))
	}
	if s.StreamID == nil {
		invalidParams.Add(request.NewErrParamRequired("StreamID"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetEndTime sets the EndTime field's value.
func (s *PlayCloudRecordInput) SetEndTime(v int64) *PlayCloudRecordInput {
	s.EndTime = &v
	return s
}

// SetResolution sets the Resolution field's value.
func (s *PlayCloudRecordInput) SetResolution(v string) *PlayCloudRecordInput {
	s.Resolution = &v
	return s
}

// SetSpaceID sets the SpaceID field's value.
func (s *PlayCloudRecordInput) SetSpaceID(v string) *PlayCloudRecordInput {
	s.SpaceID = &v
	return s
}

// SetStartTime sets the StartTime field's value.
func (s *PlayCloudRecordInput) SetStartTime(v int64) *PlayCloudRecordInput {
	s.StartTime = &v
	return s
}

// SetStreamID sets the StreamID field's value.
func (s *PlayCloudRecordInput) SetStreamID(v string) *PlayCloudRecordInput {
	s.StreamID = &v
	return s
}

// SetStreamingIndex sets the StreamingIndex field's value.
func (s *PlayCloudRecordInput) SetStreamingIndex(v int32) *PlayCloudRecordInput {
	s.StreamingIndex = &v
	return s
}

// SetTokenValid sets the TokenValid field's value.
func (s *PlayCloudRecordInput) SetTokenValid(v int32) *PlayCloudRecordInput {
	s.TokenValid = &v
	return s
}

// SetWithSub sets the WithSub field's value.
func (s *PlayCloudRecordInput) SetWithSub(v bool) *PlayCloudRecordInput {
	s.WithSub = &v
	return s
}

type PlayCloudRecordOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Hls *string `type:"string" json:"hls,omitempty"`

	Mp4 *string `type:"string" json:"mp4,omitempty"`
}

// String returns the string representation
func (s PlayCloudRecordOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s PlayCloudRecordOutput) GoString() string {
	return s.String()
}

// SetHls sets the Hls field's value.
func (s *PlayCloudRecordOutput) SetHls(v string) *PlayCloudRecordOutput {
	s.Hls = &v
	return s
}

// SetMp4 sets the Mp4 field's value.
func (s *PlayCloudRecordOutput) SetMp4(v string) *PlayCloudRecordOutput {
	s.Mp4 = &v
	return s
}
