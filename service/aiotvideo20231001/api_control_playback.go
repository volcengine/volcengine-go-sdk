// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package aiotvideo20231001

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opControlPlaybackCommon = "ControlPlayback"

// ControlPlaybackCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ControlPlaybackCommon operation. The "output" return
// value will be populated with the ControlPlaybackCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ControlPlaybackCommon Request to send the API call to the service.
// the "output" return value is not valid until after ControlPlaybackCommon Send returns without error.
//
// See ControlPlaybackCommon for more information on using the ControlPlaybackCommon
// API call, and error handling.
//
//    // Example sending a request using the ControlPlaybackCommonRequest method.
//    req, resp := client.ControlPlaybackCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *AIOTVIDEO20231001) ControlPlaybackCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opControlPlaybackCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ControlPlaybackCommon API operation for AIOTVIDEO20231001.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for AIOTVIDEO20231001's
// API operation ControlPlaybackCommon for usage and error information.
func (c *AIOTVIDEO20231001) ControlPlaybackCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ControlPlaybackCommonRequest(input)
	return out, req.Send()
}

// ControlPlaybackCommonWithContext is the same as ControlPlaybackCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ControlPlaybackCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *AIOTVIDEO20231001) ControlPlaybackCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ControlPlaybackCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opControlPlayback = "ControlPlayback"

// ControlPlaybackRequest generates a "volcengine/request.Request" representing the
// client's request for the ControlPlayback operation. The "output" return
// value will be populated with the ControlPlaybackCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ControlPlaybackCommon Request to send the API call to the service.
// the "output" return value is not valid until after ControlPlaybackCommon Send returns without error.
//
// See ControlPlayback for more information on using the ControlPlayback
// API call, and error handling.
//
//    // Example sending a request using the ControlPlaybackRequest method.
//    req, resp := client.ControlPlaybackRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *AIOTVIDEO20231001) ControlPlaybackRequest(input *ControlPlaybackInput) (req *request.Request, output *ControlPlaybackOutput) {
	op := &request.Operation{
		Name:       opControlPlayback,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ControlPlaybackInput{}
	}

	output = &ControlPlaybackOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ControlPlayback API operation for AIOTVIDEO20231001.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for AIOTVIDEO20231001's
// API operation ControlPlayback for usage and error information.
func (c *AIOTVIDEO20231001) ControlPlayback(input *ControlPlaybackInput) (*ControlPlaybackOutput, error) {
	req, out := c.ControlPlaybackRequest(input)
	return out, req.Send()
}

// ControlPlaybackWithContext is the same as ControlPlayback with the addition of
// the ability to pass a context and additional request options.
//
// See ControlPlayback for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *AIOTVIDEO20231001) ControlPlaybackWithContext(ctx volcengine.Context, input *ControlPlaybackInput, opts ...request.Option) (*ControlPlaybackOutput, error) {
	req, out := c.ControlPlaybackRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ControlPlaybackInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// Cmd is a required field
	Cmd *int32 `type:"int32" json:",omitempty" required:"true"`

	// Ntp is a required field
	Ntp *string `type:"string" json:",omitempty" required:"true"`

	// PlaybackID is a required field
	PlaybackID *string `type:"string" json:",omitempty" required:"true"`

	// Scale is a required field
	Scale *float64 `type:"float" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s ControlPlaybackInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ControlPlaybackInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ControlPlaybackInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ControlPlaybackInput"}
	if s.Cmd == nil {
		invalidParams.Add(request.NewErrParamRequired("Cmd"))
	}
	if s.Ntp == nil {
		invalidParams.Add(request.NewErrParamRequired("Ntp"))
	}
	if s.PlaybackID == nil {
		invalidParams.Add(request.NewErrParamRequired("PlaybackID"))
	}
	if s.Scale == nil {
		invalidParams.Add(request.NewErrParamRequired("Scale"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetCmd sets the Cmd field's value.
func (s *ControlPlaybackInput) SetCmd(v int32) *ControlPlaybackInput {
	s.Cmd = &v
	return s
}

// SetNtp sets the Ntp field's value.
func (s *ControlPlaybackInput) SetNtp(v string) *ControlPlaybackInput {
	s.Ntp = &v
	return s
}

// SetPlaybackID sets the PlaybackID field's value.
func (s *ControlPlaybackInput) SetPlaybackID(v string) *ControlPlaybackInput {
	s.PlaybackID = &v
	return s
}

// SetScale sets the Scale field's value.
func (s *ControlPlaybackInput) SetScale(v float64) *ControlPlaybackInput {
	s.Scale = &v
	return s
}

type ControlPlaybackOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s ControlPlaybackOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ControlPlaybackOutput) GoString() string {
	return s.String()
}
