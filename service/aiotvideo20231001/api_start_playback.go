// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package aiotvideo20231001

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opStartPlaybackCommon = "StartPlayback"

// StartPlaybackCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the StartPlaybackCommon operation. The "output" return
// value will be populated with the StartPlaybackCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned StartPlaybackCommon Request to send the API call to the service.
// the "output" return value is not valid until after StartPlaybackCommon Send returns without error.
//
// See StartPlaybackCommon for more information on using the StartPlaybackCommon
// API call, and error handling.
//
//    // Example sending a request using the StartPlaybackCommonRequest method.
//    req, resp := client.StartPlaybackCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *AIOTVIDEO20231001) StartPlaybackCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opStartPlaybackCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// StartPlaybackCommon API operation for AIOTVIDEO20231001.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for AIOTVIDEO20231001's
// API operation StartPlaybackCommon for usage and error information.
func (c *AIOTVIDEO20231001) StartPlaybackCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.StartPlaybackCommonRequest(input)
	return out, req.Send()
}

// StartPlaybackCommonWithContext is the same as StartPlaybackCommon with the addition of
// the ability to pass a context and additional request options.
//
// See StartPlaybackCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *AIOTVIDEO20231001) StartPlaybackCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.StartPlaybackCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opStartPlayback = "StartPlayback"

// StartPlaybackRequest generates a "volcengine/request.Request" representing the
// client's request for the StartPlayback operation. The "output" return
// value will be populated with the StartPlaybackCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned StartPlaybackCommon Request to send the API call to the service.
// the "output" return value is not valid until after StartPlaybackCommon Send returns without error.
//
// See StartPlayback for more information on using the StartPlayback
// API call, and error handling.
//
//    // Example sending a request using the StartPlaybackRequest method.
//    req, resp := client.StartPlaybackRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *AIOTVIDEO20231001) StartPlaybackRequest(input *StartPlaybackInput) (req *request.Request, output *StartPlaybackOutput) {
	op := &request.Operation{
		Name:       opStartPlayback,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &StartPlaybackInput{}
	}

	output = &StartPlaybackOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// StartPlayback API operation for AIOTVIDEO20231001.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for AIOTVIDEO20231001's
// API operation StartPlayback for usage and error information.
func (c *AIOTVIDEO20231001) StartPlayback(input *StartPlaybackInput) (*StartPlaybackOutput, error) {
	req, out := c.StartPlaybackRequest(input)
	return out, req.Send()
}

// StartPlaybackWithContext is the same as StartPlayback with the addition of
// the ability to pass a context and additional request options.
//
// See StartPlayback for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *AIOTVIDEO20231001) StartPlaybackWithContext(ctx volcengine.Context, input *StartPlaybackInput, opts ...request.Option) (*StartPlaybackOutput, error) {
	req, out := c.StartPlaybackRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type StartPlaybackInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// EndTime is a required field
	EndTime *int32 `type:"int32" json:",omitempty" required:"true"`

	SpaceID *string `type:"string" json:",omitempty"`

	// StartTime is a required field
	StartTime *int32 `type:"int32" json:",omitempty" required:"true"`

	// StreamID is a required field
	StreamID *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s StartPlaybackInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s StartPlaybackInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *StartPlaybackInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "StartPlaybackInput"}
	if s.EndTime == nil {
		invalidParams.Add(request.NewErrParamRequired("EndTime"))
	}
	if s.StartTime == nil {
		invalidParams.Add(request.NewErrParamRequired("StartTime"))
	}
	if s.StreamID == nil {
		invalidParams.Add(request.NewErrParamRequired("StreamID"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetEndTime sets the EndTime field's value.
func (s *StartPlaybackInput) SetEndTime(v int32) *StartPlaybackInput {
	s.EndTime = &v
	return s
}

// SetSpaceID sets the SpaceID field's value.
func (s *StartPlaybackInput) SetSpaceID(v string) *StartPlaybackInput {
	s.SpaceID = &v
	return s
}

// SetStartTime sets the StartTime field's value.
func (s *StartPlaybackInput) SetStartTime(v int32) *StartPlaybackInput {
	s.StartTime = &v
	return s
}

// SetStreamID sets the StreamID field's value.
func (s *StartPlaybackInput) SetStreamID(v string) *StartPlaybackInput {
	s.StreamID = &v
	return s
}

type StartPlaybackOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	PlaybackID *string `type:"string" json:",omitempty"`

	PullUrls []*string `type:"list" json:",omitempty"`

	PushUrl *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s StartPlaybackOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s StartPlaybackOutput) GoString() string {
	return s.String()
}

// SetPlaybackID sets the PlaybackID field's value.
func (s *StartPlaybackOutput) SetPlaybackID(v string) *StartPlaybackOutput {
	s.PlaybackID = &v
	return s
}

// SetPullUrls sets the PullUrls field's value.
func (s *StartPlaybackOutput) SetPullUrls(v []*string) *StartPlaybackOutput {
	s.PullUrls = v
	return s
}

// SetPushUrl sets the PushUrl field's value.
func (s *StartPlaybackOutput) SetPushUrl(v string) *StartPlaybackOutput {
	s.PushUrl = &v
	return s
}
