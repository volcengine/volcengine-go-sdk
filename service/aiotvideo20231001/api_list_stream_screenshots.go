// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package aiotvideo20231001

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opListStreamScreenshotsCommon = "ListStreamScreenshots"

// ListStreamScreenshotsCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ListStreamScreenshotsCommon operation. The "output" return
// value will be populated with the ListStreamScreenshotsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListStreamScreenshotsCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListStreamScreenshotsCommon Send returns without error.
//
// See ListStreamScreenshotsCommon for more information on using the ListStreamScreenshotsCommon
// API call, and error handling.
//
//    // Example sending a request using the ListStreamScreenshotsCommonRequest method.
//    req, resp := client.ListStreamScreenshotsCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *AIOTVIDEO20231001) ListStreamScreenshotsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opListStreamScreenshotsCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListStreamScreenshotsCommon API operation for AIOTVIDEO20231001.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for AIOTVIDEO20231001's
// API operation ListStreamScreenshotsCommon for usage and error information.
func (c *AIOTVIDEO20231001) ListStreamScreenshotsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ListStreamScreenshotsCommonRequest(input)
	return out, req.Send()
}

// ListStreamScreenshotsCommonWithContext is the same as ListStreamScreenshotsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ListStreamScreenshotsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *AIOTVIDEO20231001) ListStreamScreenshotsCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ListStreamScreenshotsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListStreamScreenshots = "ListStreamScreenshots"

// ListStreamScreenshotsRequest generates a "volcengine/request.Request" representing the
// client's request for the ListStreamScreenshots operation. The "output" return
// value will be populated with the ListStreamScreenshotsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListStreamScreenshotsCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListStreamScreenshotsCommon Send returns without error.
//
// See ListStreamScreenshots for more information on using the ListStreamScreenshots
// API call, and error handling.
//
//    // Example sending a request using the ListStreamScreenshotsRequest method.
//    req, resp := client.ListStreamScreenshotsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *AIOTVIDEO20231001) ListStreamScreenshotsRequest(input *ListStreamScreenshotsInput) (req *request.Request, output *ListStreamScreenshotsOutput) {
	op := &request.Operation{
		Name:       opListStreamScreenshots,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListStreamScreenshotsInput{}
	}

	output = &ListStreamScreenshotsOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListStreamScreenshots API operation for AIOTVIDEO20231001.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for AIOTVIDEO20231001's
// API operation ListStreamScreenshots for usage and error information.
func (c *AIOTVIDEO20231001) ListStreamScreenshots(input *ListStreamScreenshotsInput) (*ListStreamScreenshotsOutput, error) {
	req, out := c.ListStreamScreenshotsRequest(input)
	return out, req.Send()
}

// ListStreamScreenshotsWithContext is the same as ListStreamScreenshots with the addition of
// the ability to pass a context and additional request options.
//
// See ListStreamScreenshots for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *AIOTVIDEO20231001) ListStreamScreenshotsWithContext(ctx volcengine.Context, input *ListStreamScreenshotsInput, opts ...request.Option) (*ListStreamScreenshotsOutput, error) {
	req, out := c.ListStreamScreenshotsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ListStreamScreenshotsInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// EndTime is a required field
	EndTime *int32 `type:"int32" json:",omitempty" required:"true"`

	Resolution *string `type:"string" json:",omitempty"`

	SpaceID *string `type:"string" json:",omitempty"`

	// StartTime is a required field
	StartTime *int32 `type:"int32" json:",omitempty" required:"true"`

	// StreamID is a required field
	StreamID *string `type:"string" json:",omitempty" required:"true"`

	StreamingIndex *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s ListStreamScreenshotsInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListStreamScreenshotsInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ListStreamScreenshotsInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ListStreamScreenshotsInput"}
	if s.EndTime == nil {
		invalidParams.Add(request.NewErrParamRequired("EndTime"))
	}
	if s.StartTime == nil {
		invalidParams.Add(request.NewErrParamRequired("StartTime"))
	}
	if s.StreamID == nil {
		invalidParams.Add(request.NewErrParamRequired("StreamID"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetEndTime sets the EndTime field's value.
func (s *ListStreamScreenshotsInput) SetEndTime(v int32) *ListStreamScreenshotsInput {
	s.EndTime = &v
	return s
}

// SetResolution sets the Resolution field's value.
func (s *ListStreamScreenshotsInput) SetResolution(v string) *ListStreamScreenshotsInput {
	s.Resolution = &v
	return s
}

// SetSpaceID sets the SpaceID field's value.
func (s *ListStreamScreenshotsInput) SetSpaceID(v string) *ListStreamScreenshotsInput {
	s.SpaceID = &v
	return s
}

// SetStartTime sets the StartTime field's value.
func (s *ListStreamScreenshotsInput) SetStartTime(v int32) *ListStreamScreenshotsInput {
	s.StartTime = &v
	return s
}

// SetStreamID sets the StreamID field's value.
func (s *ListStreamScreenshotsInput) SetStreamID(v string) *ListStreamScreenshotsInput {
	s.StreamID = &v
	return s
}

// SetStreamingIndex sets the StreamingIndex field's value.
func (s *ListStreamScreenshotsInput) SetStreamingIndex(v int32) *ListStreamScreenshotsInput {
	s.StreamingIndex = &v
	return s
}

type ListStreamScreenshotsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Path *string `type:"string" json:",omitempty"`

	Screenshot *ScreenshotForListStreamScreenshotsOutput `type:"structure" json:",omitempty"`

	Type *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ListStreamScreenshotsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListStreamScreenshotsOutput) GoString() string {
	return s.String()
}

// SetPath sets the Path field's value.
func (s *ListStreamScreenshotsOutput) SetPath(v string) *ListStreamScreenshotsOutput {
	s.Path = &v
	return s
}

// SetScreenshot sets the Screenshot field's value.
func (s *ListStreamScreenshotsOutput) SetScreenshot(v *ScreenshotForListStreamScreenshotsOutput) *ListStreamScreenshotsOutput {
	s.Screenshot = v
	return s
}

// SetType sets the Type field's value.
func (s *ListStreamScreenshotsOutput) SetType(v string) *ListStreamScreenshotsOutput {
	s.Type = &v
	return s
}

type ScreenshotForListStreamScreenshotsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	BornTs *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s ScreenshotForListStreamScreenshotsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ScreenshotForListStreamScreenshotsOutput) GoString() string {
	return s.String()
}

// SetBornTs sets the BornTs field's value.
func (s *ScreenshotForListStreamScreenshotsOutput) SetBornTs(v int32) *ScreenshotForListStreamScreenshotsOutput {
	s.BornTs = &v
	return s
}
