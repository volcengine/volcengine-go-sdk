// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package iam

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opSetSecurityConfigCommon = "SetSecurityConfig"

// SetSecurityConfigCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the SetSecurityConfigCommon operation. The "output" return
// value will be populated with the SetSecurityConfigCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned SetSecurityConfigCommon Request to send the API call to the service.
// the "output" return value is not valid until after SetSecurityConfigCommon Send returns without error.
//
// See SetSecurityConfigCommon for more information on using the SetSecurityConfigCommon
// API call, and error handling.
//
//    // Example sending a request using the SetSecurityConfigCommonRequest method.
//    req, resp := client.SetSecurityConfigCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *IAM) SetSecurityConfigCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opSetSecurityConfigCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// SetSecurityConfigCommon API operation for IAM.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for IAM's
// API operation SetSecurityConfigCommon for usage and error information.
func (c *IAM) SetSecurityConfigCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.SetSecurityConfigCommonRequest(input)
	return out, req.Send()
}

// SetSecurityConfigCommonWithContext is the same as SetSecurityConfigCommon with the addition of
// the ability to pass a context and additional request options.
//
// See SetSecurityConfigCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *IAM) SetSecurityConfigCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.SetSecurityConfigCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opSetSecurityConfig = "SetSecurityConfig"

// SetSecurityConfigRequest generates a "volcengine/request.Request" representing the
// client's request for the SetSecurityConfig operation. The "output" return
// value will be populated with the SetSecurityConfigCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned SetSecurityConfigCommon Request to send the API call to the service.
// the "output" return value is not valid until after SetSecurityConfigCommon Send returns without error.
//
// See SetSecurityConfig for more information on using the SetSecurityConfig
// API call, and error handling.
//
//    // Example sending a request using the SetSecurityConfigRequest method.
//    req, resp := client.SetSecurityConfigRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *IAM) SetSecurityConfigRequest(input *SetSecurityConfigInput) (req *request.Request, output *SetSecurityConfigOutput) {
	op := &request.Operation{
		Name:       opSetSecurityConfig,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &SetSecurityConfigInput{}
	}

	output = &SetSecurityConfigOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// SetSecurityConfig API operation for IAM.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for IAM's
// API operation SetSecurityConfig for usage and error information.
func (c *IAM) SetSecurityConfig(input *SetSecurityConfigInput) (*SetSecurityConfigOutput, error) {
	req, out := c.SetSecurityConfigRequest(input)
	return out, req.Send()
}

// SetSecurityConfigWithContext is the same as SetSecurityConfig with the addition of
// the ability to pass a context and additional request options.
//
// See SetSecurityConfig for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *IAM) SetSecurityConfigWithContext(ctx volcengine.Context, input *SetSecurityConfigInput, opts ...request.Option) (*SetSecurityConfigOutput, error) {
	req, out := c.SetSecurityConfigRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type SetSecurityConfigInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	SafeAuthExemptDuration *int32 `type:"int32" json:",omitempty"`

	// SafeAuthType is a required field
	SafeAuthType *string `type:"string" json:",omitempty" required:"true"`

	// UserName is a required field
	UserName *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s SetSecurityConfigInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s SetSecurityConfigInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *SetSecurityConfigInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "SetSecurityConfigInput"}
	if s.SafeAuthType == nil {
		invalidParams.Add(request.NewErrParamRequired("SafeAuthType"))
	}
	if s.UserName == nil {
		invalidParams.Add(request.NewErrParamRequired("UserName"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetSafeAuthExemptDuration sets the SafeAuthExemptDuration field's value.
func (s *SetSecurityConfigInput) SetSafeAuthExemptDuration(v int32) *SetSecurityConfigInput {
	s.SafeAuthExemptDuration = &v
	return s
}

// SetSafeAuthType sets the SafeAuthType field's value.
func (s *SetSecurityConfigInput) SetSafeAuthType(v string) *SetSecurityConfigInput {
	s.SafeAuthType = &v
	return s
}

// SetUserName sets the UserName field's value.
func (s *SetSecurityConfigInput) SetUserName(v string) *SetSecurityConfigInput {
	s.UserName = &v
	return s
}

type SetSecurityConfigOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s SetSecurityConfigOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s SetSecurityConfigOutput) GoString() string {
	return s.String()
}
