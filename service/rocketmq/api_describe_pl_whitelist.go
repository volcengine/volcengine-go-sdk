// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package rocketmq

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDescribePLWhitelistCommon = "DescribePLWhitelist"

// DescribePLWhitelistCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribePLWhitelistCommon operation. The "output" return
// value will be populated with the DescribePLWhitelistCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribePLWhitelistCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribePLWhitelistCommon Send returns without error.
//
// See DescribePLWhitelistCommon for more information on using the DescribePLWhitelistCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribePLWhitelistCommonRequest method.
//    req, resp := client.DescribePLWhitelistCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ROCKETMQ) DescribePLWhitelistCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribePLWhitelistCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribePLWhitelistCommon API operation for ROCKETMQ.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ROCKETMQ's
// API operation DescribePLWhitelistCommon for usage and error information.
func (c *ROCKETMQ) DescribePLWhitelistCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribePLWhitelistCommonRequest(input)
	return out, req.Send()
}

// DescribePLWhitelistCommonWithContext is the same as DescribePLWhitelistCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribePLWhitelistCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ROCKETMQ) DescribePLWhitelistCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribePLWhitelistCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribePLWhitelist = "DescribePLWhitelist"

// DescribePLWhitelistRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribePLWhitelist operation. The "output" return
// value will be populated with the DescribePLWhitelistCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribePLWhitelistCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribePLWhitelistCommon Send returns without error.
//
// See DescribePLWhitelist for more information on using the DescribePLWhitelist
// API call, and error handling.
//
//    // Example sending a request using the DescribePLWhitelistRequest method.
//    req, resp := client.DescribePLWhitelistRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ROCKETMQ) DescribePLWhitelistRequest(input *DescribePLWhitelistInput) (req *request.Request, output *DescribePLWhitelistOutput) {
	op := &request.Operation{
		Name:       opDescribePLWhitelist,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribePLWhitelistInput{}
	}

	output = &DescribePLWhitelistOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribePLWhitelist API operation for ROCKETMQ.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ROCKETMQ's
// API operation DescribePLWhitelist for usage and error information.
func (c *ROCKETMQ) DescribePLWhitelist(input *DescribePLWhitelistInput) (*DescribePLWhitelistOutput, error) {
	req, out := c.DescribePLWhitelistRequest(input)
	return out, req.Send()
}

// DescribePLWhitelistWithContext is the same as DescribePLWhitelist with the addition of
// the ability to pass a context and additional request options.
//
// See DescribePLWhitelist for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ROCKETMQ) DescribePLWhitelistWithContext(ctx volcengine.Context, input *DescribePLWhitelistInput, opts ...request.Option) (*DescribePLWhitelistOutput, error) {
	req, out := c.DescribePLWhitelistRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DescribePLWhitelistInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s DescribePLWhitelistInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribePLWhitelistInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribePLWhitelistInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DescribePLWhitelistInput"}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetInstanceId sets the InstanceId field's value.
func (s *DescribePLWhitelistInput) SetInstanceId(v string) *DescribePLWhitelistInput {
	s.InstanceId = &v
	return s
}

type DescribePLWhitelistOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	AccountIds []*string `type:"list" json:",omitempty"`

	InstanceId *string `type:"string" json:",omitempty"`

	PrivateLinkId *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s DescribePLWhitelistOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribePLWhitelistOutput) GoString() string {
	return s.String()
}

// SetAccountIds sets the AccountIds field's value.
func (s *DescribePLWhitelistOutput) SetAccountIds(v []*string) *DescribePLWhitelistOutput {
	s.AccountIds = v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *DescribePLWhitelistOutput) SetInstanceId(v string) *DescribePLWhitelistOutput {
	s.InstanceId = &v
	return s
}

// SetPrivateLinkId sets the PrivateLinkId field's value.
func (s *DescribePLWhitelistOutput) SetPrivateLinkId(v string) *DescribePLWhitelistOutput {
	s.PrivateLinkId = &v
	return s
}
