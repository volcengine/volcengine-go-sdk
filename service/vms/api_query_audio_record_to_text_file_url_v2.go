// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vms

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opQueryAudioRecordToTextFileUrlV2Common = "QueryAudioRecordToTextFileUrlV2"

// QueryAudioRecordToTextFileUrlV2CommonRequest generates a "volcengine/request.Request" representing the
// client's request for the QueryAudioRecordToTextFileUrlV2Common operation. The "output" return
// value will be populated with the QueryAudioRecordToTextFileUrlV2Common request's response once the request completes
// successfully.
//
// Use "Send" method on the returned QueryAudioRecordToTextFileUrlV2Common Request to send the API call to the service.
// the "output" return value is not valid until after QueryAudioRecordToTextFileUrlV2Common Send returns without error.
//
// See QueryAudioRecordToTextFileUrlV2Common for more information on using the QueryAudioRecordToTextFileUrlV2Common
// API call, and error handling.
//
//    // Example sending a request using the QueryAudioRecordToTextFileUrlV2CommonRequest method.
//    req, resp := client.QueryAudioRecordToTextFileUrlV2CommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VMS) QueryAudioRecordToTextFileUrlV2CommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opQueryAudioRecordToTextFileUrlV2Common,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// QueryAudioRecordToTextFileUrlV2Common API operation for VMS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VMS's
// API operation QueryAudioRecordToTextFileUrlV2Common for usage and error information.
func (c *VMS) QueryAudioRecordToTextFileUrlV2Common(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.QueryAudioRecordToTextFileUrlV2CommonRequest(input)
	return out, req.Send()
}

// QueryAudioRecordToTextFileUrlV2CommonWithContext is the same as QueryAudioRecordToTextFileUrlV2Common with the addition of
// the ability to pass a context and additional request options.
//
// See QueryAudioRecordToTextFileUrlV2Common for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VMS) QueryAudioRecordToTextFileUrlV2CommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.QueryAudioRecordToTextFileUrlV2CommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opQueryAudioRecordToTextFileUrlV2 = "QueryAudioRecordToTextFileUrlV2"

// QueryAudioRecordToTextFileUrlV2Request generates a "volcengine/request.Request" representing the
// client's request for the QueryAudioRecordToTextFileUrlV2 operation. The "output" return
// value will be populated with the QueryAudioRecordToTextFileUrlV2Common request's response once the request completes
// successfully.
//
// Use "Send" method on the returned QueryAudioRecordToTextFileUrlV2Common Request to send the API call to the service.
// the "output" return value is not valid until after QueryAudioRecordToTextFileUrlV2Common Send returns without error.
//
// See QueryAudioRecordToTextFileUrlV2 for more information on using the QueryAudioRecordToTextFileUrlV2
// API call, and error handling.
//
//    // Example sending a request using the QueryAudioRecordToTextFileUrlV2Request method.
//    req, resp := client.QueryAudioRecordToTextFileUrlV2Request(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VMS) QueryAudioRecordToTextFileUrlV2Request(input *QueryAudioRecordToTextFileUrlV2Input) (req *request.Request, output *QueryAudioRecordToTextFileUrlV2Output) {
	op := &request.Operation{
		Name:       opQueryAudioRecordToTextFileUrlV2,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &QueryAudioRecordToTextFileUrlV2Input{}
	}

	output = &QueryAudioRecordToTextFileUrlV2Output{}
	req = c.newRequest(op, input, output)

	return
}

// QueryAudioRecordToTextFileUrlV2 API operation for VMS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VMS's
// API operation QueryAudioRecordToTextFileUrlV2 for usage and error information.
func (c *VMS) QueryAudioRecordToTextFileUrlV2(input *QueryAudioRecordToTextFileUrlV2Input) (*QueryAudioRecordToTextFileUrlV2Output, error) {
	req, out := c.QueryAudioRecordToTextFileUrlV2Request(input)
	return out, req.Send()
}

// QueryAudioRecordToTextFileUrlV2WithContext is the same as QueryAudioRecordToTextFileUrlV2 with the addition of
// the ability to pass a context and additional request options.
//
// See QueryAudioRecordToTextFileUrlV2 for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VMS) QueryAudioRecordToTextFileUrlV2WithContext(ctx volcengine.Context, input *QueryAudioRecordToTextFileUrlV2Input, opts ...request.Option) (*QueryAudioRecordToTextFileUrlV2Output, error) {
	req, out := c.QueryAudioRecordToTextFileUrlV2Request(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type QueryAudioRecordToTextFileUrlV2Input struct {
	_ struct{} `type:"structure"`

	// CallIdList is a required field
	CallIdList *string `type:"string" required:"true"`
}

// String returns the string representation
func (s QueryAudioRecordToTextFileUrlV2Input) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s QueryAudioRecordToTextFileUrlV2Input) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *QueryAudioRecordToTextFileUrlV2Input) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "QueryAudioRecordToTextFileUrlV2Input"}
	if s.CallIdList == nil {
		invalidParams.Add(request.NewErrParamRequired("CallIdList"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetCallIdList sets the CallIdList field's value.
func (s *QueryAudioRecordToTextFileUrlV2Input) SetCallIdList(v string) *QueryAudioRecordToTextFileUrlV2Input {
	s.CallIdList = &v
	return s
}

type QueryAudioRecordToTextFileUrlV2Output struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	Records []*RecordForQueryAudioRecordToTextFileUrlV2Output `type:"list"`
}

// String returns the string representation
func (s QueryAudioRecordToTextFileUrlV2Output) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s QueryAudioRecordToTextFileUrlV2Output) GoString() string {
	return s.String()
}

// SetRecords sets the Records field's value.
func (s *QueryAudioRecordToTextFileUrlV2Output) SetRecords(v []*RecordForQueryAudioRecordToTextFileUrlV2Output) *QueryAudioRecordToTextFileUrlV2Output {
	s.Records = v
	return s
}

type RecordForQueryAudioRecordToTextFileUrlV2Output struct {
	_ struct{} `type:"structure"`

	AudioRecordToTextFileUrl *string `type:"string"`

	CallId *string `type:"string"`
}

// String returns the string representation
func (s RecordForQueryAudioRecordToTextFileUrlV2Output) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s RecordForQueryAudioRecordToTextFileUrlV2Output) GoString() string {
	return s.String()
}

// SetAudioRecordToTextFileUrl sets the AudioRecordToTextFileUrl field's value.
func (s *RecordForQueryAudioRecordToTextFileUrlV2Output) SetAudioRecordToTextFileUrl(v string) *RecordForQueryAudioRecordToTextFileUrlV2Output {
	s.AudioRecordToTextFileUrl = &v
	return s
}

// SetCallId sets the CallId field's value.
func (s *RecordForQueryAudioRecordToTextFileUrlV2Output) SetCallId(v string) *RecordForQueryAudioRecordToTextFileUrlV2Output {
	s.CallId = &v
	return s
}
