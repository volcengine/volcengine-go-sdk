// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vms

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opQueryAuthCommon = "QueryAuth"

// QueryAuthCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the QueryAuthCommon operation. The "output" return
// value will be populated with the QueryAuthCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned QueryAuthCommon Request to send the API call to the service.
// the "output" return value is not valid until after QueryAuthCommon Send returns without error.
//
// See QueryAuthCommon for more information on using the QueryAuthCommon
// API call, and error handling.
//
//    // Example sending a request using the QueryAuthCommonRequest method.
//    req, resp := client.QueryAuthCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VMS) QueryAuthCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opQueryAuthCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// QueryAuthCommon API operation for VMS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VMS's
// API operation QueryAuthCommon for usage and error information.
func (c *VMS) QueryAuthCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.QueryAuthCommonRequest(input)
	return out, req.Send()
}

// QueryAuthCommonWithContext is the same as QueryAuthCommon with the addition of
// the ability to pass a context and additional request options.
//
// See QueryAuthCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VMS) QueryAuthCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.QueryAuthCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opQueryAuth = "QueryAuth"

// QueryAuthRequest generates a "volcengine/request.Request" representing the
// client's request for the QueryAuth operation. The "output" return
// value will be populated with the QueryAuthCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned QueryAuthCommon Request to send the API call to the service.
// the "output" return value is not valid until after QueryAuthCommon Send returns without error.
//
// See QueryAuth for more information on using the QueryAuth
// API call, and error handling.
//
//    // Example sending a request using the QueryAuthRequest method.
//    req, resp := client.QueryAuthRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VMS) QueryAuthRequest(input *QueryAuthInput) (req *request.Request, output *QueryAuthOutput) {
	op := &request.Operation{
		Name:       opQueryAuth,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &QueryAuthInput{}
	}

	output = &QueryAuthOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// QueryAuth API operation for VMS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VMS's
// API operation QueryAuth for usage and error information.
func (c *VMS) QueryAuth(input *QueryAuthInput) (*QueryAuthOutput, error) {
	req, out := c.QueryAuthRequest(input)
	return out, req.Send()
}

// QueryAuthWithContext is the same as QueryAuth with the addition of
// the ability to pass a context and additional request options.
//
// See QueryAuth for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VMS) QueryAuthWithContext(ctx volcengine.Context, input *QueryAuthInput, opts ...request.Option) (*QueryAuthOutput, error) {
	req, out := c.QueryAuthRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type QueryAuthInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// Phone is a required field
	Phone *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s QueryAuthInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s QueryAuthInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *QueryAuthInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "QueryAuthInput"}
	if s.Phone == nil {
		invalidParams.Add(request.NewErrParamRequired("Phone"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetPhone sets the Phone field's value.
func (s *QueryAuthInput) SetPhone(v string) *QueryAuthInput {
	s.Phone = &v
	return s
}

type QueryAuthOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	FailReason *string `type:"string" json:",omitempty"`

	Status *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s QueryAuthOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s QueryAuthOutput) GoString() string {
	return s.String()
}

// SetFailReason sets the FailReason field's value.
func (s *QueryAuthOutput) SetFailReason(v string) *QueryAuthOutput {
	s.FailReason = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *QueryAuthOutput) SetStatus(v int32) *QueryAuthOutput {
	s.Status = &v
	return s
}
