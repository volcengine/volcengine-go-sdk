// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vms

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opOpenCreateTtsCommon = "OpenCreateTts"

// OpenCreateTtsCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the OpenCreateTtsCommon operation. The "output" return
// value will be populated with the OpenCreateTtsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned OpenCreateTtsCommon Request to send the API call to the service.
// the "output" return value is not valid until after OpenCreateTtsCommon Send returns without error.
//
// See OpenCreateTtsCommon for more information on using the OpenCreateTtsCommon
// API call, and error handling.
//
//    // Example sending a request using the OpenCreateTtsCommonRequest method.
//    req, resp := client.OpenCreateTtsCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VMS) OpenCreateTtsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opOpenCreateTtsCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// OpenCreateTtsCommon API operation for VMS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VMS's
// API operation OpenCreateTtsCommon for usage and error information.
func (c *VMS) OpenCreateTtsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.OpenCreateTtsCommonRequest(input)
	return out, req.Send()
}

// OpenCreateTtsCommonWithContext is the same as OpenCreateTtsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See OpenCreateTtsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VMS) OpenCreateTtsCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.OpenCreateTtsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opOpenCreateTts = "OpenCreateTts"

// OpenCreateTtsRequest generates a "volcengine/request.Request" representing the
// client's request for the OpenCreateTts operation. The "output" return
// value will be populated with the OpenCreateTtsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned OpenCreateTtsCommon Request to send the API call to the service.
// the "output" return value is not valid until after OpenCreateTtsCommon Send returns without error.
//
// See OpenCreateTts for more information on using the OpenCreateTts
// API call, and error handling.
//
//    // Example sending a request using the OpenCreateTtsRequest method.
//    req, resp := client.OpenCreateTtsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VMS) OpenCreateTtsRequest(input *OpenCreateTtsInput) (req *request.Request, output *OpenCreateTtsOutput) {
	op := &request.Operation{
		Name:       opOpenCreateTts,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &OpenCreateTtsInput{}
	}

	output = &OpenCreateTtsOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// OpenCreateTts API operation for VMS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VMS's
// API operation OpenCreateTts for usage and error information.
func (c *VMS) OpenCreateTts(input *OpenCreateTtsInput) (*OpenCreateTtsOutput, error) {
	req, out := c.OpenCreateTtsRequest(input)
	return out, req.Send()
}

// OpenCreateTtsWithContext is the same as OpenCreateTts with the addition of
// the ability to pass a context and additional request options.
//
// See OpenCreateTts for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VMS) OpenCreateTtsWithContext(ctx volcengine.Context, input *OpenCreateTtsInput, opts ...request.Option) (*OpenCreateTtsOutput, error) {
	req, out := c.OpenCreateTtsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type OpenCreateTtsInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// Name is a required field
	Name *string `type:"string" json:",omitempty" required:"true"`

	Remark *string `max:"255" type:"string" json:",omitempty"`

	TtsTemplateContent *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s OpenCreateTtsInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s OpenCreateTtsInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *OpenCreateTtsInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "OpenCreateTtsInput"}
	if s.Name == nil {
		invalidParams.Add(request.NewErrParamRequired("Name"))
	}
	if s.Remark != nil && len(*s.Remark) > 255 {
		invalidParams.Add(request.NewErrParamMaxLen("Remark", 255, *s.Remark))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetName sets the Name field's value.
func (s *OpenCreateTtsInput) SetName(v string) *OpenCreateTtsInput {
	s.Name = &v
	return s
}

// SetRemark sets the Remark field's value.
func (s *OpenCreateTtsInput) SetRemark(v string) *OpenCreateTtsInput {
	s.Remark = &v
	return s
}

// SetTtsTemplateContent sets the TtsTemplateContent field's value.
func (s *OpenCreateTtsInput) SetTtsTemplateContent(v string) *OpenCreateTtsInput {
	s.TtsTemplateContent = &v
	return s
}

type OpenCreateTtsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Name *string `type:"string" json:",omitempty"`

	ResourceKey *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s OpenCreateTtsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s OpenCreateTtsOutput) GoString() string {
	return s.String()
}

// SetName sets the Name field's value.
func (s *OpenCreateTtsOutput) SetName(v string) *OpenCreateTtsOutput {
	s.Name = &v
	return s
}

// SetResourceKey sets the ResourceKey field's value.
func (s *OpenCreateTtsOutput) SetResourceKey(v string) *OpenCreateTtsOutput {
	s.ResourceKey = &v
	return s
}
