// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vms

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opSingleBatchAppendCommon = "SingleBatchAppend"

// SingleBatchAppendCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the SingleBatchAppendCommon operation. The "output" return
// value will be populated with the SingleBatchAppendCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned SingleBatchAppendCommon Request to send the API call to the service.
// the "output" return value is not valid until after SingleBatchAppendCommon Send returns without error.
//
// See SingleBatchAppendCommon for more information on using the SingleBatchAppendCommon
// API call, and error handling.
//
//    // Example sending a request using the SingleBatchAppendCommonRequest method.
//    req, resp := client.SingleBatchAppendCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VMS) SingleBatchAppendCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opSingleBatchAppendCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// SingleBatchAppendCommon API operation for VMS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VMS's
// API operation SingleBatchAppendCommon for usage and error information.
func (c *VMS) SingleBatchAppendCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.SingleBatchAppendCommonRequest(input)
	return out, req.Send()
}

// SingleBatchAppendCommonWithContext is the same as SingleBatchAppendCommon with the addition of
// the ability to pass a context and additional request options.
//
// See SingleBatchAppendCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VMS) SingleBatchAppendCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.SingleBatchAppendCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opSingleBatchAppend = "SingleBatchAppend"

// SingleBatchAppendRequest generates a "volcengine/request.Request" representing the
// client's request for the SingleBatchAppend operation. The "output" return
// value will be populated with the SingleBatchAppendCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned SingleBatchAppendCommon Request to send the API call to the service.
// the "output" return value is not valid until after SingleBatchAppendCommon Send returns without error.
//
// See SingleBatchAppend for more information on using the SingleBatchAppend
// API call, and error handling.
//
//    // Example sending a request using the SingleBatchAppendRequest method.
//    req, resp := client.SingleBatchAppendRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VMS) SingleBatchAppendRequest(input *SingleBatchAppendInput) (req *request.Request, output *SingleBatchAppendOutput) {
	op := &request.Operation{
		Name:       opSingleBatchAppend,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &SingleBatchAppendInput{}
	}

	output = &SingleBatchAppendOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// SingleBatchAppend API operation for VMS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VMS's
// API operation SingleBatchAppend for usage and error information.
func (c *VMS) SingleBatchAppend(input *SingleBatchAppendInput) (*SingleBatchAppendOutput, error) {
	req, out := c.SingleBatchAppendRequest(input)
	return out, req.Send()
}

// SingleBatchAppendWithContext is the same as SingleBatchAppend with the addition of
// the ability to pass a context and additional request options.
//
// See SingleBatchAppend for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VMS) SingleBatchAppendWithContext(ctx volcengine.Context, input *SingleBatchAppendInput, opts ...request.Option) (*SingleBatchAppendOutput, error) {
	req, out := c.SingleBatchAppendRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type FailListForSingleBatchAppendOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Ext *string `type:"string" json:",omitempty"`

	Phone *string `type:"string" json:",omitempty"`

	SingleOpenId *string `type:"string" json:",omitempty"`

	Type *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s FailListForSingleBatchAppendOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s FailListForSingleBatchAppendOutput) GoString() string {
	return s.String()
}

// SetExt sets the Ext field's value.
func (s *FailListForSingleBatchAppendOutput) SetExt(v string) *FailListForSingleBatchAppendOutput {
	s.Ext = &v
	return s
}

// SetPhone sets the Phone field's value.
func (s *FailListForSingleBatchAppendOutput) SetPhone(v string) *FailListForSingleBatchAppendOutput {
	s.Phone = &v
	return s
}

// SetSingleOpenId sets the SingleOpenId field's value.
func (s *FailListForSingleBatchAppendOutput) SetSingleOpenId(v string) *FailListForSingleBatchAppendOutput {
	s.SingleOpenId = &v
	return s
}

// SetType sets the Type field's value.
func (s *FailListForSingleBatchAppendOutput) SetType(v string) *FailListForSingleBatchAppendOutput {
	s.Type = &v
	return s
}

type ListForSingleBatchAppendInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	AudioPostUrl *string `type:"string" json:",omitempty"`

	CallRecordPostUrl *string `type:"string" json:",omitempty"`

	Ext *string `type:"string" json:",omitempty"`

	ForbidTimeList []*string `type:"list" json:",omitempty"`

	NumberList []*string `type:"list" json:",omitempty"`

	NumberPoolNo *string `type:"string" json:",omitempty"`

	NumberType *int32 `type:"int32" json:",omitempty"`

	Phone *string `type:"string" json:",omitempty"`

	PhoneParam *string `type:"string" json:",omitempty"`

	Resource *string `type:"string" json:",omitempty"`

	RingAgainInterval *int32 `type:"int32" json:",omitempty"`

	RingAgainTimes *int32 `type:"int32" json:",omitempty"`

	SelectNumberRule *int32 `type:"int32" json:",omitempty"`

	SingleOpenId *string `type:"string" json:",omitempty"`

	SmsConfig *string `type:"string" json:",omitempty"`

	TriggerTime *int64 `type:"int64" json:",omitempty"`

	Type *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s ListForSingleBatchAppendInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListForSingleBatchAppendInput) GoString() string {
	return s.String()
}

// SetAudioPostUrl sets the AudioPostUrl field's value.
func (s *ListForSingleBatchAppendInput) SetAudioPostUrl(v string) *ListForSingleBatchAppendInput {
	s.AudioPostUrl = &v
	return s
}

// SetCallRecordPostUrl sets the CallRecordPostUrl field's value.
func (s *ListForSingleBatchAppendInput) SetCallRecordPostUrl(v string) *ListForSingleBatchAppendInput {
	s.CallRecordPostUrl = &v
	return s
}

// SetExt sets the Ext field's value.
func (s *ListForSingleBatchAppendInput) SetExt(v string) *ListForSingleBatchAppendInput {
	s.Ext = &v
	return s
}

// SetForbidTimeList sets the ForbidTimeList field's value.
func (s *ListForSingleBatchAppendInput) SetForbidTimeList(v []*string) *ListForSingleBatchAppendInput {
	s.ForbidTimeList = v
	return s
}

// SetNumberList sets the NumberList field's value.
func (s *ListForSingleBatchAppendInput) SetNumberList(v []*string) *ListForSingleBatchAppendInput {
	s.NumberList = v
	return s
}

// SetNumberPoolNo sets the NumberPoolNo field's value.
func (s *ListForSingleBatchAppendInput) SetNumberPoolNo(v string) *ListForSingleBatchAppendInput {
	s.NumberPoolNo = &v
	return s
}

// SetNumberType sets the NumberType field's value.
func (s *ListForSingleBatchAppendInput) SetNumberType(v int32) *ListForSingleBatchAppendInput {
	s.NumberType = &v
	return s
}

// SetPhone sets the Phone field's value.
func (s *ListForSingleBatchAppendInput) SetPhone(v string) *ListForSingleBatchAppendInput {
	s.Phone = &v
	return s
}

// SetPhoneParam sets the PhoneParam field's value.
func (s *ListForSingleBatchAppendInput) SetPhoneParam(v string) *ListForSingleBatchAppendInput {
	s.PhoneParam = &v
	return s
}

// SetResource sets the Resource field's value.
func (s *ListForSingleBatchAppendInput) SetResource(v string) *ListForSingleBatchAppendInput {
	s.Resource = &v
	return s
}

// SetRingAgainInterval sets the RingAgainInterval field's value.
func (s *ListForSingleBatchAppendInput) SetRingAgainInterval(v int32) *ListForSingleBatchAppendInput {
	s.RingAgainInterval = &v
	return s
}

// SetRingAgainTimes sets the RingAgainTimes field's value.
func (s *ListForSingleBatchAppendInput) SetRingAgainTimes(v int32) *ListForSingleBatchAppendInput {
	s.RingAgainTimes = &v
	return s
}

// SetSelectNumberRule sets the SelectNumberRule field's value.
func (s *ListForSingleBatchAppendInput) SetSelectNumberRule(v int32) *ListForSingleBatchAppendInput {
	s.SelectNumberRule = &v
	return s
}

// SetSingleOpenId sets the SingleOpenId field's value.
func (s *ListForSingleBatchAppendInput) SetSingleOpenId(v string) *ListForSingleBatchAppendInput {
	s.SingleOpenId = &v
	return s
}

// SetSmsConfig sets the SmsConfig field's value.
func (s *ListForSingleBatchAppendInput) SetSmsConfig(v string) *ListForSingleBatchAppendInput {
	s.SmsConfig = &v
	return s
}

// SetTriggerTime sets the TriggerTime field's value.
func (s *ListForSingleBatchAppendInput) SetTriggerTime(v int64) *ListForSingleBatchAppendInput {
	s.TriggerTime = &v
	return s
}

// SetType sets the Type field's value.
func (s *ListForSingleBatchAppendInput) SetType(v int32) *ListForSingleBatchAppendInput {
	s.Type = &v
	return s
}

type SingleBatchAppendInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	List []*ListForSingleBatchAppendInput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s SingleBatchAppendInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s SingleBatchAppendInput) GoString() string {
	return s.String()
}

// SetList sets the List field's value.
func (s *SingleBatchAppendInput) SetList(v []*ListForSingleBatchAppendInput) *SingleBatchAppendInput {
	s.List = v
	return s
}

type SingleBatchAppendOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	FailList []*FailListForSingleBatchAppendOutput `type:"list" json:",omitempty"`

	SuccessList []*SuccessListForSingleBatchAppendOutput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s SingleBatchAppendOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s SingleBatchAppendOutput) GoString() string {
	return s.String()
}

// SetFailList sets the FailList field's value.
func (s *SingleBatchAppendOutput) SetFailList(v []*FailListForSingleBatchAppendOutput) *SingleBatchAppendOutput {
	s.FailList = v
	return s
}

// SetSuccessList sets the SuccessList field's value.
func (s *SingleBatchAppendOutput) SetSuccessList(v []*SuccessListForSingleBatchAppendOutput) *SingleBatchAppendOutput {
	s.SuccessList = v
	return s
}

type SuccessListForSingleBatchAppendOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Ext *string `type:"string" json:",omitempty"`

	Phone *string `type:"string" json:",omitempty"`

	SingleOpenId *string `type:"string" json:",omitempty"`

	Type *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s SuccessListForSingleBatchAppendOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s SuccessListForSingleBatchAppendOutput) GoString() string {
	return s.String()
}

// SetExt sets the Ext field's value.
func (s *SuccessListForSingleBatchAppendOutput) SetExt(v string) *SuccessListForSingleBatchAppendOutput {
	s.Ext = &v
	return s
}

// SetPhone sets the Phone field's value.
func (s *SuccessListForSingleBatchAppendOutput) SetPhone(v string) *SuccessListForSingleBatchAppendOutput {
	s.Phone = &v
	return s
}

// SetSingleOpenId sets the SingleOpenId field's value.
func (s *SuccessListForSingleBatchAppendOutput) SetSingleOpenId(v string) *SuccessListForSingleBatchAppendOutput {
	s.SingleOpenId = &v
	return s
}

// SetType sets the Type field's value.
func (s *SuccessListForSingleBatchAppendOutput) SetType(v string) *SuccessListForSingleBatchAppendOutput {
	s.Type = &v
	return s
}
