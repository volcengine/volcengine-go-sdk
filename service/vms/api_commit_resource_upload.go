// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vms

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opCommitResourceUploadCommon = "CommitResourceUpload"

// CommitResourceUploadCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the CommitResourceUploadCommon operation. The "output" return
// value will be populated with the CommitResourceUploadCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CommitResourceUploadCommon Request to send the API call to the service.
// the "output" return value is not valid until after CommitResourceUploadCommon Send returns without error.
//
// See CommitResourceUploadCommon for more information on using the CommitResourceUploadCommon
// API call, and error handling.
//
//    // Example sending a request using the CommitResourceUploadCommonRequest method.
//    req, resp := client.CommitResourceUploadCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VMS) CommitResourceUploadCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCommitResourceUploadCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CommitResourceUploadCommon API operation for VMS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VMS's
// API operation CommitResourceUploadCommon for usage and error information.
func (c *VMS) CommitResourceUploadCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CommitResourceUploadCommonRequest(input)
	return out, req.Send()
}

// CommitResourceUploadCommonWithContext is the same as CommitResourceUploadCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CommitResourceUploadCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VMS) CommitResourceUploadCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CommitResourceUploadCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCommitResourceUpload = "CommitResourceUpload"

// CommitResourceUploadRequest generates a "volcengine/request.Request" representing the
// client's request for the CommitResourceUpload operation. The "output" return
// value will be populated with the CommitResourceUploadCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CommitResourceUploadCommon Request to send the API call to the service.
// the "output" return value is not valid until after CommitResourceUploadCommon Send returns without error.
//
// See CommitResourceUpload for more information on using the CommitResourceUpload
// API call, and error handling.
//
//    // Example sending a request using the CommitResourceUploadRequest method.
//    req, resp := client.CommitResourceUploadRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VMS) CommitResourceUploadRequest(input *CommitResourceUploadInput) (req *request.Request, output *CommitResourceUploadOutput) {
	op := &request.Operation{
		Name:       opCommitResourceUpload,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CommitResourceUploadInput{}
	}

	output = &CommitResourceUploadOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CommitResourceUpload API operation for VMS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VMS's
// API operation CommitResourceUpload for usage and error information.
func (c *VMS) CommitResourceUpload(input *CommitResourceUploadInput) (*CommitResourceUploadOutput, error) {
	req, out := c.CommitResourceUploadRequest(input)
	return out, req.Send()
}

// CommitResourceUploadWithContext is the same as CommitResourceUpload with the addition of
// the ability to pass a context and additional request options.
//
// See CommitResourceUpload for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VMS) CommitResourceUploadWithContext(ctx volcengine.Context, input *CommitResourceUploadInput, opts ...request.Option) (*CommitResourceUploadOutput, error) {
	req, out := c.CommitResourceUploadRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type CommitResourceUploadInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// FileName is a required field
	FileName *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s CommitResourceUploadInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CommitResourceUploadInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CommitResourceUploadInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CommitResourceUploadInput"}
	if s.FileName == nil {
		invalidParams.Add(request.NewErrParamRequired("FileName"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetFileName sets the FileName field's value.
func (s *CommitResourceUploadInput) SetFileName(v string) *CommitResourceUploadInput {
	s.FileName = &v
	return s
}

type CommitResourceUploadOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Name *string `type:"string" json:",omitempty"`

	ResourceKey *string `type:"string" json:",omitempty"`

	Suffix *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s CommitResourceUploadOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CommitResourceUploadOutput) GoString() string {
	return s.String()
}

// SetName sets the Name field's value.
func (s *CommitResourceUploadOutput) SetName(v string) *CommitResourceUploadOutput {
	s.Name = &v
	return s
}

// SetResourceKey sets the ResourceKey field's value.
func (s *CommitResourceUploadOutput) SetResourceKey(v string) *CommitResourceUploadOutput {
	s.ResourceKey = &v
	return s
}

// SetSuffix sets the Suffix field's value.
func (s *CommitResourceUploadOutput) SetSuffix(v string) *CommitResourceUploadOutput {
	s.Suffix = &v
	return s
}
