// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vms

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opOpenUpdateResourceCommon = "OpenUpdateResource"

// OpenUpdateResourceCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the OpenUpdateResourceCommon operation. The "output" return
// value will be populated with the OpenUpdateResourceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned OpenUpdateResourceCommon Request to send the API call to the service.
// the "output" return value is not valid until after OpenUpdateResourceCommon Send returns without error.
//
// See OpenUpdateResourceCommon for more information on using the OpenUpdateResourceCommon
// API call, and error handling.
//
//    // Example sending a request using the OpenUpdateResourceCommonRequest method.
//    req, resp := client.OpenUpdateResourceCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VMS) OpenUpdateResourceCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opOpenUpdateResourceCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// OpenUpdateResourceCommon API operation for VMS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VMS's
// API operation OpenUpdateResourceCommon for usage and error information.
func (c *VMS) OpenUpdateResourceCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.OpenUpdateResourceCommonRequest(input)
	return out, req.Send()
}

// OpenUpdateResourceCommonWithContext is the same as OpenUpdateResourceCommon with the addition of
// the ability to pass a context and additional request options.
//
// See OpenUpdateResourceCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VMS) OpenUpdateResourceCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.OpenUpdateResourceCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opOpenUpdateResource = "OpenUpdateResource"

// OpenUpdateResourceRequest generates a "volcengine/request.Request" representing the
// client's request for the OpenUpdateResource operation. The "output" return
// value will be populated with the OpenUpdateResourceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned OpenUpdateResourceCommon Request to send the API call to the service.
// the "output" return value is not valid until after OpenUpdateResourceCommon Send returns without error.
//
// See OpenUpdateResource for more information on using the OpenUpdateResource
// API call, and error handling.
//
//    // Example sending a request using the OpenUpdateResourceRequest method.
//    req, resp := client.OpenUpdateResourceRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VMS) OpenUpdateResourceRequest(input *OpenUpdateResourceInput) (req *request.Request, output *OpenUpdateResourceOutput) {
	op := &request.Operation{
		Name:       opOpenUpdateResource,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &OpenUpdateResourceInput{}
	}

	output = &OpenUpdateResourceOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// OpenUpdateResource API operation for VMS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VMS's
// API operation OpenUpdateResource for usage and error information.
func (c *VMS) OpenUpdateResource(input *OpenUpdateResourceInput) (*OpenUpdateResourceOutput, error) {
	req, out := c.OpenUpdateResourceRequest(input)
	return out, req.Send()
}

// OpenUpdateResourceWithContext is the same as OpenUpdateResource with the addition of
// the ability to pass a context and additional request options.
//
// See OpenUpdateResource for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VMS) OpenUpdateResourceWithContext(ctx volcengine.Context, input *OpenUpdateResourceInput, opts ...request.Option) (*OpenUpdateResourceOutput, error) {
	req, out := c.OpenUpdateResourceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type OpenUpdateResourceInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// Name is a required field
	Name *string `type:"string" json:",omitempty" required:"true"`

	// ResourceKey is a required field
	ResourceKey *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s OpenUpdateResourceInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s OpenUpdateResourceInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *OpenUpdateResourceInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "OpenUpdateResourceInput"}
	if s.Name == nil {
		invalidParams.Add(request.NewErrParamRequired("Name"))
	}
	if s.ResourceKey == nil {
		invalidParams.Add(request.NewErrParamRequired("ResourceKey"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetName sets the Name field's value.
func (s *OpenUpdateResourceInput) SetName(v string) *OpenUpdateResourceInput {
	s.Name = &v
	return s
}

// SetResourceKey sets the ResourceKey field's value.
func (s *OpenUpdateResourceInput) SetResourceKey(v string) *OpenUpdateResourceInput {
	s.ResourceKey = &v
	return s
}

type OpenUpdateResourceOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Name *string `type:"string" json:",omitempty"`

	ResourceKey *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s OpenUpdateResourceOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s OpenUpdateResourceOutput) GoString() string {
	return s.String()
}

// SetName sets the Name field's value.
func (s *OpenUpdateResourceOutput) SetName(v string) *OpenUpdateResourceOutput {
	s.Name = &v
	return s
}

// SetResourceKey sets the ResourceKey field's value.
func (s *OpenUpdateResourceOutput) SetResourceKey(v string) *OpenUpdateResourceOutput {
	s.ResourceKey = &v
	return s
}
