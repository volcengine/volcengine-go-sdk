// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vms

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opUpdateTaskCommon = "UpdateTask"

// UpdateTaskCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateTaskCommon operation. The "output" return
// value will be populated with the UpdateTaskCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateTaskCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateTaskCommon Send returns without error.
//
// See UpdateTaskCommon for more information on using the UpdateTaskCommon
// API call, and error handling.
//
//    // Example sending a request using the UpdateTaskCommonRequest method.
//    req, resp := client.UpdateTaskCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VMS) UpdateTaskCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opUpdateTaskCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateTaskCommon API operation for VMS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VMS's
// API operation UpdateTaskCommon for usage and error information.
func (c *VMS) UpdateTaskCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.UpdateTaskCommonRequest(input)
	return out, req.Send()
}

// UpdateTaskCommonWithContext is the same as UpdateTaskCommon with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateTaskCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VMS) UpdateTaskCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.UpdateTaskCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opUpdateTask = "UpdateTask"

// UpdateTaskRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateTask operation. The "output" return
// value will be populated with the UpdateTaskCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateTaskCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateTaskCommon Send returns without error.
//
// See UpdateTask for more information on using the UpdateTask
// API call, and error handling.
//
//    // Example sending a request using the UpdateTaskRequest method.
//    req, resp := client.UpdateTaskRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VMS) UpdateTaskRequest(input *UpdateTaskInput) (req *request.Request, output *UpdateTaskOutput) {
	op := &request.Operation{
		Name:       opUpdateTask,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UpdateTaskInput{}
	}

	output = &UpdateTaskOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateTask API operation for VMS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VMS's
// API operation UpdateTask for usage and error information.
func (c *VMS) UpdateTask(input *UpdateTaskInput) (*UpdateTaskOutput, error) {
	req, out := c.UpdateTaskRequest(input)
	return out, req.Send()
}

// UpdateTaskWithContext is the same as UpdateTask with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateTask for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VMS) UpdateTaskWithContext(ctx volcengine.Context, input *UpdateTaskInput, opts ...request.Option) (*UpdateTaskOutput, error) {
	req, out := c.UpdateTaskRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ForbidTimeListForUpdateTaskInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Times []*string `type:"list" json:",omitempty"`

	Weekdays []*int32 `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s ForbidTimeListForUpdateTaskInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ForbidTimeListForUpdateTaskInput) GoString() string {
	return s.String()
}

// SetTimes sets the Times field's value.
func (s *ForbidTimeListForUpdateTaskInput) SetTimes(v []*string) *ForbidTimeListForUpdateTaskInput {
	s.Times = v
	return s
}

// SetWeekdays sets the Weekdays field's value.
func (s *ForbidTimeListForUpdateTaskInput) SetWeekdays(v []*int32) *ForbidTimeListForUpdateTaskInput {
	s.Weekdays = v
	return s
}

type UpdateTaskInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// Concurrency is a required field
	Concurrency *int32 `type:"int32" json:",omitempty" required:"true"`

	// EndTime is a required field
	EndTime *string `type:"string" json:",omitempty" required:"true"`

	ForbidTimeList []*ForbidTimeListForUpdateTaskInput `type:"list" json:",omitempty"`

	Recall *bool `type:"boolean" json:",omitempty"`

	RingAgainInterval *int32 `type:"int32" json:",omitempty"`

	RingAgainTimes *int32 `type:"int32" json:",omitempty"`

	// StartTime is a required field
	StartTime *string `type:"string" json:",omitempty" required:"true"`

	// TaskOpenId is a required field
	TaskOpenId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s UpdateTaskInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateTaskInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UpdateTaskInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "UpdateTaskInput"}
	if s.Concurrency == nil {
		invalidParams.Add(request.NewErrParamRequired("Concurrency"))
	}
	if s.EndTime == nil {
		invalidParams.Add(request.NewErrParamRequired("EndTime"))
	}
	if s.StartTime == nil {
		invalidParams.Add(request.NewErrParamRequired("StartTime"))
	}
	if s.TaskOpenId == nil {
		invalidParams.Add(request.NewErrParamRequired("TaskOpenId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetConcurrency sets the Concurrency field's value.
func (s *UpdateTaskInput) SetConcurrency(v int32) *UpdateTaskInput {
	s.Concurrency = &v
	return s
}

// SetEndTime sets the EndTime field's value.
func (s *UpdateTaskInput) SetEndTime(v string) *UpdateTaskInput {
	s.EndTime = &v
	return s
}

// SetForbidTimeList sets the ForbidTimeList field's value.
func (s *UpdateTaskInput) SetForbidTimeList(v []*ForbidTimeListForUpdateTaskInput) *UpdateTaskInput {
	s.ForbidTimeList = v
	return s
}

// SetRecall sets the Recall field's value.
func (s *UpdateTaskInput) SetRecall(v bool) *UpdateTaskInput {
	s.Recall = &v
	return s
}

// SetRingAgainInterval sets the RingAgainInterval field's value.
func (s *UpdateTaskInput) SetRingAgainInterval(v int32) *UpdateTaskInput {
	s.RingAgainInterval = &v
	return s
}

// SetRingAgainTimes sets the RingAgainTimes field's value.
func (s *UpdateTaskInput) SetRingAgainTimes(v int32) *UpdateTaskInput {
	s.RingAgainTimes = &v
	return s
}

// SetStartTime sets the StartTime field's value.
func (s *UpdateTaskInput) SetStartTime(v string) *UpdateTaskInput {
	s.StartTime = &v
	return s
}

// SetTaskOpenId sets the TaskOpenId field's value.
func (s *UpdateTaskInput) SetTaskOpenId(v string) *UpdateTaskInput {
	s.TaskOpenId = &v
	return s
}

type UpdateTaskOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s UpdateTaskOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateTaskOutput) GoString() string {
	return s.String()
}
