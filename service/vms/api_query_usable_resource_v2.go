// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vms

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opQueryUsableResourceV2Common = "QueryUsableResourceV2"

// QueryUsableResourceV2CommonRequest generates a "volcengine/request.Request" representing the
// client's request for the QueryUsableResourceV2Common operation. The "output" return
// value will be populated with the QueryUsableResourceV2Common request's response once the request completes
// successfully.
//
// Use "Send" method on the returned QueryUsableResourceV2Common Request to send the API call to the service.
// the "output" return value is not valid until after QueryUsableResourceV2Common Send returns without error.
//
// See QueryUsableResourceV2Common for more information on using the QueryUsableResourceV2Common
// API call, and error handling.
//
//    // Example sending a request using the QueryUsableResourceV2CommonRequest method.
//    req, resp := client.QueryUsableResourceV2CommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VMS) QueryUsableResourceV2CommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opQueryUsableResourceV2Common,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// QueryUsableResourceV2Common API operation for VMS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VMS's
// API operation QueryUsableResourceV2Common for usage and error information.
func (c *VMS) QueryUsableResourceV2Common(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.QueryUsableResourceV2CommonRequest(input)
	return out, req.Send()
}

// QueryUsableResourceV2CommonWithContext is the same as QueryUsableResourceV2Common with the addition of
// the ability to pass a context and additional request options.
//
// See QueryUsableResourceV2Common for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VMS) QueryUsableResourceV2CommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.QueryUsableResourceV2CommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opQueryUsableResourceV2 = "QueryUsableResourceV2"

// QueryUsableResourceV2Request generates a "volcengine/request.Request" representing the
// client's request for the QueryUsableResourceV2 operation. The "output" return
// value will be populated with the QueryUsableResourceV2Common request's response once the request completes
// successfully.
//
// Use "Send" method on the returned QueryUsableResourceV2Common Request to send the API call to the service.
// the "output" return value is not valid until after QueryUsableResourceV2Common Send returns without error.
//
// See QueryUsableResourceV2 for more information on using the QueryUsableResourceV2
// API call, and error handling.
//
//    // Example sending a request using the QueryUsableResourceV2Request method.
//    req, resp := client.QueryUsableResourceV2Request(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VMS) QueryUsableResourceV2Request(input *QueryUsableResourceV2Input) (req *request.Request, output *QueryUsableResourceV2Output) {
	op := &request.Operation{
		Name:       opQueryUsableResourceV2,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &QueryUsableResourceV2Input{}
	}

	output = &QueryUsableResourceV2Output{}
	req = c.newRequest(op, input, output)

	return
}

// QueryUsableResourceV2 API operation for VMS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VMS's
// API operation QueryUsableResourceV2 for usage and error information.
func (c *VMS) QueryUsableResourceV2(input *QueryUsableResourceV2Input) (*QueryUsableResourceV2Output, error) {
	req, out := c.QueryUsableResourceV2Request(input)
	return out, req.Send()
}

// QueryUsableResourceV2WithContext is the same as QueryUsableResourceV2 with the addition of
// the ability to pass a context and additional request options.
//
// See QueryUsableResourceV2 for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VMS) QueryUsableResourceV2WithContext(ctx volcengine.Context, input *QueryUsableResourceV2Input, opts ...request.Option) (*QueryUsableResourceV2Output, error) {
	req, out := c.QueryUsableResourceV2Request(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type QueryUsableResourceV2Input struct {
	_ struct{} `type:"structure"`

	// Type is a required field
	Type *int32 `type:"int32" required:"true"`
}

// String returns the string representation
func (s QueryUsableResourceV2Input) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s QueryUsableResourceV2Input) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *QueryUsableResourceV2Input) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "QueryUsableResourceV2Input"}
	if s.Type == nil {
		invalidParams.Add(request.NewErrParamRequired("Type"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetType sets the Type field's value.
func (s *QueryUsableResourceV2Input) SetType(v int32) *QueryUsableResourceV2Input {
	s.Type = &v
	return s
}

type QueryUsableResourceV2Output struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	Records []*RecordForQueryUsableResourceV2Output `type:"list"`
}

// String returns the string representation
func (s QueryUsableResourceV2Output) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s QueryUsableResourceV2Output) GoString() string {
	return s.String()
}

// SetRecords sets the Records field's value.
func (s *QueryUsableResourceV2Output) SetRecords(v []*RecordForQueryUsableResourceV2Output) *QueryUsableResourceV2Output {
	s.Records = v
	return s
}

type RecordForQueryUsableResourceV2Output struct {
	_ struct{} `type:"structure"`

	CreateTime *string `type:"string"`

	Duration *int32 `type:"int32"`

	Name *string `type:"string"`

	Remark *string `type:"string"`

	ResourceKey *string `type:"string"`

	State *int32 `type:"int32"`

	Suffix *string `type:"string"`

	TtsOptions *string `type:"string"`

	TtsTemplateContent *string `type:"string"`

	Type *int32 `type:"int32"`
}

// String returns the string representation
func (s RecordForQueryUsableResourceV2Output) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s RecordForQueryUsableResourceV2Output) GoString() string {
	return s.String()
}

// SetCreateTime sets the CreateTime field's value.
func (s *RecordForQueryUsableResourceV2Output) SetCreateTime(v string) *RecordForQueryUsableResourceV2Output {
	s.CreateTime = &v
	return s
}

// SetDuration sets the Duration field's value.
func (s *RecordForQueryUsableResourceV2Output) SetDuration(v int32) *RecordForQueryUsableResourceV2Output {
	s.Duration = &v
	return s
}

// SetName sets the Name field's value.
func (s *RecordForQueryUsableResourceV2Output) SetName(v string) *RecordForQueryUsableResourceV2Output {
	s.Name = &v
	return s
}

// SetRemark sets the Remark field's value.
func (s *RecordForQueryUsableResourceV2Output) SetRemark(v string) *RecordForQueryUsableResourceV2Output {
	s.Remark = &v
	return s
}

// SetResourceKey sets the ResourceKey field's value.
func (s *RecordForQueryUsableResourceV2Output) SetResourceKey(v string) *RecordForQueryUsableResourceV2Output {
	s.ResourceKey = &v
	return s
}

// SetState sets the State field's value.
func (s *RecordForQueryUsableResourceV2Output) SetState(v int32) *RecordForQueryUsableResourceV2Output {
	s.State = &v
	return s
}

// SetSuffix sets the Suffix field's value.
func (s *RecordForQueryUsableResourceV2Output) SetSuffix(v string) *RecordForQueryUsableResourceV2Output {
	s.Suffix = &v
	return s
}

// SetTtsOptions sets the TtsOptions field's value.
func (s *RecordForQueryUsableResourceV2Output) SetTtsOptions(v string) *RecordForQueryUsableResourceV2Output {
	s.TtsOptions = &v
	return s
}

// SetTtsTemplateContent sets the TtsTemplateContent field's value.
func (s *RecordForQueryUsableResourceV2Output) SetTtsTemplateContent(v string) *RecordForQueryUsableResourceV2Output {
	s.TtsTemplateContent = &v
	return s
}

// SetType sets the Type field's value.
func (s *RecordForQueryUsableResourceV2Output) SetType(v int32) *RecordForQueryUsableResourceV2Output {
	s.Type = &v
	return s
}
