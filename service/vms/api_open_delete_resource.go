// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vms

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opOpenDeleteResourceCommon = "OpenDeleteResource"

// OpenDeleteResourceCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the OpenDeleteResourceCommon operation. The "output" return
// value will be populated with the OpenDeleteResourceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned OpenDeleteResourceCommon Request to send the API call to the service.
// the "output" return value is not valid until after OpenDeleteResourceCommon Send returns without error.
//
// See OpenDeleteResourceCommon for more information on using the OpenDeleteResourceCommon
// API call, and error handling.
//
//    // Example sending a request using the OpenDeleteResourceCommonRequest method.
//    req, resp := client.OpenDeleteResourceCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VMS) OpenDeleteResourceCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opOpenDeleteResourceCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// OpenDeleteResourceCommon API operation for VMS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VMS's
// API operation OpenDeleteResourceCommon for usage and error information.
func (c *VMS) OpenDeleteResourceCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.OpenDeleteResourceCommonRequest(input)
	return out, req.Send()
}

// OpenDeleteResourceCommonWithContext is the same as OpenDeleteResourceCommon with the addition of
// the ability to pass a context and additional request options.
//
// See OpenDeleteResourceCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VMS) OpenDeleteResourceCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.OpenDeleteResourceCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opOpenDeleteResource = "OpenDeleteResource"

// OpenDeleteResourceRequest generates a "volcengine/request.Request" representing the
// client's request for the OpenDeleteResource operation. The "output" return
// value will be populated with the OpenDeleteResourceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned OpenDeleteResourceCommon Request to send the API call to the service.
// the "output" return value is not valid until after OpenDeleteResourceCommon Send returns without error.
//
// See OpenDeleteResource for more information on using the OpenDeleteResource
// API call, and error handling.
//
//    // Example sending a request using the OpenDeleteResourceRequest method.
//    req, resp := client.OpenDeleteResourceRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VMS) OpenDeleteResourceRequest(input *OpenDeleteResourceInput) (req *request.Request, output *OpenDeleteResourceOutput) {
	op := &request.Operation{
		Name:       opOpenDeleteResource,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &OpenDeleteResourceInput{}
	}

	output = &OpenDeleteResourceOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// OpenDeleteResource API operation for VMS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VMS's
// API operation OpenDeleteResource for usage and error information.
func (c *VMS) OpenDeleteResource(input *OpenDeleteResourceInput) (*OpenDeleteResourceOutput, error) {
	req, out := c.OpenDeleteResourceRequest(input)
	return out, req.Send()
}

// OpenDeleteResourceWithContext is the same as OpenDeleteResource with the addition of
// the ability to pass a context and additional request options.
//
// See OpenDeleteResource for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VMS) OpenDeleteResourceWithContext(ctx volcengine.Context, input *OpenDeleteResourceInput, opts ...request.Option) (*OpenDeleteResourceOutput, error) {
	req, out := c.OpenDeleteResourceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type OpenDeleteResourceInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// ResourceKey is a required field
	ResourceKey *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s OpenDeleteResourceInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s OpenDeleteResourceInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *OpenDeleteResourceInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "OpenDeleteResourceInput"}
	if s.ResourceKey == nil {
		invalidParams.Add(request.NewErrParamRequired("ResourceKey"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetResourceKey sets the ResourceKey field's value.
func (s *OpenDeleteResourceInput) SetResourceKey(v string) *OpenDeleteResourceInput {
	s.ResourceKey = &v
	return s
}

type OpenDeleteResourceOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	ResourceKey *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s OpenDeleteResourceOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s OpenDeleteResourceOutput) GoString() string {
	return s.String()
}

// SetResourceKey sets the ResourceKey field's value.
func (s *OpenDeleteResourceOutput) SetResourceKey(v string) *OpenDeleteResourceOutput {
	s.ResourceKey = &v
	return s
}
