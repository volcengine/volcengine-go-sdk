// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vms

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opSingleCancelV2Common = "SingleCancelV2"

// SingleCancelV2CommonRequest generates a "volcengine/request.Request" representing the
// client's request for the SingleCancelV2Common operation. The "output" return
// value will be populated with the SingleCancelV2Common request's response once the request completes
// successfully.
//
// Use "Send" method on the returned SingleCancelV2Common Request to send the API call to the service.
// the "output" return value is not valid until after SingleCancelV2Common Send returns without error.
//
// See SingleCancelV2Common for more information on using the SingleCancelV2Common
// API call, and error handling.
//
//    // Example sending a request using the SingleCancelV2CommonRequest method.
//    req, resp := client.SingleCancelV2CommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VMS) SingleCancelV2CommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opSingleCancelV2Common,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// SingleCancelV2Common API operation for VMS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VMS's
// API operation SingleCancelV2Common for usage and error information.
func (c *VMS) SingleCancelV2Common(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.SingleCancelV2CommonRequest(input)
	return out, req.Send()
}

// SingleCancelV2CommonWithContext is the same as SingleCancelV2Common with the addition of
// the ability to pass a context and additional request options.
//
// See SingleCancelV2Common for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VMS) SingleCancelV2CommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.SingleCancelV2CommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opSingleCancelV2 = "SingleCancelV2"

// SingleCancelV2Request generates a "volcengine/request.Request" representing the
// client's request for the SingleCancelV2 operation. The "output" return
// value will be populated with the SingleCancelV2Common request's response once the request completes
// successfully.
//
// Use "Send" method on the returned SingleCancelV2Common Request to send the API call to the service.
// the "output" return value is not valid until after SingleCancelV2Common Send returns without error.
//
// See SingleCancelV2 for more information on using the SingleCancelV2
// API call, and error handling.
//
//    // Example sending a request using the SingleCancelV2Request method.
//    req, resp := client.SingleCancelV2Request(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VMS) SingleCancelV2Request(input *SingleCancelV2Input) (req *request.Request, output *SingleCancelV2Output) {
	op := &request.Operation{
		Name:       opSingleCancelV2,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &SingleCancelV2Input{}
	}

	output = &SingleCancelV2Output{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// SingleCancelV2 API operation for VMS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VMS's
// API operation SingleCancelV2 for usage and error information.
func (c *VMS) SingleCancelV2(input *SingleCancelV2Input) (*SingleCancelV2Output, error) {
	req, out := c.SingleCancelV2Request(input)
	return out, req.Send()
}

// SingleCancelV2WithContext is the same as SingleCancelV2 with the addition of
// the ability to pass a context and additional request options.
//
// See SingleCancelV2 for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VMS) SingleCancelV2WithContext(ctx volcengine.Context, input *SingleCancelV2Input, opts ...request.Option) (*SingleCancelV2Output, error) {
	req, out := c.SingleCancelV2Request(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type SingleCancelV2Input struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// SingleOpenId is a required field
	SingleOpenId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s SingleCancelV2Input) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s SingleCancelV2Input) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *SingleCancelV2Input) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "SingleCancelV2Input"}
	if s.SingleOpenId == nil {
		invalidParams.Add(request.NewErrParamRequired("SingleOpenId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetSingleOpenId sets the SingleOpenId field's value.
func (s *SingleCancelV2Input) SetSingleOpenId(v string) *SingleCancelV2Input {
	s.SingleOpenId = &v
	return s
}

type SingleCancelV2Output struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s SingleCancelV2Output) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s SingleCancelV2Output) GoString() string {
	return s.String()
}
