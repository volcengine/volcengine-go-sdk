// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vms

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opQueryAudioRecordFileUrlCommon = "QueryAudioRecordFileUrl"

// QueryAudioRecordFileUrlCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the QueryAudioRecordFileUrlCommon operation. The "output" return
// value will be populated with the QueryAudioRecordFileUrlCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned QueryAudioRecordFileUrlCommon Request to send the API call to the service.
// the "output" return value is not valid until after QueryAudioRecordFileUrlCommon Send returns without error.
//
// See QueryAudioRecordFileUrlCommon for more information on using the QueryAudioRecordFileUrlCommon
// API call, and error handling.
//
//    // Example sending a request using the QueryAudioRecordFileUrlCommonRequest method.
//    req, resp := client.QueryAudioRecordFileUrlCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VMS) QueryAudioRecordFileUrlCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opQueryAudioRecordFileUrlCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// QueryAudioRecordFileUrlCommon API operation for VMS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VMS's
// API operation QueryAudioRecordFileUrlCommon for usage and error information.
func (c *VMS) QueryAudioRecordFileUrlCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.QueryAudioRecordFileUrlCommonRequest(input)
	return out, req.Send()
}

// QueryAudioRecordFileUrlCommonWithContext is the same as QueryAudioRecordFileUrlCommon with the addition of
// the ability to pass a context and additional request options.
//
// See QueryAudioRecordFileUrlCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VMS) QueryAudioRecordFileUrlCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.QueryAudioRecordFileUrlCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opQueryAudioRecordFileUrl = "QueryAudioRecordFileUrl"

// QueryAudioRecordFileUrlRequest generates a "volcengine/request.Request" representing the
// client's request for the QueryAudioRecordFileUrl operation. The "output" return
// value will be populated with the QueryAudioRecordFileUrlCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned QueryAudioRecordFileUrlCommon Request to send the API call to the service.
// the "output" return value is not valid until after QueryAudioRecordFileUrlCommon Send returns without error.
//
// See QueryAudioRecordFileUrl for more information on using the QueryAudioRecordFileUrl
// API call, and error handling.
//
//    // Example sending a request using the QueryAudioRecordFileUrlRequest method.
//    req, resp := client.QueryAudioRecordFileUrlRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VMS) QueryAudioRecordFileUrlRequest(input *QueryAudioRecordFileUrlInput) (req *request.Request, output *QueryAudioRecordFileUrlOutput) {
	op := &request.Operation{
		Name:       opQueryAudioRecordFileUrl,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &QueryAudioRecordFileUrlInput{}
	}

	output = &QueryAudioRecordFileUrlOutput{}
	req = c.newRequest(op, input, output)

	return
}

// QueryAudioRecordFileUrl API operation for VMS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VMS's
// API operation QueryAudioRecordFileUrl for usage and error information.
func (c *VMS) QueryAudioRecordFileUrl(input *QueryAudioRecordFileUrlInput) (*QueryAudioRecordFileUrlOutput, error) {
	req, out := c.QueryAudioRecordFileUrlRequest(input)
	return out, req.Send()
}

// QueryAudioRecordFileUrlWithContext is the same as QueryAudioRecordFileUrl with the addition of
// the ability to pass a context and additional request options.
//
// See QueryAudioRecordFileUrl for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VMS) QueryAudioRecordFileUrlWithContext(ctx volcengine.Context, input *QueryAudioRecordFileUrlInput, opts ...request.Option) (*QueryAudioRecordFileUrlOutput, error) {
	req, out := c.QueryAudioRecordFileUrlRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type QueryAudioRecordFileUrlInput struct {
	_ struct{} `type:"structure"`

	// CallId is a required field
	CallId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s QueryAudioRecordFileUrlInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s QueryAudioRecordFileUrlInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *QueryAudioRecordFileUrlInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "QueryAudioRecordFileUrlInput"}
	if s.CallId == nil {
		invalidParams.Add(request.NewErrParamRequired("CallId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetCallId sets the CallId field's value.
func (s *QueryAudioRecordFileUrlInput) SetCallId(v string) *QueryAudioRecordFileUrlInput {
	s.CallId = &v
	return s
}

type QueryAudioRecordFileUrlOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	AudioRecordFileUrl *string `type:"string"`

	AudioRecordLeftFileUrl *string `type:"string"`

	AudioRecordRightFileUrl *string `type:"string"`
}

// String returns the string representation
func (s QueryAudioRecordFileUrlOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s QueryAudioRecordFileUrlOutput) GoString() string {
	return s.String()
}

// SetAudioRecordFileUrl sets the AudioRecordFileUrl field's value.
func (s *QueryAudioRecordFileUrlOutput) SetAudioRecordFileUrl(v string) *QueryAudioRecordFileUrlOutput {
	s.AudioRecordFileUrl = &v
	return s
}

// SetAudioRecordLeftFileUrl sets the AudioRecordLeftFileUrl field's value.
func (s *QueryAudioRecordFileUrlOutput) SetAudioRecordLeftFileUrl(v string) *QueryAudioRecordFileUrlOutput {
	s.AudioRecordLeftFileUrl = &v
	return s
}

// SetAudioRecordRightFileUrl sets the AudioRecordRightFileUrl field's value.
func (s *QueryAudioRecordFileUrlOutput) SetAudioRecordRightFileUrl(v string) *QueryAudioRecordFileUrlOutput {
	s.AudioRecordRightFileUrl = &v
	return s
}
