// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vms

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opUploadQualificationFileV2Common = "UploadQualificationFileV2"

// UploadQualificationFileV2CommonRequest generates a "volcengine/request.Request" representing the
// client's request for the UploadQualificationFileV2Common operation. The "output" return
// value will be populated with the UploadQualificationFileV2Common request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UploadQualificationFileV2Common Request to send the API call to the service.
// the "output" return value is not valid until after UploadQualificationFileV2Common Send returns without error.
//
// See UploadQualificationFileV2Common for more information on using the UploadQualificationFileV2Common
// API call, and error handling.
//
//    // Example sending a request using the UploadQualificationFileV2CommonRequest method.
//    req, resp := client.UploadQualificationFileV2CommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VMS) UploadQualificationFileV2CommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opUploadQualificationFileV2Common,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UploadQualificationFileV2Common API operation for VMS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VMS's
// API operation UploadQualificationFileV2Common for usage and error information.
func (c *VMS) UploadQualificationFileV2Common(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.UploadQualificationFileV2CommonRequest(input)
	return out, req.Send()
}

// UploadQualificationFileV2CommonWithContext is the same as UploadQualificationFileV2Common with the addition of
// the ability to pass a context and additional request options.
//
// See UploadQualificationFileV2Common for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VMS) UploadQualificationFileV2CommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.UploadQualificationFileV2CommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opUploadQualificationFileV2 = "UploadQualificationFileV2"

// UploadQualificationFileV2Request generates a "volcengine/request.Request" representing the
// client's request for the UploadQualificationFileV2 operation. The "output" return
// value will be populated with the UploadQualificationFileV2Common request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UploadQualificationFileV2Common Request to send the API call to the service.
// the "output" return value is not valid until after UploadQualificationFileV2Common Send returns without error.
//
// See UploadQualificationFileV2 for more information on using the UploadQualificationFileV2
// API call, and error handling.
//
//    // Example sending a request using the UploadQualificationFileV2Request method.
//    req, resp := client.UploadQualificationFileV2Request(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VMS) UploadQualificationFileV2Request(input *UploadQualificationFileV2Input) (req *request.Request, output *UploadQualificationFileV2Output) {
	op := &request.Operation{
		Name:       opUploadQualificationFileV2,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UploadQualificationFileV2Input{}
	}

	output = &UploadQualificationFileV2Output{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UploadQualificationFileV2 API operation for VMS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VMS's
// API operation UploadQualificationFileV2 for usage and error information.
func (c *VMS) UploadQualificationFileV2(input *UploadQualificationFileV2Input) (*UploadQualificationFileV2Output, error) {
	req, out := c.UploadQualificationFileV2Request(input)
	return out, req.Send()
}

// UploadQualificationFileV2WithContext is the same as UploadQualificationFileV2 with the addition of
// the ability to pass a context and additional request options.
//
// See UploadQualificationFileV2 for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VMS) UploadQualificationFileV2WithContext(ctx volcengine.Context, input *UploadQualificationFileV2Input, opts ...request.Option) (*UploadQualificationFileV2Output, error) {
	req, out := c.UploadQualificationFileV2Request(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type UploadQualificationFileV2Input struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// FileBase64 is a required field
	FileBase64 *string `type:"string" json:",omitempty" required:"true"`

	// FileName is a required field
	FileName *string `type:"string" json:",omitempty" required:"true"`

	// FileType is a required field
	FileType *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s UploadQualificationFileV2Input) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UploadQualificationFileV2Input) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UploadQualificationFileV2Input) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "UploadQualificationFileV2Input"}
	if s.FileBase64 == nil {
		invalidParams.Add(request.NewErrParamRequired("FileBase64"))
	}
	if s.FileName == nil {
		invalidParams.Add(request.NewErrParamRequired("FileName"))
	}
	if s.FileType == nil {
		invalidParams.Add(request.NewErrParamRequired("FileType"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetFileBase64 sets the FileBase64 field's value.
func (s *UploadQualificationFileV2Input) SetFileBase64(v string) *UploadQualificationFileV2Input {
	s.FileBase64 = &v
	return s
}

// SetFileName sets the FileName field's value.
func (s *UploadQualificationFileV2Input) SetFileName(v string) *UploadQualificationFileV2Input {
	s.FileName = &v
	return s
}

// SetFileType sets the FileType field's value.
func (s *UploadQualificationFileV2Input) SetFileType(v string) *UploadQualificationFileV2Input {
	s.FileType = &v
	return s
}

type UploadQualificationFileV2Output struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	FileCode *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s UploadQualificationFileV2Output) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UploadQualificationFileV2Output) GoString() string {
	return s.String()
}

// SetFileCode sets the FileCode field's value.
func (s *UploadQualificationFileV2Output) SetFileCode(v string) *UploadQualificationFileV2Output {
	s.FileCode = &v
	return s
}
