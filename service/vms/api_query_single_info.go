// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vms

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opQuerySingleInfoCommon = "QuerySingleInfo"

// QuerySingleInfoCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the QuerySingleInfoCommon operation. The "output" return
// value will be populated with the QuerySingleInfoCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned QuerySingleInfoCommon Request to send the API call to the service.
// the "output" return value is not valid until after QuerySingleInfoCommon Send returns without error.
//
// See QuerySingleInfoCommon for more information on using the QuerySingleInfoCommon
// API call, and error handling.
//
//    // Example sending a request using the QuerySingleInfoCommonRequest method.
//    req, resp := client.QuerySingleInfoCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VMS) QuerySingleInfoCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opQuerySingleInfoCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// QuerySingleInfoCommon API operation for VMS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VMS's
// API operation QuerySingleInfoCommon for usage and error information.
func (c *VMS) QuerySingleInfoCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.QuerySingleInfoCommonRequest(input)
	return out, req.Send()
}

// QuerySingleInfoCommonWithContext is the same as QuerySingleInfoCommon with the addition of
// the ability to pass a context and additional request options.
//
// See QuerySingleInfoCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VMS) QuerySingleInfoCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.QuerySingleInfoCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opQuerySingleInfo = "QuerySingleInfo"

// QuerySingleInfoRequest generates a "volcengine/request.Request" representing the
// client's request for the QuerySingleInfo operation. The "output" return
// value will be populated with the QuerySingleInfoCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned QuerySingleInfoCommon Request to send the API call to the service.
// the "output" return value is not valid until after QuerySingleInfoCommon Send returns without error.
//
// See QuerySingleInfo for more information on using the QuerySingleInfo
// API call, and error handling.
//
//    // Example sending a request using the QuerySingleInfoRequest method.
//    req, resp := client.QuerySingleInfoRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VMS) QuerySingleInfoRequest(input *QuerySingleInfoInput) (req *request.Request, output *QuerySingleInfoOutput) {
	op := &request.Operation{
		Name:       opQuerySingleInfo,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &QuerySingleInfoInput{}
	}

	output = &QuerySingleInfoOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// QuerySingleInfo API operation for VMS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VMS's
// API operation QuerySingleInfo for usage and error information.
func (c *VMS) QuerySingleInfo(input *QuerySingleInfoInput) (*QuerySingleInfoOutput, error) {
	req, out := c.QuerySingleInfoRequest(input)
	return out, req.Send()
}

// QuerySingleInfoWithContext is the same as QuerySingleInfo with the addition of
// the ability to pass a context and additional request options.
//
// See QuerySingleInfo for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VMS) QuerySingleInfoWithContext(ctx volcengine.Context, input *QuerySingleInfoInput, opts ...request.Option) (*QuerySingleInfoOutput, error) {
	req, out := c.QuerySingleInfoRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type QuerySingleInfoInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// SingleOpenId is a required field
	SingleOpenId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s QuerySingleInfoInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s QuerySingleInfoInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *QuerySingleInfoInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "QuerySingleInfoInput"}
	if s.SingleOpenId == nil {
		invalidParams.Add(request.NewErrParamRequired("SingleOpenId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetSingleOpenId sets the SingleOpenId field's value.
func (s *QuerySingleInfoInput) SetSingleOpenId(v string) *QuerySingleInfoInput {
	s.SingleOpenId = &v
	return s
}

type QuerySingleInfoOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	CallUuid *string `type:"string" json:",omitempty"`

	CreateTime *string `type:"string" json:",omitempty"`

	Duration *int32 `type:"int32" json:",omitempty"`

	Ext *string `type:"string" json:",omitempty"`

	Phone *string `type:"string" json:",omitempty"`

	ReleaseTime *string `type:"string" json:",omitempty"`

	ResourceKey *string `type:"string" json:",omitempty"`

	SingleOpenId *string `type:"string" json:",omitempty"`

	State *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s QuerySingleInfoOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s QuerySingleInfoOutput) GoString() string {
	return s.String()
}

// SetCallUuid sets the CallUuid field's value.
func (s *QuerySingleInfoOutput) SetCallUuid(v string) *QuerySingleInfoOutput {
	s.CallUuid = &v
	return s
}

// SetCreateTime sets the CreateTime field's value.
func (s *QuerySingleInfoOutput) SetCreateTime(v string) *QuerySingleInfoOutput {
	s.CreateTime = &v
	return s
}

// SetDuration sets the Duration field's value.
func (s *QuerySingleInfoOutput) SetDuration(v int32) *QuerySingleInfoOutput {
	s.Duration = &v
	return s
}

// SetExt sets the Ext field's value.
func (s *QuerySingleInfoOutput) SetExt(v string) *QuerySingleInfoOutput {
	s.Ext = &v
	return s
}

// SetPhone sets the Phone field's value.
func (s *QuerySingleInfoOutput) SetPhone(v string) *QuerySingleInfoOutput {
	s.Phone = &v
	return s
}

// SetReleaseTime sets the ReleaseTime field's value.
func (s *QuerySingleInfoOutput) SetReleaseTime(v string) *QuerySingleInfoOutput {
	s.ReleaseTime = &v
	return s
}

// SetResourceKey sets the ResourceKey field's value.
func (s *QuerySingleInfoOutput) SetResourceKey(v string) *QuerySingleInfoOutput {
	s.ResourceKey = &v
	return s
}

// SetSingleOpenId sets the SingleOpenId field's value.
func (s *QuerySingleInfoOutput) SetSingleOpenId(v string) *QuerySingleInfoOutput {
	s.SingleOpenId = &v
	return s
}

// SetState sets the State field's value.
func (s *QuerySingleInfoOutput) SetState(v string) *QuerySingleInfoOutput {
	s.State = &v
	return s
}
