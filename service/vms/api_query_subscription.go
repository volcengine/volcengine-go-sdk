// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vms

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opQuerySubscriptionCommon = "QuerySubscription"

// QuerySubscriptionCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the QuerySubscriptionCommon operation. The "output" return
// value will be populated with the QuerySubscriptionCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned QuerySubscriptionCommon Request to send the API call to the service.
// the "output" return value is not valid until after QuerySubscriptionCommon Send returns without error.
//
// See QuerySubscriptionCommon for more information on using the QuerySubscriptionCommon
// API call, and error handling.
//
//    // Example sending a request using the QuerySubscriptionCommonRequest method.
//    req, resp := client.QuerySubscriptionCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VMS) QuerySubscriptionCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opQuerySubscriptionCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// QuerySubscriptionCommon API operation for VMS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VMS's
// API operation QuerySubscriptionCommon for usage and error information.
func (c *VMS) QuerySubscriptionCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.QuerySubscriptionCommonRequest(input)
	return out, req.Send()
}

// QuerySubscriptionCommonWithContext is the same as QuerySubscriptionCommon with the addition of
// the ability to pass a context and additional request options.
//
// See QuerySubscriptionCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VMS) QuerySubscriptionCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.QuerySubscriptionCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opQuerySubscription = "QuerySubscription"

// QuerySubscriptionRequest generates a "volcengine/request.Request" representing the
// client's request for the QuerySubscription operation. The "output" return
// value will be populated with the QuerySubscriptionCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned QuerySubscriptionCommon Request to send the API call to the service.
// the "output" return value is not valid until after QuerySubscriptionCommon Send returns without error.
//
// See QuerySubscription for more information on using the QuerySubscription
// API call, and error handling.
//
//    // Example sending a request using the QuerySubscriptionRequest method.
//    req, resp := client.QuerySubscriptionRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VMS) QuerySubscriptionRequest(input *QuerySubscriptionInput) (req *request.Request, output *QuerySubscriptionOutput) {
	op := &request.Operation{
		Name:       opQuerySubscription,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &QuerySubscriptionInput{}
	}

	output = &QuerySubscriptionOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// QuerySubscription API operation for VMS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VMS's
// API operation QuerySubscription for usage and error information.
func (c *VMS) QuerySubscription(input *QuerySubscriptionInput) (*QuerySubscriptionOutput, error) {
	req, out := c.QuerySubscriptionRequest(input)
	return out, req.Send()
}

// QuerySubscriptionWithContext is the same as QuerySubscription with the addition of
// the ability to pass a context and additional request options.
//
// See QuerySubscription for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VMS) QuerySubscriptionWithContext(ctx volcengine.Context, input *QuerySubscriptionInput, opts ...request.Option) (*QuerySubscriptionOutput, error) {
	req, out := c.QuerySubscriptionRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type QuerySubscriptionInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// NumberPoolNo is a required field
	NumberPoolNo *string `type:"string" json:",omitempty" required:"true"`

	// SubId is a required field
	SubId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s QuerySubscriptionInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s QuerySubscriptionInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *QuerySubscriptionInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "QuerySubscriptionInput"}
	if s.NumberPoolNo == nil {
		invalidParams.Add(request.NewErrParamRequired("NumberPoolNo"))
	}
	if s.SubId == nil {
		invalidParams.Add(request.NewErrParamRequired("SubId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetNumberPoolNo sets the NumberPoolNo field's value.
func (s *QuerySubscriptionInput) SetNumberPoolNo(v string) *QuerySubscriptionInput {
	s.NumberPoolNo = &v
	return s
}

// SetSubId sets the SubId field's value.
func (s *QuerySubscriptionInput) SetSubId(v string) *QuerySubscriptionInput {
	s.SubId = &v
	return s
}

type QuerySubscriptionOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	CallDisplayType *int32 `type:"int32" json:",omitempty"`

	CallDisplayTypeName *string `type:"string" json:",omitempty"`

	EnableTime *int64 `type:"int64" json:",omitempty"`

	ExpireTime *int64 `type:"int64" json:",omitempty"`

	OutId *string `type:"string" json:",omitempty"`

	PhoneNoA *string `type:"string" json:",omitempty"`

	PhoneNoB *string `type:"string" json:",omitempty"`

	PhoneNoE *string `type:"string" json:",omitempty"`

	PhoneNoX *string `type:"string" json:",omitempty"`

	PhoneNoY *string `type:"string" json:",omitempty"`

	RecordFlag *int32 `type:"int32" json:",omitempty"`

	Status *int32 `type:"int32" json:",omitempty"`

	SubId *string `type:"string" json:",omitempty"`

	UserData *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s QuerySubscriptionOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s QuerySubscriptionOutput) GoString() string {
	return s.String()
}

// SetCallDisplayType sets the CallDisplayType field's value.
func (s *QuerySubscriptionOutput) SetCallDisplayType(v int32) *QuerySubscriptionOutput {
	s.CallDisplayType = &v
	return s
}

// SetCallDisplayTypeName sets the CallDisplayTypeName field's value.
func (s *QuerySubscriptionOutput) SetCallDisplayTypeName(v string) *QuerySubscriptionOutput {
	s.CallDisplayTypeName = &v
	return s
}

// SetEnableTime sets the EnableTime field's value.
func (s *QuerySubscriptionOutput) SetEnableTime(v int64) *QuerySubscriptionOutput {
	s.EnableTime = &v
	return s
}

// SetExpireTime sets the ExpireTime field's value.
func (s *QuerySubscriptionOutput) SetExpireTime(v int64) *QuerySubscriptionOutput {
	s.ExpireTime = &v
	return s
}

// SetOutId sets the OutId field's value.
func (s *QuerySubscriptionOutput) SetOutId(v string) *QuerySubscriptionOutput {
	s.OutId = &v
	return s
}

// SetPhoneNoA sets the PhoneNoA field's value.
func (s *QuerySubscriptionOutput) SetPhoneNoA(v string) *QuerySubscriptionOutput {
	s.PhoneNoA = &v
	return s
}

// SetPhoneNoB sets the PhoneNoB field's value.
func (s *QuerySubscriptionOutput) SetPhoneNoB(v string) *QuerySubscriptionOutput {
	s.PhoneNoB = &v
	return s
}

// SetPhoneNoE sets the PhoneNoE field's value.
func (s *QuerySubscriptionOutput) SetPhoneNoE(v string) *QuerySubscriptionOutput {
	s.PhoneNoE = &v
	return s
}

// SetPhoneNoX sets the PhoneNoX field's value.
func (s *QuerySubscriptionOutput) SetPhoneNoX(v string) *QuerySubscriptionOutput {
	s.PhoneNoX = &v
	return s
}

// SetPhoneNoY sets the PhoneNoY field's value.
func (s *QuerySubscriptionOutput) SetPhoneNoY(v string) *QuerySubscriptionOutput {
	s.PhoneNoY = &v
	return s
}

// SetRecordFlag sets the RecordFlag field's value.
func (s *QuerySubscriptionOutput) SetRecordFlag(v int32) *QuerySubscriptionOutput {
	s.RecordFlag = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *QuerySubscriptionOutput) SetStatus(v int32) *QuerySubscriptionOutput {
	s.Status = &v
	return s
}

// SetSubId sets the SubId field's value.
func (s *QuerySubscriptionOutput) SetSubId(v string) *QuerySubscriptionOutput {
	s.SubId = &v
	return s
}

// SetUserData sets the UserData field's value.
func (s *QuerySubscriptionOutput) SetUserData(v string) *QuerySubscriptionOutput {
	s.UserData = &v
	return s
}
