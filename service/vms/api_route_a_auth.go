// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vms

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opRouteAAuthCommon = "RouteAAuth"

// RouteAAuthCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the RouteAAuthCommon operation. The "output" return
// value will be populated with the RouteAAuthCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned RouteAAuthCommon Request to send the API call to the service.
// the "output" return value is not valid until after RouteAAuthCommon Send returns without error.
//
// See RouteAAuthCommon for more information on using the RouteAAuthCommon
// API call, and error handling.
//
//    // Example sending a request using the RouteAAuthCommonRequest method.
//    req, resp := client.RouteAAuthCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VMS) RouteAAuthCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opRouteAAuthCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// RouteAAuthCommon API operation for VMS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VMS's
// API operation RouteAAuthCommon for usage and error information.
func (c *VMS) RouteAAuthCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.RouteAAuthCommonRequest(input)
	return out, req.Send()
}

// RouteAAuthCommonWithContext is the same as RouteAAuthCommon with the addition of
// the ability to pass a context and additional request options.
//
// See RouteAAuthCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VMS) RouteAAuthCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.RouteAAuthCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opRouteAAuth = "RouteAAuth"

// RouteAAuthRequest generates a "volcengine/request.Request" representing the
// client's request for the RouteAAuth operation. The "output" return
// value will be populated with the RouteAAuthCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned RouteAAuthCommon Request to send the API call to the service.
// the "output" return value is not valid until after RouteAAuthCommon Send returns without error.
//
// See RouteAAuth for more information on using the RouteAAuth
// API call, and error handling.
//
//    // Example sending a request using the RouteAAuthRequest method.
//    req, resp := client.RouteAAuthRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VMS) RouteAAuthRequest(input *RouteAAuthInput) (req *request.Request, output *RouteAAuthOutput) {
	op := &request.Operation{
		Name:       opRouteAAuth,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &RouteAAuthInput{}
	}

	output = &RouteAAuthOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// RouteAAuth API operation for VMS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VMS's
// API operation RouteAAuth for usage and error information.
func (c *VMS) RouteAAuth(input *RouteAAuthInput) (*RouteAAuthOutput, error) {
	req, out := c.RouteAAuthRequest(input)
	return out, req.Send()
}

// RouteAAuthWithContext is the same as RouteAAuth with the addition of
// the ability to pass a context and additional request options.
//
// See RouteAAuth for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VMS) RouteAAuthWithContext(ctx volcengine.Context, input *RouteAAuthInput, opts ...request.Option) (*RouteAAuthOutput, error) {
	req, out := c.RouteAAuthRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type RouteAAuthInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// IdNumber is a required field
	IdNumber *string `type:"string" json:",omitempty" required:"true"`

	// IdType is a required field
	IdType *int32 `type:"int32" json:",omitempty" required:"true"`

	// Name is a required field
	Name *string `type:"string" json:",omitempty" required:"true"`

	// PhoneNumber is a required field
	PhoneNumber *string `type:"string" json:",omitempty" required:"true"`

	// Photo is a required field
	Photo *string `type:"string" json:",omitempty" required:"true"`

	// RequestId is a required field
	RequestId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s RouteAAuthInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s RouteAAuthInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *RouteAAuthInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "RouteAAuthInput"}
	if s.IdNumber == nil {
		invalidParams.Add(request.NewErrParamRequired("IdNumber"))
	}
	if s.IdType == nil {
		invalidParams.Add(request.NewErrParamRequired("IdType"))
	}
	if s.Name == nil {
		invalidParams.Add(request.NewErrParamRequired("Name"))
	}
	if s.PhoneNumber == nil {
		invalidParams.Add(request.NewErrParamRequired("PhoneNumber"))
	}
	if s.Photo == nil {
		invalidParams.Add(request.NewErrParamRequired("Photo"))
	}
	if s.RequestId == nil {
		invalidParams.Add(request.NewErrParamRequired("RequestId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetIdNumber sets the IdNumber field's value.
func (s *RouteAAuthInput) SetIdNumber(v string) *RouteAAuthInput {
	s.IdNumber = &v
	return s
}

// SetIdType sets the IdType field's value.
func (s *RouteAAuthInput) SetIdType(v int32) *RouteAAuthInput {
	s.IdType = &v
	return s
}

// SetName sets the Name field's value.
func (s *RouteAAuthInput) SetName(v string) *RouteAAuthInput {
	s.Name = &v
	return s
}

// SetPhoneNumber sets the PhoneNumber field's value.
func (s *RouteAAuthInput) SetPhoneNumber(v string) *RouteAAuthInput {
	s.PhoneNumber = &v
	return s
}

// SetPhoto sets the Photo field's value.
func (s *RouteAAuthInput) SetPhoto(v string) *RouteAAuthInput {
	s.Photo = &v
	return s
}

// SetRequestId sets the RequestId field's value.
func (s *RouteAAuthInput) SetRequestId(v string) *RouteAAuthInput {
	s.RequestId = &v
	return s
}

type RouteAAuthOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Code *string `type:"string" json:",omitempty"`

	Message *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s RouteAAuthOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s RouteAAuthOutput) GoString() string {
	return s.String()
}

// SetCode sets the Code field's value.
func (s *RouteAAuthOutput) SetCode(v string) *RouteAAuthOutput {
	s.Code = &v
	return s
}

// SetMessage sets the Message field's value.
func (s *RouteAAuthOutput) SetMessage(v string) *RouteAAuthOutput {
	s.Message = &v
	return s
}
