// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vms

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opEnableOrDisableNumberCommon = "EnableOrDisableNumber"

// EnableOrDisableNumberCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the EnableOrDisableNumberCommon operation. The "output" return
// value will be populated with the EnableOrDisableNumberCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned EnableOrDisableNumberCommon Request to send the API call to the service.
// the "output" return value is not valid until after EnableOrDisableNumberCommon Send returns without error.
//
// See EnableOrDisableNumberCommon for more information on using the EnableOrDisableNumberCommon
// API call, and error handling.
//
//    // Example sending a request using the EnableOrDisableNumberCommonRequest method.
//    req, resp := client.EnableOrDisableNumberCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VMS) EnableOrDisableNumberCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opEnableOrDisableNumberCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// EnableOrDisableNumberCommon API operation for VMS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VMS's
// API operation EnableOrDisableNumberCommon for usage and error information.
func (c *VMS) EnableOrDisableNumberCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.EnableOrDisableNumberCommonRequest(input)
	return out, req.Send()
}

// EnableOrDisableNumberCommonWithContext is the same as EnableOrDisableNumberCommon with the addition of
// the ability to pass a context and additional request options.
//
// See EnableOrDisableNumberCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VMS) EnableOrDisableNumberCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.EnableOrDisableNumberCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opEnableOrDisableNumber = "EnableOrDisableNumber"

// EnableOrDisableNumberRequest generates a "volcengine/request.Request" representing the
// client's request for the EnableOrDisableNumber operation. The "output" return
// value will be populated with the EnableOrDisableNumberCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned EnableOrDisableNumberCommon Request to send the API call to the service.
// the "output" return value is not valid until after EnableOrDisableNumberCommon Send returns without error.
//
// See EnableOrDisableNumber for more information on using the EnableOrDisableNumber
// API call, and error handling.
//
//    // Example sending a request using the EnableOrDisableNumberRequest method.
//    req, resp := client.EnableOrDisableNumberRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VMS) EnableOrDisableNumberRequest(input *EnableOrDisableNumberInput) (req *request.Request, output *EnableOrDisableNumberOutput) {
	op := &request.Operation{
		Name:       opEnableOrDisableNumber,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &EnableOrDisableNumberInput{}
	}

	output = &EnableOrDisableNumberOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// EnableOrDisableNumber API operation for VMS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VMS's
// API operation EnableOrDisableNumber for usage and error information.
func (c *VMS) EnableOrDisableNumber(input *EnableOrDisableNumberInput) (*EnableOrDisableNumberOutput, error) {
	req, out := c.EnableOrDisableNumberRequest(input)
	return out, req.Send()
}

// EnableOrDisableNumberWithContext is the same as EnableOrDisableNumber with the addition of
// the ability to pass a context and additional request options.
//
// See EnableOrDisableNumber for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VMS) EnableOrDisableNumberWithContext(ctx volcengine.Context, input *EnableOrDisableNumberInput, opts ...request.Option) (*EnableOrDisableNumberOutput, error) {
	req, out := c.EnableOrDisableNumberRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type EnableOrDisableNumberInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// EnableCode is a required field
	EnableCode *int32 `type:"int32" json:",omitempty" required:"true"`

	NumberList []*string `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s EnableOrDisableNumberInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s EnableOrDisableNumberInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *EnableOrDisableNumberInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "EnableOrDisableNumberInput"}
	if s.EnableCode == nil {
		invalidParams.Add(request.NewErrParamRequired("EnableCode"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetEnableCode sets the EnableCode field's value.
func (s *EnableOrDisableNumberInput) SetEnableCode(v int32) *EnableOrDisableNumberInput {
	s.EnableCode = &v
	return s
}

// SetNumberList sets the NumberList field's value.
func (s *EnableOrDisableNumberInput) SetNumberList(v []*string) *EnableOrDisableNumberInput {
	s.NumberList = v
	return s
}

type EnableOrDisableNumberOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s EnableOrDisableNumberOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s EnableOrDisableNumberOutput) GoString() string {
	return s.String()
}
