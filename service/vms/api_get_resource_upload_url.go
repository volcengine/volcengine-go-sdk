// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vms

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opGetResourceUploadUrlCommon = "GetResourceUploadUrl"

// GetResourceUploadUrlCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the GetResourceUploadUrlCommon operation. The "output" return
// value will be populated with the GetResourceUploadUrlCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetResourceUploadUrlCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetResourceUploadUrlCommon Send returns without error.
//
// See GetResourceUploadUrlCommon for more information on using the GetResourceUploadUrlCommon
// API call, and error handling.
//
//    // Example sending a request using the GetResourceUploadUrlCommonRequest method.
//    req, resp := client.GetResourceUploadUrlCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VMS) GetResourceUploadUrlCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opGetResourceUploadUrlCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetResourceUploadUrlCommon API operation for VMS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VMS's
// API operation GetResourceUploadUrlCommon for usage and error information.
func (c *VMS) GetResourceUploadUrlCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.GetResourceUploadUrlCommonRequest(input)
	return out, req.Send()
}

// GetResourceUploadUrlCommonWithContext is the same as GetResourceUploadUrlCommon with the addition of
// the ability to pass a context and additional request options.
//
// See GetResourceUploadUrlCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VMS) GetResourceUploadUrlCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.GetResourceUploadUrlCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opGetResourceUploadUrl = "GetResourceUploadUrl"

// GetResourceUploadUrlRequest generates a "volcengine/request.Request" representing the
// client's request for the GetResourceUploadUrl operation. The "output" return
// value will be populated with the GetResourceUploadUrlCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetResourceUploadUrlCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetResourceUploadUrlCommon Send returns without error.
//
// See GetResourceUploadUrl for more information on using the GetResourceUploadUrl
// API call, and error handling.
//
//    // Example sending a request using the GetResourceUploadUrlRequest method.
//    req, resp := client.GetResourceUploadUrlRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VMS) GetResourceUploadUrlRequest(input *GetResourceUploadUrlInput) (req *request.Request, output *GetResourceUploadUrlOutput) {
	op := &request.Operation{
		Name:       opGetResourceUploadUrl,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &GetResourceUploadUrlInput{}
	}

	output = &GetResourceUploadUrlOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetResourceUploadUrl API operation for VMS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VMS's
// API operation GetResourceUploadUrl for usage and error information.
func (c *VMS) GetResourceUploadUrl(input *GetResourceUploadUrlInput) (*GetResourceUploadUrlOutput, error) {
	req, out := c.GetResourceUploadUrlRequest(input)
	return out, req.Send()
}

// GetResourceUploadUrlWithContext is the same as GetResourceUploadUrl with the addition of
// the ability to pass a context and additional request options.
//
// See GetResourceUploadUrl for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VMS) GetResourceUploadUrlWithContext(ctx volcengine.Context, input *GetResourceUploadUrlInput, opts ...request.Option) (*GetResourceUploadUrlOutput, error) {
	req, out := c.GetResourceUploadUrlRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type GetResourceUploadUrlInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// FileName is a required field
	FileName *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s GetResourceUploadUrlInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetResourceUploadUrlInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *GetResourceUploadUrlInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "GetResourceUploadUrlInput"}
	if s.FileName == nil {
		invalidParams.Add(request.NewErrParamRequired("FileName"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetFileName sets the FileName field's value.
func (s *GetResourceUploadUrlInput) SetFileName(v string) *GetResourceUploadUrlInput {
	s.FileName = &v
	return s
}

type GetResourceUploadUrlOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	UploadUrl *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s GetResourceUploadUrlOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetResourceUploadUrlOutput) GoString() string {
	return s.String()
}

// SetUploadUrl sets the UploadUrl field's value.
func (s *GetResourceUploadUrlOutput) SetUploadUrl(v string) *GetResourceUploadUrlOutput {
	s.UploadUrl = &v
	return s
}
