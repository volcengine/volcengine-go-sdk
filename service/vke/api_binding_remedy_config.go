// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vke

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opBindingRemedyConfigCommon = "BindingRemedyConfig"

// BindingRemedyConfigCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the BindingRemedyConfigCommon operation. The "output" return
// value will be populated with the BindingRemedyConfigCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned BindingRemedyConfigCommon Request to send the API call to the service.
// the "output" return value is not valid until after BindingRemedyConfigCommon Send returns without error.
//
// See BindingRemedyConfigCommon for more information on using the BindingRemedyConfigCommon
// API call, and error handling.
//
//    // Example sending a request using the BindingRemedyConfigCommonRequest method.
//    req, resp := client.BindingRemedyConfigCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VKE) BindingRemedyConfigCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opBindingRemedyConfigCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// BindingRemedyConfigCommon API operation for VKE.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VKE's
// API operation BindingRemedyConfigCommon for usage and error information.
func (c *VKE) BindingRemedyConfigCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.BindingRemedyConfigCommonRequest(input)
	return out, req.Send()
}

// BindingRemedyConfigCommonWithContext is the same as BindingRemedyConfigCommon with the addition of
// the ability to pass a context and additional request options.
//
// See BindingRemedyConfigCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VKE) BindingRemedyConfigCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.BindingRemedyConfigCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opBindingRemedyConfig = "BindingRemedyConfig"

// BindingRemedyConfigRequest generates a "volcengine/request.Request" representing the
// client's request for the BindingRemedyConfig operation. The "output" return
// value will be populated with the BindingRemedyConfigCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned BindingRemedyConfigCommon Request to send the API call to the service.
// the "output" return value is not valid until after BindingRemedyConfigCommon Send returns without error.
//
// See BindingRemedyConfig for more information on using the BindingRemedyConfig
// API call, and error handling.
//
//    // Example sending a request using the BindingRemedyConfigRequest method.
//    req, resp := client.BindingRemedyConfigRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VKE) BindingRemedyConfigRequest(input *BindingRemedyConfigInput) (req *request.Request, output *BindingRemedyConfigOutput) {
	op := &request.Operation{
		Name:       opBindingRemedyConfig,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &BindingRemedyConfigInput{}
	}

	output = &BindingRemedyConfigOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// BindingRemedyConfig API operation for VKE.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VKE's
// API operation BindingRemedyConfig for usage and error information.
func (c *VKE) BindingRemedyConfig(input *BindingRemedyConfigInput) (*BindingRemedyConfigOutput, error) {
	req, out := c.BindingRemedyConfigRequest(input)
	return out, req.Send()
}

// BindingRemedyConfigWithContext is the same as BindingRemedyConfig with the addition of
// the ability to pass a context and additional request options.
//
// See BindingRemedyConfig for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VKE) BindingRemedyConfigWithContext(ctx volcengine.Context, input *BindingRemedyConfigInput, opts ...request.Option) (*BindingRemedyConfigOutput, error) {
	req, out := c.BindingRemedyConfigRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type BindingRemedyConfigInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// ClusterId is a required field
	ClusterId *string `type:"string" json:",omitempty" required:"true"`

	Id *string `type:"string" json:",omitempty"`

	ResourceIds []*string `type:"list" json:",omitempty"`

	// ResourceType is a required field
	ResourceType *string `type:"string" json:",omitempty" required:"true" enum:"EnumOfResourceTypeForBindingRemedyConfigInput"`

	UseRecommendedRemedyConfigs *bool `type:"boolean" json:",omitempty"`
}

// String returns the string representation
func (s BindingRemedyConfigInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s BindingRemedyConfigInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *BindingRemedyConfigInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "BindingRemedyConfigInput"}
	if s.ClusterId == nil {
		invalidParams.Add(request.NewErrParamRequired("ClusterId"))
	}
	if s.ResourceType == nil {
		invalidParams.Add(request.NewErrParamRequired("ResourceType"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetClusterId sets the ClusterId field's value.
func (s *BindingRemedyConfigInput) SetClusterId(v string) *BindingRemedyConfigInput {
	s.ClusterId = &v
	return s
}

// SetId sets the Id field's value.
func (s *BindingRemedyConfigInput) SetId(v string) *BindingRemedyConfigInput {
	s.Id = &v
	return s
}

// SetResourceIds sets the ResourceIds field's value.
func (s *BindingRemedyConfigInput) SetResourceIds(v []*string) *BindingRemedyConfigInput {
	s.ResourceIds = v
	return s
}

// SetResourceType sets the ResourceType field's value.
func (s *BindingRemedyConfigInput) SetResourceType(v string) *BindingRemedyConfigInput {
	s.ResourceType = &v
	return s
}

// SetUseRecommendedRemedyConfigs sets the UseRecommendedRemedyConfigs field's value.
func (s *BindingRemedyConfigInput) SetUseRecommendedRemedyConfigs(v bool) *BindingRemedyConfigInput {
	s.UseRecommendedRemedyConfigs = &v
	return s
}

type BindingRemedyConfigOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Id *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s BindingRemedyConfigOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s BindingRemedyConfigOutput) GoString() string {
	return s.String()
}

// SetId sets the Id field's value.
func (s *BindingRemedyConfigOutput) SetId(v string) *BindingRemedyConfigOutput {
	s.Id = &v
	return s
}

const (
	// EnumOfResourceTypeForBindingRemedyConfigInputVkeNodePool is a EnumOfResourceTypeForBindingRemedyConfigInput enum value
	EnumOfResourceTypeForBindingRemedyConfigInputVkeNodePool = "VkeNodePool"
)
