// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vke

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opUnbindingRemedyConfigCommon = "UnbindingRemedyConfig"

// UnbindingRemedyConfigCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the UnbindingRemedyConfigCommon operation. The "output" return
// value will be populated with the UnbindingRemedyConfigCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UnbindingRemedyConfigCommon Request to send the API call to the service.
// the "output" return value is not valid until after UnbindingRemedyConfigCommon Send returns without error.
//
// See UnbindingRemedyConfigCommon for more information on using the UnbindingRemedyConfigCommon
// API call, and error handling.
//
//    // Example sending a request using the UnbindingRemedyConfigCommonRequest method.
//    req, resp := client.UnbindingRemedyConfigCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VKE) UnbindingRemedyConfigCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opUnbindingRemedyConfigCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UnbindingRemedyConfigCommon API operation for VKE.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VKE's
// API operation UnbindingRemedyConfigCommon for usage and error information.
func (c *VKE) UnbindingRemedyConfigCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.UnbindingRemedyConfigCommonRequest(input)
	return out, req.Send()
}

// UnbindingRemedyConfigCommonWithContext is the same as UnbindingRemedyConfigCommon with the addition of
// the ability to pass a context and additional request options.
//
// See UnbindingRemedyConfigCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VKE) UnbindingRemedyConfigCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.UnbindingRemedyConfigCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opUnbindingRemedyConfig = "UnbindingRemedyConfig"

// UnbindingRemedyConfigRequest generates a "volcengine/request.Request" representing the
// client's request for the UnbindingRemedyConfig operation. The "output" return
// value will be populated with the UnbindingRemedyConfigCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UnbindingRemedyConfigCommon Request to send the API call to the service.
// the "output" return value is not valid until after UnbindingRemedyConfigCommon Send returns without error.
//
// See UnbindingRemedyConfig for more information on using the UnbindingRemedyConfig
// API call, and error handling.
//
//    // Example sending a request using the UnbindingRemedyConfigRequest method.
//    req, resp := client.UnbindingRemedyConfigRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VKE) UnbindingRemedyConfigRequest(input *UnbindingRemedyConfigInput) (req *request.Request, output *UnbindingRemedyConfigOutput) {
	op := &request.Operation{
		Name:       opUnbindingRemedyConfig,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UnbindingRemedyConfigInput{}
	}

	output = &UnbindingRemedyConfigOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UnbindingRemedyConfig API operation for VKE.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VKE's
// API operation UnbindingRemedyConfig for usage and error information.
func (c *VKE) UnbindingRemedyConfig(input *UnbindingRemedyConfigInput) (*UnbindingRemedyConfigOutput, error) {
	req, out := c.UnbindingRemedyConfigRequest(input)
	return out, req.Send()
}

// UnbindingRemedyConfigWithContext is the same as UnbindingRemedyConfig with the addition of
// the ability to pass a context and additional request options.
//
// See UnbindingRemedyConfig for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VKE) UnbindingRemedyConfigWithContext(ctx volcengine.Context, input *UnbindingRemedyConfigInput, opts ...request.Option) (*UnbindingRemedyConfigOutput, error) {
	req, out := c.UnbindingRemedyConfigRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type UnbindingRemedyConfigInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// ClusterId is a required field
	ClusterId *string `type:"string" json:",omitempty" required:"true"`

	// Id is a required field
	Id *string `type:"string" json:",omitempty" required:"true"`

	ResourceIds []*string `type:"list" json:",omitempty"`

	// ResourceType is a required field
	ResourceType *string `type:"string" json:",omitempty" required:"true" enum:"EnumOfResourceTypeForUnbindingRemedyConfigInput"`
}

// String returns the string representation
func (s UnbindingRemedyConfigInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UnbindingRemedyConfigInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UnbindingRemedyConfigInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "UnbindingRemedyConfigInput"}
	if s.ClusterId == nil {
		invalidParams.Add(request.NewErrParamRequired("ClusterId"))
	}
	if s.Id == nil {
		invalidParams.Add(request.NewErrParamRequired("Id"))
	}
	if s.ResourceType == nil {
		invalidParams.Add(request.NewErrParamRequired("ResourceType"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetClusterId sets the ClusterId field's value.
func (s *UnbindingRemedyConfigInput) SetClusterId(v string) *UnbindingRemedyConfigInput {
	s.ClusterId = &v
	return s
}

// SetId sets the Id field's value.
func (s *UnbindingRemedyConfigInput) SetId(v string) *UnbindingRemedyConfigInput {
	s.Id = &v
	return s
}

// SetResourceIds sets the ResourceIds field's value.
func (s *UnbindingRemedyConfigInput) SetResourceIds(v []*string) *UnbindingRemedyConfigInput {
	s.ResourceIds = v
	return s
}

// SetResourceType sets the ResourceType field's value.
func (s *UnbindingRemedyConfigInput) SetResourceType(v string) *UnbindingRemedyConfigInput {
	s.ResourceType = &v
	return s
}

type UnbindingRemedyConfigOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s UnbindingRemedyConfigOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UnbindingRemedyConfigOutput) GoString() string {
	return s.String()
}

const (
	// EnumOfResourceTypeForUnbindingRemedyConfigInputVkeNodePool is a EnumOfResourceTypeForUnbindingRemedyConfigInput enum value
	EnumOfResourceTypeForUnbindingRemedyConfigInputVkeNodePool = "VkeNodePool"
)
