// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vke

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opListSupportedAddInstanceTypesCommon = "ListSupportedAddInstanceTypes"

// ListSupportedAddInstanceTypesCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ListSupportedAddInstanceTypesCommon operation. The "output" return
// value will be populated with the ListSupportedAddInstanceTypesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListSupportedAddInstanceTypesCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListSupportedAddInstanceTypesCommon Send returns without error.
//
// See ListSupportedAddInstanceTypesCommon for more information on using the ListSupportedAddInstanceTypesCommon
// API call, and error handling.
//
//    // Example sending a request using the ListSupportedAddInstanceTypesCommonRequest method.
//    req, resp := client.ListSupportedAddInstanceTypesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VKE) ListSupportedAddInstanceTypesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opListSupportedAddInstanceTypesCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListSupportedAddInstanceTypesCommon API operation for VKE.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VKE's
// API operation ListSupportedAddInstanceTypesCommon for usage and error information.
func (c *VKE) ListSupportedAddInstanceTypesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ListSupportedAddInstanceTypesCommonRequest(input)
	return out, req.Send()
}

// ListSupportedAddInstanceTypesCommonWithContext is the same as ListSupportedAddInstanceTypesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ListSupportedAddInstanceTypesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VKE) ListSupportedAddInstanceTypesCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ListSupportedAddInstanceTypesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListSupportedAddInstanceTypes = "ListSupportedAddInstanceTypes"

// ListSupportedAddInstanceTypesRequest generates a "volcengine/request.Request" representing the
// client's request for the ListSupportedAddInstanceTypes operation. The "output" return
// value will be populated with the ListSupportedAddInstanceTypesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListSupportedAddInstanceTypesCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListSupportedAddInstanceTypesCommon Send returns without error.
//
// See ListSupportedAddInstanceTypes for more information on using the ListSupportedAddInstanceTypes
// API call, and error handling.
//
//    // Example sending a request using the ListSupportedAddInstanceTypesRequest method.
//    req, resp := client.ListSupportedAddInstanceTypesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VKE) ListSupportedAddInstanceTypesRequest(input *ListSupportedAddInstanceTypesInput) (req *request.Request, output *ListSupportedAddInstanceTypesOutput) {
	op := &request.Operation{
		Name:       opListSupportedAddInstanceTypes,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListSupportedAddInstanceTypesInput{}
	}

	output = &ListSupportedAddInstanceTypesOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListSupportedAddInstanceTypes API operation for VKE.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VKE's
// API operation ListSupportedAddInstanceTypes for usage and error information.
func (c *VKE) ListSupportedAddInstanceTypes(input *ListSupportedAddInstanceTypesInput) (*ListSupportedAddInstanceTypesOutput, error) {
	req, out := c.ListSupportedAddInstanceTypesRequest(input)
	return out, req.Send()
}

// ListSupportedAddInstanceTypesWithContext is the same as ListSupportedAddInstanceTypes with the addition of
// the ability to pass a context and additional request options.
//
// See ListSupportedAddInstanceTypes for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VKE) ListSupportedAddInstanceTypesWithContext(ctx volcengine.Context, input *ListSupportedAddInstanceTypesInput, opts ...request.Option) (*ListSupportedAddInstanceTypesOutput, error) {
	req, out := c.ListSupportedAddInstanceTypesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ListSupportedAddInstanceTypesInput struct {
	_ struct{} `type:"structure" json:",omitempty"`
}

// String returns the string representation
func (s ListSupportedAddInstanceTypesInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListSupportedAddInstanceTypesInput) GoString() string {
	return s.String()
}

type ListSupportedAddInstanceTypesOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	InstanceTypeIds []*string `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s ListSupportedAddInstanceTypesOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListSupportedAddInstanceTypesOutput) GoString() string {
	return s.String()
}

// SetInstanceTypeIds sets the InstanceTypeIds field's value.
func (s *ListSupportedAddInstanceTypesOutput) SetInstanceTypeIds(v []*string) *ListSupportedAddInstanceTypesOutput {
	s.InstanceTypeIds = v
	return s
}
