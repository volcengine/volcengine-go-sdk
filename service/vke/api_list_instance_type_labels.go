// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vke

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opListInstanceTypeLabelsCommon = "ListInstanceTypeLabels"

// ListInstanceTypeLabelsCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ListInstanceTypeLabelsCommon operation. The "output" return
// value will be populated with the ListInstanceTypeLabelsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListInstanceTypeLabelsCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListInstanceTypeLabelsCommon Send returns without error.
//
// See ListInstanceTypeLabelsCommon for more information on using the ListInstanceTypeLabelsCommon
// API call, and error handling.
//
//    // Example sending a request using the ListInstanceTypeLabelsCommonRequest method.
//    req, resp := client.ListInstanceTypeLabelsCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VKE) ListInstanceTypeLabelsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opListInstanceTypeLabelsCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListInstanceTypeLabelsCommon API operation for VKE.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VKE's
// API operation ListInstanceTypeLabelsCommon for usage and error information.
func (c *VKE) ListInstanceTypeLabelsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ListInstanceTypeLabelsCommonRequest(input)
	return out, req.Send()
}

// ListInstanceTypeLabelsCommonWithContext is the same as ListInstanceTypeLabelsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ListInstanceTypeLabelsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VKE) ListInstanceTypeLabelsCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ListInstanceTypeLabelsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListInstanceTypeLabels = "ListInstanceTypeLabels"

// ListInstanceTypeLabelsRequest generates a "volcengine/request.Request" representing the
// client's request for the ListInstanceTypeLabels operation. The "output" return
// value will be populated with the ListInstanceTypeLabelsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListInstanceTypeLabelsCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListInstanceTypeLabelsCommon Send returns without error.
//
// See ListInstanceTypeLabels for more information on using the ListInstanceTypeLabels
// API call, and error handling.
//
//    // Example sending a request using the ListInstanceTypeLabelsRequest method.
//    req, resp := client.ListInstanceTypeLabelsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VKE) ListInstanceTypeLabelsRequest(input *ListInstanceTypeLabelsInput) (req *request.Request, output *ListInstanceTypeLabelsOutput) {
	op := &request.Operation{
		Name:       opListInstanceTypeLabels,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListInstanceTypeLabelsInput{}
	}

	output = &ListInstanceTypeLabelsOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListInstanceTypeLabels API operation for VKE.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VKE's
// API operation ListInstanceTypeLabels for usage and error information.
func (c *VKE) ListInstanceTypeLabels(input *ListInstanceTypeLabelsInput) (*ListInstanceTypeLabelsOutput, error) {
	req, out := c.ListInstanceTypeLabelsRequest(input)
	return out, req.Send()
}

// ListInstanceTypeLabelsWithContext is the same as ListInstanceTypeLabels with the addition of
// the ability to pass a context and additional request options.
//
// See ListInstanceTypeLabels for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VKE) ListInstanceTypeLabelsWithContext(ctx volcengine.Context, input *ListInstanceTypeLabelsInput, opts ...request.Option) (*ListInstanceTypeLabelsOutput, error) {
	req, out := c.ListInstanceTypeLabelsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ItemForListInstanceTypeLabelsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	InstanceType *string `type:"string" json:",omitempty"`

	InstanceTypeId *string `type:"string" json:",omitempty"`

	Labels []*LabelForListInstanceTypeLabelsOutput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s ItemForListInstanceTypeLabelsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ItemForListInstanceTypeLabelsOutput) GoString() string {
	return s.String()
}

// SetInstanceType sets the InstanceType field's value.
func (s *ItemForListInstanceTypeLabelsOutput) SetInstanceType(v string) *ItemForListInstanceTypeLabelsOutput {
	s.InstanceType = &v
	return s
}

// SetInstanceTypeId sets the InstanceTypeId field's value.
func (s *ItemForListInstanceTypeLabelsOutput) SetInstanceTypeId(v string) *ItemForListInstanceTypeLabelsOutput {
	s.InstanceTypeId = &v
	return s
}

// SetLabels sets the Labels field's value.
func (s *ItemForListInstanceTypeLabelsOutput) SetLabels(v []*LabelForListInstanceTypeLabelsOutput) *ItemForListInstanceTypeLabelsOutput {
	s.Labels = v
	return s
}

type LabelForListInstanceTypeLabelsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Key *string `type:"string" json:",omitempty"`

	Value *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s LabelForListInstanceTypeLabelsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s LabelForListInstanceTypeLabelsOutput) GoString() string {
	return s.String()
}

// SetKey sets the Key field's value.
func (s *LabelForListInstanceTypeLabelsOutput) SetKey(v string) *LabelForListInstanceTypeLabelsOutput {
	s.Key = &v
	return s
}

// SetValue sets the Value field's value.
func (s *LabelForListInstanceTypeLabelsOutput) SetValue(v string) *LabelForListInstanceTypeLabelsOutput {
	s.Value = &v
	return s
}

type ListInstanceTypeLabelsInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	InstanceTypeIds []*string `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s ListInstanceTypeLabelsInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListInstanceTypeLabelsInput) GoString() string {
	return s.String()
}

// SetInstanceTypeIds sets the InstanceTypeIds field's value.
func (s *ListInstanceTypeLabelsInput) SetInstanceTypeIds(v []*string) *ListInstanceTypeLabelsInput {
	s.InstanceTypeIds = v
	return s
}

type ListInstanceTypeLabelsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Items []*ItemForListInstanceTypeLabelsOutput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s ListInstanceTypeLabelsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListInstanceTypeLabelsOutput) GoString() string {
	return s.String()
}

// SetItems sets the Items field's value.
func (s *ListInstanceTypeLabelsOutput) SetItems(v []*ItemForListInstanceTypeLabelsOutput) *ListInstanceTypeLabelsOutput {
	s.Items = v
	return s
}
