// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vke

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opListSupportedImagesCommon = "ListSupportedImages"

// ListSupportedImagesCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ListSupportedImagesCommon operation. The "output" return
// value will be populated with the ListSupportedImagesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListSupportedImagesCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListSupportedImagesCommon Send returns without error.
//
// See ListSupportedImagesCommon for more information on using the ListSupportedImagesCommon
// API call, and error handling.
//
//    // Example sending a request using the ListSupportedImagesCommonRequest method.
//    req, resp := client.ListSupportedImagesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VKE) ListSupportedImagesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opListSupportedImagesCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListSupportedImagesCommon API operation for VKE.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VKE's
// API operation ListSupportedImagesCommon for usage and error information.
func (c *VKE) ListSupportedImagesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ListSupportedImagesCommonRequest(input)
	return out, req.Send()
}

// ListSupportedImagesCommonWithContext is the same as ListSupportedImagesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ListSupportedImagesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VKE) ListSupportedImagesCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ListSupportedImagesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListSupportedImages = "ListSupportedImages"

// ListSupportedImagesRequest generates a "volcengine/request.Request" representing the
// client's request for the ListSupportedImages operation. The "output" return
// value will be populated with the ListSupportedImagesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListSupportedImagesCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListSupportedImagesCommon Send returns without error.
//
// See ListSupportedImages for more information on using the ListSupportedImages
// API call, and error handling.
//
//    // Example sending a request using the ListSupportedImagesRequest method.
//    req, resp := client.ListSupportedImagesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VKE) ListSupportedImagesRequest(input *ListSupportedImagesInput) (req *request.Request, output *ListSupportedImagesOutput) {
	op := &request.Operation{
		Name:       opListSupportedImages,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListSupportedImagesInput{}
	}

	output = &ListSupportedImagesOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListSupportedImages API operation for VKE.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VKE's
// API operation ListSupportedImages for usage and error information.
func (c *VKE) ListSupportedImages(input *ListSupportedImagesInput) (*ListSupportedImagesOutput, error) {
	req, out := c.ListSupportedImagesRequest(input)
	return out, req.Send()
}

// ListSupportedImagesWithContext is the same as ListSupportedImages with the addition of
// the ability to pass a context and additional request options.
//
// See ListSupportedImages for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VKE) ListSupportedImagesWithContext(ctx volcengine.Context, input *ListSupportedImagesInput, opts ...request.Option) (*ListSupportedImagesOutput, error) {
	req, out := c.ListSupportedImagesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ItemForListSupportedImagesOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	InstanceTypeId *string `type:"string" json:",omitempty"`

	SupportedImages []*SupportedImageForListSupportedImagesOutput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s ItemForListSupportedImagesOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ItemForListSupportedImagesOutput) GoString() string {
	return s.String()
}

// SetInstanceTypeId sets the InstanceTypeId field's value.
func (s *ItemForListSupportedImagesOutput) SetInstanceTypeId(v string) *ItemForListSupportedImagesOutput {
	s.InstanceTypeId = &v
	return s
}

// SetSupportedImages sets the SupportedImages field's value.
func (s *ItemForListSupportedImagesOutput) SetSupportedImages(v []*SupportedImageForListSupportedImagesOutput) *ItemForListSupportedImagesOutput {
	s.SupportedImages = v
	return s
}

type ListSupportedImagesInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	InstanceTypeIds []*string `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s ListSupportedImagesInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListSupportedImagesInput) GoString() string {
	return s.String()
}

// SetInstanceTypeIds sets the InstanceTypeIds field's value.
func (s *ListSupportedImagesInput) SetInstanceTypeIds(v []*string) *ListSupportedImagesInput {
	s.InstanceTypeIds = v
	return s
}

type ListSupportedImagesOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Items []*ItemForListSupportedImagesOutput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s ListSupportedImagesOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListSupportedImagesOutput) GoString() string {
	return s.String()
}

// SetItems sets the Items field's value.
func (s *ListSupportedImagesOutput) SetItems(v []*ItemForListSupportedImagesOutput) *ListSupportedImagesOutput {
	s.Items = v
	return s
}

type SupportedImageForListSupportedImagesOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	ImageId *string `type:"string" json:",omitempty"`

	ImageName *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s SupportedImageForListSupportedImagesOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s SupportedImageForListSupportedImagesOutput) GoString() string {
	return s.String()
}

// SetImageId sets the ImageId field's value.
func (s *SupportedImageForListSupportedImagesOutput) SetImageId(v string) *SupportedImageForListSupportedImagesOutput {
	s.ImageId = &v
	return s
}

// SetImageName sets the ImageName field's value.
func (s *SupportedImageForListSupportedImagesOutput) SetImageName(v string) *SupportedImageForListSupportedImagesOutput {
	s.ImageName = &v
	return s
}
