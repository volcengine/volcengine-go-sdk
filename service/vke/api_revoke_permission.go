// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vke

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opRevokePermissionCommon = "RevokePermission"

// RevokePermissionCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the RevokePermissionCommon operation. The "output" return
// value will be populated with the RevokePermissionCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned RevokePermissionCommon Request to send the API call to the service.
// the "output" return value is not valid until after RevokePermissionCommon Send returns without error.
//
// See RevokePermissionCommon for more information on using the RevokePermissionCommon
// API call, and error handling.
//
//    // Example sending a request using the RevokePermissionCommonRequest method.
//    req, resp := client.RevokePermissionCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VKE) RevokePermissionCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opRevokePermissionCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// RevokePermissionCommon API operation for VKE.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VKE's
// API operation RevokePermissionCommon for usage and error information.
func (c *VKE) RevokePermissionCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.RevokePermissionCommonRequest(input)
	return out, req.Send()
}

// RevokePermissionCommonWithContext is the same as RevokePermissionCommon with the addition of
// the ability to pass a context and additional request options.
//
// See RevokePermissionCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VKE) RevokePermissionCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.RevokePermissionCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opRevokePermission = "RevokePermission"

// RevokePermissionRequest generates a "volcengine/request.Request" representing the
// client's request for the RevokePermission operation. The "output" return
// value will be populated with the RevokePermissionCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned RevokePermissionCommon Request to send the API call to the service.
// the "output" return value is not valid until after RevokePermissionCommon Send returns without error.
//
// See RevokePermission for more information on using the RevokePermission
// API call, and error handling.
//
//    // Example sending a request using the RevokePermissionRequest method.
//    req, resp := client.RevokePermissionRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VKE) RevokePermissionRequest(input *RevokePermissionInput) (req *request.Request, output *RevokePermissionOutput) {
	op := &request.Operation{
		Name:       opRevokePermission,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &RevokePermissionInput{}
	}

	output = &RevokePermissionOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// RevokePermission API operation for VKE.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VKE's
// API operation RevokePermission for usage and error information.
func (c *VKE) RevokePermission(input *RevokePermissionInput) (*RevokePermissionOutput, error) {
	req, out := c.RevokePermissionRequest(input)
	return out, req.Send()
}

// RevokePermissionWithContext is the same as RevokePermission with the addition of
// the ability to pass a context and additional request options.
//
// See RevokePermission for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VKE) RevokePermissionWithContext(ctx volcengine.Context, input *RevokePermissionInput, opts ...request.Option) (*RevokePermissionOutput, error) {
	req, out := c.RevokePermissionRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type RevokePermissionInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// Id is a required field
	Id *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s RevokePermissionInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s RevokePermissionInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *RevokePermissionInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "RevokePermissionInput"}
	if s.Id == nil {
		invalidParams.Add(request.NewErrParamRequired("Id"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetId sets the Id field's value.
func (s *RevokePermissionInput) SetId(v string) *RevokePermissionInput {
	s.Id = &v
	return s
}

type RevokePermissionOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s RevokePermissionOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s RevokePermissionOutput) GoString() string {
	return s.String()
}
