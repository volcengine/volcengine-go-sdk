// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vefaas

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opEnableUserCrVpcTunnelCommon = "EnableUserCrVpcTunnel"

// EnableUserCrVpcTunnelCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the EnableUserCrVpcTunnelCommon operation. The "output" return
// value will be populated with the EnableUserCrVpcTunnelCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned EnableUserCrVpcTunnelCommon Request to send the API call to the service.
// the "output" return value is not valid until after EnableUserCrVpcTunnelCommon Send returns without error.
//
// See EnableUserCrVpcTunnelCommon for more information on using the EnableUserCrVpcTunnelCommon
// API call, and error handling.
//
//    // Example sending a request using the EnableUserCrVpcTunnelCommonRequest method.
//    req, resp := client.EnableUserCrVpcTunnelCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VEFAAS) EnableUserCrVpcTunnelCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opEnableUserCrVpcTunnelCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// EnableUserCrVpcTunnelCommon API operation for VEFAAS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VEFAAS's
// API operation EnableUserCrVpcTunnelCommon for usage and error information.
func (c *VEFAAS) EnableUserCrVpcTunnelCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.EnableUserCrVpcTunnelCommonRequest(input)
	return out, req.Send()
}

// EnableUserCrVpcTunnelCommonWithContext is the same as EnableUserCrVpcTunnelCommon with the addition of
// the ability to pass a context and additional request options.
//
// See EnableUserCrVpcTunnelCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VEFAAS) EnableUserCrVpcTunnelCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.EnableUserCrVpcTunnelCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opEnableUserCrVpcTunnel = "EnableUserCrVpcTunnel"

// EnableUserCrVpcTunnelRequest generates a "volcengine/request.Request" representing the
// client's request for the EnableUserCrVpcTunnel operation. The "output" return
// value will be populated with the EnableUserCrVpcTunnelCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned EnableUserCrVpcTunnelCommon Request to send the API call to the service.
// the "output" return value is not valid until after EnableUserCrVpcTunnelCommon Send returns without error.
//
// See EnableUserCrVpcTunnel for more information on using the EnableUserCrVpcTunnel
// API call, and error handling.
//
//    // Example sending a request using the EnableUserCrVpcTunnelRequest method.
//    req, resp := client.EnableUserCrVpcTunnelRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VEFAAS) EnableUserCrVpcTunnelRequest(input *EnableUserCrVpcTunnelInput) (req *request.Request, output *EnableUserCrVpcTunnelOutput) {
	op := &request.Operation{
		Name:       opEnableUserCrVpcTunnel,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &EnableUserCrVpcTunnelInput{}
	}

	output = &EnableUserCrVpcTunnelOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// EnableUserCrVpcTunnel API operation for VEFAAS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VEFAAS's
// API operation EnableUserCrVpcTunnel for usage and error information.
func (c *VEFAAS) EnableUserCrVpcTunnel(input *EnableUserCrVpcTunnelInput) (*EnableUserCrVpcTunnelOutput, error) {
	req, out := c.EnableUserCrVpcTunnelRequest(input)
	return out, req.Send()
}

// EnableUserCrVpcTunnelWithContext is the same as EnableUserCrVpcTunnel with the addition of
// the ability to pass a context and additional request options.
//
// See EnableUserCrVpcTunnel for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VEFAAS) EnableUserCrVpcTunnelWithContext(ctx volcengine.Context, input *EnableUserCrVpcTunnelInput, opts ...request.Option) (*EnableUserCrVpcTunnelOutput, error) {
	req, out := c.EnableUserCrVpcTunnelRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type EnableUserCrVpcTunnelInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// Registry is a required field
	Registry *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s EnableUserCrVpcTunnelInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s EnableUserCrVpcTunnelInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *EnableUserCrVpcTunnelInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "EnableUserCrVpcTunnelInput"}
	if s.Registry == nil {
		invalidParams.Add(request.NewErrParamRequired("Registry"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetRegistry sets the Registry field's value.
func (s *EnableUserCrVpcTunnelInput) SetRegistry(v string) *EnableUserCrVpcTunnelInput {
	s.Registry = &v
	return s
}

type EnableUserCrVpcTunnelOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Message *string `type:"string" json:",omitempty"`

	Status *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s EnableUserCrVpcTunnelOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s EnableUserCrVpcTunnelOutput) GoString() string {
	return s.String()
}

// SetMessage sets the Message field's value.
func (s *EnableUserCrVpcTunnelOutput) SetMessage(v string) *EnableUserCrVpcTunnelOutput {
	s.Message = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *EnableUserCrVpcTunnelOutput) SetStatus(v string) *EnableUserCrVpcTunnelOutput {
	s.Status = &v
	return s
}
