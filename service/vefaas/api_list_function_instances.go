// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vefaas

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opListFunctionInstancesCommon = "ListFunctionInstances"

// ListFunctionInstancesCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ListFunctionInstancesCommon operation. The "output" return
// value will be populated with the ListFunctionInstancesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListFunctionInstancesCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListFunctionInstancesCommon Send returns without error.
//
// See ListFunctionInstancesCommon for more information on using the ListFunctionInstancesCommon
// API call, and error handling.
//
//    // Example sending a request using the ListFunctionInstancesCommonRequest method.
//    req, resp := client.ListFunctionInstancesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VEFAAS) ListFunctionInstancesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opListFunctionInstancesCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListFunctionInstancesCommon API operation for VEFAAS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VEFAAS's
// API operation ListFunctionInstancesCommon for usage and error information.
func (c *VEFAAS) ListFunctionInstancesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ListFunctionInstancesCommonRequest(input)
	return out, req.Send()
}

// ListFunctionInstancesCommonWithContext is the same as ListFunctionInstancesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ListFunctionInstancesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VEFAAS) ListFunctionInstancesCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ListFunctionInstancesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListFunctionInstances = "ListFunctionInstances"

// ListFunctionInstancesRequest generates a "volcengine/request.Request" representing the
// client's request for the ListFunctionInstances operation. The "output" return
// value will be populated with the ListFunctionInstancesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListFunctionInstancesCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListFunctionInstancesCommon Send returns without error.
//
// See ListFunctionInstances for more information on using the ListFunctionInstances
// API call, and error handling.
//
//    // Example sending a request using the ListFunctionInstancesRequest method.
//    req, resp := client.ListFunctionInstancesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VEFAAS) ListFunctionInstancesRequest(input *ListFunctionInstancesInput) (req *request.Request, output *ListFunctionInstancesOutput) {
	op := &request.Operation{
		Name:       opListFunctionInstances,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListFunctionInstancesInput{}
	}

	output = &ListFunctionInstancesOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListFunctionInstances API operation for VEFAAS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VEFAAS's
// API operation ListFunctionInstances for usage and error information.
func (c *VEFAAS) ListFunctionInstances(input *ListFunctionInstancesInput) (*ListFunctionInstancesOutput, error) {
	req, out := c.ListFunctionInstancesRequest(input)
	return out, req.Send()
}

// ListFunctionInstancesWithContext is the same as ListFunctionInstances with the addition of
// the ability to pass a context and additional request options.
//
// See ListFunctionInstances for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VEFAAS) ListFunctionInstancesWithContext(ctx volcengine.Context, input *ListFunctionInstancesInput, opts ...request.Option) (*ListFunctionInstancesOutput, error) {
	req, out := c.ListFunctionInstancesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ItemForListFunctionInstancesOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	AvailabilityZone *string `type:"string" json:",omitempty"`

	CreationTime *string `type:"string" json:",omitempty"`

	ExpireAt *string `type:"string" json:",omitempty"`

	Id *string `type:"string" json:",omitempty"`

	InstanceName *string `type:"string" json:",omitempty"`

	InstanceStatus *string `type:"string" json:",omitempty"`

	InstanceType *string `type:"string" json:",omitempty"`

	Labels *LabelsForListFunctionInstancesOutput `type:"structure" json:",omitempty"`

	RevisionNumber *int32 `type:"int32" json:",omitempty"`

	UserVpcIP *string `type:"string" json:",omitempty"`

	UserVpcIPv6 *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ItemForListFunctionInstancesOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ItemForListFunctionInstancesOutput) GoString() string {
	return s.String()
}

// SetAvailabilityZone sets the AvailabilityZone field's value.
func (s *ItemForListFunctionInstancesOutput) SetAvailabilityZone(v string) *ItemForListFunctionInstancesOutput {
	s.AvailabilityZone = &v
	return s
}

// SetCreationTime sets the CreationTime field's value.
func (s *ItemForListFunctionInstancesOutput) SetCreationTime(v string) *ItemForListFunctionInstancesOutput {
	s.CreationTime = &v
	return s
}

// SetExpireAt sets the ExpireAt field's value.
func (s *ItemForListFunctionInstancesOutput) SetExpireAt(v string) *ItemForListFunctionInstancesOutput {
	s.ExpireAt = &v
	return s
}

// SetId sets the Id field's value.
func (s *ItemForListFunctionInstancesOutput) SetId(v string) *ItemForListFunctionInstancesOutput {
	s.Id = &v
	return s
}

// SetInstanceName sets the InstanceName field's value.
func (s *ItemForListFunctionInstancesOutput) SetInstanceName(v string) *ItemForListFunctionInstancesOutput {
	s.InstanceName = &v
	return s
}

// SetInstanceStatus sets the InstanceStatus field's value.
func (s *ItemForListFunctionInstancesOutput) SetInstanceStatus(v string) *ItemForListFunctionInstancesOutput {
	s.InstanceStatus = &v
	return s
}

// SetInstanceType sets the InstanceType field's value.
func (s *ItemForListFunctionInstancesOutput) SetInstanceType(v string) *ItemForListFunctionInstancesOutput {
	s.InstanceType = &v
	return s
}

// SetLabels sets the Labels field's value.
func (s *ItemForListFunctionInstancesOutput) SetLabels(v *LabelsForListFunctionInstancesOutput) *ItemForListFunctionInstancesOutput {
	s.Labels = v
	return s
}

// SetRevisionNumber sets the RevisionNumber field's value.
func (s *ItemForListFunctionInstancesOutput) SetRevisionNumber(v int32) *ItemForListFunctionInstancesOutput {
	s.RevisionNumber = &v
	return s
}

// SetUserVpcIP sets the UserVpcIP field's value.
func (s *ItemForListFunctionInstancesOutput) SetUserVpcIP(v string) *ItemForListFunctionInstancesOutput {
	s.UserVpcIP = &v
	return s
}

// SetUserVpcIPv6 sets the UserVpcIPv6 field's value.
func (s *ItemForListFunctionInstancesOutput) SetUserVpcIPv6(v string) *ItemForListFunctionInstancesOutput {
	s.UserVpcIPv6 = &v
	return s
}

type LabelsForListFunctionInstancesOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`
}

// String returns the string representation
func (s LabelsForListFunctionInstancesOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s LabelsForListFunctionInstancesOutput) GoString() string {
	return s.String()
}

type ListFunctionInstancesInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// FunctionId is a required field
	FunctionId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s ListFunctionInstancesInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListFunctionInstancesInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ListFunctionInstancesInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ListFunctionInstancesInput"}
	if s.FunctionId == nil {
		invalidParams.Add(request.NewErrParamRequired("FunctionId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetFunctionId sets the FunctionId field's value.
func (s *ListFunctionInstancesInput) SetFunctionId(v string) *ListFunctionInstancesInput {
	s.FunctionId = &v
	return s
}

type ListFunctionInstancesOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Items []*ItemForListFunctionInstancesOutput `type:"list" json:",omitempty"`

	Total *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s ListFunctionInstancesOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListFunctionInstancesOutput) GoString() string {
	return s.String()
}

// SetItems sets the Items field's value.
func (s *ListFunctionInstancesOutput) SetItems(v []*ItemForListFunctionInstancesOutput) *ListFunctionInstancesOutput {
	s.Items = v
	return s
}

// SetTotal sets the Total field's value.
func (s *ListFunctionInstancesOutput) SetTotal(v int32) *ListFunctionInstancesOutput {
	s.Total = &v
	return s
}
