// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package privatezone

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opUpdateResolverEndpointCommon = "UpdateResolverEndpoint"

// UpdateResolverEndpointCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateResolverEndpointCommon operation. The "output" return
// value will be populated with the UpdateResolverEndpointCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateResolverEndpointCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateResolverEndpointCommon Send returns without error.
//
// See UpdateResolverEndpointCommon for more information on using the UpdateResolverEndpointCommon
// API call, and error handling.
//
//    // Example sending a request using the UpdateResolverEndpointCommonRequest method.
//    req, resp := client.UpdateResolverEndpointCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *PRIVATEZONE) UpdateResolverEndpointCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opUpdateResolverEndpointCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateResolverEndpointCommon API operation for PRIVATE_ZONE.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for PRIVATE_ZONE's
// API operation UpdateResolverEndpointCommon for usage and error information.
func (c *PRIVATEZONE) UpdateResolverEndpointCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.UpdateResolverEndpointCommonRequest(input)
	return out, req.Send()
}

// UpdateResolverEndpointCommonWithContext is the same as UpdateResolverEndpointCommon with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateResolverEndpointCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *PRIVATEZONE) UpdateResolverEndpointCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.UpdateResolverEndpointCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opUpdateResolverEndpoint = "UpdateResolverEndpoint"

// UpdateResolverEndpointRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateResolverEndpoint operation. The "output" return
// value will be populated with the UpdateResolverEndpointCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateResolverEndpointCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateResolverEndpointCommon Send returns without error.
//
// See UpdateResolverEndpoint for more information on using the UpdateResolverEndpoint
// API call, and error handling.
//
//    // Example sending a request using the UpdateResolverEndpointRequest method.
//    req, resp := client.UpdateResolverEndpointRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *PRIVATEZONE) UpdateResolverEndpointRequest(input *UpdateResolverEndpointInput) (req *request.Request, output *UpdateResolverEndpointOutput) {
	op := &request.Operation{
		Name:       opUpdateResolverEndpoint,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UpdateResolverEndpointInput{}
	}

	output = &UpdateResolverEndpointOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateResolverEndpoint API operation for PRIVATE_ZONE.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for PRIVATE_ZONE's
// API operation UpdateResolverEndpoint for usage and error information.
func (c *PRIVATEZONE) UpdateResolverEndpoint(input *UpdateResolverEndpointInput) (*UpdateResolverEndpointOutput, error) {
	req, out := c.UpdateResolverEndpointRequest(input)
	return out, req.Send()
}

// UpdateResolverEndpointWithContext is the same as UpdateResolverEndpoint with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateResolverEndpoint for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *PRIVATEZONE) UpdateResolverEndpointWithContext(ctx volcengine.Context, input *UpdateResolverEndpointInput, opts ...request.Option) (*UpdateResolverEndpointOutput, error) {
	req, out := c.UpdateResolverEndpointRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type IpConfigForUpdateResolverEndpointInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	AzID *string `type:"string" json:",omitempty"`

	IP *string `type:"string" json:",omitempty"`

	IPv6 *string `type:"string" json:",omitempty"`

	SubnetID *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s IpConfigForUpdateResolverEndpointInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s IpConfigForUpdateResolverEndpointInput) GoString() string {
	return s.String()
}

// SetAzID sets the AzID field's value.
func (s *IpConfigForUpdateResolverEndpointInput) SetAzID(v string) *IpConfigForUpdateResolverEndpointInput {
	s.AzID = &v
	return s
}

// SetIP sets the IP field's value.
func (s *IpConfigForUpdateResolverEndpointInput) SetIP(v string) *IpConfigForUpdateResolverEndpointInput {
	s.IP = &v
	return s
}

// SetIPv6 sets the IPv6 field's value.
func (s *IpConfigForUpdateResolverEndpointInput) SetIPv6(v string) *IpConfigForUpdateResolverEndpointInput {
	s.IPv6 = &v
	return s
}

// SetSubnetID sets the SubnetID field's value.
func (s *IpConfigForUpdateResolverEndpointInput) SetSubnetID(v string) *IpConfigForUpdateResolverEndpointInput {
	s.SubnetID = &v
	return s
}

type UpdateResolverEndpointInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// EndpointID is a required field
	EndpointID *int64 `type:"int64" json:",omitempty" required:"true"`

	EndpointTrn *string `type:"string" json:",omitempty"`

	EndpointType *string `type:"string" json:",omitempty"`

	IpConfigs []*IpConfigForUpdateResolverEndpointInput `type:"list" json:",omitempty"`

	Name *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s UpdateResolverEndpointInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateResolverEndpointInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UpdateResolverEndpointInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "UpdateResolverEndpointInput"}
	if s.EndpointID == nil {
		invalidParams.Add(request.NewErrParamRequired("EndpointID"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetEndpointID sets the EndpointID field's value.
func (s *UpdateResolverEndpointInput) SetEndpointID(v int64) *UpdateResolverEndpointInput {
	s.EndpointID = &v
	return s
}

// SetEndpointTrn sets the EndpointTrn field's value.
func (s *UpdateResolverEndpointInput) SetEndpointTrn(v string) *UpdateResolverEndpointInput {
	s.EndpointTrn = &v
	return s
}

// SetEndpointType sets the EndpointType field's value.
func (s *UpdateResolverEndpointInput) SetEndpointType(v string) *UpdateResolverEndpointInput {
	s.EndpointType = &v
	return s
}

// SetIpConfigs sets the IpConfigs field's value.
func (s *UpdateResolverEndpointInput) SetIpConfigs(v []*IpConfigForUpdateResolverEndpointInput) *UpdateResolverEndpointInput {
	s.IpConfigs = v
	return s
}

// SetName sets the Name field's value.
func (s *UpdateResolverEndpointInput) SetName(v string) *UpdateResolverEndpointInput {
	s.Name = &v
	return s
}

type UpdateResolverEndpointOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s UpdateResolverEndpointOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateResolverEndpointOutput) GoString() string {
	return s.String()
}
