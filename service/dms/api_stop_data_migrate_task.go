// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package dms

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opStopDataMigrateTaskCommon = "StopDataMigrateTask"

// StopDataMigrateTaskCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the StopDataMigrateTaskCommon operation. The "output" return
// value will be populated with the StopDataMigrateTaskCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned StopDataMigrateTaskCommon Request to send the API call to the service.
// the "output" return value is not valid until after StopDataMigrateTaskCommon Send returns without error.
//
// See StopDataMigrateTaskCommon for more information on using the StopDataMigrateTaskCommon
// API call, and error handling.
//
//    // Example sending a request using the StopDataMigrateTaskCommonRequest method.
//    req, resp := client.StopDataMigrateTaskCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DMS) StopDataMigrateTaskCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opStopDataMigrateTaskCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// StopDataMigrateTaskCommon API operation for DMS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for DMS's
// API operation StopDataMigrateTaskCommon for usage and error information.
func (c *DMS) StopDataMigrateTaskCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.StopDataMigrateTaskCommonRequest(input)
	return out, req.Send()
}

// StopDataMigrateTaskCommonWithContext is the same as StopDataMigrateTaskCommon with the addition of
// the ability to pass a context and additional request options.
//
// See StopDataMigrateTaskCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DMS) StopDataMigrateTaskCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.StopDataMigrateTaskCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opStopDataMigrateTask = "StopDataMigrateTask"

// StopDataMigrateTaskRequest generates a "volcengine/request.Request" representing the
// client's request for the StopDataMigrateTask operation. The "output" return
// value will be populated with the StopDataMigrateTaskCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned StopDataMigrateTaskCommon Request to send the API call to the service.
// the "output" return value is not valid until after StopDataMigrateTaskCommon Send returns without error.
//
// See StopDataMigrateTask for more information on using the StopDataMigrateTask
// API call, and error handling.
//
//    // Example sending a request using the StopDataMigrateTaskRequest method.
//    req, resp := client.StopDataMigrateTaskRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DMS) StopDataMigrateTaskRequest(input *StopDataMigrateTaskInput) (req *request.Request, output *StopDataMigrateTaskOutput) {
	op := &request.Operation{
		Name:       opStopDataMigrateTask,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &StopDataMigrateTaskInput{}
	}

	output = &StopDataMigrateTaskOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// StopDataMigrateTask API operation for DMS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for DMS's
// API operation StopDataMigrateTask for usage and error information.
func (c *DMS) StopDataMigrateTask(input *StopDataMigrateTaskInput) (*StopDataMigrateTaskOutput, error) {
	req, out := c.StopDataMigrateTaskRequest(input)
	return out, req.Send()
}

// StopDataMigrateTaskWithContext is the same as StopDataMigrateTask with the addition of
// the ability to pass a context and additional request options.
//
// See StopDataMigrateTask for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DMS) StopDataMigrateTaskWithContext(ctx volcengine.Context, input *StopDataMigrateTaskInput, opts ...request.Option) (*StopDataMigrateTaskOutput, error) {
	req, out := c.StopDataMigrateTaskRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type StopDataMigrateTaskInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// TaskID is a required field
	TaskID *int64 `type:"int64" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s StopDataMigrateTaskInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s StopDataMigrateTaskInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *StopDataMigrateTaskInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "StopDataMigrateTaskInput"}
	if s.TaskID == nil {
		invalidParams.Add(request.NewErrParamRequired("TaskID"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetTaskID sets the TaskID field's value.
func (s *StopDataMigrateTaskInput) SetTaskID(v int64) *StopDataMigrateTaskInput {
	s.TaskID = &v
	return s
}

type StopDataMigrateTaskOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s StopDataMigrateTaskOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s StopDataMigrateTaskOutput) GoString() string {
	return s.String()
}
