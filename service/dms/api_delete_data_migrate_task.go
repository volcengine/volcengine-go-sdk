// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package dms

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDeleteDataMigrateTaskCommon = "DeleteDataMigrateTask"

// DeleteDataMigrateTaskCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteDataMigrateTaskCommon operation. The "output" return
// value will be populated with the DeleteDataMigrateTaskCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteDataMigrateTaskCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteDataMigrateTaskCommon Send returns without error.
//
// See DeleteDataMigrateTaskCommon for more information on using the DeleteDataMigrateTaskCommon
// API call, and error handling.
//
//    // Example sending a request using the DeleteDataMigrateTaskCommonRequest method.
//    req, resp := client.DeleteDataMigrateTaskCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DMS) DeleteDataMigrateTaskCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteDataMigrateTaskCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DeleteDataMigrateTaskCommon API operation for DMS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for DMS's
// API operation DeleteDataMigrateTaskCommon for usage and error information.
func (c *DMS) DeleteDataMigrateTaskCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteDataMigrateTaskCommonRequest(input)
	return out, req.Send()
}

// DeleteDataMigrateTaskCommonWithContext is the same as DeleteDataMigrateTaskCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteDataMigrateTaskCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DMS) DeleteDataMigrateTaskCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteDataMigrateTaskCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteDataMigrateTask = "DeleteDataMigrateTask"

// DeleteDataMigrateTaskRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteDataMigrateTask operation. The "output" return
// value will be populated with the DeleteDataMigrateTaskCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteDataMigrateTaskCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteDataMigrateTaskCommon Send returns without error.
//
// See DeleteDataMigrateTask for more information on using the DeleteDataMigrateTask
// API call, and error handling.
//
//    // Example sending a request using the DeleteDataMigrateTaskRequest method.
//    req, resp := client.DeleteDataMigrateTaskRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DMS) DeleteDataMigrateTaskRequest(input *DeleteDataMigrateTaskInput) (req *request.Request, output *DeleteDataMigrateTaskOutput) {
	op := &request.Operation{
		Name:       opDeleteDataMigrateTask,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteDataMigrateTaskInput{}
	}

	output = &DeleteDataMigrateTaskOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DeleteDataMigrateTask API operation for DMS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for DMS's
// API operation DeleteDataMigrateTask for usage and error information.
func (c *DMS) DeleteDataMigrateTask(input *DeleteDataMigrateTaskInput) (*DeleteDataMigrateTaskOutput, error) {
	req, out := c.DeleteDataMigrateTaskRequest(input)
	return out, req.Send()
}

// DeleteDataMigrateTaskWithContext is the same as DeleteDataMigrateTask with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteDataMigrateTask for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DMS) DeleteDataMigrateTaskWithContext(ctx volcengine.Context, input *DeleteDataMigrateTaskInput, opts ...request.Option) (*DeleteDataMigrateTaskOutput, error) {
	req, out := c.DeleteDataMigrateTaskRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DeleteDataMigrateTaskInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// ID is a required field
	ID *int64 `type:"int64" json:",omitempty" required:"true"`

	TaskName *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s DeleteDataMigrateTaskInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteDataMigrateTaskInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeleteDataMigrateTaskInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DeleteDataMigrateTaskInput"}
	if s.ID == nil {
		invalidParams.Add(request.NewErrParamRequired("ID"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetID sets the ID field's value.
func (s *DeleteDataMigrateTaskInput) SetID(v int64) *DeleteDataMigrateTaskInput {
	s.ID = &v
	return s
}

// SetTaskName sets the TaskName field's value.
func (s *DeleteDataMigrateTaskInput) SetTaskName(v string) *DeleteDataMigrateTaskInput {
	s.TaskName = &v
	return s
}

type DeleteDataMigrateTaskOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s DeleteDataMigrateTaskOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteDataMigrateTaskOutput) GoString() string {
	return s.String()
}
