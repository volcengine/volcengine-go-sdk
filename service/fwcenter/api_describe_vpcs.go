// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package fwcenter

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDescribeVpcsCommon = "DescribeVpcs"

// DescribeVpcsCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeVpcsCommon operation. The "output" return
// value will be populated with the DescribeVpcsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeVpcsCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeVpcsCommon Send returns without error.
//
// See DescribeVpcsCommon for more information on using the DescribeVpcsCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeVpcsCommonRequest method.
//    req, resp := client.DescribeVpcsCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *FWCENTER) DescribeVpcsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeVpcsCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeVpcsCommon API operation for FWCENTER.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for FWCENTER's
// API operation DescribeVpcsCommon for usage and error information.
func (c *FWCENTER) DescribeVpcsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeVpcsCommonRequest(input)
	return out, req.Send()
}

// DescribeVpcsCommonWithContext is the same as DescribeVpcsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeVpcsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *FWCENTER) DescribeVpcsCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeVpcsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeVpcs = "DescribeVpcs"

// DescribeVpcsRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeVpcs operation. The "output" return
// value will be populated with the DescribeVpcsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeVpcsCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeVpcsCommon Send returns without error.
//
// See DescribeVpcs for more information on using the DescribeVpcs
// API call, and error handling.
//
//    // Example sending a request using the DescribeVpcsRequest method.
//    req, resp := client.DescribeVpcsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *FWCENTER) DescribeVpcsRequest(input *DescribeVpcsInput) (req *request.Request, output *DescribeVpcsOutput) {
	op := &request.Operation{
		Name:       opDescribeVpcs,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeVpcsInput{}
	}

	output = &DescribeVpcsOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeVpcs API operation for FWCENTER.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for FWCENTER's
// API operation DescribeVpcs for usage and error information.
func (c *FWCENTER) DescribeVpcs(input *DescribeVpcsInput) (*DescribeVpcsOutput, error) {
	req, out := c.DescribeVpcsRequest(input)
	return out, req.Send()
}

// DescribeVpcsWithContext is the same as DescribeVpcs with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeVpcs for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *FWCENTER) DescribeVpcsWithContext(ctx volcengine.Context, input *DescribeVpcsInput, opts ...request.Option) (*DescribeVpcsOutput, error) {
	req, out := c.DescribeVpcsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DataForDescribeVpcsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Name *string `type:"string" json:",omitempty"`

	Region *string `type:"string" json:",omitempty"`

	VpcId *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s DataForDescribeVpcsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DataForDescribeVpcsOutput) GoString() string {
	return s.String()
}

// SetName sets the Name field's value.
func (s *DataForDescribeVpcsOutput) SetName(v string) *DataForDescribeVpcsOutput {
	s.Name = &v
	return s
}

// SetRegion sets the Region field's value.
func (s *DataForDescribeVpcsOutput) SetRegion(v string) *DataForDescribeVpcsOutput {
	s.Region = &v
	return s
}

// SetVpcId sets the VpcId field's value.
func (s *DataForDescribeVpcsOutput) SetVpcId(v string) *DataForDescribeVpcsOutput {
	s.VpcId = &v
	return s
}

type DescribeVpcsInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	InternetFirewallId *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s DescribeVpcsInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeVpcsInput) GoString() string {
	return s.String()
}

// SetInternetFirewallId sets the InternetFirewallId field's value.
func (s *DescribeVpcsInput) SetInternetFirewallId(v string) *DescribeVpcsInput {
	s.InternetFirewallId = &v
	return s
}

type DescribeVpcsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Data []*DataForDescribeVpcsOutput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s DescribeVpcsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeVpcsOutput) GoString() string {
	return s.String()
}

// SetData sets the Data field's value.
func (s *DescribeVpcsOutput) SetData(v []*DataForDescribeVpcsOutput) *DescribeVpcsOutput {
	s.Data = v
	return s
}
