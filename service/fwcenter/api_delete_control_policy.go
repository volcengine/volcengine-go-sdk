// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package fwcenter

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDeleteControlPolicyCommon = "DeleteControlPolicy"

// DeleteControlPolicyCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteControlPolicyCommon operation. The "output" return
// value will be populated with the DeleteControlPolicyCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteControlPolicyCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteControlPolicyCommon Send returns without error.
//
// See DeleteControlPolicyCommon for more information on using the DeleteControlPolicyCommon
// API call, and error handling.
//
//    // Example sending a request using the DeleteControlPolicyCommonRequest method.
//    req, resp := client.DeleteControlPolicyCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *FWCENTER) DeleteControlPolicyCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteControlPolicyCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DeleteControlPolicyCommon API operation for FWCENTER.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for FWCENTER's
// API operation DeleteControlPolicyCommon for usage and error information.
func (c *FWCENTER) DeleteControlPolicyCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteControlPolicyCommonRequest(input)
	return out, req.Send()
}

// DeleteControlPolicyCommonWithContext is the same as DeleteControlPolicyCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteControlPolicyCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *FWCENTER) DeleteControlPolicyCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteControlPolicyCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteControlPolicy = "DeleteControlPolicy"

// DeleteControlPolicyRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteControlPolicy operation. The "output" return
// value will be populated with the DeleteControlPolicyCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteControlPolicyCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteControlPolicyCommon Send returns without error.
//
// See DeleteControlPolicy for more information on using the DeleteControlPolicy
// API call, and error handling.
//
//    // Example sending a request using the DeleteControlPolicyRequest method.
//    req, resp := client.DeleteControlPolicyRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *FWCENTER) DeleteControlPolicyRequest(input *DeleteControlPolicyInput) (req *request.Request, output *DeleteControlPolicyOutput) {
	op := &request.Operation{
		Name:       opDeleteControlPolicy,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteControlPolicyInput{}
	}

	output = &DeleteControlPolicyOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DeleteControlPolicy API operation for FWCENTER.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for FWCENTER's
// API operation DeleteControlPolicy for usage and error information.
func (c *FWCENTER) DeleteControlPolicy(input *DeleteControlPolicyInput) (*DeleteControlPolicyOutput, error) {
	req, out := c.DeleteControlPolicyRequest(input)
	return out, req.Send()
}

// DeleteControlPolicyWithContext is the same as DeleteControlPolicy with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteControlPolicy for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *FWCENTER) DeleteControlPolicyWithContext(ctx volcengine.Context, input *DeleteControlPolicyInput, opts ...request.Option) (*DeleteControlPolicyOutput, error) {
	req, out := c.DeleteControlPolicyRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DeleteControlPolicyInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// Direction is a required field
	Direction *string `type:"string" json:",omitempty" required:"true" enum:"EnumOfDirectionForDeleteControlPolicyInput"`

	InternetFirewallId *string `type:"string" json:",omitempty"`

	RuleId *string `type:"string" json:",omitempty"`

	RuleIdList []*string `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s DeleteControlPolicyInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteControlPolicyInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeleteControlPolicyInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DeleteControlPolicyInput"}
	if s.Direction == nil {
		invalidParams.Add(request.NewErrParamRequired("Direction"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDirection sets the Direction field's value.
func (s *DeleteControlPolicyInput) SetDirection(v string) *DeleteControlPolicyInput {
	s.Direction = &v
	return s
}

// SetInternetFirewallId sets the InternetFirewallId field's value.
func (s *DeleteControlPolicyInput) SetInternetFirewallId(v string) *DeleteControlPolicyInput {
	s.InternetFirewallId = &v
	return s
}

// SetRuleId sets the RuleId field's value.
func (s *DeleteControlPolicyInput) SetRuleId(v string) *DeleteControlPolicyInput {
	s.RuleId = &v
	return s
}

// SetRuleIdList sets the RuleIdList field's value.
func (s *DeleteControlPolicyInput) SetRuleIdList(v []*string) *DeleteControlPolicyInput {
	s.RuleIdList = v
	return s
}

type DeleteControlPolicyOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	RuleId *string `type:"string" json:",omitempty"`

	RuleIdList []*string `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s DeleteControlPolicyOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteControlPolicyOutput) GoString() string {
	return s.String()
}

// SetRuleId sets the RuleId field's value.
func (s *DeleteControlPolicyOutput) SetRuleId(v string) *DeleteControlPolicyOutput {
	s.RuleId = &v
	return s
}

// SetRuleIdList sets the RuleIdList field's value.
func (s *DeleteControlPolicyOutput) SetRuleIdList(v []*string) *DeleteControlPolicyOutput {
	s.RuleIdList = v
	return s
}

const (
	// EnumOfDirectionForDeleteControlPolicyInputIn is a EnumOfDirectionForDeleteControlPolicyInput enum value
	EnumOfDirectionForDeleteControlPolicyInputIn = "in"

	// EnumOfDirectionForDeleteControlPolicyInputOut is a EnumOfDirectionForDeleteControlPolicyInput enum value
	EnumOfDirectionForDeleteControlPolicyInputOut = "out"
)
