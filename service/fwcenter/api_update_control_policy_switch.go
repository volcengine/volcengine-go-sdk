// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package fwcenter

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opUpdateControlPolicySwitchCommon = "UpdateControlPolicySwitch"

// UpdateControlPolicySwitchCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateControlPolicySwitchCommon operation. The "output" return
// value will be populated with the UpdateControlPolicySwitchCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateControlPolicySwitchCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateControlPolicySwitchCommon Send returns without error.
//
// See UpdateControlPolicySwitchCommon for more information on using the UpdateControlPolicySwitchCommon
// API call, and error handling.
//
//    // Example sending a request using the UpdateControlPolicySwitchCommonRequest method.
//    req, resp := client.UpdateControlPolicySwitchCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *FWCENTER) UpdateControlPolicySwitchCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opUpdateControlPolicySwitchCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateControlPolicySwitchCommon API operation for FWCENTER.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for FWCENTER's
// API operation UpdateControlPolicySwitchCommon for usage and error information.
func (c *FWCENTER) UpdateControlPolicySwitchCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.UpdateControlPolicySwitchCommonRequest(input)
	return out, req.Send()
}

// UpdateControlPolicySwitchCommonWithContext is the same as UpdateControlPolicySwitchCommon with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateControlPolicySwitchCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *FWCENTER) UpdateControlPolicySwitchCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.UpdateControlPolicySwitchCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opUpdateControlPolicySwitch = "UpdateControlPolicySwitch"

// UpdateControlPolicySwitchRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateControlPolicySwitch operation. The "output" return
// value will be populated with the UpdateControlPolicySwitchCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateControlPolicySwitchCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateControlPolicySwitchCommon Send returns without error.
//
// See UpdateControlPolicySwitch for more information on using the UpdateControlPolicySwitch
// API call, and error handling.
//
//    // Example sending a request using the UpdateControlPolicySwitchRequest method.
//    req, resp := client.UpdateControlPolicySwitchRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *FWCENTER) UpdateControlPolicySwitchRequest(input *UpdateControlPolicySwitchInput) (req *request.Request, output *UpdateControlPolicySwitchOutput) {
	op := &request.Operation{
		Name:       opUpdateControlPolicySwitch,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UpdateControlPolicySwitchInput{}
	}

	output = &UpdateControlPolicySwitchOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateControlPolicySwitch API operation for FWCENTER.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for FWCENTER's
// API operation UpdateControlPolicySwitch for usage and error information.
func (c *FWCENTER) UpdateControlPolicySwitch(input *UpdateControlPolicySwitchInput) (*UpdateControlPolicySwitchOutput, error) {
	req, out := c.UpdateControlPolicySwitchRequest(input)
	return out, req.Send()
}

// UpdateControlPolicySwitchWithContext is the same as UpdateControlPolicySwitch with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateControlPolicySwitch for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *FWCENTER) UpdateControlPolicySwitchWithContext(ctx volcengine.Context, input *UpdateControlPolicySwitchInput, opts ...request.Option) (*UpdateControlPolicySwitchOutput, error) {
	req, out := c.UpdateControlPolicySwitchRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type UpdateControlPolicySwitchInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// Direction is a required field
	Direction *string `type:"string" json:",omitempty" required:"true" enum:"EnumOfDirectionForUpdateControlPolicySwitchInput"`

	InternetFirewallId *string `type:"string" json:",omitempty"`

	RuleIds []*string `type:"list" json:",omitempty"`

	Status *bool `type:"boolean" json:",omitempty"`
}

// String returns the string representation
func (s UpdateControlPolicySwitchInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateControlPolicySwitchInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UpdateControlPolicySwitchInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "UpdateControlPolicySwitchInput"}
	if s.Direction == nil {
		invalidParams.Add(request.NewErrParamRequired("Direction"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDirection sets the Direction field's value.
func (s *UpdateControlPolicySwitchInput) SetDirection(v string) *UpdateControlPolicySwitchInput {
	s.Direction = &v
	return s
}

// SetInternetFirewallId sets the InternetFirewallId field's value.
func (s *UpdateControlPolicySwitchInput) SetInternetFirewallId(v string) *UpdateControlPolicySwitchInput {
	s.InternetFirewallId = &v
	return s
}

// SetRuleIds sets the RuleIds field's value.
func (s *UpdateControlPolicySwitchInput) SetRuleIds(v []*string) *UpdateControlPolicySwitchInput {
	s.RuleIds = v
	return s
}

// SetStatus sets the Status field's value.
func (s *UpdateControlPolicySwitchInput) SetStatus(v bool) *UpdateControlPolicySwitchInput {
	s.Status = &v
	return s
}

type UpdateControlPolicySwitchOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	RuleIds []*string `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s UpdateControlPolicySwitchOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateControlPolicySwitchOutput) GoString() string {
	return s.String()
}

// SetRuleIds sets the RuleIds field's value.
func (s *UpdateControlPolicySwitchOutput) SetRuleIds(v []*string) *UpdateControlPolicySwitchOutput {
	s.RuleIds = v
	return s
}

const (
	// EnumOfDirectionForUpdateControlPolicySwitchInputIn is a EnumOfDirectionForUpdateControlPolicySwitchInput enum value
	EnumOfDirectionForUpdateControlPolicySwitchInputIn = "in"

	// EnumOfDirectionForUpdateControlPolicySwitchInputOut is a EnumOfDirectionForUpdateControlPolicySwitchInput enum value
	EnumOfDirectionForUpdateControlPolicySwitchInputOut = "out"
)
