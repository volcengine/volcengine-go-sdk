// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package fwcenter

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opModifyControlPolicyPositionCommon = "ModifyControlPolicyPosition"

// ModifyControlPolicyPositionCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ModifyControlPolicyPositionCommon operation. The "output" return
// value will be populated with the ModifyControlPolicyPositionCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyControlPolicyPositionCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyControlPolicyPositionCommon Send returns without error.
//
// See ModifyControlPolicyPositionCommon for more information on using the ModifyControlPolicyPositionCommon
// API call, and error handling.
//
//    // Example sending a request using the ModifyControlPolicyPositionCommonRequest method.
//    req, resp := client.ModifyControlPolicyPositionCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *FWCENTER) ModifyControlPolicyPositionCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opModifyControlPolicyPositionCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ModifyControlPolicyPositionCommon API operation for FWCENTER.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for FWCENTER's
// API operation ModifyControlPolicyPositionCommon for usage and error information.
func (c *FWCENTER) ModifyControlPolicyPositionCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ModifyControlPolicyPositionCommonRequest(input)
	return out, req.Send()
}

// ModifyControlPolicyPositionCommonWithContext is the same as ModifyControlPolicyPositionCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyControlPolicyPositionCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *FWCENTER) ModifyControlPolicyPositionCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ModifyControlPolicyPositionCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyControlPolicyPosition = "ModifyControlPolicyPosition"

// ModifyControlPolicyPositionRequest generates a "volcengine/request.Request" representing the
// client's request for the ModifyControlPolicyPosition operation. The "output" return
// value will be populated with the ModifyControlPolicyPositionCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyControlPolicyPositionCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyControlPolicyPositionCommon Send returns without error.
//
// See ModifyControlPolicyPosition for more information on using the ModifyControlPolicyPosition
// API call, and error handling.
//
//    // Example sending a request using the ModifyControlPolicyPositionRequest method.
//    req, resp := client.ModifyControlPolicyPositionRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *FWCENTER) ModifyControlPolicyPositionRequest(input *ModifyControlPolicyPositionInput) (req *request.Request, output *ModifyControlPolicyPositionOutput) {
	op := &request.Operation{
		Name:       opModifyControlPolicyPosition,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ModifyControlPolicyPositionInput{}
	}

	output = &ModifyControlPolicyPositionOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ModifyControlPolicyPosition API operation for FWCENTER.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for FWCENTER's
// API operation ModifyControlPolicyPosition for usage and error information.
func (c *FWCENTER) ModifyControlPolicyPosition(input *ModifyControlPolicyPositionInput) (*ModifyControlPolicyPositionOutput, error) {
	req, out := c.ModifyControlPolicyPositionRequest(input)
	return out, req.Send()
}

// ModifyControlPolicyPositionWithContext is the same as ModifyControlPolicyPosition with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyControlPolicyPosition for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *FWCENTER) ModifyControlPolicyPositionWithContext(ctx volcengine.Context, input *ModifyControlPolicyPositionInput, opts ...request.Option) (*ModifyControlPolicyPositionOutput, error) {
	req, out := c.ModifyControlPolicyPositionRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ModifyControlPolicyPositionInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// Direction is a required field
	Direction *string `type:"string" json:",omitempty" required:"true" enum:"EnumOfDirectionForModifyControlPolicyPositionInput"`

	InternetFirewallId *string `type:"string" json:",omitempty"`

	// NewPrio is a required field
	NewPrio *int32 `min:"1" type:"int32" json:",omitempty" required:"true"`

	// RuleId is a required field
	RuleId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s ModifyControlPolicyPositionInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyControlPolicyPositionInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ModifyControlPolicyPositionInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ModifyControlPolicyPositionInput"}
	if s.Direction == nil {
		invalidParams.Add(request.NewErrParamRequired("Direction"))
	}
	if s.NewPrio == nil {
		invalidParams.Add(request.NewErrParamRequired("NewPrio"))
	}
	if s.NewPrio != nil && *s.NewPrio < 1 {
		invalidParams.Add(request.NewErrParamMinValue("NewPrio", 1))
	}
	if s.RuleId == nil {
		invalidParams.Add(request.NewErrParamRequired("RuleId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDirection sets the Direction field's value.
func (s *ModifyControlPolicyPositionInput) SetDirection(v string) *ModifyControlPolicyPositionInput {
	s.Direction = &v
	return s
}

// SetInternetFirewallId sets the InternetFirewallId field's value.
func (s *ModifyControlPolicyPositionInput) SetInternetFirewallId(v string) *ModifyControlPolicyPositionInput {
	s.InternetFirewallId = &v
	return s
}

// SetNewPrio sets the NewPrio field's value.
func (s *ModifyControlPolicyPositionInput) SetNewPrio(v int32) *ModifyControlPolicyPositionInput {
	s.NewPrio = &v
	return s
}

// SetRuleId sets the RuleId field's value.
func (s *ModifyControlPolicyPositionInput) SetRuleId(v string) *ModifyControlPolicyPositionInput {
	s.RuleId = &v
	return s
}

type ModifyControlPolicyPositionOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	RuleId *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ModifyControlPolicyPositionOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyControlPolicyPositionOutput) GoString() string {
	return s.String()
}

// SetRuleId sets the RuleId field's value.
func (s *ModifyControlPolicyPositionOutput) SetRuleId(v string) *ModifyControlPolicyPositionOutput {
	s.RuleId = &v
	return s
}

const (
	// EnumOfDirectionForModifyControlPolicyPositionInputIn is a EnumOfDirectionForModifyControlPolicyPositionInput enum value
	EnumOfDirectionForModifyControlPolicyPositionInputIn = "in"

	// EnumOfDirectionForModifyControlPolicyPositionInputOut is a EnumOfDirectionForModifyControlPolicyPositionInput enum value
	EnumOfDirectionForModifyControlPolicyPositionInputOut = "out"
)
