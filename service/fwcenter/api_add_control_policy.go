// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package fwcenter

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opAddControlPolicyCommon = "AddControlPolicy"

// AddControlPolicyCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the AddControlPolicyCommon operation. The "output" return
// value will be populated with the AddControlPolicyCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned AddControlPolicyCommon Request to send the API call to the service.
// the "output" return value is not valid until after AddControlPolicyCommon Send returns without error.
//
// See AddControlPolicyCommon for more information on using the AddControlPolicyCommon
// API call, and error handling.
//
//    // Example sending a request using the AddControlPolicyCommonRequest method.
//    req, resp := client.AddControlPolicyCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *FWCENTER) AddControlPolicyCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opAddControlPolicyCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// AddControlPolicyCommon API operation for FWCENTER.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for FWCENTER's
// API operation AddControlPolicyCommon for usage and error information.
func (c *FWCENTER) AddControlPolicyCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.AddControlPolicyCommonRequest(input)
	return out, req.Send()
}

// AddControlPolicyCommonWithContext is the same as AddControlPolicyCommon with the addition of
// the ability to pass a context and additional request options.
//
// See AddControlPolicyCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *FWCENTER) AddControlPolicyCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.AddControlPolicyCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opAddControlPolicy = "AddControlPolicy"

// AddControlPolicyRequest generates a "volcengine/request.Request" representing the
// client's request for the AddControlPolicy operation. The "output" return
// value will be populated with the AddControlPolicyCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned AddControlPolicyCommon Request to send the API call to the service.
// the "output" return value is not valid until after AddControlPolicyCommon Send returns without error.
//
// See AddControlPolicy for more information on using the AddControlPolicy
// API call, and error handling.
//
//    // Example sending a request using the AddControlPolicyRequest method.
//    req, resp := client.AddControlPolicyRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *FWCENTER) AddControlPolicyRequest(input *AddControlPolicyInput) (req *request.Request, output *AddControlPolicyOutput) {
	op := &request.Operation{
		Name:       opAddControlPolicy,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &AddControlPolicyInput{}
	}

	output = &AddControlPolicyOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// AddControlPolicy API operation for FWCENTER.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for FWCENTER's
// API operation AddControlPolicy for usage and error information.
func (c *FWCENTER) AddControlPolicy(input *AddControlPolicyInput) (*AddControlPolicyOutput, error) {
	req, out := c.AddControlPolicyRequest(input)
	return out, req.Send()
}

// AddControlPolicyWithContext is the same as AddControlPolicy with the addition of
// the ability to pass a context and additional request options.
//
// See AddControlPolicy for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *FWCENTER) AddControlPolicyWithContext(ctx volcengine.Context, input *AddControlPolicyInput, opts ...request.Option) (*AddControlPolicyOutput, error) {
	req, out := c.AddControlPolicyRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type AddControlPolicyInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// Action is a required field
	Action *string `type:"string" json:",omitempty" required:"true" enum:"EnumOfActionForAddControlPolicyInput"`

	Description *string `type:"string" json:",omitempty"`

	DestPort *string `type:"string" json:",omitempty"`

	DestPortType *string `type:"string" json:",omitempty" enum:"EnumOfDestPortTypeForAddControlPolicyInput"`

	// Destination is a required field
	Destination *string `type:"string" json:",omitempty" required:"true"`

	// DestinationType is a required field
	DestinationType *string `type:"string" json:",omitempty" required:"true" enum:"EnumOfDestinationTypeForAddControlPolicyInput"`

	// Direction is a required field
	Direction *string `type:"string" json:",omitempty" required:"true" enum:"EnumOfDirectionForAddControlPolicyInput"`

	EndTime *int32 `type:"int32" json:",omitempty"`

	InternetFirewallId *string `type:"string" json:",omitempty"`

	IpType *string `type:"string" json:",omitempty" enum:"EnumOfIpTypeForAddControlPolicyInput"`

	Prio *int32 `type:"int32" json:",omitempty"`

	// Proto is a required field
	Proto *string `type:"string" json:",omitempty" required:"true" enum:"EnumOfProtoForAddControlPolicyInput"`

	RepeatDays []*int32 `type:"list" json:",omitempty"`

	RepeatEndTime *string `type:"string" json:",omitempty"`

	RepeatStartTime *string `type:"string" json:",omitempty"`

	RepeatType *string `type:"string" json:",omitempty" enum:"EnumOfRepeatTypeForAddControlPolicyInput"`

	// Source is a required field
	Source *string `type:"string" json:",omitempty" required:"true"`

	// SourceType is a required field
	SourceType *string `type:"string" json:",omitempty" required:"true" enum:"EnumOfSourceTypeForAddControlPolicyInput"`

	StartTime *int32 `type:"int32" json:",omitempty"`

	Status *bool `type:"boolean" json:",omitempty"`
}

// String returns the string representation
func (s AddControlPolicyInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s AddControlPolicyInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *AddControlPolicyInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "AddControlPolicyInput"}
	if s.Action == nil {
		invalidParams.Add(request.NewErrParamRequired("Action"))
	}
	if s.Destination == nil {
		invalidParams.Add(request.NewErrParamRequired("Destination"))
	}
	if s.DestinationType == nil {
		invalidParams.Add(request.NewErrParamRequired("DestinationType"))
	}
	if s.Direction == nil {
		invalidParams.Add(request.NewErrParamRequired("Direction"))
	}
	if s.Proto == nil {
		invalidParams.Add(request.NewErrParamRequired("Proto"))
	}
	if s.Source == nil {
		invalidParams.Add(request.NewErrParamRequired("Source"))
	}
	if s.SourceType == nil {
		invalidParams.Add(request.NewErrParamRequired("SourceType"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAction sets the Action field's value.
func (s *AddControlPolicyInput) SetAction(v string) *AddControlPolicyInput {
	s.Action = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *AddControlPolicyInput) SetDescription(v string) *AddControlPolicyInput {
	s.Description = &v
	return s
}

// SetDestPort sets the DestPort field's value.
func (s *AddControlPolicyInput) SetDestPort(v string) *AddControlPolicyInput {
	s.DestPort = &v
	return s
}

// SetDestPortType sets the DestPortType field's value.
func (s *AddControlPolicyInput) SetDestPortType(v string) *AddControlPolicyInput {
	s.DestPortType = &v
	return s
}

// SetDestination sets the Destination field's value.
func (s *AddControlPolicyInput) SetDestination(v string) *AddControlPolicyInput {
	s.Destination = &v
	return s
}

// SetDestinationType sets the DestinationType field's value.
func (s *AddControlPolicyInput) SetDestinationType(v string) *AddControlPolicyInput {
	s.DestinationType = &v
	return s
}

// SetDirection sets the Direction field's value.
func (s *AddControlPolicyInput) SetDirection(v string) *AddControlPolicyInput {
	s.Direction = &v
	return s
}

// SetEndTime sets the EndTime field's value.
func (s *AddControlPolicyInput) SetEndTime(v int32) *AddControlPolicyInput {
	s.EndTime = &v
	return s
}

// SetInternetFirewallId sets the InternetFirewallId field's value.
func (s *AddControlPolicyInput) SetInternetFirewallId(v string) *AddControlPolicyInput {
	s.InternetFirewallId = &v
	return s
}

// SetIpType sets the IpType field's value.
func (s *AddControlPolicyInput) SetIpType(v string) *AddControlPolicyInput {
	s.IpType = &v
	return s
}

// SetPrio sets the Prio field's value.
func (s *AddControlPolicyInput) SetPrio(v int32) *AddControlPolicyInput {
	s.Prio = &v
	return s
}

// SetProto sets the Proto field's value.
func (s *AddControlPolicyInput) SetProto(v string) *AddControlPolicyInput {
	s.Proto = &v
	return s
}

// SetRepeatDays sets the RepeatDays field's value.
func (s *AddControlPolicyInput) SetRepeatDays(v []*int32) *AddControlPolicyInput {
	s.RepeatDays = v
	return s
}

// SetRepeatEndTime sets the RepeatEndTime field's value.
func (s *AddControlPolicyInput) SetRepeatEndTime(v string) *AddControlPolicyInput {
	s.RepeatEndTime = &v
	return s
}

// SetRepeatStartTime sets the RepeatStartTime field's value.
func (s *AddControlPolicyInput) SetRepeatStartTime(v string) *AddControlPolicyInput {
	s.RepeatStartTime = &v
	return s
}

// SetRepeatType sets the RepeatType field's value.
func (s *AddControlPolicyInput) SetRepeatType(v string) *AddControlPolicyInput {
	s.RepeatType = &v
	return s
}

// SetSource sets the Source field's value.
func (s *AddControlPolicyInput) SetSource(v string) *AddControlPolicyInput {
	s.Source = &v
	return s
}

// SetSourceType sets the SourceType field's value.
func (s *AddControlPolicyInput) SetSourceType(v string) *AddControlPolicyInput {
	s.SourceType = &v
	return s
}

// SetStartTime sets the StartTime field's value.
func (s *AddControlPolicyInput) SetStartTime(v int32) *AddControlPolicyInput {
	s.StartTime = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *AddControlPolicyInput) SetStatus(v bool) *AddControlPolicyInput {
	s.Status = &v
	return s
}

type AddControlPolicyOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	RuleId *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s AddControlPolicyOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s AddControlPolicyOutput) GoString() string {
	return s.String()
}

// SetRuleId sets the RuleId field's value.
func (s *AddControlPolicyOutput) SetRuleId(v string) *AddControlPolicyOutput {
	s.RuleId = &v
	return s
}

const (
	// EnumOfActionForAddControlPolicyInputAccept is a EnumOfActionForAddControlPolicyInput enum value
	EnumOfActionForAddControlPolicyInputAccept = "accept"

	// EnumOfActionForAddControlPolicyInputDeny is a EnumOfActionForAddControlPolicyInput enum value
	EnumOfActionForAddControlPolicyInputDeny = "deny"

	// EnumOfActionForAddControlPolicyInputMonitor is a EnumOfActionForAddControlPolicyInput enum value
	EnumOfActionForAddControlPolicyInputMonitor = "monitor"
)

const (
	// EnumOfDestPortTypeForAddControlPolicyInputPort is a EnumOfDestPortTypeForAddControlPolicyInput enum value
	EnumOfDestPortTypeForAddControlPolicyInputPort = "port"

	// EnumOfDestPortTypeForAddControlPolicyInputGroup is a EnumOfDestPortTypeForAddControlPolicyInput enum value
	EnumOfDestPortTypeForAddControlPolicyInputGroup = "group"
)

const (
	// EnumOfDestinationTypeForAddControlPolicyInputNet is a EnumOfDestinationTypeForAddControlPolicyInput enum value
	EnumOfDestinationTypeForAddControlPolicyInputNet = "net"

	// EnumOfDestinationTypeForAddControlPolicyInputLocation is a EnumOfDestinationTypeForAddControlPolicyInput enum value
	EnumOfDestinationTypeForAddControlPolicyInputLocation = "location"

	// EnumOfDestinationTypeForAddControlPolicyInputGroup is a EnumOfDestinationTypeForAddControlPolicyInput enum value
	EnumOfDestinationTypeForAddControlPolicyInputGroup = "group"

	// EnumOfDestinationTypeForAddControlPolicyInputDomain is a EnumOfDestinationTypeForAddControlPolicyInput enum value
	EnumOfDestinationTypeForAddControlPolicyInputDomain = "domain"
)

const (
	// EnumOfDirectionForAddControlPolicyInputIn is a EnumOfDirectionForAddControlPolicyInput enum value
	EnumOfDirectionForAddControlPolicyInputIn = "in"

	// EnumOfDirectionForAddControlPolicyInputOut is a EnumOfDirectionForAddControlPolicyInput enum value
	EnumOfDirectionForAddControlPolicyInputOut = "out"
)

const (
	// EnumOfIpTypeForAddControlPolicyInputV4 is a EnumOfIpTypeForAddControlPolicyInput enum value
	EnumOfIpTypeForAddControlPolicyInputV4 = "v4"

	// EnumOfIpTypeForAddControlPolicyInputV6 is a EnumOfIpTypeForAddControlPolicyInput enum value
	EnumOfIpTypeForAddControlPolicyInputV6 = "v6"
)

const (
	// EnumOfProtoForAddControlPolicyInputIcmp is a EnumOfProtoForAddControlPolicyInput enum value
	EnumOfProtoForAddControlPolicyInputIcmp = "ICMP"

	// EnumOfProtoForAddControlPolicyInputTcp is a EnumOfProtoForAddControlPolicyInput enum value
	EnumOfProtoForAddControlPolicyInputTcp = "TCP"

	// EnumOfProtoForAddControlPolicyInputUdp is a EnumOfProtoForAddControlPolicyInput enum value
	EnumOfProtoForAddControlPolicyInputUdp = "UDP"

	// EnumOfProtoForAddControlPolicyInputAny is a EnumOfProtoForAddControlPolicyInput enum value
	EnumOfProtoForAddControlPolicyInputAny = "ANY"
)

const (
	// EnumOfRepeatTypeForAddControlPolicyInputPermanent is a EnumOfRepeatTypeForAddControlPolicyInput enum value
	EnumOfRepeatTypeForAddControlPolicyInputPermanent = "Permanent"

	// EnumOfRepeatTypeForAddControlPolicyInputOnce is a EnumOfRepeatTypeForAddControlPolicyInput enum value
	EnumOfRepeatTypeForAddControlPolicyInputOnce = "Once"

	// EnumOfRepeatTypeForAddControlPolicyInputDaily is a EnumOfRepeatTypeForAddControlPolicyInput enum value
	EnumOfRepeatTypeForAddControlPolicyInputDaily = "Daily"

	// EnumOfRepeatTypeForAddControlPolicyInputWeekly is a EnumOfRepeatTypeForAddControlPolicyInput enum value
	EnumOfRepeatTypeForAddControlPolicyInputWeekly = "Weekly"

	// EnumOfRepeatTypeForAddControlPolicyInputMonthly is a EnumOfRepeatTypeForAddControlPolicyInput enum value
	EnumOfRepeatTypeForAddControlPolicyInputMonthly = "Monthly"
)

const (
	// EnumOfSourceTypeForAddControlPolicyInputNet is a EnumOfSourceTypeForAddControlPolicyInput enum value
	EnumOfSourceTypeForAddControlPolicyInputNet = "net"

	// EnumOfSourceTypeForAddControlPolicyInputLocation is a EnumOfSourceTypeForAddControlPolicyInput enum value
	EnumOfSourceTypeForAddControlPolicyInputLocation = "location"

	// EnumOfSourceTypeForAddControlPolicyInputGroup is a EnumOfSourceTypeForAddControlPolicyInput enum value
	EnumOfSourceTypeForAddControlPolicyInputGroup = "group"
)
