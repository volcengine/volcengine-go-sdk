// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package seccenter20240508

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opGetFingerprintRefreshStatusCommon = "GetFingerprintRefreshStatus"

// GetFingerprintRefreshStatusCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the GetFingerprintRefreshStatusCommon operation. The "output" return
// value will be populated with the GetFingerprintRefreshStatusCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetFingerprintRefreshStatusCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetFingerprintRefreshStatusCommon Send returns without error.
//
// See GetFingerprintRefreshStatusCommon for more information on using the GetFingerprintRefreshStatusCommon
// API call, and error handling.
//
//    // Example sending a request using the GetFingerprintRefreshStatusCommonRequest method.
//    req, resp := client.GetFingerprintRefreshStatusCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECCENTER20240508) GetFingerprintRefreshStatusCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opGetFingerprintRefreshStatusCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// GetFingerprintRefreshStatusCommon API operation for SECCENTER20240508.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SECCENTER20240508's
// API operation GetFingerprintRefreshStatusCommon for usage and error information.
func (c *SECCENTER20240508) GetFingerprintRefreshStatusCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.GetFingerprintRefreshStatusCommonRequest(input)
	return out, req.Send()
}

// GetFingerprintRefreshStatusCommonWithContext is the same as GetFingerprintRefreshStatusCommon with the addition of
// the ability to pass a context and additional request options.
//
// See GetFingerprintRefreshStatusCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECCENTER20240508) GetFingerprintRefreshStatusCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.GetFingerprintRefreshStatusCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opGetFingerprintRefreshStatus = "GetFingerprintRefreshStatus"

// GetFingerprintRefreshStatusRequest generates a "volcengine/request.Request" representing the
// client's request for the GetFingerprintRefreshStatus operation. The "output" return
// value will be populated with the GetFingerprintRefreshStatusCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetFingerprintRefreshStatusCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetFingerprintRefreshStatusCommon Send returns without error.
//
// See GetFingerprintRefreshStatus for more information on using the GetFingerprintRefreshStatus
// API call, and error handling.
//
//    // Example sending a request using the GetFingerprintRefreshStatusRequest method.
//    req, resp := client.GetFingerprintRefreshStatusRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECCENTER20240508) GetFingerprintRefreshStatusRequest(input *GetFingerprintRefreshStatusInput) (req *request.Request, output *GetFingerprintRefreshStatusOutput) {
	op := &request.Operation{
		Name:       opGetFingerprintRefreshStatus,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &GetFingerprintRefreshStatusInput{}
	}

	output = &GetFingerprintRefreshStatusOutput{}
	req = c.newRequest(op, input, output)

	return
}

// GetFingerprintRefreshStatus API operation for SECCENTER20240508.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SECCENTER20240508's
// API operation GetFingerprintRefreshStatus for usage and error information.
func (c *SECCENTER20240508) GetFingerprintRefreshStatus(input *GetFingerprintRefreshStatusInput) (*GetFingerprintRefreshStatusOutput, error) {
	req, out := c.GetFingerprintRefreshStatusRequest(input)
	return out, req.Send()
}

// GetFingerprintRefreshStatusWithContext is the same as GetFingerprintRefreshStatus with the addition of
// the ability to pass a context and additional request options.
//
// See GetFingerprintRefreshStatus for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECCENTER20240508) GetFingerprintRefreshStatusWithContext(ctx volcengine.Context, input *GetFingerprintRefreshStatusInput, opts ...request.Option) (*GetFingerprintRefreshStatusOutput, error) {
	req, out := c.GetFingerprintRefreshStatusRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type GetFingerprintRefreshStatusInput struct {
	_ struct{} `type:"structure"`

	AgentID *string `type:"string"`

	FingerprintType *string `type:"string"`
}

// String returns the string representation
func (s GetFingerprintRefreshStatusInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetFingerprintRefreshStatusInput) GoString() string {
	return s.String()
}

// SetAgentID sets the AgentID field's value.
func (s *GetFingerprintRefreshStatusInput) SetAgentID(v string) *GetFingerprintRefreshStatusInput {
	s.AgentID = &v
	return s
}

// SetFingerprintType sets the FingerprintType field's value.
func (s *GetFingerprintRefreshStatusInput) SetFingerprintType(v string) *GetFingerprintRefreshStatusInput {
	s.FingerprintType = &v
	return s
}

type GetFingerprintRefreshStatusOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	CooldownTime *int64 `type:"int64"`

	Percent *int64 `type:"int64"`

	Status *string `type:"string"`

	UpdateTime *int64 `type:"int64"`
}

// String returns the string representation
func (s GetFingerprintRefreshStatusOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetFingerprintRefreshStatusOutput) GoString() string {
	return s.String()
}

// SetCooldownTime sets the CooldownTime field's value.
func (s *GetFingerprintRefreshStatusOutput) SetCooldownTime(v int64) *GetFingerprintRefreshStatusOutput {
	s.CooldownTime = &v
	return s
}

// SetPercent sets the Percent field's value.
func (s *GetFingerprintRefreshStatusOutput) SetPercent(v int64) *GetFingerprintRefreshStatusOutput {
	s.Percent = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *GetFingerprintRefreshStatusOutput) SetStatus(v string) *GetFingerprintRefreshStatusOutput {
	s.Status = &v
	return s
}

// SetUpdateTime sets the UpdateTime field's value.
func (s *GetFingerprintRefreshStatusOutput) SetUpdateTime(v int64) *GetFingerprintRefreshStatusOutput {
	s.UpdateTime = &v
	return s
}
