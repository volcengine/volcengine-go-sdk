// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package seccenter20240508

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opGetFingerprintCronCommon = "GetFingerprintCron"

// GetFingerprintCronCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the GetFingerprintCronCommon operation. The "output" return
// value will be populated with the GetFingerprintCronCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetFingerprintCronCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetFingerprintCronCommon Send returns without error.
//
// See GetFingerprintCronCommon for more information on using the GetFingerprintCronCommon
// API call, and error handling.
//
//    // Example sending a request using the GetFingerprintCronCommonRequest method.
//    req, resp := client.GetFingerprintCronCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECCENTER20240508) GetFingerprintCronCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opGetFingerprintCronCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetFingerprintCronCommon API operation for SECCENTER20240508.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SECCENTER20240508's
// API operation GetFingerprintCronCommon for usage and error information.
func (c *SECCENTER20240508) GetFingerprintCronCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.GetFingerprintCronCommonRequest(input)
	return out, req.Send()
}

// GetFingerprintCronCommonWithContext is the same as GetFingerprintCronCommon with the addition of
// the ability to pass a context and additional request options.
//
// See GetFingerprintCronCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECCENTER20240508) GetFingerprintCronCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.GetFingerprintCronCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opGetFingerprintCron = "GetFingerprintCron"

// GetFingerprintCronRequest generates a "volcengine/request.Request" representing the
// client's request for the GetFingerprintCron operation. The "output" return
// value will be populated with the GetFingerprintCronCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetFingerprintCronCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetFingerprintCronCommon Send returns without error.
//
// See GetFingerprintCron for more information on using the GetFingerprintCron
// API call, and error handling.
//
//    // Example sending a request using the GetFingerprintCronRequest method.
//    req, resp := client.GetFingerprintCronRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECCENTER20240508) GetFingerprintCronRequest(input *GetFingerprintCronInput) (req *request.Request, output *GetFingerprintCronOutput) {
	op := &request.Operation{
		Name:       opGetFingerprintCron,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &GetFingerprintCronInput{}
	}

	output = &GetFingerprintCronOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetFingerprintCron API operation for SECCENTER20240508.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SECCENTER20240508's
// API operation GetFingerprintCron for usage and error information.
func (c *SECCENTER20240508) GetFingerprintCron(input *GetFingerprintCronInput) (*GetFingerprintCronOutput, error) {
	req, out := c.GetFingerprintCronRequest(input)
	return out, req.Send()
}

// GetFingerprintCronWithContext is the same as GetFingerprintCron with the addition of
// the ability to pass a context and additional request options.
//
// See GetFingerprintCron for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECCENTER20240508) GetFingerprintCronWithContext(ctx volcengine.Context, input *GetFingerprintCronInput, opts ...request.Option) (*GetFingerprintCronOutput, error) {
	req, out := c.GetFingerprintCronRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DataForGetFingerprintCronOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	AgentID *string `type:"string" json:",omitempty"`

	AgentTags []*string `type:"list" json:",omitempty"`

	Checksum *string `type:"string" json:",omitempty"`

	Command *string `type:"string" json:",omitempty"`

	EipAddress *string `type:"string" json:",omitempty"`

	Hostname *string `type:"string" json:",omitempty"`

	ID *string `type:"string" json:",omitempty"`

	Path *string `type:"string" json:",omitempty"`

	PrimaryIpAddress *string `type:"string" json:",omitempty"`

	Schedule *string `type:"string" json:",omitempty"`

	StartTime *int64 `type:"int64" json:",omitempty"`

	UpdateTime *int64 `type:"int64" json:",omitempty"`

	Username *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s DataForGetFingerprintCronOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DataForGetFingerprintCronOutput) GoString() string {
	return s.String()
}

// SetAgentID sets the AgentID field's value.
func (s *DataForGetFingerprintCronOutput) SetAgentID(v string) *DataForGetFingerprintCronOutput {
	s.AgentID = &v
	return s
}

// SetAgentTags sets the AgentTags field's value.
func (s *DataForGetFingerprintCronOutput) SetAgentTags(v []*string) *DataForGetFingerprintCronOutput {
	s.AgentTags = v
	return s
}

// SetChecksum sets the Checksum field's value.
func (s *DataForGetFingerprintCronOutput) SetChecksum(v string) *DataForGetFingerprintCronOutput {
	s.Checksum = &v
	return s
}

// SetCommand sets the Command field's value.
func (s *DataForGetFingerprintCronOutput) SetCommand(v string) *DataForGetFingerprintCronOutput {
	s.Command = &v
	return s
}

// SetEipAddress sets the EipAddress field's value.
func (s *DataForGetFingerprintCronOutput) SetEipAddress(v string) *DataForGetFingerprintCronOutput {
	s.EipAddress = &v
	return s
}

// SetHostname sets the Hostname field's value.
func (s *DataForGetFingerprintCronOutput) SetHostname(v string) *DataForGetFingerprintCronOutput {
	s.Hostname = &v
	return s
}

// SetID sets the ID field's value.
func (s *DataForGetFingerprintCronOutput) SetID(v string) *DataForGetFingerprintCronOutput {
	s.ID = &v
	return s
}

// SetPath sets the Path field's value.
func (s *DataForGetFingerprintCronOutput) SetPath(v string) *DataForGetFingerprintCronOutput {
	s.Path = &v
	return s
}

// SetPrimaryIpAddress sets the PrimaryIpAddress field's value.
func (s *DataForGetFingerprintCronOutput) SetPrimaryIpAddress(v string) *DataForGetFingerprintCronOutput {
	s.PrimaryIpAddress = &v
	return s
}

// SetSchedule sets the Schedule field's value.
func (s *DataForGetFingerprintCronOutput) SetSchedule(v string) *DataForGetFingerprintCronOutput {
	s.Schedule = &v
	return s
}

// SetStartTime sets the StartTime field's value.
func (s *DataForGetFingerprintCronOutput) SetStartTime(v int64) *DataForGetFingerprintCronOutput {
	s.StartTime = &v
	return s
}

// SetUpdateTime sets the UpdateTime field's value.
func (s *DataForGetFingerprintCronOutput) SetUpdateTime(v int64) *DataForGetFingerprintCronOutput {
	s.UpdateTime = &v
	return s
}

// SetUsername sets the Username field's value.
func (s *DataForGetFingerprintCronOutput) SetUsername(v string) *DataForGetFingerprintCronOutput {
	s.Username = &v
	return s
}

type GetFingerprintCronInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	AgentId *string `type:"string" json:",omitempty"`

	Checksum *string `type:"string" json:",omitempty"`

	CloudProviders []*string `type:"list" json:",omitempty"`

	Command *string `type:"string" json:",omitempty"`

	Hostname *string `type:"string" json:",omitempty"`

	Ip *string `type:"string" json:",omitempty"`

	LeafGroupIDs []*string `type:"list" json:",omitempty"`

	// PageNumber is a required field
	PageNumber *int64 `type:"int64" json:",omitempty" required:"true"`

	// PageSize is a required field
	PageSize *int64 `type:"int64" json:",omitempty" required:"true"`

	Path *string `type:"string" json:",omitempty"`

	SortBy *string `type:"string" json:",omitempty"`

	SortOrder *string `type:"string" json:",omitempty"`

	Tags []*string `type:"list" json:",omitempty"`

	TopGroupID *string `type:"string" json:",omitempty"`

	Username *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s GetFingerprintCronInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetFingerprintCronInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *GetFingerprintCronInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "GetFingerprintCronInput"}
	if s.PageNumber == nil {
		invalidParams.Add(request.NewErrParamRequired("PageNumber"))
	}
	if s.PageSize == nil {
		invalidParams.Add(request.NewErrParamRequired("PageSize"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAgentId sets the AgentId field's value.
func (s *GetFingerprintCronInput) SetAgentId(v string) *GetFingerprintCronInput {
	s.AgentId = &v
	return s
}

// SetChecksum sets the Checksum field's value.
func (s *GetFingerprintCronInput) SetChecksum(v string) *GetFingerprintCronInput {
	s.Checksum = &v
	return s
}

// SetCloudProviders sets the CloudProviders field's value.
func (s *GetFingerprintCronInput) SetCloudProviders(v []*string) *GetFingerprintCronInput {
	s.CloudProviders = v
	return s
}

// SetCommand sets the Command field's value.
func (s *GetFingerprintCronInput) SetCommand(v string) *GetFingerprintCronInput {
	s.Command = &v
	return s
}

// SetHostname sets the Hostname field's value.
func (s *GetFingerprintCronInput) SetHostname(v string) *GetFingerprintCronInput {
	s.Hostname = &v
	return s
}

// SetIp sets the Ip field's value.
func (s *GetFingerprintCronInput) SetIp(v string) *GetFingerprintCronInput {
	s.Ip = &v
	return s
}

// SetLeafGroupIDs sets the LeafGroupIDs field's value.
func (s *GetFingerprintCronInput) SetLeafGroupIDs(v []*string) *GetFingerprintCronInput {
	s.LeafGroupIDs = v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *GetFingerprintCronInput) SetPageNumber(v int64) *GetFingerprintCronInput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *GetFingerprintCronInput) SetPageSize(v int64) *GetFingerprintCronInput {
	s.PageSize = &v
	return s
}

// SetPath sets the Path field's value.
func (s *GetFingerprintCronInput) SetPath(v string) *GetFingerprintCronInput {
	s.Path = &v
	return s
}

// SetSortBy sets the SortBy field's value.
func (s *GetFingerprintCronInput) SetSortBy(v string) *GetFingerprintCronInput {
	s.SortBy = &v
	return s
}

// SetSortOrder sets the SortOrder field's value.
func (s *GetFingerprintCronInput) SetSortOrder(v string) *GetFingerprintCronInput {
	s.SortOrder = &v
	return s
}

// SetTags sets the Tags field's value.
func (s *GetFingerprintCronInput) SetTags(v []*string) *GetFingerprintCronInput {
	s.Tags = v
	return s
}

// SetTopGroupID sets the TopGroupID field's value.
func (s *GetFingerprintCronInput) SetTopGroupID(v string) *GetFingerprintCronInput {
	s.TopGroupID = &v
	return s
}

// SetUsername sets the Username field's value.
func (s *GetFingerprintCronInput) SetUsername(v string) *GetFingerprintCronInput {
	s.Username = &v
	return s
}

type GetFingerprintCronOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Data []*DataForGetFingerprintCronOutput `type:"list" json:",omitempty"`

	PageNumber *int64 `type:"int64" json:",omitempty"`

	PageSize *int64 `type:"int64" json:",omitempty"`

	TotalCount *int64 `type:"int64" json:",omitempty"`
}

// String returns the string representation
func (s GetFingerprintCronOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetFingerprintCronOutput) GoString() string {
	return s.String()
}

// SetData sets the Data field's value.
func (s *GetFingerprintCronOutput) SetData(v []*DataForGetFingerprintCronOutput) *GetFingerprintCronOutput {
	s.Data = v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *GetFingerprintCronOutput) SetPageNumber(v int64) *GetFingerprintCronOutput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *GetFingerprintCronOutput) SetPageSize(v int64) *GetFingerprintCronOutput {
	s.PageSize = &v
	return s
}

// SetTotalCount sets the TotalCount field's value.
func (s *GetFingerprintCronOutput) SetTotalCount(v int64) *GetFingerprintCronOutput {
	s.TotalCount = &v
	return s
}
