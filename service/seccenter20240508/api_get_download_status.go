// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package seccenter20240508

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opGetDownloadStatusCommon = "GetDownloadStatus"

// GetDownloadStatusCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the GetDownloadStatusCommon operation. The "output" return
// value will be populated with the GetDownloadStatusCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetDownloadStatusCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetDownloadStatusCommon Send returns without error.
//
// See GetDownloadStatusCommon for more information on using the GetDownloadStatusCommon
// API call, and error handling.
//
//    // Example sending a request using the GetDownloadStatusCommonRequest method.
//    req, resp := client.GetDownloadStatusCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECCENTER20240508) GetDownloadStatusCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opGetDownloadStatusCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// GetDownloadStatusCommon API operation for SECCENTER20240508.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SECCENTER20240508's
// API operation GetDownloadStatusCommon for usage and error information.
func (c *SECCENTER20240508) GetDownloadStatusCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.GetDownloadStatusCommonRequest(input)
	return out, req.Send()
}

// GetDownloadStatusCommonWithContext is the same as GetDownloadStatusCommon with the addition of
// the ability to pass a context and additional request options.
//
// See GetDownloadStatusCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECCENTER20240508) GetDownloadStatusCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.GetDownloadStatusCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opGetDownloadStatus = "GetDownloadStatus"

// GetDownloadStatusRequest generates a "volcengine/request.Request" representing the
// client's request for the GetDownloadStatus operation. The "output" return
// value will be populated with the GetDownloadStatusCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetDownloadStatusCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetDownloadStatusCommon Send returns without error.
//
// See GetDownloadStatus for more information on using the GetDownloadStatus
// API call, and error handling.
//
//    // Example sending a request using the GetDownloadStatusRequest method.
//    req, resp := client.GetDownloadStatusRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECCENTER20240508) GetDownloadStatusRequest(input *GetDownloadStatusInput) (req *request.Request, output *GetDownloadStatusOutput) {
	op := &request.Operation{
		Name:       opGetDownloadStatus,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &GetDownloadStatusInput{}
	}

	output = &GetDownloadStatusOutput{}
	req = c.newRequest(op, input, output)

	return
}

// GetDownloadStatus API operation for SECCENTER20240508.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SECCENTER20240508's
// API operation GetDownloadStatus for usage and error information.
func (c *SECCENTER20240508) GetDownloadStatus(input *GetDownloadStatusInput) (*GetDownloadStatusOutput, error) {
	req, out := c.GetDownloadStatusRequest(input)
	return out, req.Send()
}

// GetDownloadStatusWithContext is the same as GetDownloadStatus with the addition of
// the ability to pass a context and additional request options.
//
// See GetDownloadStatus for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECCENTER20240508) GetDownloadStatusWithContext(ctx volcengine.Context, input *GetDownloadStatusInput, opts ...request.Option) (*GetDownloadStatusOutput, error) {
	req, out := c.GetDownloadStatusRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type GetDownloadStatusInput struct {
	_ struct{} `type:"structure"`

	// FileName is a required field
	FileName *string `type:"string" required:"true"`
}

// String returns the string representation
func (s GetDownloadStatusInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetDownloadStatusInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *GetDownloadStatusInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "GetDownloadStatusInput"}
	if s.FileName == nil {
		invalidParams.Add(request.NewErrParamRequired("FileName"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetFileName sets the FileName field's value.
func (s *GetDownloadStatusInput) SetFileName(v string) *GetDownloadStatusInput {
	s.FileName = &v
	return s
}

type GetDownloadStatusOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	ExportCount *int64 `type:"int64"`

	ExportTotal *int64 `type:"int64"`

	FileName *string `type:"string"`

	Status *string `type:"string"`
}

// String returns the string representation
func (s GetDownloadStatusOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetDownloadStatusOutput) GoString() string {
	return s.String()
}

// SetExportCount sets the ExportCount field's value.
func (s *GetDownloadStatusOutput) SetExportCount(v int64) *GetDownloadStatusOutput {
	s.ExportCount = &v
	return s
}

// SetExportTotal sets the ExportTotal field's value.
func (s *GetDownloadStatusOutput) SetExportTotal(v int64) *GetDownloadStatusOutput {
	s.ExportTotal = &v
	return s
}

// SetFileName sets the FileName field's value.
func (s *GetDownloadStatusOutput) SetFileName(v string) *GetDownloadStatusOutput {
	s.FileName = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *GetDownloadStatusOutput) SetStatus(v string) *GetDownloadStatusOutput {
	s.Status = &v
	return s
}
