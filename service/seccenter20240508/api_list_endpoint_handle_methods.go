// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package seccenter20240508

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opListEndpointHandleMethodsCommon = "ListEndpointHandleMethods"

// ListEndpointHandleMethodsCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ListEndpointHandleMethodsCommon operation. The "output" return
// value will be populated with the ListEndpointHandleMethodsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListEndpointHandleMethodsCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListEndpointHandleMethodsCommon Send returns without error.
//
// See ListEndpointHandleMethodsCommon for more information on using the ListEndpointHandleMethodsCommon
// API call, and error handling.
//
//    // Example sending a request using the ListEndpointHandleMethodsCommonRequest method.
//    req, resp := client.ListEndpointHandleMethodsCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECCENTER20240508) ListEndpointHandleMethodsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opListEndpointHandleMethodsCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListEndpointHandleMethodsCommon API operation for SECCENTER20240508.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SECCENTER20240508's
// API operation ListEndpointHandleMethodsCommon for usage and error information.
func (c *SECCENTER20240508) ListEndpointHandleMethodsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ListEndpointHandleMethodsCommonRequest(input)
	return out, req.Send()
}

// ListEndpointHandleMethodsCommonWithContext is the same as ListEndpointHandleMethodsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ListEndpointHandleMethodsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECCENTER20240508) ListEndpointHandleMethodsCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ListEndpointHandleMethodsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListEndpointHandleMethods = "ListEndpointHandleMethods"

// ListEndpointHandleMethodsRequest generates a "volcengine/request.Request" representing the
// client's request for the ListEndpointHandleMethods operation. The "output" return
// value will be populated with the ListEndpointHandleMethodsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListEndpointHandleMethodsCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListEndpointHandleMethodsCommon Send returns without error.
//
// See ListEndpointHandleMethods for more information on using the ListEndpointHandleMethods
// API call, and error handling.
//
//    // Example sending a request using the ListEndpointHandleMethodsRequest method.
//    req, resp := client.ListEndpointHandleMethodsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECCENTER20240508) ListEndpointHandleMethodsRequest(input *ListEndpointHandleMethodsInput) (req *request.Request, output *ListEndpointHandleMethodsOutput) {
	op := &request.Operation{
		Name:       opListEndpointHandleMethods,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListEndpointHandleMethodsInput{}
	}

	output = &ListEndpointHandleMethodsOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListEndpointHandleMethods API operation for SECCENTER20240508.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SECCENTER20240508's
// API operation ListEndpointHandleMethods for usage and error information.
func (c *SECCENTER20240508) ListEndpointHandleMethods(input *ListEndpointHandleMethodsInput) (*ListEndpointHandleMethodsOutput, error) {
	req, out := c.ListEndpointHandleMethodsRequest(input)
	return out, req.Send()
}

// ListEndpointHandleMethodsWithContext is the same as ListEndpointHandleMethods with the addition of
// the ability to pass a context and additional request options.
//
// See ListEndpointHandleMethods for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECCENTER20240508) ListEndpointHandleMethodsWithContext(ctx volcengine.Context, input *ListEndpointHandleMethodsInput, opts ...request.Option) (*ListEndpointHandleMethodsOutput, error) {
	req, out := c.ListEndpointHandleMethodsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ListEndpointHandleMethodsInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	AlarmID *string `type:"string" json:",omitempty"`

	AlarmType *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ListEndpointHandleMethodsInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListEndpointHandleMethodsInput) GoString() string {
	return s.String()
}

// SetAlarmID sets the AlarmID field's value.
func (s *ListEndpointHandleMethodsInput) SetAlarmID(v string) *ListEndpointHandleMethodsInput {
	s.AlarmID = &v
	return s
}

// SetAlarmType sets the AlarmType field's value.
func (s *ListEndpointHandleMethodsInput) SetAlarmType(v string) *ListEndpointHandleMethodsInput {
	s.AlarmType = &v
	return s
}

type ListEndpointHandleMethodsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	FileList []*string `type:"list" json:",omitempty"`

	NotSupportReason *string `type:"string" json:",omitempty"`

	ProcList []*ProcListForListEndpointHandleMethodsOutput `type:"list" json:",omitempty"`

	Support *bool `type:"boolean" json:",omitempty"`
}

// String returns the string representation
func (s ListEndpointHandleMethodsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListEndpointHandleMethodsOutput) GoString() string {
	return s.String()
}

// SetFileList sets the FileList field's value.
func (s *ListEndpointHandleMethodsOutput) SetFileList(v []*string) *ListEndpointHandleMethodsOutput {
	s.FileList = v
	return s
}

// SetNotSupportReason sets the NotSupportReason field's value.
func (s *ListEndpointHandleMethodsOutput) SetNotSupportReason(v string) *ListEndpointHandleMethodsOutput {
	s.NotSupportReason = &v
	return s
}

// SetProcList sets the ProcList field's value.
func (s *ListEndpointHandleMethodsOutput) SetProcList(v []*ProcListForListEndpointHandleMethodsOutput) *ListEndpointHandleMethodsOutput {
	s.ProcList = v
	return s
}

// SetSupport sets the Support field's value.
func (s *ListEndpointHandleMethodsOutput) SetSupport(v bool) *ListEndpointHandleMethodsOutput {
	s.Support = &v
	return s
}

type ProcListForListEndpointHandleMethodsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Cmdline *string `type:"string" json:",omitempty"`

	Exe *string `type:"string" json:",omitempty"`

	Pid *int64 `type:"int64" json:",omitempty"`
}

// String returns the string representation
func (s ProcListForListEndpointHandleMethodsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ProcListForListEndpointHandleMethodsOutput) GoString() string {
	return s.String()
}

// SetCmdline sets the Cmdline field's value.
func (s *ProcListForListEndpointHandleMethodsOutput) SetCmdline(v string) *ProcListForListEndpointHandleMethodsOutput {
	s.Cmdline = &v
	return s
}

// SetExe sets the Exe field's value.
func (s *ProcListForListEndpointHandleMethodsOutput) SetExe(v string) *ProcListForListEndpointHandleMethodsOutput {
	s.Exe = &v
	return s
}

// SetPid sets the Pid field's value.
func (s *ProcListForListEndpointHandleMethodsOutput) SetPid(v int64) *ProcListForListEndpointHandleMethodsOutput {
	s.Pid = &v
	return s
}
