// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package seccenter20240508

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opGetRaspConfigStatisticsCommon = "GetRaspConfigStatistics"

// GetRaspConfigStatisticsCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the GetRaspConfigStatisticsCommon operation. The "output" return
// value will be populated with the GetRaspConfigStatisticsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetRaspConfigStatisticsCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetRaspConfigStatisticsCommon Send returns without error.
//
// See GetRaspConfigStatisticsCommon for more information on using the GetRaspConfigStatisticsCommon
// API call, and error handling.
//
//    // Example sending a request using the GetRaspConfigStatisticsCommonRequest method.
//    req, resp := client.GetRaspConfigStatisticsCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECCENTER20240508) GetRaspConfigStatisticsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opGetRaspConfigStatisticsCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// GetRaspConfigStatisticsCommon API operation for SECCENTER20240508.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SECCENTER20240508's
// API operation GetRaspConfigStatisticsCommon for usage and error information.
func (c *SECCENTER20240508) GetRaspConfigStatisticsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.GetRaspConfigStatisticsCommonRequest(input)
	return out, req.Send()
}

// GetRaspConfigStatisticsCommonWithContext is the same as GetRaspConfigStatisticsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See GetRaspConfigStatisticsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECCENTER20240508) GetRaspConfigStatisticsCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.GetRaspConfigStatisticsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opGetRaspConfigStatistics = "GetRaspConfigStatistics"

// GetRaspConfigStatisticsRequest generates a "volcengine/request.Request" representing the
// client's request for the GetRaspConfigStatistics operation. The "output" return
// value will be populated with the GetRaspConfigStatisticsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetRaspConfigStatisticsCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetRaspConfigStatisticsCommon Send returns without error.
//
// See GetRaspConfigStatistics for more information on using the GetRaspConfigStatistics
// API call, and error handling.
//
//    // Example sending a request using the GetRaspConfigStatisticsRequest method.
//    req, resp := client.GetRaspConfigStatisticsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECCENTER20240508) GetRaspConfigStatisticsRequest(input *GetRaspConfigStatisticsInput) (req *request.Request, output *GetRaspConfigStatisticsOutput) {
	op := &request.Operation{
		Name:       opGetRaspConfigStatistics,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &GetRaspConfigStatisticsInput{}
	}

	output = &GetRaspConfigStatisticsOutput{}
	req = c.newRequest(op, input, output)

	return
}

// GetRaspConfigStatistics API operation for SECCENTER20240508.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SECCENTER20240508's
// API operation GetRaspConfigStatistics for usage and error information.
func (c *SECCENTER20240508) GetRaspConfigStatistics(input *GetRaspConfigStatisticsInput) (*GetRaspConfigStatisticsOutput, error) {
	req, out := c.GetRaspConfigStatisticsRequest(input)
	return out, req.Send()
}

// GetRaspConfigStatisticsWithContext is the same as GetRaspConfigStatistics with the addition of
// the ability to pass a context and additional request options.
//
// See GetRaspConfigStatistics for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECCENTER20240508) GetRaspConfigStatisticsWithContext(ctx volcengine.Context, input *GetRaspConfigStatisticsInput, opts ...request.Option) (*GetRaspConfigStatisticsOutput, error) {
	req, out := c.GetRaspConfigStatisticsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type GetRaspConfigStatisticsInput struct {
	_ struct{} `type:"structure"`

	TopGroupID *string `type:"string"`
}

// String returns the string representation
func (s GetRaspConfigStatisticsInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetRaspConfigStatisticsInput) GoString() string {
	return s.String()
}

// SetTopGroupID sets the TopGroupID field's value.
func (s *GetRaspConfigStatisticsInput) SetTopGroupID(v string) *GetRaspConfigStatisticsInput {
	s.TopGroupID = &v
	return s
}

type GetRaspConfigStatisticsOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	ProcessWhiteListCount *int64 `type:"int64"`

	RaspCloseCount *int64 `type:"int64"`
}

// String returns the string representation
func (s GetRaspConfigStatisticsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetRaspConfigStatisticsOutput) GoString() string {
	return s.String()
}

// SetProcessWhiteListCount sets the ProcessWhiteListCount field's value.
func (s *GetRaspConfigStatisticsOutput) SetProcessWhiteListCount(v int64) *GetRaspConfigStatisticsOutput {
	s.ProcessWhiteListCount = &v
	return s
}

// SetRaspCloseCount sets the RaspCloseCount field's value.
func (s *GetRaspConfigStatisticsOutput) SetRaspCloseCount(v int64) *GetRaspConfigStatisticsOutput {
	s.RaspCloseCount = &v
	return s
}
