// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package seccenter20240508

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opHandleAlarmByAgentCommon = "HandleAlarmByAgent"

// HandleAlarmByAgentCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the HandleAlarmByAgentCommon operation. The "output" return
// value will be populated with the HandleAlarmByAgentCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned HandleAlarmByAgentCommon Request to send the API call to the service.
// the "output" return value is not valid until after HandleAlarmByAgentCommon Send returns without error.
//
// See HandleAlarmByAgentCommon for more information on using the HandleAlarmByAgentCommon
// API call, and error handling.
//
//    // Example sending a request using the HandleAlarmByAgentCommonRequest method.
//    req, resp := client.HandleAlarmByAgentCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECCENTER20240508) HandleAlarmByAgentCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opHandleAlarmByAgentCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// HandleAlarmByAgentCommon API operation for SECCENTER20240508.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SECCENTER20240508's
// API operation HandleAlarmByAgentCommon for usage and error information.
func (c *SECCENTER20240508) HandleAlarmByAgentCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.HandleAlarmByAgentCommonRequest(input)
	return out, req.Send()
}

// HandleAlarmByAgentCommonWithContext is the same as HandleAlarmByAgentCommon with the addition of
// the ability to pass a context and additional request options.
//
// See HandleAlarmByAgentCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECCENTER20240508) HandleAlarmByAgentCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.HandleAlarmByAgentCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opHandleAlarmByAgent = "HandleAlarmByAgent"

// HandleAlarmByAgentRequest generates a "volcengine/request.Request" representing the
// client's request for the HandleAlarmByAgent operation. The "output" return
// value will be populated with the HandleAlarmByAgentCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned HandleAlarmByAgentCommon Request to send the API call to the service.
// the "output" return value is not valid until after HandleAlarmByAgentCommon Send returns without error.
//
// See HandleAlarmByAgent for more information on using the HandleAlarmByAgent
// API call, and error handling.
//
//    // Example sending a request using the HandleAlarmByAgentRequest method.
//    req, resp := client.HandleAlarmByAgentRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECCENTER20240508) HandleAlarmByAgentRequest(input *HandleAlarmByAgentInput) (req *request.Request, output *HandleAlarmByAgentOutput) {
	op := &request.Operation{
		Name:       opHandleAlarmByAgent,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &HandleAlarmByAgentInput{}
	}

	output = &HandleAlarmByAgentOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// HandleAlarmByAgent API operation for SECCENTER20240508.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SECCENTER20240508's
// API operation HandleAlarmByAgent for usage and error information.
func (c *SECCENTER20240508) HandleAlarmByAgent(input *HandleAlarmByAgentInput) (*HandleAlarmByAgentOutput, error) {
	req, out := c.HandleAlarmByAgentRequest(input)
	return out, req.Send()
}

// HandleAlarmByAgentWithContext is the same as HandleAlarmByAgent with the addition of
// the ability to pass a context and additional request options.
//
// See HandleAlarmByAgent for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECCENTER20240508) HandleAlarmByAgentWithContext(ctx volcengine.Context, input *HandleAlarmByAgentInput, opts ...request.Option) (*HandleAlarmByAgentOutput, error) {
	req, out := c.HandleAlarmByAgentRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type FileForHandleAlarmByAgentInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Action *string `type:"string" json:",omitempty"`

	FilePath *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s FileForHandleAlarmByAgentInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s FileForHandleAlarmByAgentInput) GoString() string {
	return s.String()
}

// SetAction sets the Action field's value.
func (s *FileForHandleAlarmByAgentInput) SetAction(v string) *FileForHandleAlarmByAgentInput {
	s.Action = &v
	return s
}

// SetFilePath sets the FilePath field's value.
func (s *FileForHandleAlarmByAgentInput) SetFilePath(v string) *FileForHandleAlarmByAgentInput {
	s.FilePath = &v
	return s
}

type HandleAlarmByAgentInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	AlarmID *string `type:"string" json:",omitempty"`

	// AlarmType is a required field
	AlarmType *string `type:"string" json:",omitempty" required:"true" enum:"EnumOfAlarmTypeForHandleAlarmByAgentInput"`

	Files []*FileForHandleAlarmByAgentInput `type:"list" json:",omitempty"`

	Processes []*ProcessForHandleAlarmByAgentInput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s HandleAlarmByAgentInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s HandleAlarmByAgentInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *HandleAlarmByAgentInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "HandleAlarmByAgentInput"}
	if s.AlarmType == nil {
		invalidParams.Add(request.NewErrParamRequired("AlarmType"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAlarmID sets the AlarmID field's value.
func (s *HandleAlarmByAgentInput) SetAlarmID(v string) *HandleAlarmByAgentInput {
	s.AlarmID = &v
	return s
}

// SetAlarmType sets the AlarmType field's value.
func (s *HandleAlarmByAgentInput) SetAlarmType(v string) *HandleAlarmByAgentInput {
	s.AlarmType = &v
	return s
}

// SetFiles sets the Files field's value.
func (s *HandleAlarmByAgentInput) SetFiles(v []*FileForHandleAlarmByAgentInput) *HandleAlarmByAgentInput {
	s.Files = v
	return s
}

// SetProcesses sets the Processes field's value.
func (s *HandleAlarmByAgentInput) SetProcesses(v []*ProcessForHandleAlarmByAgentInput) *HandleAlarmByAgentInput {
	s.Processes = v
	return s
}

type HandleAlarmByAgentOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Data *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s HandleAlarmByAgentOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s HandleAlarmByAgentOutput) GoString() string {
	return s.String()
}

// SetData sets the Data field's value.
func (s *HandleAlarmByAgentOutput) SetData(v string) *HandleAlarmByAgentOutput {
	s.Data = &v
	return s
}

type ProcessForHandleAlarmByAgentInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Cmdline *string `type:"string" json:",omitempty"`

	Exe *string `type:"string" json:",omitempty"`

	Pid *int64 `type:"int64" json:",omitempty"`
}

// String returns the string representation
func (s ProcessForHandleAlarmByAgentInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ProcessForHandleAlarmByAgentInput) GoString() string {
	return s.String()
}

// SetCmdline sets the Cmdline field's value.
func (s *ProcessForHandleAlarmByAgentInput) SetCmdline(v string) *ProcessForHandleAlarmByAgentInput {
	s.Cmdline = &v
	return s
}

// SetExe sets the Exe field's value.
func (s *ProcessForHandleAlarmByAgentInput) SetExe(v string) *ProcessForHandleAlarmByAgentInput {
	s.Exe = &v
	return s
}

// SetPid sets the Pid field's value.
func (s *ProcessForHandleAlarmByAgentInput) SetPid(v int64) *ProcessForHandleAlarmByAgentInput {
	s.Pid = &v
	return s
}

const (
	// EnumOfAlarmTypeForHandleAlarmByAgentInputHids is a EnumOfAlarmTypeForHandleAlarmByAgentInput enum value
	EnumOfAlarmTypeForHandleAlarmByAgentInputHids = "hids"

	// EnumOfAlarmTypeForHandleAlarmByAgentInputVirus is a EnumOfAlarmTypeForHandleAlarmByAgentInput enum value
	EnumOfAlarmTypeForHandleAlarmByAgentInputVirus = "virus"
)
