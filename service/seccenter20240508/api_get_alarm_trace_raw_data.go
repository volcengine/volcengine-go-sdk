// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package seccenter20240508

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opGetAlarmTraceRawDataCommon = "GetAlarmTraceRawData"

// GetAlarmTraceRawDataCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the GetAlarmTraceRawDataCommon operation. The "output" return
// value will be populated with the GetAlarmTraceRawDataCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetAlarmTraceRawDataCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetAlarmTraceRawDataCommon Send returns without error.
//
// See GetAlarmTraceRawDataCommon for more information on using the GetAlarmTraceRawDataCommon
// API call, and error handling.
//
//    // Example sending a request using the GetAlarmTraceRawDataCommonRequest method.
//    req, resp := client.GetAlarmTraceRawDataCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECCENTER20240508) GetAlarmTraceRawDataCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opGetAlarmTraceRawDataCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetAlarmTraceRawDataCommon API operation for SECCENTER20240508.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SECCENTER20240508's
// API operation GetAlarmTraceRawDataCommon for usage and error information.
func (c *SECCENTER20240508) GetAlarmTraceRawDataCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.GetAlarmTraceRawDataCommonRequest(input)
	return out, req.Send()
}

// GetAlarmTraceRawDataCommonWithContext is the same as GetAlarmTraceRawDataCommon with the addition of
// the ability to pass a context and additional request options.
//
// See GetAlarmTraceRawDataCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECCENTER20240508) GetAlarmTraceRawDataCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.GetAlarmTraceRawDataCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opGetAlarmTraceRawData = "GetAlarmTraceRawData"

// GetAlarmTraceRawDataRequest generates a "volcengine/request.Request" representing the
// client's request for the GetAlarmTraceRawData operation. The "output" return
// value will be populated with the GetAlarmTraceRawDataCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetAlarmTraceRawDataCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetAlarmTraceRawDataCommon Send returns without error.
//
// See GetAlarmTraceRawData for more information on using the GetAlarmTraceRawData
// API call, and error handling.
//
//    // Example sending a request using the GetAlarmTraceRawDataRequest method.
//    req, resp := client.GetAlarmTraceRawDataRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECCENTER20240508) GetAlarmTraceRawDataRequest(input *GetAlarmTraceRawDataInput) (req *request.Request, output *GetAlarmTraceRawDataOutput) {
	op := &request.Operation{
		Name:       opGetAlarmTraceRawData,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &GetAlarmTraceRawDataInput{}
	}

	output = &GetAlarmTraceRawDataOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetAlarmTraceRawData API operation for SECCENTER20240508.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SECCENTER20240508's
// API operation GetAlarmTraceRawData for usage and error information.
func (c *SECCENTER20240508) GetAlarmTraceRawData(input *GetAlarmTraceRawDataInput) (*GetAlarmTraceRawDataOutput, error) {
	req, out := c.GetAlarmTraceRawDataRequest(input)
	return out, req.Send()
}

// GetAlarmTraceRawDataWithContext is the same as GetAlarmTraceRawData with the addition of
// the ability to pass a context and additional request options.
//
// See GetAlarmTraceRawData for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECCENTER20240508) GetAlarmTraceRawDataWithContext(ctx volcengine.Context, input *GetAlarmTraceRawDataInput, opts ...request.Option) (*GetAlarmTraceRawDataOutput, error) {
	req, out := c.GetAlarmTraceRawDataRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ConvertDataForGetAlarmTraceRawDataOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Data *DataForGetAlarmTraceRawDataOutput `type:"structure" json:",omitempty"`
}

// String returns the string representation
func (s ConvertDataForGetAlarmTraceRawDataOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ConvertDataForGetAlarmTraceRawDataOutput) GoString() string {
	return s.String()
}

// SetData sets the Data field's value.
func (s *ConvertDataForGetAlarmTraceRawDataOutput) SetData(v *DataForGetAlarmTraceRawDataOutput) *ConvertDataForGetAlarmTraceRawDataOutput {
	s.Data = v
	return s
}

type DataForGetAlarmTraceRawDataOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`
}

// String returns the string representation
func (s DataForGetAlarmTraceRawDataOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DataForGetAlarmTraceRawDataOutput) GoString() string {
	return s.String()
}

type GetAlarmTraceRawDataInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	DataID []*string `type:"list" json:",omitempty"`

	DataType []*string `type:"list" json:",omitempty"`

	OriginDataID []*string `type:"list" json:",omitempty"`

	// PageNumber is a required field
	PageNumber *int64 `type:"int64" json:",omitempty" required:"true"`

	// PageSize is a required field
	PageSize *int64 `type:"int64" json:",omitempty" required:"true"`

	RaspDataType []*string `type:"list" json:",omitempty"`

	SortBy *string `type:"string" json:",omitempty"`

	SortOrder *string `type:"string" json:",omitempty"`

	TraceID *string `type:"string" json:",omitempty"`

	Type *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s GetAlarmTraceRawDataInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetAlarmTraceRawDataInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *GetAlarmTraceRawDataInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "GetAlarmTraceRawDataInput"}
	if s.PageNumber == nil {
		invalidParams.Add(request.NewErrParamRequired("PageNumber"))
	}
	if s.PageSize == nil {
		invalidParams.Add(request.NewErrParamRequired("PageSize"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDataID sets the DataID field's value.
func (s *GetAlarmTraceRawDataInput) SetDataID(v []*string) *GetAlarmTraceRawDataInput {
	s.DataID = v
	return s
}

// SetDataType sets the DataType field's value.
func (s *GetAlarmTraceRawDataInput) SetDataType(v []*string) *GetAlarmTraceRawDataInput {
	s.DataType = v
	return s
}

// SetOriginDataID sets the OriginDataID field's value.
func (s *GetAlarmTraceRawDataInput) SetOriginDataID(v []*string) *GetAlarmTraceRawDataInput {
	s.OriginDataID = v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *GetAlarmTraceRawDataInput) SetPageNumber(v int64) *GetAlarmTraceRawDataInput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *GetAlarmTraceRawDataInput) SetPageSize(v int64) *GetAlarmTraceRawDataInput {
	s.PageSize = &v
	return s
}

// SetRaspDataType sets the RaspDataType field's value.
func (s *GetAlarmTraceRawDataInput) SetRaspDataType(v []*string) *GetAlarmTraceRawDataInput {
	s.RaspDataType = v
	return s
}

// SetSortBy sets the SortBy field's value.
func (s *GetAlarmTraceRawDataInput) SetSortBy(v string) *GetAlarmTraceRawDataInput {
	s.SortBy = &v
	return s
}

// SetSortOrder sets the SortOrder field's value.
func (s *GetAlarmTraceRawDataInput) SetSortOrder(v string) *GetAlarmTraceRawDataInput {
	s.SortOrder = &v
	return s
}

// SetTraceID sets the TraceID field's value.
func (s *GetAlarmTraceRawDataInput) SetTraceID(v string) *GetAlarmTraceRawDataInput {
	s.TraceID = &v
	return s
}

// SetType sets the Type field's value.
func (s *GetAlarmTraceRawDataInput) SetType(v string) *GetAlarmTraceRawDataInput {
	s.Type = &v
	return s
}

type GetAlarmTraceRawDataOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Data []*ConvertDataForGetAlarmTraceRawDataOutput `type:"list" json:",omitempty"`

	PageNumber *int64 `type:"int64" json:",omitempty"`

	PageSize *int64 `type:"int64" json:",omitempty"`

	TotalCount *int64 `type:"int64" json:",omitempty"`
}

// String returns the string representation
func (s GetAlarmTraceRawDataOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetAlarmTraceRawDataOutput) GoString() string {
	return s.String()
}

// SetData sets the Data field's value.
func (s *GetAlarmTraceRawDataOutput) SetData(v []*ConvertDataForGetAlarmTraceRawDataOutput) *GetAlarmTraceRawDataOutput {
	s.Data = v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *GetAlarmTraceRawDataOutput) SetPageNumber(v int64) *GetAlarmTraceRawDataOutput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *GetAlarmTraceRawDataOutput) SetPageSize(v int64) *GetAlarmTraceRawDataOutput {
	s.PageSize = &v
	return s
}

// SetTotalCount sets the TotalCount field's value.
func (s *GetAlarmTraceRawDataOutput) SetTotalCount(v int64) *GetAlarmTraceRawDataOutput {
	s.TotalCount = &v
	return s
}
