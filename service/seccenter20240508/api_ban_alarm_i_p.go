// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package seccenter20240508

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opBanAlarmIPCommon = "BanAlarmIP"

// BanAlarmIPCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the BanAlarmIPCommon operation. The "output" return
// value will be populated with the BanAlarmIPCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned BanAlarmIPCommon Request to send the API call to the service.
// the "output" return value is not valid until after BanAlarmIPCommon Send returns without error.
//
// See BanAlarmIPCommon for more information on using the BanAlarmIPCommon
// API call, and error handling.
//
//    // Example sending a request using the BanAlarmIPCommonRequest method.
//    req, resp := client.BanAlarmIPCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECCENTER20240508) BanAlarmIPCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opBanAlarmIPCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// BanAlarmIPCommon API operation for SECCENTER20240508.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SECCENTER20240508's
// API operation BanAlarmIPCommon for usage and error information.
func (c *SECCENTER20240508) BanAlarmIPCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.BanAlarmIPCommonRequest(input)
	return out, req.Send()
}

// BanAlarmIPCommonWithContext is the same as BanAlarmIPCommon with the addition of
// the ability to pass a context and additional request options.
//
// See BanAlarmIPCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECCENTER20240508) BanAlarmIPCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.BanAlarmIPCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opBanAlarmIP = "BanAlarmIP"

// BanAlarmIPRequest generates a "volcengine/request.Request" representing the
// client's request for the BanAlarmIP operation. The "output" return
// value will be populated with the BanAlarmIPCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned BanAlarmIPCommon Request to send the API call to the service.
// the "output" return value is not valid until after BanAlarmIPCommon Send returns without error.
//
// See BanAlarmIP for more information on using the BanAlarmIP
// API call, and error handling.
//
//    // Example sending a request using the BanAlarmIPRequest method.
//    req, resp := client.BanAlarmIPRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECCENTER20240508) BanAlarmIPRequest(input *BanAlarmIPInput) (req *request.Request, output *BanAlarmIPOutput) {
	op := &request.Operation{
		Name:       opBanAlarmIP,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &BanAlarmIPInput{}
	}

	output = &BanAlarmIPOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// BanAlarmIP API operation for SECCENTER20240508.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SECCENTER20240508's
// API operation BanAlarmIP for usage and error information.
func (c *SECCENTER20240508) BanAlarmIP(input *BanAlarmIPInput) (*BanAlarmIPOutput, error) {
	req, out := c.BanAlarmIPRequest(input)
	return out, req.Send()
}

// BanAlarmIPWithContext is the same as BanAlarmIP with the addition of
// the ability to pass a context and additional request options.
//
// See BanAlarmIP for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECCENTER20240508) BanAlarmIPWithContext(ctx volcengine.Context, input *BanAlarmIPInput, opts ...request.Option) (*BanAlarmIPOutput, error) {
	req, out := c.BanAlarmIPRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type BanAlarmIPInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	AlarmID *string `type:"string" json:",omitempty"`

	AlarmType *string `type:"string" json:",omitempty"`

	BanTime *int64 `type:"int64" json:",omitempty"`
}

// String returns the string representation
func (s BanAlarmIPInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s BanAlarmIPInput) GoString() string {
	return s.String()
}

// SetAlarmID sets the AlarmID field's value.
func (s *BanAlarmIPInput) SetAlarmID(v string) *BanAlarmIPInput {
	s.AlarmID = &v
	return s
}

// SetAlarmType sets the AlarmType field's value.
func (s *BanAlarmIPInput) SetAlarmType(v string) *BanAlarmIPInput {
	s.AlarmType = &v
	return s
}

// SetBanTime sets the BanTime field's value.
func (s *BanAlarmIPInput) SetBanTime(v int64) *BanAlarmIPInput {
	s.BanTime = &v
	return s
}

type BanAlarmIPOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Success *bool `type:"boolean" json:"success,omitempty"`
}

// String returns the string representation
func (s BanAlarmIPOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s BanAlarmIPOutput) GoString() string {
	return s.String()
}

// SetSuccess sets the Success field's value.
func (s *BanAlarmIPOutput) SetSuccess(v bool) *BanAlarmIPOutput {
	s.Success = &v
	return s
}
