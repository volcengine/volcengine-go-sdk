// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package seccenter20240508

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opGetFingerprintPortCommon = "GetFingerprintPort"

// GetFingerprintPortCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the GetFingerprintPortCommon operation. The "output" return
// value will be populated with the GetFingerprintPortCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetFingerprintPortCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetFingerprintPortCommon Send returns without error.
//
// See GetFingerprintPortCommon for more information on using the GetFingerprintPortCommon
// API call, and error handling.
//
//    // Example sending a request using the GetFingerprintPortCommonRequest method.
//    req, resp := client.GetFingerprintPortCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECCENTER20240508) GetFingerprintPortCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opGetFingerprintPortCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetFingerprintPortCommon API operation for SECCENTER20240508.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SECCENTER20240508's
// API operation GetFingerprintPortCommon for usage and error information.
func (c *SECCENTER20240508) GetFingerprintPortCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.GetFingerprintPortCommonRequest(input)
	return out, req.Send()
}

// GetFingerprintPortCommonWithContext is the same as GetFingerprintPortCommon with the addition of
// the ability to pass a context and additional request options.
//
// See GetFingerprintPortCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECCENTER20240508) GetFingerprintPortCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.GetFingerprintPortCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opGetFingerprintPort = "GetFingerprintPort"

// GetFingerprintPortRequest generates a "volcengine/request.Request" representing the
// client's request for the GetFingerprintPort operation. The "output" return
// value will be populated with the GetFingerprintPortCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetFingerprintPortCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetFingerprintPortCommon Send returns without error.
//
// See GetFingerprintPort for more information on using the GetFingerprintPort
// API call, and error handling.
//
//    // Example sending a request using the GetFingerprintPortRequest method.
//    req, resp := client.GetFingerprintPortRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECCENTER20240508) GetFingerprintPortRequest(input *GetFingerprintPortInput) (req *request.Request, output *GetFingerprintPortOutput) {
	op := &request.Operation{
		Name:       opGetFingerprintPort,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &GetFingerprintPortInput{}
	}

	output = &GetFingerprintPortOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetFingerprintPort API operation for SECCENTER20240508.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SECCENTER20240508's
// API operation GetFingerprintPort for usage and error information.
func (c *SECCENTER20240508) GetFingerprintPort(input *GetFingerprintPortInput) (*GetFingerprintPortOutput, error) {
	req, out := c.GetFingerprintPortRequest(input)
	return out, req.Send()
}

// GetFingerprintPortWithContext is the same as GetFingerprintPort with the addition of
// the ability to pass a context and additional request options.
//
// See GetFingerprintPort for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECCENTER20240508) GetFingerprintPortWithContext(ctx volcengine.Context, input *GetFingerprintPortInput, opts ...request.Option) (*GetFingerprintPortOutput, error) {
	req, out := c.GetFingerprintPortRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DataForGetFingerprintPortOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	AgentID *string `type:"string" json:",omitempty"`

	AgentTags []*string `type:"list" json:",omitempty"`

	Cmdline *string `type:"string" json:",omitempty"`

	Comm *string `type:"string" json:",omitempty"`

	ContainerID *string `type:"string" json:",omitempty"`

	ContainerName *string `type:"string" json:",omitempty"`

	Dip *string `type:"string" json:",omitempty"`

	Dport *string `type:"string" json:",omitempty"`

	EipAddress *string `type:"string" json:",omitempty"`

	Exe *string `type:"string" json:",omitempty"`

	Family *string `type:"string" json:",omitempty"`

	Hostname *string `type:"string" json:",omitempty"`

	ID *string `type:"string" json:",omitempty"`

	Inode *string `type:"string" json:",omitempty"`

	Interface *string `type:"string" json:",omitempty"`

	Pid *string `type:"string" json:",omitempty"`

	PrimaryIpAddress *string `type:"string" json:",omitempty"`

	Sip *string `type:"string" json:",omitempty"`

	Sport *string `type:"string" json:",omitempty"`

	StartTime *int64 `type:"int64" json:",omitempty"`

	State *string `type:"string" json:",omitempty"`

	Type *int64 `type:"int64" json:",omitempty"`

	Uid *string `type:"string" json:",omitempty"`

	UpdateTime *int64 `type:"int64" json:",omitempty"`

	Username *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s DataForGetFingerprintPortOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DataForGetFingerprintPortOutput) GoString() string {
	return s.String()
}

// SetAgentID sets the AgentID field's value.
func (s *DataForGetFingerprintPortOutput) SetAgentID(v string) *DataForGetFingerprintPortOutput {
	s.AgentID = &v
	return s
}

// SetAgentTags sets the AgentTags field's value.
func (s *DataForGetFingerprintPortOutput) SetAgentTags(v []*string) *DataForGetFingerprintPortOutput {
	s.AgentTags = v
	return s
}

// SetCmdline sets the Cmdline field's value.
func (s *DataForGetFingerprintPortOutput) SetCmdline(v string) *DataForGetFingerprintPortOutput {
	s.Cmdline = &v
	return s
}

// SetComm sets the Comm field's value.
func (s *DataForGetFingerprintPortOutput) SetComm(v string) *DataForGetFingerprintPortOutput {
	s.Comm = &v
	return s
}

// SetContainerID sets the ContainerID field's value.
func (s *DataForGetFingerprintPortOutput) SetContainerID(v string) *DataForGetFingerprintPortOutput {
	s.ContainerID = &v
	return s
}

// SetContainerName sets the ContainerName field's value.
func (s *DataForGetFingerprintPortOutput) SetContainerName(v string) *DataForGetFingerprintPortOutput {
	s.ContainerName = &v
	return s
}

// SetDip sets the Dip field's value.
func (s *DataForGetFingerprintPortOutput) SetDip(v string) *DataForGetFingerprintPortOutput {
	s.Dip = &v
	return s
}

// SetDport sets the Dport field's value.
func (s *DataForGetFingerprintPortOutput) SetDport(v string) *DataForGetFingerprintPortOutput {
	s.Dport = &v
	return s
}

// SetEipAddress sets the EipAddress field's value.
func (s *DataForGetFingerprintPortOutput) SetEipAddress(v string) *DataForGetFingerprintPortOutput {
	s.EipAddress = &v
	return s
}

// SetExe sets the Exe field's value.
func (s *DataForGetFingerprintPortOutput) SetExe(v string) *DataForGetFingerprintPortOutput {
	s.Exe = &v
	return s
}

// SetFamily sets the Family field's value.
func (s *DataForGetFingerprintPortOutput) SetFamily(v string) *DataForGetFingerprintPortOutput {
	s.Family = &v
	return s
}

// SetHostname sets the Hostname field's value.
func (s *DataForGetFingerprintPortOutput) SetHostname(v string) *DataForGetFingerprintPortOutput {
	s.Hostname = &v
	return s
}

// SetID sets the ID field's value.
func (s *DataForGetFingerprintPortOutput) SetID(v string) *DataForGetFingerprintPortOutput {
	s.ID = &v
	return s
}

// SetInode sets the Inode field's value.
func (s *DataForGetFingerprintPortOutput) SetInode(v string) *DataForGetFingerprintPortOutput {
	s.Inode = &v
	return s
}

// SetInterface sets the Interface field's value.
func (s *DataForGetFingerprintPortOutput) SetInterface(v string) *DataForGetFingerprintPortOutput {
	s.Interface = &v
	return s
}

// SetPid sets the Pid field's value.
func (s *DataForGetFingerprintPortOutput) SetPid(v string) *DataForGetFingerprintPortOutput {
	s.Pid = &v
	return s
}

// SetPrimaryIpAddress sets the PrimaryIpAddress field's value.
func (s *DataForGetFingerprintPortOutput) SetPrimaryIpAddress(v string) *DataForGetFingerprintPortOutput {
	s.PrimaryIpAddress = &v
	return s
}

// SetSip sets the Sip field's value.
func (s *DataForGetFingerprintPortOutput) SetSip(v string) *DataForGetFingerprintPortOutput {
	s.Sip = &v
	return s
}

// SetSport sets the Sport field's value.
func (s *DataForGetFingerprintPortOutput) SetSport(v string) *DataForGetFingerprintPortOutput {
	s.Sport = &v
	return s
}

// SetStartTime sets the StartTime field's value.
func (s *DataForGetFingerprintPortOutput) SetStartTime(v int64) *DataForGetFingerprintPortOutput {
	s.StartTime = &v
	return s
}

// SetState sets the State field's value.
func (s *DataForGetFingerprintPortOutput) SetState(v string) *DataForGetFingerprintPortOutput {
	s.State = &v
	return s
}

// SetType sets the Type field's value.
func (s *DataForGetFingerprintPortOutput) SetType(v int64) *DataForGetFingerprintPortOutput {
	s.Type = &v
	return s
}

// SetUid sets the Uid field's value.
func (s *DataForGetFingerprintPortOutput) SetUid(v string) *DataForGetFingerprintPortOutput {
	s.Uid = &v
	return s
}

// SetUpdateTime sets the UpdateTime field's value.
func (s *DataForGetFingerprintPortOutput) SetUpdateTime(v int64) *DataForGetFingerprintPortOutput {
	s.UpdateTime = &v
	return s
}

// SetUsername sets the Username field's value.
func (s *DataForGetFingerprintPortOutput) SetUsername(v string) *DataForGetFingerprintPortOutput {
	s.Username = &v
	return s
}

type GetFingerprintPortInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	AgentId *string `type:"string" json:",omitempty"`

	CloudProviders []*string `type:"list" json:",omitempty"`

	Cmdline *string `type:"string" json:",omitempty"`

	Comm *string `type:"string" json:",omitempty"`

	ContainerId *string `type:"string" json:",omitempty"`

	Exe *string `type:"string" json:",omitempty"`

	Hostname *string `type:"string" json:",omitempty"`

	Ip *string `type:"string" json:",omitempty"`

	LeafGroupIDs []*string `type:"list" json:",omitempty"`

	// PageNumber is a required field
	PageNumber *int64 `type:"int64" json:",omitempty" required:"true"`

	// PageSize is a required field
	PageSize *int64 `type:"int64" json:",omitempty" required:"true"`

	Sip *string `type:"string" json:",omitempty"`

	SortBy *string `type:"string" json:",omitempty"`

	SortOrder *string `type:"string" json:",omitempty"`

	Sport *string `type:"string" json:",omitempty"`

	Tags []*string `type:"list" json:",omitempty"`

	TopGroupID *string `type:"string" json:",omitempty"`

	Type []*int64 `type:"list" json:",omitempty"`

	Username *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s GetFingerprintPortInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetFingerprintPortInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *GetFingerprintPortInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "GetFingerprintPortInput"}
	if s.PageNumber == nil {
		invalidParams.Add(request.NewErrParamRequired("PageNumber"))
	}
	if s.PageSize == nil {
		invalidParams.Add(request.NewErrParamRequired("PageSize"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAgentId sets the AgentId field's value.
func (s *GetFingerprintPortInput) SetAgentId(v string) *GetFingerprintPortInput {
	s.AgentId = &v
	return s
}

// SetCloudProviders sets the CloudProviders field's value.
func (s *GetFingerprintPortInput) SetCloudProviders(v []*string) *GetFingerprintPortInput {
	s.CloudProviders = v
	return s
}

// SetCmdline sets the Cmdline field's value.
func (s *GetFingerprintPortInput) SetCmdline(v string) *GetFingerprintPortInput {
	s.Cmdline = &v
	return s
}

// SetComm sets the Comm field's value.
func (s *GetFingerprintPortInput) SetComm(v string) *GetFingerprintPortInput {
	s.Comm = &v
	return s
}

// SetContainerId sets the ContainerId field's value.
func (s *GetFingerprintPortInput) SetContainerId(v string) *GetFingerprintPortInput {
	s.ContainerId = &v
	return s
}

// SetExe sets the Exe field's value.
func (s *GetFingerprintPortInput) SetExe(v string) *GetFingerprintPortInput {
	s.Exe = &v
	return s
}

// SetHostname sets the Hostname field's value.
func (s *GetFingerprintPortInput) SetHostname(v string) *GetFingerprintPortInput {
	s.Hostname = &v
	return s
}

// SetIp sets the Ip field's value.
func (s *GetFingerprintPortInput) SetIp(v string) *GetFingerprintPortInput {
	s.Ip = &v
	return s
}

// SetLeafGroupIDs sets the LeafGroupIDs field's value.
func (s *GetFingerprintPortInput) SetLeafGroupIDs(v []*string) *GetFingerprintPortInput {
	s.LeafGroupIDs = v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *GetFingerprintPortInput) SetPageNumber(v int64) *GetFingerprintPortInput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *GetFingerprintPortInput) SetPageSize(v int64) *GetFingerprintPortInput {
	s.PageSize = &v
	return s
}

// SetSip sets the Sip field's value.
func (s *GetFingerprintPortInput) SetSip(v string) *GetFingerprintPortInput {
	s.Sip = &v
	return s
}

// SetSortBy sets the SortBy field's value.
func (s *GetFingerprintPortInput) SetSortBy(v string) *GetFingerprintPortInput {
	s.SortBy = &v
	return s
}

// SetSortOrder sets the SortOrder field's value.
func (s *GetFingerprintPortInput) SetSortOrder(v string) *GetFingerprintPortInput {
	s.SortOrder = &v
	return s
}

// SetSport sets the Sport field's value.
func (s *GetFingerprintPortInput) SetSport(v string) *GetFingerprintPortInput {
	s.Sport = &v
	return s
}

// SetTags sets the Tags field's value.
func (s *GetFingerprintPortInput) SetTags(v []*string) *GetFingerprintPortInput {
	s.Tags = v
	return s
}

// SetTopGroupID sets the TopGroupID field's value.
func (s *GetFingerprintPortInput) SetTopGroupID(v string) *GetFingerprintPortInput {
	s.TopGroupID = &v
	return s
}

// SetType sets the Type field's value.
func (s *GetFingerprintPortInput) SetType(v []*int64) *GetFingerprintPortInput {
	s.Type = v
	return s
}

// SetUsername sets the Username field's value.
func (s *GetFingerprintPortInput) SetUsername(v string) *GetFingerprintPortInput {
	s.Username = &v
	return s
}

type GetFingerprintPortOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Data []*DataForGetFingerprintPortOutput `type:"list" json:",omitempty"`

	PageNumber *int64 `type:"int64" json:",omitempty"`

	PageSize *int64 `type:"int64" json:",omitempty"`

	TotalCount *int64 `type:"int64" json:",omitempty"`
}

// String returns the string representation
func (s GetFingerprintPortOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetFingerprintPortOutput) GoString() string {
	return s.String()
}

// SetData sets the Data field's value.
func (s *GetFingerprintPortOutput) SetData(v []*DataForGetFingerprintPortOutput) *GetFingerprintPortOutput {
	s.Data = v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *GetFingerprintPortOutput) SetPageNumber(v int64) *GetFingerprintPortOutput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *GetFingerprintPortOutput) SetPageSize(v int64) *GetFingerprintPortOutput {
	s.PageSize = &v
	return s
}

// SetTotalCount sets the TotalCount field's value.
func (s *GetFingerprintPortOutput) SetTotalCount(v int64) *GetFingerprintPortOutput {
	s.TotalCount = &v
	return s
}
