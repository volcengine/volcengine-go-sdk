// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package seccenter20240508

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opGetAlarmTraceCommon = "GetAlarmTrace"

// GetAlarmTraceCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the GetAlarmTraceCommon operation. The "output" return
// value will be populated with the GetAlarmTraceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetAlarmTraceCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetAlarmTraceCommon Send returns without error.
//
// See GetAlarmTraceCommon for more information on using the GetAlarmTraceCommon
// API call, and error handling.
//
//    // Example sending a request using the GetAlarmTraceCommonRequest method.
//    req, resp := client.GetAlarmTraceCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECCENTER20240508) GetAlarmTraceCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opGetAlarmTraceCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// GetAlarmTraceCommon API operation for SECCENTER20240508.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SECCENTER20240508's
// API operation GetAlarmTraceCommon for usage and error information.
func (c *SECCENTER20240508) GetAlarmTraceCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.GetAlarmTraceCommonRequest(input)
	return out, req.Send()
}

// GetAlarmTraceCommonWithContext is the same as GetAlarmTraceCommon with the addition of
// the ability to pass a context and additional request options.
//
// See GetAlarmTraceCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECCENTER20240508) GetAlarmTraceCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.GetAlarmTraceCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opGetAlarmTrace = "GetAlarmTrace"

// GetAlarmTraceRequest generates a "volcengine/request.Request" representing the
// client's request for the GetAlarmTrace operation. The "output" return
// value will be populated with the GetAlarmTraceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetAlarmTraceCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetAlarmTraceCommon Send returns without error.
//
// See GetAlarmTrace for more information on using the GetAlarmTrace
// API call, and error handling.
//
//    // Example sending a request using the GetAlarmTraceRequest method.
//    req, resp := client.GetAlarmTraceRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECCENTER20240508) GetAlarmTraceRequest(input *GetAlarmTraceInput) (req *request.Request, output *GetAlarmTraceOutput) {
	op := &request.Operation{
		Name:       opGetAlarmTrace,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &GetAlarmTraceInput{}
	}

	output = &GetAlarmTraceOutput{}
	req = c.newRequest(op, input, output)

	return
}

// GetAlarmTrace API operation for SECCENTER20240508.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SECCENTER20240508's
// API operation GetAlarmTrace for usage and error information.
func (c *SECCENTER20240508) GetAlarmTrace(input *GetAlarmTraceInput) (*GetAlarmTraceOutput, error) {
	req, out := c.GetAlarmTraceRequest(input)
	return out, req.Send()
}

// GetAlarmTraceWithContext is the same as GetAlarmTrace with the addition of
// the ability to pass a context and additional request options.
//
// See GetAlarmTrace for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECCENTER20240508) GetAlarmTraceWithContext(ctx volcengine.Context, input *GetAlarmTraceInput, opts ...request.Option) (*GetAlarmTraceOutput, error) {
	req, out := c.GetAlarmTraceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type GetAlarmTraceInput struct {
	_ struct{} `type:"structure"`

	TraceID *string `type:"string"`
}

// String returns the string representation
func (s GetAlarmTraceInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetAlarmTraceInput) GoString() string {
	return s.String()
}

// SetTraceID sets the TraceID field's value.
func (s *GetAlarmTraceInput) SetTraceID(v string) *GetAlarmTraceInput {
	s.TraceID = &v
	return s
}

type GetAlarmTraceOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	C2List []*string `type:"list"`

	FullData *bool `type:"boolean"`

	InsertTime *int64 `type:"int64"`

	Status *string `type:"string"`

	TraceID *string `type:"string"`

	TraceRes *TraceResForGetAlarmTraceOutput `type:"structure"`

	UpdateTime *int64 `type:"int64"`
}

// String returns the string representation
func (s GetAlarmTraceOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetAlarmTraceOutput) GoString() string {
	return s.String()
}

// SetC2List sets the C2List field's value.
func (s *GetAlarmTraceOutput) SetC2List(v []*string) *GetAlarmTraceOutput {
	s.C2List = v
	return s
}

// SetFullData sets the FullData field's value.
func (s *GetAlarmTraceOutput) SetFullData(v bool) *GetAlarmTraceOutput {
	s.FullData = &v
	return s
}

// SetInsertTime sets the InsertTime field's value.
func (s *GetAlarmTraceOutput) SetInsertTime(v int64) *GetAlarmTraceOutput {
	s.InsertTime = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *GetAlarmTraceOutput) SetStatus(v string) *GetAlarmTraceOutput {
	s.Status = &v
	return s
}

// SetTraceID sets the TraceID field's value.
func (s *GetAlarmTraceOutput) SetTraceID(v string) *GetAlarmTraceOutput {
	s.TraceID = &v
	return s
}

// SetTraceRes sets the TraceRes field's value.
func (s *GetAlarmTraceOutput) SetTraceRes(v *TraceResForGetAlarmTraceOutput) *GetAlarmTraceOutput {
	s.TraceRes = v
	return s
}

// SetUpdateTime sets the UpdateTime field's value.
func (s *GetAlarmTraceOutput) SetUpdateTime(v int64) *GetAlarmTraceOutput {
	s.UpdateTime = &v
	return s
}

type TraceResForGetAlarmTraceOutput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s TraceResForGetAlarmTraceOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s TraceResForGetAlarmTraceOutput) GoString() string {
	return s.String()
}
