// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package seccenter20240508

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opUpdateCloudProviderCommon = "UpdateCloudProvider"

// UpdateCloudProviderCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateCloudProviderCommon operation. The "output" return
// value will be populated with the UpdateCloudProviderCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateCloudProviderCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateCloudProviderCommon Send returns without error.
//
// See UpdateCloudProviderCommon for more information on using the UpdateCloudProviderCommon
// API call, and error handling.
//
//    // Example sending a request using the UpdateCloudProviderCommonRequest method.
//    req, resp := client.UpdateCloudProviderCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECCENTER20240508) UpdateCloudProviderCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opUpdateCloudProviderCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateCloudProviderCommon API operation for SECCENTER20240508.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SECCENTER20240508's
// API operation UpdateCloudProviderCommon for usage and error information.
func (c *SECCENTER20240508) UpdateCloudProviderCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.UpdateCloudProviderCommonRequest(input)
	return out, req.Send()
}

// UpdateCloudProviderCommonWithContext is the same as UpdateCloudProviderCommon with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateCloudProviderCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECCENTER20240508) UpdateCloudProviderCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.UpdateCloudProviderCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opUpdateCloudProvider = "UpdateCloudProvider"

// UpdateCloudProviderRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateCloudProvider operation. The "output" return
// value will be populated with the UpdateCloudProviderCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateCloudProviderCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateCloudProviderCommon Send returns without error.
//
// See UpdateCloudProvider for more information on using the UpdateCloudProvider
// API call, and error handling.
//
//    // Example sending a request using the UpdateCloudProviderRequest method.
//    req, resp := client.UpdateCloudProviderRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECCENTER20240508) UpdateCloudProviderRequest(input *UpdateCloudProviderInput) (req *request.Request, output *UpdateCloudProviderOutput) {
	op := &request.Operation{
		Name:       opUpdateCloudProvider,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UpdateCloudProviderInput{}
	}

	output = &UpdateCloudProviderOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateCloudProvider API operation for SECCENTER20240508.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SECCENTER20240508's
// API operation UpdateCloudProvider for usage and error information.
func (c *SECCENTER20240508) UpdateCloudProvider(input *UpdateCloudProviderInput) (*UpdateCloudProviderOutput, error) {
	req, out := c.UpdateCloudProviderRequest(input)
	return out, req.Send()
}

// UpdateCloudProviderWithContext is the same as UpdateCloudProvider with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateCloudProvider for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECCENTER20240508) UpdateCloudProviderWithContext(ctx volcengine.Context, input *UpdateCloudProviderInput, opts ...request.Option) (*UpdateCloudProviderOutput, error) {
	req, out := c.UpdateCloudProviderRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type UpdateCloudProviderInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	AgentIDs []*string `type:"list" json:",omitempty"`

	CloudProvider *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s UpdateCloudProviderInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateCloudProviderInput) GoString() string {
	return s.String()
}

// SetAgentIDs sets the AgentIDs field's value.
func (s *UpdateCloudProviderInput) SetAgentIDs(v []*string) *UpdateCloudProviderInput {
	s.AgentIDs = v
	return s
}

// SetCloudProvider sets the CloudProvider field's value.
func (s *UpdateCloudProviderInput) SetCloudProvider(v string) *UpdateCloudProviderInput {
	s.CloudProvider = &v
	return s
}

type UpdateCloudProviderOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	FailureCount *int64 `type:"int64" json:",omitempty"`

	FailureIds []*string `type:"list" json:",omitempty"`

	SuccessCount *int64 `type:"int64" json:",omitempty"`

	SuccessIds []*string `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s UpdateCloudProviderOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateCloudProviderOutput) GoString() string {
	return s.String()
}

// SetFailureCount sets the FailureCount field's value.
func (s *UpdateCloudProviderOutput) SetFailureCount(v int64) *UpdateCloudProviderOutput {
	s.FailureCount = &v
	return s
}

// SetFailureIds sets the FailureIds field's value.
func (s *UpdateCloudProviderOutput) SetFailureIds(v []*string) *UpdateCloudProviderOutput {
	s.FailureIds = v
	return s
}

// SetSuccessCount sets the SuccessCount field's value.
func (s *UpdateCloudProviderOutput) SetSuccessCount(v int64) *UpdateCloudProviderOutput {
	s.SuccessCount = &v
	return s
}

// SetSuccessIds sets the SuccessIds field's value.
func (s *UpdateCloudProviderOutput) SetSuccessIds(v []*string) *UpdateCloudProviderOutput {
	s.SuccessIds = v
	return s
}
