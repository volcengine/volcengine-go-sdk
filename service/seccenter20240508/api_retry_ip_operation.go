// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package seccenter20240508

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opRetryIPOperationCommon = "RetryIPOperation"

// RetryIPOperationCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the RetryIPOperationCommon operation. The "output" return
// value will be populated with the RetryIPOperationCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned RetryIPOperationCommon Request to send the API call to the service.
// the "output" return value is not valid until after RetryIPOperationCommon Send returns without error.
//
// See RetryIPOperationCommon for more information on using the RetryIPOperationCommon
// API call, and error handling.
//
//    // Example sending a request using the RetryIPOperationCommonRequest method.
//    req, resp := client.RetryIPOperationCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECCENTER20240508) RetryIPOperationCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opRetryIPOperationCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// RetryIPOperationCommon API operation for SECCENTER20240508.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SECCENTER20240508's
// API operation RetryIPOperationCommon for usage and error information.
func (c *SECCENTER20240508) RetryIPOperationCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.RetryIPOperationCommonRequest(input)
	return out, req.Send()
}

// RetryIPOperationCommonWithContext is the same as RetryIPOperationCommon with the addition of
// the ability to pass a context and additional request options.
//
// See RetryIPOperationCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECCENTER20240508) RetryIPOperationCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.RetryIPOperationCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opRetryIPOperation = "RetryIPOperation"

// RetryIPOperationRequest generates a "volcengine/request.Request" representing the
// client's request for the RetryIPOperation operation. The "output" return
// value will be populated with the RetryIPOperationCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned RetryIPOperationCommon Request to send the API call to the service.
// the "output" return value is not valid until after RetryIPOperationCommon Send returns without error.
//
// See RetryIPOperation for more information on using the RetryIPOperation
// API call, and error handling.
//
//    // Example sending a request using the RetryIPOperationRequest method.
//    req, resp := client.RetryIPOperationRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECCENTER20240508) RetryIPOperationRequest(input *RetryIPOperationInput) (req *request.Request, output *RetryIPOperationOutput) {
	op := &request.Operation{
		Name:       opRetryIPOperation,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &RetryIPOperationInput{}
	}

	output = &RetryIPOperationOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// RetryIPOperation API operation for SECCENTER20240508.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SECCENTER20240508's
// API operation RetryIPOperation for usage and error information.
func (c *SECCENTER20240508) RetryIPOperation(input *RetryIPOperationInput) (*RetryIPOperationOutput, error) {
	req, out := c.RetryIPOperationRequest(input)
	return out, req.Send()
}

// RetryIPOperationWithContext is the same as RetryIPOperation with the addition of
// the ability to pass a context and additional request options.
//
// See RetryIPOperation for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECCENTER20240508) RetryIPOperationWithContext(ctx volcengine.Context, input *RetryIPOperationInput, opts ...request.Option) (*RetryIPOperationOutput, error) {
	req, out := c.RetryIPOperationRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type RetryIPOperationInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	ID *string `type:"string" json:",omitempty"`

	// Operation is a required field
	Operation *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s RetryIPOperationInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s RetryIPOperationInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *RetryIPOperationInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "RetryIPOperationInput"}
	if s.Operation == nil {
		invalidParams.Add(request.NewErrParamRequired("Operation"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetID sets the ID field's value.
func (s *RetryIPOperationInput) SetID(v string) *RetryIPOperationInput {
	s.ID = &v
	return s
}

// SetOperation sets the Operation field's value.
func (s *RetryIPOperationInput) SetOperation(v string) *RetryIPOperationInput {
	s.Operation = &v
	return s
}

type RetryIPOperationOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Success *bool `type:"boolean" json:"success,omitempty"`
}

// String returns the string representation
func (s RetryIPOperationOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s RetryIPOperationOutput) GoString() string {
	return s.String()
}

// SetSuccess sets the Success field's value.
func (s *RetryIPOperationOutput) SetSuccess(v bool) *RetryIPOperationOutput {
	s.Success = &v
	return s
}
