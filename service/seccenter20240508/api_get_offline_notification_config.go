// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package seccenter20240508

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opGetOfflineNotificationConfigCommon = "GetOfflineNotificationConfig"

// GetOfflineNotificationConfigCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the GetOfflineNotificationConfigCommon operation. The "output" return
// value will be populated with the GetOfflineNotificationConfigCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetOfflineNotificationConfigCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetOfflineNotificationConfigCommon Send returns without error.
//
// See GetOfflineNotificationConfigCommon for more information on using the GetOfflineNotificationConfigCommon
// API call, and error handling.
//
//    // Example sending a request using the GetOfflineNotificationConfigCommonRequest method.
//    req, resp := client.GetOfflineNotificationConfigCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECCENTER20240508) GetOfflineNotificationConfigCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opGetOfflineNotificationConfigCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetOfflineNotificationConfigCommon API operation for SECCENTER20240508.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SECCENTER20240508's
// API operation GetOfflineNotificationConfigCommon for usage and error information.
func (c *SECCENTER20240508) GetOfflineNotificationConfigCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.GetOfflineNotificationConfigCommonRequest(input)
	return out, req.Send()
}

// GetOfflineNotificationConfigCommonWithContext is the same as GetOfflineNotificationConfigCommon with the addition of
// the ability to pass a context and additional request options.
//
// See GetOfflineNotificationConfigCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECCENTER20240508) GetOfflineNotificationConfigCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.GetOfflineNotificationConfigCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opGetOfflineNotificationConfig = "GetOfflineNotificationConfig"

// GetOfflineNotificationConfigRequest generates a "volcengine/request.Request" representing the
// client's request for the GetOfflineNotificationConfig operation. The "output" return
// value will be populated with the GetOfflineNotificationConfigCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetOfflineNotificationConfigCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetOfflineNotificationConfigCommon Send returns without error.
//
// See GetOfflineNotificationConfig for more information on using the GetOfflineNotificationConfig
// API call, and error handling.
//
//    // Example sending a request using the GetOfflineNotificationConfigRequest method.
//    req, resp := client.GetOfflineNotificationConfigRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECCENTER20240508) GetOfflineNotificationConfigRequest(input *GetOfflineNotificationConfigInput) (req *request.Request, output *GetOfflineNotificationConfigOutput) {
	op := &request.Operation{
		Name:       opGetOfflineNotificationConfig,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &GetOfflineNotificationConfigInput{}
	}

	output = &GetOfflineNotificationConfigOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetOfflineNotificationConfig API operation for SECCENTER20240508.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SECCENTER20240508's
// API operation GetOfflineNotificationConfig for usage and error information.
func (c *SECCENTER20240508) GetOfflineNotificationConfig(input *GetOfflineNotificationConfigInput) (*GetOfflineNotificationConfigOutput, error) {
	req, out := c.GetOfflineNotificationConfigRequest(input)
	return out, req.Send()
}

// GetOfflineNotificationConfigWithContext is the same as GetOfflineNotificationConfig with the addition of
// the ability to pass a context and additional request options.
//
// See GetOfflineNotificationConfig for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECCENTER20240508) GetOfflineNotificationConfigWithContext(ctx volcengine.Context, input *GetOfflineNotificationConfigInput, opts ...request.Option) (*GetOfflineNotificationConfigOutput, error) {
	req, out := c.GetOfflineNotificationConfigRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type GetOfflineNotificationConfigInput struct {
	_ struct{} `type:"structure" json:",omitempty"`
}

// String returns the string representation
func (s GetOfflineNotificationConfigInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetOfflineNotificationConfigInput) GoString() string {
	return s.String()
}

type GetOfflineNotificationConfigOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	NotificationSwitchOn *bool `type:"boolean" json:",omitempty"`

	NotificationThreshold *int64 `type:"int64" json:",omitempty"`
}

// String returns the string representation
func (s GetOfflineNotificationConfigOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetOfflineNotificationConfigOutput) GoString() string {
	return s.String()
}

// SetNotificationSwitchOn sets the NotificationSwitchOn field's value.
func (s *GetOfflineNotificationConfigOutput) SetNotificationSwitchOn(v bool) *GetOfflineNotificationConfigOutput {
	s.NotificationSwitchOn = &v
	return s
}

// SetNotificationThreshold sets the NotificationThreshold field's value.
func (s *GetOfflineNotificationConfigOutput) SetNotificationThreshold(v int64) *GetOfflineNotificationConfigOutput {
	s.NotificationThreshold = &v
	return s
}
