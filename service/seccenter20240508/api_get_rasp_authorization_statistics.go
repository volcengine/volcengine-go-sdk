// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package seccenter20240508

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opGetRaspAuthorizationStatisticsCommon = "GetRaspAuthorizationStatistics"

// GetRaspAuthorizationStatisticsCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the GetRaspAuthorizationStatisticsCommon operation. The "output" return
// value will be populated with the GetRaspAuthorizationStatisticsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetRaspAuthorizationStatisticsCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetRaspAuthorizationStatisticsCommon Send returns without error.
//
// See GetRaspAuthorizationStatisticsCommon for more information on using the GetRaspAuthorizationStatisticsCommon
// API call, and error handling.
//
//    // Example sending a request using the GetRaspAuthorizationStatisticsCommonRequest method.
//    req, resp := client.GetRaspAuthorizationStatisticsCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECCENTER20240508) GetRaspAuthorizationStatisticsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opGetRaspAuthorizationStatisticsCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetRaspAuthorizationStatisticsCommon API operation for SECCENTER20240508.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SECCENTER20240508's
// API operation GetRaspAuthorizationStatisticsCommon for usage and error information.
func (c *SECCENTER20240508) GetRaspAuthorizationStatisticsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.GetRaspAuthorizationStatisticsCommonRequest(input)
	return out, req.Send()
}

// GetRaspAuthorizationStatisticsCommonWithContext is the same as GetRaspAuthorizationStatisticsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See GetRaspAuthorizationStatisticsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECCENTER20240508) GetRaspAuthorizationStatisticsCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.GetRaspAuthorizationStatisticsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opGetRaspAuthorizationStatistics = "GetRaspAuthorizationStatistics"

// GetRaspAuthorizationStatisticsRequest generates a "volcengine/request.Request" representing the
// client's request for the GetRaspAuthorizationStatistics operation. The "output" return
// value will be populated with the GetRaspAuthorizationStatisticsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetRaspAuthorizationStatisticsCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetRaspAuthorizationStatisticsCommon Send returns without error.
//
// See GetRaspAuthorizationStatistics for more information on using the GetRaspAuthorizationStatistics
// API call, and error handling.
//
//    // Example sending a request using the GetRaspAuthorizationStatisticsRequest method.
//    req, resp := client.GetRaspAuthorizationStatisticsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECCENTER20240508) GetRaspAuthorizationStatisticsRequest(input *GetRaspAuthorizationStatisticsInput) (req *request.Request, output *GetRaspAuthorizationStatisticsOutput) {
	op := &request.Operation{
		Name:       opGetRaspAuthorizationStatistics,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &GetRaspAuthorizationStatisticsInput{}
	}

	output = &GetRaspAuthorizationStatisticsOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetRaspAuthorizationStatistics API operation for SECCENTER20240508.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SECCENTER20240508's
// API operation GetRaspAuthorizationStatistics for usage and error information.
func (c *SECCENTER20240508) GetRaspAuthorizationStatistics(input *GetRaspAuthorizationStatisticsInput) (*GetRaspAuthorizationStatisticsOutput, error) {
	req, out := c.GetRaspAuthorizationStatisticsRequest(input)
	return out, req.Send()
}

// GetRaspAuthorizationStatisticsWithContext is the same as GetRaspAuthorizationStatistics with the addition of
// the ability to pass a context and additional request options.
//
// See GetRaspAuthorizationStatistics for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECCENTER20240508) GetRaspAuthorizationStatisticsWithContext(ctx volcengine.Context, input *GetRaspAuthorizationStatisticsInput, opts ...request.Option) (*GetRaspAuthorizationStatisticsOutput, error) {
	req, out := c.GetRaspAuthorizationStatisticsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type GetRaspAuthorizationStatisticsInput struct {
	_ struct{} `type:"structure" json:",omitempty"`
}

// String returns the string representation
func (s GetRaspAuthorizationStatisticsInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetRaspAuthorizationStatisticsInput) GoString() string {
	return s.String()
}

type GetRaspAuthorizationStatisticsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	AuthorizationCount *int64 `type:"int64" json:",omitempty"`

	ExpireTime *int64 `type:"int64" json:",omitempty"`

	LeftAuthorizationCount *int64 `type:"int64" json:",omitempty"`
}

// String returns the string representation
func (s GetRaspAuthorizationStatisticsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetRaspAuthorizationStatisticsOutput) GoString() string {
	return s.String()
}

// SetAuthorizationCount sets the AuthorizationCount field's value.
func (s *GetRaspAuthorizationStatisticsOutput) SetAuthorizationCount(v int64) *GetRaspAuthorizationStatisticsOutput {
	s.AuthorizationCount = &v
	return s
}

// SetExpireTime sets the ExpireTime field's value.
func (s *GetRaspAuthorizationStatisticsOutput) SetExpireTime(v int64) *GetRaspAuthorizationStatisticsOutput {
	s.ExpireTime = &v
	return s
}

// SetLeftAuthorizationCount sets the LeftAuthorizationCount field's value.
func (s *GetRaspAuthorizationStatisticsOutput) SetLeftAuthorizationCount(v int64) *GetRaspAuthorizationStatisticsOutput {
	s.LeftAuthorizationCount = &v
	return s
}
