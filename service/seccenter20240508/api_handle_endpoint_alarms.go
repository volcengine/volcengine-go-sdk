// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package seccenter20240508

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opHandleEndpointAlarmsCommon = "HandleEndpointAlarms"

// HandleEndpointAlarmsCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the HandleEndpointAlarmsCommon operation. The "output" return
// value will be populated with the HandleEndpointAlarmsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned HandleEndpointAlarmsCommon Request to send the API call to the service.
// the "output" return value is not valid until after HandleEndpointAlarmsCommon Send returns without error.
//
// See HandleEndpointAlarmsCommon for more information on using the HandleEndpointAlarmsCommon
// API call, and error handling.
//
//    // Example sending a request using the HandleEndpointAlarmsCommonRequest method.
//    req, resp := client.HandleEndpointAlarmsCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECCENTER20240508) HandleEndpointAlarmsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opHandleEndpointAlarmsCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// HandleEndpointAlarmsCommon API operation for SECCENTER20240508.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SECCENTER20240508's
// API operation HandleEndpointAlarmsCommon for usage and error information.
func (c *SECCENTER20240508) HandleEndpointAlarmsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.HandleEndpointAlarmsCommonRequest(input)
	return out, req.Send()
}

// HandleEndpointAlarmsCommonWithContext is the same as HandleEndpointAlarmsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See HandleEndpointAlarmsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECCENTER20240508) HandleEndpointAlarmsCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.HandleEndpointAlarmsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opHandleEndpointAlarms = "HandleEndpointAlarms"

// HandleEndpointAlarmsRequest generates a "volcengine/request.Request" representing the
// client's request for the HandleEndpointAlarms operation. The "output" return
// value will be populated with the HandleEndpointAlarmsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned HandleEndpointAlarmsCommon Request to send the API call to the service.
// the "output" return value is not valid until after HandleEndpointAlarmsCommon Send returns without error.
//
// See HandleEndpointAlarms for more information on using the HandleEndpointAlarms
// API call, and error handling.
//
//    // Example sending a request using the HandleEndpointAlarmsRequest method.
//    req, resp := client.HandleEndpointAlarmsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECCENTER20240508) HandleEndpointAlarmsRequest(input *HandleEndpointAlarmsInput) (req *request.Request, output *HandleEndpointAlarmsOutput) {
	op := &request.Operation{
		Name:       opHandleEndpointAlarms,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &HandleEndpointAlarmsInput{}
	}

	output = &HandleEndpointAlarmsOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// HandleEndpointAlarms API operation for SECCENTER20240508.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SECCENTER20240508's
// API operation HandleEndpointAlarms for usage and error information.
func (c *SECCENTER20240508) HandleEndpointAlarms(input *HandleEndpointAlarmsInput) (*HandleEndpointAlarmsOutput, error) {
	req, out := c.HandleEndpointAlarmsRequest(input)
	return out, req.Send()
}

// HandleEndpointAlarmsWithContext is the same as HandleEndpointAlarms with the addition of
// the ability to pass a context and additional request options.
//
// See HandleEndpointAlarms for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECCENTER20240508) HandleEndpointAlarmsWithContext(ctx volcengine.Context, input *HandleEndpointAlarmsInput, opts ...request.Option) (*HandleEndpointAlarmsOutput, error) {
	req, out := c.HandleEndpointAlarmsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type FileForHandleEndpointAlarmsInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Action *string `type:"string" json:",omitempty"`

	FilePath *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s FileForHandleEndpointAlarmsInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s FileForHandleEndpointAlarmsInput) GoString() string {
	return s.String()
}

// SetAction sets the Action field's value.
func (s *FileForHandleEndpointAlarmsInput) SetAction(v string) *FileForHandleEndpointAlarmsInput {
	s.Action = &v
	return s
}

// SetFilePath sets the FilePath field's value.
func (s *FileForHandleEndpointAlarmsInput) SetFilePath(v string) *FileForHandleEndpointAlarmsInput {
	s.FilePath = &v
	return s
}

type HandleEndpointAlarmsInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// AlarmType is a required field
	AlarmType *string `type:"string" json:",omitempty" required:"true"`

	HandleList []*HandleListForHandleEndpointAlarmsInput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s HandleEndpointAlarmsInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s HandleEndpointAlarmsInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *HandleEndpointAlarmsInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "HandleEndpointAlarmsInput"}
	if s.AlarmType == nil {
		invalidParams.Add(request.NewErrParamRequired("AlarmType"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAlarmType sets the AlarmType field's value.
func (s *HandleEndpointAlarmsInput) SetAlarmType(v string) *HandleEndpointAlarmsInput {
	s.AlarmType = &v
	return s
}

// SetHandleList sets the HandleList field's value.
func (s *HandleEndpointAlarmsInput) SetHandleList(v []*HandleListForHandleEndpointAlarmsInput) *HandleEndpointAlarmsInput {
	s.HandleList = v
	return s
}

type HandleEndpointAlarmsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s HandleEndpointAlarmsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s HandleEndpointAlarmsOutput) GoString() string {
	return s.String()
}

type HandleListForHandleEndpointAlarmsInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	AgentID *string `type:"string" json:",omitempty"`

	AlarmIDList []*string `type:"list" json:",omitempty"`

	Files []*FileForHandleEndpointAlarmsInput `type:"list" json:",omitempty"`

	Processes []*ProcessForHandleEndpointAlarmsInput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s HandleListForHandleEndpointAlarmsInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s HandleListForHandleEndpointAlarmsInput) GoString() string {
	return s.String()
}

// SetAgentID sets the AgentID field's value.
func (s *HandleListForHandleEndpointAlarmsInput) SetAgentID(v string) *HandleListForHandleEndpointAlarmsInput {
	s.AgentID = &v
	return s
}

// SetAlarmIDList sets the AlarmIDList field's value.
func (s *HandleListForHandleEndpointAlarmsInput) SetAlarmIDList(v []*string) *HandleListForHandleEndpointAlarmsInput {
	s.AlarmIDList = v
	return s
}

// SetFiles sets the Files field's value.
func (s *HandleListForHandleEndpointAlarmsInput) SetFiles(v []*FileForHandleEndpointAlarmsInput) *HandleListForHandleEndpointAlarmsInput {
	s.Files = v
	return s
}

// SetProcesses sets the Processes field's value.
func (s *HandleListForHandleEndpointAlarmsInput) SetProcesses(v []*ProcessForHandleEndpointAlarmsInput) *HandleListForHandleEndpointAlarmsInput {
	s.Processes = v
	return s
}

type ProcessForHandleEndpointAlarmsInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Cmdline *string `type:"string" json:",omitempty"`

	Exe *string `type:"string" json:",omitempty"`

	Pid *int64 `type:"int64" json:",omitempty"`
}

// String returns the string representation
func (s ProcessForHandleEndpointAlarmsInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ProcessForHandleEndpointAlarmsInput) GoString() string {
	return s.String()
}

// SetCmdline sets the Cmdline field's value.
func (s *ProcessForHandleEndpointAlarmsInput) SetCmdline(v string) *ProcessForHandleEndpointAlarmsInput {
	s.Cmdline = &v
	return s
}

// SetExe sets the Exe field's value.
func (s *ProcessForHandleEndpointAlarmsInput) SetExe(v string) *ProcessForHandleEndpointAlarmsInput {
	s.Exe = &v
	return s
}

// SetPid sets the Pid field's value.
func (s *ProcessForHandleEndpointAlarmsInput) SetPid(v int64) *ProcessForHandleEndpointAlarmsInput {
	s.Pid = &v
	return s
}
