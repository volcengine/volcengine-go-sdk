// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package seccenter20240508

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opBindMLPAuthCommon = "BindMLPAuth"

// BindMLPAuthCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the BindMLPAuthCommon operation. The "output" return
// value will be populated with the BindMLPAuthCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned BindMLPAuthCommon Request to send the API call to the service.
// the "output" return value is not valid until after BindMLPAuthCommon Send returns without error.
//
// See BindMLPAuthCommon for more information on using the BindMLPAuthCommon
// API call, and error handling.
//
//    // Example sending a request using the BindMLPAuthCommonRequest method.
//    req, resp := client.BindMLPAuthCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECCENTER20240508) BindMLPAuthCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opBindMLPAuthCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// BindMLPAuthCommon API operation for SECCENTER20240508.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SECCENTER20240508's
// API operation BindMLPAuthCommon for usage and error information.
func (c *SECCENTER20240508) BindMLPAuthCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.BindMLPAuthCommonRequest(input)
	return out, req.Send()
}

// BindMLPAuthCommonWithContext is the same as BindMLPAuthCommon with the addition of
// the ability to pass a context and additional request options.
//
// See BindMLPAuthCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECCENTER20240508) BindMLPAuthCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.BindMLPAuthCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opBindMLPAuth = "BindMLPAuth"

// BindMLPAuthRequest generates a "volcengine/request.Request" representing the
// client's request for the BindMLPAuth operation. The "output" return
// value will be populated with the BindMLPAuthCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned BindMLPAuthCommon Request to send the API call to the service.
// the "output" return value is not valid until after BindMLPAuthCommon Send returns without error.
//
// See BindMLPAuth for more information on using the BindMLPAuth
// API call, and error handling.
//
//    // Example sending a request using the BindMLPAuthRequest method.
//    req, resp := client.BindMLPAuthRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECCENTER20240508) BindMLPAuthRequest(input *BindMLPAuthInput) (req *request.Request, output *BindMLPAuthOutput) {
	op := &request.Operation{
		Name:       opBindMLPAuth,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &BindMLPAuthInput{}
	}

	output = &BindMLPAuthOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// BindMLPAuth API operation for SECCENTER20240508.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SECCENTER20240508's
// API operation BindMLPAuth for usage and error information.
func (c *SECCENTER20240508) BindMLPAuth(input *BindMLPAuthInput) (*BindMLPAuthOutput, error) {
	req, out := c.BindMLPAuthRequest(input)
	return out, req.Send()
}

// BindMLPAuthWithContext is the same as BindMLPAuth with the addition of
// the ability to pass a context and additional request options.
//
// See BindMLPAuth for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECCENTER20240508) BindMLPAuthWithContext(ctx volcengine.Context, input *BindMLPAuthInput, opts ...request.Option) (*BindMLPAuthOutput, error) {
	req, out := c.BindMLPAuthRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type BindMLPAuthInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	AssetIDs []*string `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s BindMLPAuthInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s BindMLPAuthInput) GoString() string {
	return s.String()
}

// SetAssetIDs sets the AssetIDs field's value.
func (s *BindMLPAuthInput) SetAssetIDs(v []*string) *BindMLPAuthInput {
	s.AssetIDs = v
	return s
}

type BindMLPAuthOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Data *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s BindMLPAuthOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s BindMLPAuthOutput) GoString() string {
	return s.String()
}

// SetData sets the Data field's value.
func (s *BindMLPAuthOutput) SetData(v string) *BindMLPAuthOutput {
	s.Data = &v
	return s
}
