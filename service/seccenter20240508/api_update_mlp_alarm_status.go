// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package seccenter20240508

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opUpdateMlpAlarmStatusCommon = "UpdateMlpAlarmStatus"

// UpdateMlpAlarmStatusCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateMlpAlarmStatusCommon operation. The "output" return
// value will be populated with the UpdateMlpAlarmStatusCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateMlpAlarmStatusCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateMlpAlarmStatusCommon Send returns without error.
//
// See UpdateMlpAlarmStatusCommon for more information on using the UpdateMlpAlarmStatusCommon
// API call, and error handling.
//
//    // Example sending a request using the UpdateMlpAlarmStatusCommonRequest method.
//    req, resp := client.UpdateMlpAlarmStatusCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECCENTER20240508) UpdateMlpAlarmStatusCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opUpdateMlpAlarmStatusCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateMlpAlarmStatusCommon API operation for SECCENTER20240508.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SECCENTER20240508's
// API operation UpdateMlpAlarmStatusCommon for usage and error information.
func (c *SECCENTER20240508) UpdateMlpAlarmStatusCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.UpdateMlpAlarmStatusCommonRequest(input)
	return out, req.Send()
}

// UpdateMlpAlarmStatusCommonWithContext is the same as UpdateMlpAlarmStatusCommon with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateMlpAlarmStatusCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECCENTER20240508) UpdateMlpAlarmStatusCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.UpdateMlpAlarmStatusCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opUpdateMlpAlarmStatus = "UpdateMlpAlarmStatus"

// UpdateMlpAlarmStatusRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateMlpAlarmStatus operation. The "output" return
// value will be populated with the UpdateMlpAlarmStatusCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateMlpAlarmStatusCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateMlpAlarmStatusCommon Send returns without error.
//
// See UpdateMlpAlarmStatus for more information on using the UpdateMlpAlarmStatus
// API call, and error handling.
//
//    // Example sending a request using the UpdateMlpAlarmStatusRequest method.
//    req, resp := client.UpdateMlpAlarmStatusRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECCENTER20240508) UpdateMlpAlarmStatusRequest(input *UpdateMlpAlarmStatusInput) (req *request.Request, output *UpdateMlpAlarmStatusOutput) {
	op := &request.Operation{
		Name:       opUpdateMlpAlarmStatus,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UpdateMlpAlarmStatusInput{}
	}

	output = &UpdateMlpAlarmStatusOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateMlpAlarmStatus API operation for SECCENTER20240508.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SECCENTER20240508's
// API operation UpdateMlpAlarmStatus for usage and error information.
func (c *SECCENTER20240508) UpdateMlpAlarmStatus(input *UpdateMlpAlarmStatusInput) (*UpdateMlpAlarmStatusOutput, error) {
	req, out := c.UpdateMlpAlarmStatusRequest(input)
	return out, req.Send()
}

// UpdateMlpAlarmStatusWithContext is the same as UpdateMlpAlarmStatus with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateMlpAlarmStatus for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECCENTER20240508) UpdateMlpAlarmStatusWithContext(ctx volcengine.Context, input *UpdateMlpAlarmStatusInput, opts ...request.Option) (*UpdateMlpAlarmStatusOutput, error) {
	req, out := c.UpdateMlpAlarmStatusRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ConditionsForUpdateMlpAlarmStatusInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	AgentGroup *string `type:"string" json:",omitempty"`

	AgentGroupList []*string `type:"list" json:",omitempty"`

	AgentID *string `type:"string" json:",omitempty"`

	AgentIDList []*string `type:"list" json:",omitempty"`

	AgentTags []*string `type:"list" json:",omitempty"`

	AlarmHandleResultList []*int64 `type:"list" json:",omitempty"`

	AlarmID *string `type:"string" json:",omitempty"`

	AlertTags []*string `type:"list" json:",omitempty"`

	CloudProviders []*string `type:"list" json:",omitempty"`

	ClusterID *string `type:"string" json:",omitempty"`

	ClusterName *string `type:"string" json:",omitempty"`

	ClusterRegion *string `type:"string" json:",omitempty"`

	ClusterTags []*string `type:"list" json:",omitempty"`

	ContainerID *string `type:"string" json:",omitempty"`

	ContainerName *string `type:"string" json:",omitempty"`

	EventID *string `type:"string" json:",omitempty"`

	EventName *string `type:"string" json:",omitempty"`

	EventReason *string `type:"string" json:",omitempty"`

	Exe *string `type:"string" json:",omitempty"`

	FileHash *string `type:"string" json:",omitempty"`

	FilePath *string `type:"string" json:",omitempty"`

	Hostname *string `type:"string" json:",omitempty"`

	IP *string `type:"string" json:",omitempty"`

	ImageName *string `type:"string" json:",omitempty"`

	LeafGroupIDs []*string `type:"list" json:",omitempty"`

	Level []*string `type:"list" json:",omitempty"`

	MlpInstanceID *string `type:"string" json:",omitempty"`

	Name *string `type:"string" json:",omitempty"`

	ProbeHook *string `type:"string" json:",omitempty"`

	RaspArgv *string `type:"string" json:",omitempty"`

	Status []*int64 `type:"list" json:",omitempty"`

	Tags []*string `type:"list" json:",omitempty"`

	TaskID *string `type:"string" json:",omitempty"`

	TimeEnd *int64 `type:"int64" json:",omitempty"`

	TimeStart *int64 `type:"int64" json:",omitempty"`

	TopGroupID *string `type:"string" json:",omitempty"`

	Type []*string `type:"list" json:",omitempty"`

	VirusType *string `type:"string" json:",omitempty"`

	WhiteListID *string `type:"string" json:",omitempty"`

	WhiteListName *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ConditionsForUpdateMlpAlarmStatusInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ConditionsForUpdateMlpAlarmStatusInput) GoString() string {
	return s.String()
}

// SetAgentGroup sets the AgentGroup field's value.
func (s *ConditionsForUpdateMlpAlarmStatusInput) SetAgentGroup(v string) *ConditionsForUpdateMlpAlarmStatusInput {
	s.AgentGroup = &v
	return s
}

// SetAgentGroupList sets the AgentGroupList field's value.
func (s *ConditionsForUpdateMlpAlarmStatusInput) SetAgentGroupList(v []*string) *ConditionsForUpdateMlpAlarmStatusInput {
	s.AgentGroupList = v
	return s
}

// SetAgentID sets the AgentID field's value.
func (s *ConditionsForUpdateMlpAlarmStatusInput) SetAgentID(v string) *ConditionsForUpdateMlpAlarmStatusInput {
	s.AgentID = &v
	return s
}

// SetAgentIDList sets the AgentIDList field's value.
func (s *ConditionsForUpdateMlpAlarmStatusInput) SetAgentIDList(v []*string) *ConditionsForUpdateMlpAlarmStatusInput {
	s.AgentIDList = v
	return s
}

// SetAgentTags sets the AgentTags field's value.
func (s *ConditionsForUpdateMlpAlarmStatusInput) SetAgentTags(v []*string) *ConditionsForUpdateMlpAlarmStatusInput {
	s.AgentTags = v
	return s
}

// SetAlarmHandleResultList sets the AlarmHandleResultList field's value.
func (s *ConditionsForUpdateMlpAlarmStatusInput) SetAlarmHandleResultList(v []*int64) *ConditionsForUpdateMlpAlarmStatusInput {
	s.AlarmHandleResultList = v
	return s
}

// SetAlarmID sets the AlarmID field's value.
func (s *ConditionsForUpdateMlpAlarmStatusInput) SetAlarmID(v string) *ConditionsForUpdateMlpAlarmStatusInput {
	s.AlarmID = &v
	return s
}

// SetAlertTags sets the AlertTags field's value.
func (s *ConditionsForUpdateMlpAlarmStatusInput) SetAlertTags(v []*string) *ConditionsForUpdateMlpAlarmStatusInput {
	s.AlertTags = v
	return s
}

// SetCloudProviders sets the CloudProviders field's value.
func (s *ConditionsForUpdateMlpAlarmStatusInput) SetCloudProviders(v []*string) *ConditionsForUpdateMlpAlarmStatusInput {
	s.CloudProviders = v
	return s
}

// SetClusterID sets the ClusterID field's value.
func (s *ConditionsForUpdateMlpAlarmStatusInput) SetClusterID(v string) *ConditionsForUpdateMlpAlarmStatusInput {
	s.ClusterID = &v
	return s
}

// SetClusterName sets the ClusterName field's value.
func (s *ConditionsForUpdateMlpAlarmStatusInput) SetClusterName(v string) *ConditionsForUpdateMlpAlarmStatusInput {
	s.ClusterName = &v
	return s
}

// SetClusterRegion sets the ClusterRegion field's value.
func (s *ConditionsForUpdateMlpAlarmStatusInput) SetClusterRegion(v string) *ConditionsForUpdateMlpAlarmStatusInput {
	s.ClusterRegion = &v
	return s
}

// SetClusterTags sets the ClusterTags field's value.
func (s *ConditionsForUpdateMlpAlarmStatusInput) SetClusterTags(v []*string) *ConditionsForUpdateMlpAlarmStatusInput {
	s.ClusterTags = v
	return s
}

// SetContainerID sets the ContainerID field's value.
func (s *ConditionsForUpdateMlpAlarmStatusInput) SetContainerID(v string) *ConditionsForUpdateMlpAlarmStatusInput {
	s.ContainerID = &v
	return s
}

// SetContainerName sets the ContainerName field's value.
func (s *ConditionsForUpdateMlpAlarmStatusInput) SetContainerName(v string) *ConditionsForUpdateMlpAlarmStatusInput {
	s.ContainerName = &v
	return s
}

// SetEventID sets the EventID field's value.
func (s *ConditionsForUpdateMlpAlarmStatusInput) SetEventID(v string) *ConditionsForUpdateMlpAlarmStatusInput {
	s.EventID = &v
	return s
}

// SetEventName sets the EventName field's value.
func (s *ConditionsForUpdateMlpAlarmStatusInput) SetEventName(v string) *ConditionsForUpdateMlpAlarmStatusInput {
	s.EventName = &v
	return s
}

// SetEventReason sets the EventReason field's value.
func (s *ConditionsForUpdateMlpAlarmStatusInput) SetEventReason(v string) *ConditionsForUpdateMlpAlarmStatusInput {
	s.EventReason = &v
	return s
}

// SetExe sets the Exe field's value.
func (s *ConditionsForUpdateMlpAlarmStatusInput) SetExe(v string) *ConditionsForUpdateMlpAlarmStatusInput {
	s.Exe = &v
	return s
}

// SetFileHash sets the FileHash field's value.
func (s *ConditionsForUpdateMlpAlarmStatusInput) SetFileHash(v string) *ConditionsForUpdateMlpAlarmStatusInput {
	s.FileHash = &v
	return s
}

// SetFilePath sets the FilePath field's value.
func (s *ConditionsForUpdateMlpAlarmStatusInput) SetFilePath(v string) *ConditionsForUpdateMlpAlarmStatusInput {
	s.FilePath = &v
	return s
}

// SetHostname sets the Hostname field's value.
func (s *ConditionsForUpdateMlpAlarmStatusInput) SetHostname(v string) *ConditionsForUpdateMlpAlarmStatusInput {
	s.Hostname = &v
	return s
}

// SetIP sets the IP field's value.
func (s *ConditionsForUpdateMlpAlarmStatusInput) SetIP(v string) *ConditionsForUpdateMlpAlarmStatusInput {
	s.IP = &v
	return s
}

// SetImageName sets the ImageName field's value.
func (s *ConditionsForUpdateMlpAlarmStatusInput) SetImageName(v string) *ConditionsForUpdateMlpAlarmStatusInput {
	s.ImageName = &v
	return s
}

// SetLeafGroupIDs sets the LeafGroupIDs field's value.
func (s *ConditionsForUpdateMlpAlarmStatusInput) SetLeafGroupIDs(v []*string) *ConditionsForUpdateMlpAlarmStatusInput {
	s.LeafGroupIDs = v
	return s
}

// SetLevel sets the Level field's value.
func (s *ConditionsForUpdateMlpAlarmStatusInput) SetLevel(v []*string) *ConditionsForUpdateMlpAlarmStatusInput {
	s.Level = v
	return s
}

// SetMlpInstanceID sets the MlpInstanceID field's value.
func (s *ConditionsForUpdateMlpAlarmStatusInput) SetMlpInstanceID(v string) *ConditionsForUpdateMlpAlarmStatusInput {
	s.MlpInstanceID = &v
	return s
}

// SetName sets the Name field's value.
func (s *ConditionsForUpdateMlpAlarmStatusInput) SetName(v string) *ConditionsForUpdateMlpAlarmStatusInput {
	s.Name = &v
	return s
}

// SetProbeHook sets the ProbeHook field's value.
func (s *ConditionsForUpdateMlpAlarmStatusInput) SetProbeHook(v string) *ConditionsForUpdateMlpAlarmStatusInput {
	s.ProbeHook = &v
	return s
}

// SetRaspArgv sets the RaspArgv field's value.
func (s *ConditionsForUpdateMlpAlarmStatusInput) SetRaspArgv(v string) *ConditionsForUpdateMlpAlarmStatusInput {
	s.RaspArgv = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *ConditionsForUpdateMlpAlarmStatusInput) SetStatus(v []*int64) *ConditionsForUpdateMlpAlarmStatusInput {
	s.Status = v
	return s
}

// SetTags sets the Tags field's value.
func (s *ConditionsForUpdateMlpAlarmStatusInput) SetTags(v []*string) *ConditionsForUpdateMlpAlarmStatusInput {
	s.Tags = v
	return s
}

// SetTaskID sets the TaskID field's value.
func (s *ConditionsForUpdateMlpAlarmStatusInput) SetTaskID(v string) *ConditionsForUpdateMlpAlarmStatusInput {
	s.TaskID = &v
	return s
}

// SetTimeEnd sets the TimeEnd field's value.
func (s *ConditionsForUpdateMlpAlarmStatusInput) SetTimeEnd(v int64) *ConditionsForUpdateMlpAlarmStatusInput {
	s.TimeEnd = &v
	return s
}

// SetTimeStart sets the TimeStart field's value.
func (s *ConditionsForUpdateMlpAlarmStatusInput) SetTimeStart(v int64) *ConditionsForUpdateMlpAlarmStatusInput {
	s.TimeStart = &v
	return s
}

// SetTopGroupID sets the TopGroupID field's value.
func (s *ConditionsForUpdateMlpAlarmStatusInput) SetTopGroupID(v string) *ConditionsForUpdateMlpAlarmStatusInput {
	s.TopGroupID = &v
	return s
}

// SetType sets the Type field's value.
func (s *ConditionsForUpdateMlpAlarmStatusInput) SetType(v []*string) *ConditionsForUpdateMlpAlarmStatusInput {
	s.Type = v
	return s
}

// SetVirusType sets the VirusType field's value.
func (s *ConditionsForUpdateMlpAlarmStatusInput) SetVirusType(v string) *ConditionsForUpdateMlpAlarmStatusInput {
	s.VirusType = &v
	return s
}

// SetWhiteListID sets the WhiteListID field's value.
func (s *ConditionsForUpdateMlpAlarmStatusInput) SetWhiteListID(v string) *ConditionsForUpdateMlpAlarmStatusInput {
	s.WhiteListID = &v
	return s
}

// SetWhiteListName sets the WhiteListName field's value.
func (s *ConditionsForUpdateMlpAlarmStatusInput) SetWhiteListName(v string) *ConditionsForUpdateMlpAlarmStatusInput {
	s.WhiteListName = &v
	return s
}

type DataForUpdateMlpAlarmStatusOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	AlarmID *string `type:"string" json:",omitempty"`

	Code *int64 `type:"int64" json:",omitempty"`

	Msg *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s DataForUpdateMlpAlarmStatusOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DataForUpdateMlpAlarmStatusOutput) GoString() string {
	return s.String()
}

// SetAlarmID sets the AlarmID field's value.
func (s *DataForUpdateMlpAlarmStatusOutput) SetAlarmID(v string) *DataForUpdateMlpAlarmStatusOutput {
	s.AlarmID = &v
	return s
}

// SetCode sets the Code field's value.
func (s *DataForUpdateMlpAlarmStatusOutput) SetCode(v int64) *DataForUpdateMlpAlarmStatusOutput {
	s.Code = &v
	return s
}

// SetMsg sets the Msg field's value.
func (s *DataForUpdateMlpAlarmStatusOutput) SetMsg(v string) *DataForUpdateMlpAlarmStatusOutput {
	s.Msg = &v
	return s
}

type UpdateMlpAlarmStatusInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	AlarmIDList []*string `type:"list" json:",omitempty"`

	Conditions *ConditionsForUpdateMlpAlarmStatusInput `type:"structure" json:",omitempty"`

	CustomTagList []*string `type:"list" json:",omitempty"`

	HandleMethod *int64 `type:"int64" json:",omitempty"`

	// Type is a required field
	Type *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s UpdateMlpAlarmStatusInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateMlpAlarmStatusInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UpdateMlpAlarmStatusInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "UpdateMlpAlarmStatusInput"}
	if s.Type == nil {
		invalidParams.Add(request.NewErrParamRequired("Type"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAlarmIDList sets the AlarmIDList field's value.
func (s *UpdateMlpAlarmStatusInput) SetAlarmIDList(v []*string) *UpdateMlpAlarmStatusInput {
	s.AlarmIDList = v
	return s
}

// SetConditions sets the Conditions field's value.
func (s *UpdateMlpAlarmStatusInput) SetConditions(v *ConditionsForUpdateMlpAlarmStatusInput) *UpdateMlpAlarmStatusInput {
	s.Conditions = v
	return s
}

// SetCustomTagList sets the CustomTagList field's value.
func (s *UpdateMlpAlarmStatusInput) SetCustomTagList(v []*string) *UpdateMlpAlarmStatusInput {
	s.CustomTagList = v
	return s
}

// SetHandleMethod sets the HandleMethod field's value.
func (s *UpdateMlpAlarmStatusInput) SetHandleMethod(v int64) *UpdateMlpAlarmStatusInput {
	s.HandleMethod = &v
	return s
}

// SetType sets the Type field's value.
func (s *UpdateMlpAlarmStatusInput) SetType(v string) *UpdateMlpAlarmStatusInput {
	s.Type = &v
	return s
}

type UpdateMlpAlarmStatusOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Data []*DataForUpdateMlpAlarmStatusOutput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s UpdateMlpAlarmStatusOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateMlpAlarmStatusOutput) GoString() string {
	return s.String()
}

// SetData sets the Data field's value.
func (s *UpdateMlpAlarmStatusOutput) SetData(v []*DataForUpdateMlpAlarmStatusOutput) *UpdateMlpAlarmStatusOutput {
	s.Data = v
	return s
}
