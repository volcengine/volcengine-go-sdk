// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package seccenter20240508

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opPrecisionStatisticsCommon = "PrecisionStatistics"

// PrecisionStatisticsCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the PrecisionStatisticsCommon operation. The "output" return
// value will be populated with the PrecisionStatisticsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned PrecisionStatisticsCommon Request to send the API call to the service.
// the "output" return value is not valid until after PrecisionStatisticsCommon Send returns without error.
//
// See PrecisionStatisticsCommon for more information on using the PrecisionStatisticsCommon
// API call, and error handling.
//
//    // Example sending a request using the PrecisionStatisticsCommonRequest method.
//    req, resp := client.PrecisionStatisticsCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECCENTER20240508) PrecisionStatisticsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opPrecisionStatisticsCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// PrecisionStatisticsCommon API operation for SECCENTER20240508.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SECCENTER20240508's
// API operation PrecisionStatisticsCommon for usage and error information.
func (c *SECCENTER20240508) PrecisionStatisticsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.PrecisionStatisticsCommonRequest(input)
	return out, req.Send()
}

// PrecisionStatisticsCommonWithContext is the same as PrecisionStatisticsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See PrecisionStatisticsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECCENTER20240508) PrecisionStatisticsCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.PrecisionStatisticsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opPrecisionStatistics = "PrecisionStatistics"

// PrecisionStatisticsRequest generates a "volcengine/request.Request" representing the
// client's request for the PrecisionStatistics operation. The "output" return
// value will be populated with the PrecisionStatisticsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned PrecisionStatisticsCommon Request to send the API call to the service.
// the "output" return value is not valid until after PrecisionStatisticsCommon Send returns without error.
//
// See PrecisionStatistics for more information on using the PrecisionStatistics
// API call, and error handling.
//
//    // Example sending a request using the PrecisionStatisticsRequest method.
//    req, resp := client.PrecisionStatisticsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECCENTER20240508) PrecisionStatisticsRequest(input *PrecisionStatisticsInput) (req *request.Request, output *PrecisionStatisticsOutput) {
	op := &request.Operation{
		Name:       opPrecisionStatistics,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &PrecisionStatisticsInput{}
	}

	output = &PrecisionStatisticsOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// PrecisionStatistics API operation for SECCENTER20240508.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SECCENTER20240508's
// API operation PrecisionStatistics for usage and error information.
func (c *SECCENTER20240508) PrecisionStatistics(input *PrecisionStatisticsInput) (*PrecisionStatisticsOutput, error) {
	req, out := c.PrecisionStatisticsRequest(input)
	return out, req.Send()
}

// PrecisionStatisticsWithContext is the same as PrecisionStatistics with the addition of
// the ability to pass a context and additional request options.
//
// See PrecisionStatistics for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECCENTER20240508) PrecisionStatisticsWithContext(ctx volcengine.Context, input *PrecisionStatisticsInput, opts ...request.Option) (*PrecisionStatisticsOutput, error) {
	req, out := c.PrecisionStatisticsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DistributionForPrecisionStatisticsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Key *string `type:"string" json:",omitempty"`

	Value *int64 `type:"int64" json:",omitempty"`
}

// String returns the string representation
func (s DistributionForPrecisionStatisticsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DistributionForPrecisionStatisticsOutput) GoString() string {
	return s.String()
}

// SetKey sets the Key field's value.
func (s *DistributionForPrecisionStatisticsOutput) SetKey(v string) *DistributionForPrecisionStatisticsOutput {
	s.Key = &v
	return s
}

// SetValue sets the Value field's value.
func (s *DistributionForPrecisionStatisticsOutput) SetValue(v int64) *DistributionForPrecisionStatisticsOutput {
	s.Value = &v
	return s
}

type PrecisionStatisticsInput struct {
	_ struct{} `type:"structure" json:",omitempty"`
}

// String returns the string representation
func (s PrecisionStatisticsInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s PrecisionStatisticsInput) GoString() string {
	return s.String()
}

type PrecisionStatisticsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Distribution []*DistributionForPrecisionStatisticsOutput `type:"list" json:",omitempty"`

	TodayNewCount *int64 `type:"int64" json:",omitempty"`

	TotalCount *int64 `type:"int64" json:",omitempty"`
}

// String returns the string representation
func (s PrecisionStatisticsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s PrecisionStatisticsOutput) GoString() string {
	return s.String()
}

// SetDistribution sets the Distribution field's value.
func (s *PrecisionStatisticsOutput) SetDistribution(v []*DistributionForPrecisionStatisticsOutput) *PrecisionStatisticsOutput {
	s.Distribution = v
	return s
}

// SetTodayNewCount sets the TodayNewCount field's value.
func (s *PrecisionStatisticsOutput) SetTodayNewCount(v int64) *PrecisionStatisticsOutput {
	s.TodayNewCount = &v
	return s
}

// SetTotalCount sets the TotalCount field's value.
func (s *PrecisionStatisticsOutput) SetTotalCount(v int64) *PrecisionStatisticsOutput {
	s.TotalCount = &v
	return s
}
