// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package seccenter20240508

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opUpdateOfflineNotificationConfigCommon = "UpdateOfflineNotificationConfig"

// UpdateOfflineNotificationConfigCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateOfflineNotificationConfigCommon operation. The "output" return
// value will be populated with the UpdateOfflineNotificationConfigCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateOfflineNotificationConfigCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateOfflineNotificationConfigCommon Send returns without error.
//
// See UpdateOfflineNotificationConfigCommon for more information on using the UpdateOfflineNotificationConfigCommon
// API call, and error handling.
//
//    // Example sending a request using the UpdateOfflineNotificationConfigCommonRequest method.
//    req, resp := client.UpdateOfflineNotificationConfigCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECCENTER20240508) UpdateOfflineNotificationConfigCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opUpdateOfflineNotificationConfigCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateOfflineNotificationConfigCommon API operation for SECCENTER20240508.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SECCENTER20240508's
// API operation UpdateOfflineNotificationConfigCommon for usage and error information.
func (c *SECCENTER20240508) UpdateOfflineNotificationConfigCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.UpdateOfflineNotificationConfigCommonRequest(input)
	return out, req.Send()
}

// UpdateOfflineNotificationConfigCommonWithContext is the same as UpdateOfflineNotificationConfigCommon with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateOfflineNotificationConfigCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECCENTER20240508) UpdateOfflineNotificationConfigCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.UpdateOfflineNotificationConfigCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opUpdateOfflineNotificationConfig = "UpdateOfflineNotificationConfig"

// UpdateOfflineNotificationConfigRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateOfflineNotificationConfig operation. The "output" return
// value will be populated with the UpdateOfflineNotificationConfigCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateOfflineNotificationConfigCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateOfflineNotificationConfigCommon Send returns without error.
//
// See UpdateOfflineNotificationConfig for more information on using the UpdateOfflineNotificationConfig
// API call, and error handling.
//
//    // Example sending a request using the UpdateOfflineNotificationConfigRequest method.
//    req, resp := client.UpdateOfflineNotificationConfigRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECCENTER20240508) UpdateOfflineNotificationConfigRequest(input *UpdateOfflineNotificationConfigInput) (req *request.Request, output *UpdateOfflineNotificationConfigOutput) {
	op := &request.Operation{
		Name:       opUpdateOfflineNotificationConfig,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UpdateOfflineNotificationConfigInput{}
	}

	output = &UpdateOfflineNotificationConfigOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateOfflineNotificationConfig API operation for SECCENTER20240508.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SECCENTER20240508's
// API operation UpdateOfflineNotificationConfig for usage and error information.
func (c *SECCENTER20240508) UpdateOfflineNotificationConfig(input *UpdateOfflineNotificationConfigInput) (*UpdateOfflineNotificationConfigOutput, error) {
	req, out := c.UpdateOfflineNotificationConfigRequest(input)
	return out, req.Send()
}

// UpdateOfflineNotificationConfigWithContext is the same as UpdateOfflineNotificationConfig with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateOfflineNotificationConfig for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECCENTER20240508) UpdateOfflineNotificationConfigWithContext(ctx volcengine.Context, input *UpdateOfflineNotificationConfigInput, opts ...request.Option) (*UpdateOfflineNotificationConfigOutput, error) {
	req, out := c.UpdateOfflineNotificationConfigRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type UpdateOfflineNotificationConfigInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// NotificationSwitchOn is a required field
	NotificationSwitchOn *bool `type:"boolean" json:",omitempty" required:"true"`

	// NotificationThreshold is a required field
	NotificationThreshold *int64 `type:"int64" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s UpdateOfflineNotificationConfigInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateOfflineNotificationConfigInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UpdateOfflineNotificationConfigInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "UpdateOfflineNotificationConfigInput"}
	if s.NotificationSwitchOn == nil {
		invalidParams.Add(request.NewErrParamRequired("NotificationSwitchOn"))
	}
	if s.NotificationThreshold == nil {
		invalidParams.Add(request.NewErrParamRequired("NotificationThreshold"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetNotificationSwitchOn sets the NotificationSwitchOn field's value.
func (s *UpdateOfflineNotificationConfigInput) SetNotificationSwitchOn(v bool) *UpdateOfflineNotificationConfigInput {
	s.NotificationSwitchOn = &v
	return s
}

// SetNotificationThreshold sets the NotificationThreshold field's value.
func (s *UpdateOfflineNotificationConfigInput) SetNotificationThreshold(v int64) *UpdateOfflineNotificationConfigInput {
	s.NotificationThreshold = &v
	return s
}

type UpdateOfflineNotificationConfigOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Data *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s UpdateOfflineNotificationConfigOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateOfflineNotificationConfigOutput) GoString() string {
	return s.String()
}

// SetData sets the Data field's value.
func (s *UpdateOfflineNotificationConfigOutput) SetData(v string) *UpdateOfflineNotificationConfigOutput {
	s.Data = &v
	return s
}
