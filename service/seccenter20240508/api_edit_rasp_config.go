// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package seccenter20240508

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opEditRaspConfigCommon = "EditRaspConfig"

// EditRaspConfigCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the EditRaspConfigCommon operation. The "output" return
// value will be populated with the EditRaspConfigCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned EditRaspConfigCommon Request to send the API call to the service.
// the "output" return value is not valid until after EditRaspConfigCommon Send returns without error.
//
// See EditRaspConfigCommon for more information on using the EditRaspConfigCommon
// API call, and error handling.
//
//    // Example sending a request using the EditRaspConfigCommonRequest method.
//    req, resp := client.EditRaspConfigCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECCENTER20240508) EditRaspConfigCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opEditRaspConfigCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// EditRaspConfigCommon API operation for SECCENTER20240508.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SECCENTER20240508's
// API operation EditRaspConfigCommon for usage and error information.
func (c *SECCENTER20240508) EditRaspConfigCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.EditRaspConfigCommonRequest(input)
	return out, req.Send()
}

// EditRaspConfigCommonWithContext is the same as EditRaspConfigCommon with the addition of
// the ability to pass a context and additional request options.
//
// See EditRaspConfigCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECCENTER20240508) EditRaspConfigCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.EditRaspConfigCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opEditRaspConfig = "EditRaspConfig"

// EditRaspConfigRequest generates a "volcengine/request.Request" representing the
// client's request for the EditRaspConfig operation. The "output" return
// value will be populated with the EditRaspConfigCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned EditRaspConfigCommon Request to send the API call to the service.
// the "output" return value is not valid until after EditRaspConfigCommon Send returns without error.
//
// See EditRaspConfig for more information on using the EditRaspConfig
// API call, and error handling.
//
//    // Example sending a request using the EditRaspConfigRequest method.
//    req, resp := client.EditRaspConfigRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECCENTER20240508) EditRaspConfigRequest(input *EditRaspConfigInput) (req *request.Request, output *EditRaspConfigOutput) {
	op := &request.Operation{
		Name:       opEditRaspConfig,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &EditRaspConfigInput{}
	}

	output = &EditRaspConfigOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// EditRaspConfig API operation for SECCENTER20240508.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SECCENTER20240508's
// API operation EditRaspConfig for usage and error information.
func (c *SECCENTER20240508) EditRaspConfig(input *EditRaspConfigInput) (*EditRaspConfigOutput, error) {
	req, out := c.EditRaspConfigRequest(input)
	return out, req.Send()
}

// EditRaspConfigWithContext is the same as EditRaspConfig with the addition of
// the ability to pass a context and additional request options.
//
// See EditRaspConfig for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECCENTER20240508) EditRaspConfigWithContext(ctx volcengine.Context, input *EditRaspConfigInput, opts ...request.Option) (*EditRaspConfigOutput, error) {
	req, out := c.EditRaspConfigRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type BlockForEditRaspConfigInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	HookFunc []*string `type:"list" json:",omitempty"`

	HookParam *int64 `type:"int64" json:",omitempty"`

	Rules []*RuleForEditRaspConfigInput `type:"list" json:",omitempty"`

	Runtime *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s BlockForEditRaspConfigInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s BlockForEditRaspConfigInput) GoString() string {
	return s.String()
}

// SetHookFunc sets the HookFunc field's value.
func (s *BlockForEditRaspConfigInput) SetHookFunc(v []*string) *BlockForEditRaspConfigInput {
	s.HookFunc = v
	return s
}

// SetHookParam sets the HookParam field's value.
func (s *BlockForEditRaspConfigInput) SetHookParam(v int64) *BlockForEditRaspConfigInput {
	s.HookParam = &v
	return s
}

// SetRules sets the Rules field's value.
func (s *BlockForEditRaspConfigInput) SetRules(v []*RuleForEditRaspConfigInput) *BlockForEditRaspConfigInput {
	s.Rules = v
	return s
}

// SetRuntime sets the Runtime field's value.
func (s *BlockForEditRaspConfigInput) SetRuntime(v string) *BlockForEditRaspConfigInput {
	s.Runtime = &v
	return s
}

type EditRaspConfigInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	AllProcessInject *bool `type:"boolean" json:",omitempty"`

	Blocks []*BlockForEditRaspConfigInput `type:"list" json:",omitempty"`

	Filters []*FilterForEditRaspConfigInput `type:"list" json:",omitempty"`

	// ID is a required field
	ID *string `type:"string" json:",omitempty" required:"true"`

	IfProtect *bool `type:"boolean" json:",omitempty"`

	InjectConfigList []*InjectConfigListForEditRaspConfigInput `type:"list" json:",omitempty"`

	LocalProjectInject *bool `type:"boolean" json:",omitempty"`

	// Name is a required field
	Name *string `type:"string" json:",omitempty" required:"true"`

	// ProtectMethod is a required field
	ProtectMethod *string `type:"string" json:",omitempty" required:"true"`

	Range *RangeForEditRaspConfigInput `type:"structure" json:",omitempty"`

	// Runtime is a required field
	Runtime *string `type:"string" json:",omitempty" required:"true"`

	Switch *SwitchForEditRaspConfigInput `type:"structure" json:",omitempty"`

	TopGroupID *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s EditRaspConfigInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s EditRaspConfigInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *EditRaspConfigInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "EditRaspConfigInput"}
	if s.ID == nil {
		invalidParams.Add(request.NewErrParamRequired("ID"))
	}
	if s.Name == nil {
		invalidParams.Add(request.NewErrParamRequired("Name"))
	}
	if s.ProtectMethod == nil {
		invalidParams.Add(request.NewErrParamRequired("ProtectMethod"))
	}
	if s.Runtime == nil {
		invalidParams.Add(request.NewErrParamRequired("Runtime"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAllProcessInject sets the AllProcessInject field's value.
func (s *EditRaspConfigInput) SetAllProcessInject(v bool) *EditRaspConfigInput {
	s.AllProcessInject = &v
	return s
}

// SetBlocks sets the Blocks field's value.
func (s *EditRaspConfigInput) SetBlocks(v []*BlockForEditRaspConfigInput) *EditRaspConfigInput {
	s.Blocks = v
	return s
}

// SetFilters sets the Filters field's value.
func (s *EditRaspConfigInput) SetFilters(v []*FilterForEditRaspConfigInput) *EditRaspConfigInput {
	s.Filters = v
	return s
}

// SetID sets the ID field's value.
func (s *EditRaspConfigInput) SetID(v string) *EditRaspConfigInput {
	s.ID = &v
	return s
}

// SetIfProtect sets the IfProtect field's value.
func (s *EditRaspConfigInput) SetIfProtect(v bool) *EditRaspConfigInput {
	s.IfProtect = &v
	return s
}

// SetInjectConfigList sets the InjectConfigList field's value.
func (s *EditRaspConfigInput) SetInjectConfigList(v []*InjectConfigListForEditRaspConfigInput) *EditRaspConfigInput {
	s.InjectConfigList = v
	return s
}

// SetLocalProjectInject sets the LocalProjectInject field's value.
func (s *EditRaspConfigInput) SetLocalProjectInject(v bool) *EditRaspConfigInput {
	s.LocalProjectInject = &v
	return s
}

// SetName sets the Name field's value.
func (s *EditRaspConfigInput) SetName(v string) *EditRaspConfigInput {
	s.Name = &v
	return s
}

// SetProtectMethod sets the ProtectMethod field's value.
func (s *EditRaspConfigInput) SetProtectMethod(v string) *EditRaspConfigInput {
	s.ProtectMethod = &v
	return s
}

// SetRange sets the Range field's value.
func (s *EditRaspConfigInput) SetRange(v *RangeForEditRaspConfigInput) *EditRaspConfigInput {
	s.Range = v
	return s
}

// SetRuntime sets the Runtime field's value.
func (s *EditRaspConfigInput) SetRuntime(v string) *EditRaspConfigInput {
	s.Runtime = &v
	return s
}

// SetSwitch sets the Switch field's value.
func (s *EditRaspConfigInput) SetSwitch(v *SwitchForEditRaspConfigInput) *EditRaspConfigInput {
	s.Switch = v
	return s
}

// SetTopGroupID sets the TopGroupID field's value.
func (s *EditRaspConfigInput) SetTopGroupID(v string) *EditRaspConfigInput {
	s.TopGroupID = &v
	return s
}

type EditRaspConfigOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Success *bool `type:"boolean" json:",omitempty"`
}

// String returns the string representation
func (s EditRaspConfigOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s EditRaspConfigOutput) GoString() string {
	return s.String()
}

// SetSuccess sets the Success field's value.
func (s *EditRaspConfigOutput) SetSuccess(v bool) *EditRaspConfigOutput {
	s.Success = &v
	return s
}

type FilterForEditRaspConfigInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	HookFunc []*string `type:"list" json:",omitempty"`

	HookParam *int64 `type:"int64" json:",omitempty"`

	Rules []*RuleForEditRaspConfigInput `type:"list" json:",omitempty"`

	Runtime *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s FilterForEditRaspConfigInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s FilterForEditRaspConfigInput) GoString() string {
	return s.String()
}

// SetHookFunc sets the HookFunc field's value.
func (s *FilterForEditRaspConfigInput) SetHookFunc(v []*string) *FilterForEditRaspConfigInput {
	s.HookFunc = v
	return s
}

// SetHookParam sets the HookParam field's value.
func (s *FilterForEditRaspConfigInput) SetHookParam(v int64) *FilterForEditRaspConfigInput {
	s.HookParam = &v
	return s
}

// SetRules sets the Rules field's value.
func (s *FilterForEditRaspConfigInput) SetRules(v []*RuleForEditRaspConfigInput) *FilterForEditRaspConfigInput {
	s.Rules = v
	return s
}

// SetRuntime sets the Runtime field's value.
func (s *FilterForEditRaspConfigInput) SetRuntime(v string) *FilterForEditRaspConfigInput {
	s.Runtime = &v
	return s
}

type InjectConfigListForEditRaspConfigInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	MatchContent []*string `type:"list" json:",omitempty"`

	MatchKey *string `type:"string" json:",omitempty"`

	MatchType *int64 `type:"int64" json:",omitempty"`
}

// String returns the string representation
func (s InjectConfigListForEditRaspConfigInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s InjectConfigListForEditRaspConfigInput) GoString() string {
	return s.String()
}

// SetMatchContent sets the MatchContent field's value.
func (s *InjectConfigListForEditRaspConfigInput) SetMatchContent(v []*string) *InjectConfigListForEditRaspConfigInput {
	s.MatchContent = v
	return s
}

// SetMatchKey sets the MatchKey field's value.
func (s *InjectConfigListForEditRaspConfigInput) SetMatchKey(v string) *InjectConfigListForEditRaspConfigInput {
	s.MatchKey = &v
	return s
}

// SetMatchType sets the MatchType field's value.
func (s *InjectConfigListForEditRaspConfigInput) SetMatchType(v int64) *InjectConfigListForEditRaspConfigInput {
	s.MatchType = &v
	return s
}

type RangeForEditRaspConfigInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	AgentIDList []*string `type:"list" json:",omitempty"`

	AllHost *bool `type:"boolean" json:",omitempty"`

	LeafGroupIDs []*string `type:"list" json:",omitempty"`

	SingleGroupPath *string `type:"string" json:",omitempty"`

	SingleHostname *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s RangeForEditRaspConfigInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s RangeForEditRaspConfigInput) GoString() string {
	return s.String()
}

// SetAgentIDList sets the AgentIDList field's value.
func (s *RangeForEditRaspConfigInput) SetAgentIDList(v []*string) *RangeForEditRaspConfigInput {
	s.AgentIDList = v
	return s
}

// SetAllHost sets the AllHost field's value.
func (s *RangeForEditRaspConfigInput) SetAllHost(v bool) *RangeForEditRaspConfigInput {
	s.AllHost = &v
	return s
}

// SetLeafGroupIDs sets the LeafGroupIDs field's value.
func (s *RangeForEditRaspConfigInput) SetLeafGroupIDs(v []*string) *RangeForEditRaspConfigInput {
	s.LeafGroupIDs = v
	return s
}

// SetSingleGroupPath sets the SingleGroupPath field's value.
func (s *RangeForEditRaspConfigInput) SetSingleGroupPath(v string) *RangeForEditRaspConfigInput {
	s.SingleGroupPath = &v
	return s
}

// SetSingleHostname sets the SingleHostname field's value.
func (s *RangeForEditRaspConfigInput) SetSingleHostname(v string) *RangeForEditRaspConfigInput {
	s.SingleHostname = &v
	return s
}

type RuleForEditRaspConfigInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Rule *string `type:"string" json:",omitempty"`

	Type *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s RuleForEditRaspConfigInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s RuleForEditRaspConfigInput) GoString() string {
	return s.String()
}

// SetRule sets the Rule field's value.
func (s *RuleForEditRaspConfigInput) SetRule(v string) *RuleForEditRaspConfigInput {
	s.Rule = &v
	return s
}

// SetType sets the Type field's value.
func (s *RuleForEditRaspConfigInput) SetType(v string) *RuleForEditRaspConfigInput {
	s.Type = &v
	return s
}

type SwitchForEditRaspConfigInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Classupload *bool `type:"boolean" json:"classupload,omitempty"`

	File *bool `type:"boolean" json:"file,omitempty"`

	Load *bool `type:"boolean" json:"load,omitempty"`

	Memshell *bool `type:"boolean" json:"memshell,omitempty"`

	Net *bool `type:"boolean" json:"net,omitempty"`

	Process *bool `type:"boolean" json:"process,omitempty"`

	Reflect *bool `type:"boolean" json:"reflect,omitempty"`
}

// String returns the string representation
func (s SwitchForEditRaspConfigInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s SwitchForEditRaspConfigInput) GoString() string {
	return s.String()
}

// SetClassupload sets the Classupload field's value.
func (s *SwitchForEditRaspConfigInput) SetClassupload(v bool) *SwitchForEditRaspConfigInput {
	s.Classupload = &v
	return s
}

// SetFile sets the File field's value.
func (s *SwitchForEditRaspConfigInput) SetFile(v bool) *SwitchForEditRaspConfigInput {
	s.File = &v
	return s
}

// SetLoad sets the Load field's value.
func (s *SwitchForEditRaspConfigInput) SetLoad(v bool) *SwitchForEditRaspConfigInput {
	s.Load = &v
	return s
}

// SetMemshell sets the Memshell field's value.
func (s *SwitchForEditRaspConfigInput) SetMemshell(v bool) *SwitchForEditRaspConfigInput {
	s.Memshell = &v
	return s
}

// SetNet sets the Net field's value.
func (s *SwitchForEditRaspConfigInput) SetNet(v bool) *SwitchForEditRaspConfigInput {
	s.Net = &v
	return s
}

// SetProcess sets the Process field's value.
func (s *SwitchForEditRaspConfigInput) SetProcess(v bool) *SwitchForEditRaspConfigInput {
	s.Process = &v
	return s
}

// SetReflect sets the Reflect field's value.
func (s *SwitchForEditRaspConfigInput) SetReflect(v bool) *SwitchForEditRaspConfigInput {
	s.Reflect = &v
	return s
}
