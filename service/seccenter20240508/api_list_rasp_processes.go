// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package seccenter20240508

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opListRaspProcessesCommon = "ListRaspProcesses"

// ListRaspProcessesCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ListRaspProcessesCommon operation. The "output" return
// value will be populated with the ListRaspProcessesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListRaspProcessesCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListRaspProcessesCommon Send returns without error.
//
// See ListRaspProcessesCommon for more information on using the ListRaspProcessesCommon
// API call, and error handling.
//
//    // Example sending a request using the ListRaspProcessesCommonRequest method.
//    req, resp := client.ListRaspProcessesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECCENTER20240508) ListRaspProcessesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opListRaspProcessesCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListRaspProcessesCommon API operation for SECCENTER20240508.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SECCENTER20240508's
// API operation ListRaspProcessesCommon for usage and error information.
func (c *SECCENTER20240508) ListRaspProcessesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ListRaspProcessesCommonRequest(input)
	return out, req.Send()
}

// ListRaspProcessesCommonWithContext is the same as ListRaspProcessesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ListRaspProcessesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECCENTER20240508) ListRaspProcessesCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ListRaspProcessesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListRaspProcesses = "ListRaspProcesses"

// ListRaspProcessesRequest generates a "volcengine/request.Request" representing the
// client's request for the ListRaspProcesses operation. The "output" return
// value will be populated with the ListRaspProcessesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListRaspProcessesCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListRaspProcessesCommon Send returns without error.
//
// See ListRaspProcesses for more information on using the ListRaspProcesses
// API call, and error handling.
//
//    // Example sending a request using the ListRaspProcessesRequest method.
//    req, resp := client.ListRaspProcessesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECCENTER20240508) ListRaspProcessesRequest(input *ListRaspProcessesInput) (req *request.Request, output *ListRaspProcessesOutput) {
	op := &request.Operation{
		Name:       opListRaspProcesses,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListRaspProcessesInput{}
	}

	output = &ListRaspProcessesOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListRaspProcesses API operation for SECCENTER20240508.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SECCENTER20240508's
// API operation ListRaspProcesses for usage and error information.
func (c *SECCENTER20240508) ListRaspProcesses(input *ListRaspProcessesInput) (*ListRaspProcessesOutput, error) {
	req, out := c.ListRaspProcessesRequest(input)
	return out, req.Send()
}

// ListRaspProcessesWithContext is the same as ListRaspProcesses with the addition of
// the ability to pass a context and additional request options.
//
// See ListRaspProcesses for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECCENTER20240508) ListRaspProcessesWithContext(ctx volcengine.Context, input *ListRaspProcessesInput, opts ...request.Option) (*ListRaspProcessesOutput, error) {
	req, out := c.ListRaspProcessesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DataForListRaspProcessesOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	AgentID *string `type:"string" json:",omitempty"`

	AgentTags []*string `type:"list" json:",omitempty"`

	Cmdline *string `type:"string" json:",omitempty"`

	ExeName *string `type:"string" json:",omitempty"`

	Hostname *string `type:"string" json:",omitempty"`

	ID *string `type:"string" json:",omitempty"`

	InnerIPList []*string `type:"list" json:",omitempty"`

	InspectPort *int64 `type:"int64" json:",omitempty"`

	OuterIPList []*string `type:"list" json:",omitempty"`

	Pid *string `type:"string" json:",omitempty"`

	Platform *string `type:"string" json:",omitempty"`

	PlatformFamily *string `type:"string" json:",omitempty"`

	RaspConfigName *string `type:"string" json:",omitempty"`

	Reason *string `type:"string" json:",omitempty"`

	RelatedConfigID *string `type:"string" json:",omitempty"`

	Runtime *string `type:"string" json:",omitempty"`

	StartTimeUnix *int64 `type:"int64" json:",omitempty"`

	Status *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s DataForListRaspProcessesOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DataForListRaspProcessesOutput) GoString() string {
	return s.String()
}

// SetAgentID sets the AgentID field's value.
func (s *DataForListRaspProcessesOutput) SetAgentID(v string) *DataForListRaspProcessesOutput {
	s.AgentID = &v
	return s
}

// SetAgentTags sets the AgentTags field's value.
func (s *DataForListRaspProcessesOutput) SetAgentTags(v []*string) *DataForListRaspProcessesOutput {
	s.AgentTags = v
	return s
}

// SetCmdline sets the Cmdline field's value.
func (s *DataForListRaspProcessesOutput) SetCmdline(v string) *DataForListRaspProcessesOutput {
	s.Cmdline = &v
	return s
}

// SetExeName sets the ExeName field's value.
func (s *DataForListRaspProcessesOutput) SetExeName(v string) *DataForListRaspProcessesOutput {
	s.ExeName = &v
	return s
}

// SetHostname sets the Hostname field's value.
func (s *DataForListRaspProcessesOutput) SetHostname(v string) *DataForListRaspProcessesOutput {
	s.Hostname = &v
	return s
}

// SetID sets the ID field's value.
func (s *DataForListRaspProcessesOutput) SetID(v string) *DataForListRaspProcessesOutput {
	s.ID = &v
	return s
}

// SetInnerIPList sets the InnerIPList field's value.
func (s *DataForListRaspProcessesOutput) SetInnerIPList(v []*string) *DataForListRaspProcessesOutput {
	s.InnerIPList = v
	return s
}

// SetInspectPort sets the InspectPort field's value.
func (s *DataForListRaspProcessesOutput) SetInspectPort(v int64) *DataForListRaspProcessesOutput {
	s.InspectPort = &v
	return s
}

// SetOuterIPList sets the OuterIPList field's value.
func (s *DataForListRaspProcessesOutput) SetOuterIPList(v []*string) *DataForListRaspProcessesOutput {
	s.OuterIPList = v
	return s
}

// SetPid sets the Pid field's value.
func (s *DataForListRaspProcessesOutput) SetPid(v string) *DataForListRaspProcessesOutput {
	s.Pid = &v
	return s
}

// SetPlatform sets the Platform field's value.
func (s *DataForListRaspProcessesOutput) SetPlatform(v string) *DataForListRaspProcessesOutput {
	s.Platform = &v
	return s
}

// SetPlatformFamily sets the PlatformFamily field's value.
func (s *DataForListRaspProcessesOutput) SetPlatformFamily(v string) *DataForListRaspProcessesOutput {
	s.PlatformFamily = &v
	return s
}

// SetRaspConfigName sets the RaspConfigName field's value.
func (s *DataForListRaspProcessesOutput) SetRaspConfigName(v string) *DataForListRaspProcessesOutput {
	s.RaspConfigName = &v
	return s
}

// SetReason sets the Reason field's value.
func (s *DataForListRaspProcessesOutput) SetReason(v string) *DataForListRaspProcessesOutput {
	s.Reason = &v
	return s
}

// SetRelatedConfigID sets the RelatedConfigID field's value.
func (s *DataForListRaspProcessesOutput) SetRelatedConfigID(v string) *DataForListRaspProcessesOutput {
	s.RelatedConfigID = &v
	return s
}

// SetRuntime sets the Runtime field's value.
func (s *DataForListRaspProcessesOutput) SetRuntime(v string) *DataForListRaspProcessesOutput {
	s.Runtime = &v
	return s
}

// SetStartTimeUnix sets the StartTimeUnix field's value.
func (s *DataForListRaspProcessesOutput) SetStartTimeUnix(v int64) *DataForListRaspProcessesOutput {
	s.StartTimeUnix = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *DataForListRaspProcessesOutput) SetStatus(v string) *DataForListRaspProcessesOutput {
	s.Status = &v
	return s
}

type ListRaspProcessesInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	AgentID *string `type:"string" json:",omitempty"`

	CloudProviders []*string `type:"list" json:",omitempty"`

	Cmdline *string `type:"string" json:",omitempty"`

	ExeName *string `type:"string" json:",omitempty"`

	ExistListenPort *bool `type:"boolean" json:",omitempty"`

	Hostname *string `type:"string" json:",omitempty"`

	IP *string `type:"string" json:",omitempty"`

	LeafGroupIDs []*string `type:"list" json:",omitempty"`

	PID *string `type:"string" json:",omitempty"`

	// PageNumber is a required field
	PageNumber *int64 `type:"int64" json:",omitempty" required:"true"`

	// PageSize is a required field
	PageSize *int64 `type:"int64" json:",omitempty" required:"true"`

	RaspConfigName *string `type:"string" json:",omitempty"`

	RelateWhiteID *string `type:"string" json:",omitempty"`

	SortBy *string `type:"string" json:",omitempty"`

	SortOrder *string `type:"string" json:",omitempty"`

	Status []*string `type:"list" json:",omitempty"`

	Tags []*string `type:"list" json:",omitempty"`

	TopGroupID *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ListRaspProcessesInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListRaspProcessesInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ListRaspProcessesInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ListRaspProcessesInput"}
	if s.PageNumber == nil {
		invalidParams.Add(request.NewErrParamRequired("PageNumber"))
	}
	if s.PageSize == nil {
		invalidParams.Add(request.NewErrParamRequired("PageSize"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAgentID sets the AgentID field's value.
func (s *ListRaspProcessesInput) SetAgentID(v string) *ListRaspProcessesInput {
	s.AgentID = &v
	return s
}

// SetCloudProviders sets the CloudProviders field's value.
func (s *ListRaspProcessesInput) SetCloudProviders(v []*string) *ListRaspProcessesInput {
	s.CloudProviders = v
	return s
}

// SetCmdline sets the Cmdline field's value.
func (s *ListRaspProcessesInput) SetCmdline(v string) *ListRaspProcessesInput {
	s.Cmdline = &v
	return s
}

// SetExeName sets the ExeName field's value.
func (s *ListRaspProcessesInput) SetExeName(v string) *ListRaspProcessesInput {
	s.ExeName = &v
	return s
}

// SetExistListenPort sets the ExistListenPort field's value.
func (s *ListRaspProcessesInput) SetExistListenPort(v bool) *ListRaspProcessesInput {
	s.ExistListenPort = &v
	return s
}

// SetHostname sets the Hostname field's value.
func (s *ListRaspProcessesInput) SetHostname(v string) *ListRaspProcessesInput {
	s.Hostname = &v
	return s
}

// SetIP sets the IP field's value.
func (s *ListRaspProcessesInput) SetIP(v string) *ListRaspProcessesInput {
	s.IP = &v
	return s
}

// SetLeafGroupIDs sets the LeafGroupIDs field's value.
func (s *ListRaspProcessesInput) SetLeafGroupIDs(v []*string) *ListRaspProcessesInput {
	s.LeafGroupIDs = v
	return s
}

// SetPID sets the PID field's value.
func (s *ListRaspProcessesInput) SetPID(v string) *ListRaspProcessesInput {
	s.PID = &v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *ListRaspProcessesInput) SetPageNumber(v int64) *ListRaspProcessesInput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *ListRaspProcessesInput) SetPageSize(v int64) *ListRaspProcessesInput {
	s.PageSize = &v
	return s
}

// SetRaspConfigName sets the RaspConfigName field's value.
func (s *ListRaspProcessesInput) SetRaspConfigName(v string) *ListRaspProcessesInput {
	s.RaspConfigName = &v
	return s
}

// SetRelateWhiteID sets the RelateWhiteID field's value.
func (s *ListRaspProcessesInput) SetRelateWhiteID(v string) *ListRaspProcessesInput {
	s.RelateWhiteID = &v
	return s
}

// SetSortBy sets the SortBy field's value.
func (s *ListRaspProcessesInput) SetSortBy(v string) *ListRaspProcessesInput {
	s.SortBy = &v
	return s
}

// SetSortOrder sets the SortOrder field's value.
func (s *ListRaspProcessesInput) SetSortOrder(v string) *ListRaspProcessesInput {
	s.SortOrder = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *ListRaspProcessesInput) SetStatus(v []*string) *ListRaspProcessesInput {
	s.Status = v
	return s
}

// SetTags sets the Tags field's value.
func (s *ListRaspProcessesInput) SetTags(v []*string) *ListRaspProcessesInput {
	s.Tags = v
	return s
}

// SetTopGroupID sets the TopGroupID field's value.
func (s *ListRaspProcessesInput) SetTopGroupID(v string) *ListRaspProcessesInput {
	s.TopGroupID = &v
	return s
}

type ListRaspProcessesOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Data []*DataForListRaspProcessesOutput `type:"list" json:",omitempty"`

	PageNumber *int64 `type:"int64" json:",omitempty"`

	PageSize *int64 `type:"int64" json:",omitempty"`

	TotalCount *int64 `type:"int64" json:",omitempty"`
}

// String returns the string representation
func (s ListRaspProcessesOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListRaspProcessesOutput) GoString() string {
	return s.String()
}

// SetData sets the Data field's value.
func (s *ListRaspProcessesOutput) SetData(v []*DataForListRaspProcessesOutput) *ListRaspProcessesOutput {
	s.Data = v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *ListRaspProcessesOutput) SetPageNumber(v int64) *ListRaspProcessesOutput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *ListRaspProcessesOutput) SetPageSize(v int64) *ListRaspProcessesOutput {
	s.PageSize = &v
	return s
}

// SetTotalCount sets the TotalCount field's value.
func (s *ListRaspProcessesOutput) SetTotalCount(v int64) *ListRaspProcessesOutput {
	s.TotalCount = &v
	return s
}
