// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package seccenter20240508

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opBatchDetectWeakPasswordCommon = "BatchDetectWeakPassword"

// BatchDetectWeakPasswordCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the BatchDetectWeakPasswordCommon operation. The "output" return
// value will be populated with the BatchDetectWeakPasswordCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned BatchDetectWeakPasswordCommon Request to send the API call to the service.
// the "output" return value is not valid until after BatchDetectWeakPasswordCommon Send returns without error.
//
// See BatchDetectWeakPasswordCommon for more information on using the BatchDetectWeakPasswordCommon
// API call, and error handling.
//
//    // Example sending a request using the BatchDetectWeakPasswordCommonRequest method.
//    req, resp := client.BatchDetectWeakPasswordCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECCENTER20240508) BatchDetectWeakPasswordCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opBatchDetectWeakPasswordCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// BatchDetectWeakPasswordCommon API operation for SECCENTER20240508.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SECCENTER20240508's
// API operation BatchDetectWeakPasswordCommon for usage and error information.
func (c *SECCENTER20240508) BatchDetectWeakPasswordCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.BatchDetectWeakPasswordCommonRequest(input)
	return out, req.Send()
}

// BatchDetectWeakPasswordCommonWithContext is the same as BatchDetectWeakPasswordCommon with the addition of
// the ability to pass a context and additional request options.
//
// See BatchDetectWeakPasswordCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECCENTER20240508) BatchDetectWeakPasswordCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.BatchDetectWeakPasswordCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opBatchDetectWeakPassword = "BatchDetectWeakPassword"

// BatchDetectWeakPasswordRequest generates a "volcengine/request.Request" representing the
// client's request for the BatchDetectWeakPassword operation. The "output" return
// value will be populated with the BatchDetectWeakPasswordCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned BatchDetectWeakPasswordCommon Request to send the API call to the service.
// the "output" return value is not valid until after BatchDetectWeakPasswordCommon Send returns without error.
//
// See BatchDetectWeakPassword for more information on using the BatchDetectWeakPassword
// API call, and error handling.
//
//    // Example sending a request using the BatchDetectWeakPasswordRequest method.
//    req, resp := client.BatchDetectWeakPasswordRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECCENTER20240508) BatchDetectWeakPasswordRequest(input *BatchDetectWeakPasswordInput) (req *request.Request, output *BatchDetectWeakPasswordOutput) {
	op := &request.Operation{
		Name:       opBatchDetectWeakPassword,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &BatchDetectWeakPasswordInput{}
	}

	output = &BatchDetectWeakPasswordOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// BatchDetectWeakPassword API operation for SECCENTER20240508.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SECCENTER20240508's
// API operation BatchDetectWeakPassword for usage and error information.
func (c *SECCENTER20240508) BatchDetectWeakPassword(input *BatchDetectWeakPasswordInput) (*BatchDetectWeakPasswordOutput, error) {
	req, out := c.BatchDetectWeakPasswordRequest(input)
	return out, req.Send()
}

// BatchDetectWeakPasswordWithContext is the same as BatchDetectWeakPassword with the addition of
// the ability to pass a context and additional request options.
//
// See BatchDetectWeakPassword for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECCENTER20240508) BatchDetectWeakPasswordWithContext(ctx volcengine.Context, input *BatchDetectWeakPasswordInput, opts ...request.Option) (*BatchDetectWeakPasswordOutput, error) {
	req, out := c.BatchDetectWeakPasswordRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type BatchDetectWeakPasswordInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	AgentID *string `type:"string" json:",omitempty"`

	BaselineID *int64 `type:"int64" json:",omitempty"`

	CloudProviders []*string `type:"list" json:",omitempty"`

	Hostname *string `type:"string" json:",omitempty"`

	IDList []*string `type:"list" json:",omitempty"`

	IP *string `type:"string" json:",omitempty"`

	LeafGroupIDs []*string `type:"list" json:",omitempty"`

	Tag []*string `type:"list" json:",omitempty"`

	TopGroupID *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s BatchDetectWeakPasswordInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s BatchDetectWeakPasswordInput) GoString() string {
	return s.String()
}

// SetAgentID sets the AgentID field's value.
func (s *BatchDetectWeakPasswordInput) SetAgentID(v string) *BatchDetectWeakPasswordInput {
	s.AgentID = &v
	return s
}

// SetBaselineID sets the BaselineID field's value.
func (s *BatchDetectWeakPasswordInput) SetBaselineID(v int64) *BatchDetectWeakPasswordInput {
	s.BaselineID = &v
	return s
}

// SetCloudProviders sets the CloudProviders field's value.
func (s *BatchDetectWeakPasswordInput) SetCloudProviders(v []*string) *BatchDetectWeakPasswordInput {
	s.CloudProviders = v
	return s
}

// SetHostname sets the Hostname field's value.
func (s *BatchDetectWeakPasswordInput) SetHostname(v string) *BatchDetectWeakPasswordInput {
	s.Hostname = &v
	return s
}

// SetIDList sets the IDList field's value.
func (s *BatchDetectWeakPasswordInput) SetIDList(v []*string) *BatchDetectWeakPasswordInput {
	s.IDList = v
	return s
}

// SetIP sets the IP field's value.
func (s *BatchDetectWeakPasswordInput) SetIP(v string) *BatchDetectWeakPasswordInput {
	s.IP = &v
	return s
}

// SetLeafGroupIDs sets the LeafGroupIDs field's value.
func (s *BatchDetectWeakPasswordInput) SetLeafGroupIDs(v []*string) *BatchDetectWeakPasswordInput {
	s.LeafGroupIDs = v
	return s
}

// SetTag sets the Tag field's value.
func (s *BatchDetectWeakPasswordInput) SetTag(v []*string) *BatchDetectWeakPasswordInput {
	s.Tag = v
	return s
}

// SetTopGroupID sets the TopGroupID field's value.
func (s *BatchDetectWeakPasswordInput) SetTopGroupID(v string) *BatchDetectWeakPasswordInput {
	s.TopGroupID = &v
	return s
}

type BatchDetectWeakPasswordOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Status *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s BatchDetectWeakPasswordOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s BatchDetectWeakPasswordOutput) GoString() string {
	return s.String()
}

// SetStatus sets the Status field's value.
func (s *BatchDetectWeakPasswordOutput) SetStatus(v string) *BatchDetectWeakPasswordOutput {
	s.Status = &v
	return s
}
