// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package seccenter20240508

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opEditFingerprintCollectConfigCommon = "EditFingerprintCollectConfig"

// EditFingerprintCollectConfigCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the EditFingerprintCollectConfigCommon operation. The "output" return
// value will be populated with the EditFingerprintCollectConfigCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned EditFingerprintCollectConfigCommon Request to send the API call to the service.
// the "output" return value is not valid until after EditFingerprintCollectConfigCommon Send returns without error.
//
// See EditFingerprintCollectConfigCommon for more information on using the EditFingerprintCollectConfigCommon
// API call, and error handling.
//
//    // Example sending a request using the EditFingerprintCollectConfigCommonRequest method.
//    req, resp := client.EditFingerprintCollectConfigCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECCENTER20240508) EditFingerprintCollectConfigCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opEditFingerprintCollectConfigCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// EditFingerprintCollectConfigCommon API operation for SECCENTER20240508.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SECCENTER20240508's
// API operation EditFingerprintCollectConfigCommon for usage and error information.
func (c *SECCENTER20240508) EditFingerprintCollectConfigCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.EditFingerprintCollectConfigCommonRequest(input)
	return out, req.Send()
}

// EditFingerprintCollectConfigCommonWithContext is the same as EditFingerprintCollectConfigCommon with the addition of
// the ability to pass a context and additional request options.
//
// See EditFingerprintCollectConfigCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECCENTER20240508) EditFingerprintCollectConfigCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.EditFingerprintCollectConfigCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opEditFingerprintCollectConfig = "EditFingerprintCollectConfig"

// EditFingerprintCollectConfigRequest generates a "volcengine/request.Request" representing the
// client's request for the EditFingerprintCollectConfig operation. The "output" return
// value will be populated with the EditFingerprintCollectConfigCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned EditFingerprintCollectConfigCommon Request to send the API call to the service.
// the "output" return value is not valid until after EditFingerprintCollectConfigCommon Send returns without error.
//
// See EditFingerprintCollectConfig for more information on using the EditFingerprintCollectConfig
// API call, and error handling.
//
//    // Example sending a request using the EditFingerprintCollectConfigRequest method.
//    req, resp := client.EditFingerprintCollectConfigRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECCENTER20240508) EditFingerprintCollectConfigRequest(input *EditFingerprintCollectConfigInput) (req *request.Request, output *EditFingerprintCollectConfigOutput) {
	op := &request.Operation{
		Name:       opEditFingerprintCollectConfig,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &EditFingerprintCollectConfigInput{}
	}

	output = &EditFingerprintCollectConfigOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// EditFingerprintCollectConfig API operation for SECCENTER20240508.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SECCENTER20240508's
// API operation EditFingerprintCollectConfig for usage and error information.
func (c *SECCENTER20240508) EditFingerprintCollectConfig(input *EditFingerprintCollectConfigInput) (*EditFingerprintCollectConfigOutput, error) {
	req, out := c.EditFingerprintCollectConfigRequest(input)
	return out, req.Send()
}

// EditFingerprintCollectConfigWithContext is the same as EditFingerprintCollectConfig with the addition of
// the ability to pass a context and additional request options.
//
// See EditFingerprintCollectConfig for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECCENTER20240508) EditFingerprintCollectConfigWithContext(ctx volcengine.Context, input *EditFingerprintCollectConfigInput, opts ...request.Option) (*EditFingerprintCollectConfigOutput, error) {
	req, out := c.EditFingerprintCollectConfigRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type EditFingerprintCollectConfigInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	EndTime *int64 `type:"int64" json:",omitempty"`

	FingerprintType *string `type:"string" json:",omitempty"`

	// Model is a required field
	Model *string `type:"string" json:",omitempty" required:"true"`

	Period *string `type:"string" json:",omitempty"`

	Remark *string `type:"string" json:",omitempty"`

	StartTime *int64 `type:"int64" json:",omitempty"`
}

// String returns the string representation
func (s EditFingerprintCollectConfigInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s EditFingerprintCollectConfigInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *EditFingerprintCollectConfigInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "EditFingerprintCollectConfigInput"}
	if s.Model == nil {
		invalidParams.Add(request.NewErrParamRequired("Model"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetEndTime sets the EndTime field's value.
func (s *EditFingerprintCollectConfigInput) SetEndTime(v int64) *EditFingerprintCollectConfigInput {
	s.EndTime = &v
	return s
}

// SetFingerprintType sets the FingerprintType field's value.
func (s *EditFingerprintCollectConfigInput) SetFingerprintType(v string) *EditFingerprintCollectConfigInput {
	s.FingerprintType = &v
	return s
}

// SetModel sets the Model field's value.
func (s *EditFingerprintCollectConfigInput) SetModel(v string) *EditFingerprintCollectConfigInput {
	s.Model = &v
	return s
}

// SetPeriod sets the Period field's value.
func (s *EditFingerprintCollectConfigInput) SetPeriod(v string) *EditFingerprintCollectConfigInput {
	s.Period = &v
	return s
}

// SetRemark sets the Remark field's value.
func (s *EditFingerprintCollectConfigInput) SetRemark(v string) *EditFingerprintCollectConfigInput {
	s.Remark = &v
	return s
}

// SetStartTime sets the StartTime field's value.
func (s *EditFingerprintCollectConfigInput) SetStartTime(v int64) *EditFingerprintCollectConfigInput {
	s.StartTime = &v
	return s
}

type EditFingerprintCollectConfigOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Status *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s EditFingerprintCollectConfigOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s EditFingerprintCollectConfigOutput) GoString() string {
	return s.String()
}

// SetStatus sets the Status field's value.
func (s *EditFingerprintCollectConfigOutput) SetStatus(v string) *EditFingerprintCollectConfigOutput {
	s.Status = &v
	return s
}
