// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package seccenter20240508

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opAddWhiteListCommon = "AddWhiteList"

// AddWhiteListCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the AddWhiteListCommon operation. The "output" return
// value will be populated with the AddWhiteListCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned AddWhiteListCommon Request to send the API call to the service.
// the "output" return value is not valid until after AddWhiteListCommon Send returns without error.
//
// See AddWhiteListCommon for more information on using the AddWhiteListCommon
// API call, and error handling.
//
//    // Example sending a request using the AddWhiteListCommonRequest method.
//    req, resp := client.AddWhiteListCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECCENTER20240508) AddWhiteListCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opAddWhiteListCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// AddWhiteListCommon API operation for SECCENTER20240508.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SECCENTER20240508's
// API operation AddWhiteListCommon for usage and error information.
func (c *SECCENTER20240508) AddWhiteListCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.AddWhiteListCommonRequest(input)
	return out, req.Send()
}

// AddWhiteListCommonWithContext is the same as AddWhiteListCommon with the addition of
// the ability to pass a context and additional request options.
//
// See AddWhiteListCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECCENTER20240508) AddWhiteListCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.AddWhiteListCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opAddWhiteList = "AddWhiteList"

// AddWhiteListRequest generates a "volcengine/request.Request" representing the
// client's request for the AddWhiteList operation. The "output" return
// value will be populated with the AddWhiteListCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned AddWhiteListCommon Request to send the API call to the service.
// the "output" return value is not valid until after AddWhiteListCommon Send returns without error.
//
// See AddWhiteList for more information on using the AddWhiteList
// API call, and error handling.
//
//    // Example sending a request using the AddWhiteListRequest method.
//    req, resp := client.AddWhiteListRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECCENTER20240508) AddWhiteListRequest(input *AddWhiteListInput) (req *request.Request, output *AddWhiteListOutput) {
	op := &request.Operation{
		Name:       opAddWhiteList,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &AddWhiteListInput{}
	}

	output = &AddWhiteListOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// AddWhiteList API operation for SECCENTER20240508.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SECCENTER20240508's
// API operation AddWhiteList for usage and error information.
func (c *SECCENTER20240508) AddWhiteList(input *AddWhiteListInput) (*AddWhiteListOutput, error) {
	req, out := c.AddWhiteListRequest(input)
	return out, req.Send()
}

// AddWhiteListWithContext is the same as AddWhiteList with the addition of
// the ability to pass a context and additional request options.
//
// See AddWhiteList for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECCENTER20240508) AddWhiteListWithContext(ctx volcengine.Context, input *AddWhiteListInput, opts ...request.Option) (*AddWhiteListOutput, error) {
	req, out := c.AddWhiteListRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type AddWhiteListInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Desc *string `type:"string" json:",omitempty"`

	IsKillchain *bool `type:"boolean" json:",omitempty"`

	Lang *string `type:"string" json:",omitempty"`

	MatchAlarmName *string `type:"string" json:",omitempty"`

	Range *RangeForAddWhiteListInput `type:"structure" json:",omitempty"`

	RuleList []*RuleListForAddWhiteListInput `type:"list" json:",omitempty"`

	Type *string `type:"string" json:",omitempty"`

	User *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s AddWhiteListInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s AddWhiteListInput) GoString() string {
	return s.String()
}

// SetDesc sets the Desc field's value.
func (s *AddWhiteListInput) SetDesc(v string) *AddWhiteListInput {
	s.Desc = &v
	return s
}

// SetIsKillchain sets the IsKillchain field's value.
func (s *AddWhiteListInput) SetIsKillchain(v bool) *AddWhiteListInput {
	s.IsKillchain = &v
	return s
}

// SetLang sets the Lang field's value.
func (s *AddWhiteListInput) SetLang(v string) *AddWhiteListInput {
	s.Lang = &v
	return s
}

// SetMatchAlarmName sets the MatchAlarmName field's value.
func (s *AddWhiteListInput) SetMatchAlarmName(v string) *AddWhiteListInput {
	s.MatchAlarmName = &v
	return s
}

// SetRange sets the Range field's value.
func (s *AddWhiteListInput) SetRange(v *RangeForAddWhiteListInput) *AddWhiteListInput {
	s.Range = v
	return s
}

// SetRuleList sets the RuleList field's value.
func (s *AddWhiteListInput) SetRuleList(v []*RuleListForAddWhiteListInput) *AddWhiteListInput {
	s.RuleList = v
	return s
}

// SetType sets the Type field's value.
func (s *AddWhiteListInput) SetType(v string) *AddWhiteListInput {
	s.Type = &v
	return s
}

// SetUser sets the User field's value.
func (s *AddWhiteListInput) SetUser(v string) *AddWhiteListInput {
	s.User = &v
	return s
}

type AddWhiteListOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Data *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s AddWhiteListOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s AddWhiteListOutput) GoString() string {
	return s.String()
}

// SetData sets the Data field's value.
func (s *AddWhiteListOutput) SetData(v string) *AddWhiteListOutput {
	s.Data = &v
	return s
}

type RangeForAddWhiteListInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	AgentIDList []*string `type:"list" json:",omitempty"`

	CloudProviders []*string `type:"list" json:",omitempty"`

	ClusterIDList []*string `type:"list" json:",omitempty"`

	LeafGroupIDs []*string `type:"list" json:",omitempty"`

	TopGroupID *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s RangeForAddWhiteListInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s RangeForAddWhiteListInput) GoString() string {
	return s.String()
}

// SetAgentIDList sets the AgentIDList field's value.
func (s *RangeForAddWhiteListInput) SetAgentIDList(v []*string) *RangeForAddWhiteListInput {
	s.AgentIDList = v
	return s
}

// SetCloudProviders sets the CloudProviders field's value.
func (s *RangeForAddWhiteListInput) SetCloudProviders(v []*string) *RangeForAddWhiteListInput {
	s.CloudProviders = v
	return s
}

// SetClusterIDList sets the ClusterIDList field's value.
func (s *RangeForAddWhiteListInput) SetClusterIDList(v []*string) *RangeForAddWhiteListInput {
	s.ClusterIDList = v
	return s
}

// SetLeafGroupIDs sets the LeafGroupIDs field's value.
func (s *RangeForAddWhiteListInput) SetLeafGroupIDs(v []*string) *RangeForAddWhiteListInput {
	s.LeafGroupIDs = v
	return s
}

// SetTopGroupID sets the TopGroupID field's value.
func (s *RangeForAddWhiteListInput) SetTopGroupID(v string) *RangeForAddWhiteListInput {
	s.TopGroupID = &v
	return s
}

type RuleListForAddWhiteListInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	MatchContent *string `type:"string" json:",omitempty"`

	MatchKey *string `type:"string" json:",omitempty"`

	MatchType *int64 `type:"int64" json:",omitempty"`
}

// String returns the string representation
func (s RuleListForAddWhiteListInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s RuleListForAddWhiteListInput) GoString() string {
	return s.String()
}

// SetMatchContent sets the MatchContent field's value.
func (s *RuleListForAddWhiteListInput) SetMatchContent(v string) *RuleListForAddWhiteListInput {
	s.MatchContent = &v
	return s
}

// SetMatchKey sets the MatchKey field's value.
func (s *RuleListForAddWhiteListInput) SetMatchKey(v string) *RuleListForAddWhiteListInput {
	s.MatchKey = &v
	return s
}

// SetMatchType sets the MatchType field's value.
func (s *RuleListForAddWhiteListInput) SetMatchType(v int64) *RuleListForAddWhiteListInput {
	s.MatchType = &v
	return s
}
