// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package seccenter20240508

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opListRaspConfigsCommon = "ListRaspConfigs"

// ListRaspConfigsCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ListRaspConfigsCommon operation. The "output" return
// value will be populated with the ListRaspConfigsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListRaspConfigsCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListRaspConfigsCommon Send returns without error.
//
// See ListRaspConfigsCommon for more information on using the ListRaspConfigsCommon
// API call, and error handling.
//
//    // Example sending a request using the ListRaspConfigsCommonRequest method.
//    req, resp := client.ListRaspConfigsCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECCENTER20240508) ListRaspConfigsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opListRaspConfigsCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListRaspConfigsCommon API operation for SECCENTER20240508.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SECCENTER20240508's
// API operation ListRaspConfigsCommon for usage and error information.
func (c *SECCENTER20240508) ListRaspConfigsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ListRaspConfigsCommonRequest(input)
	return out, req.Send()
}

// ListRaspConfigsCommonWithContext is the same as ListRaspConfigsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ListRaspConfigsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECCENTER20240508) ListRaspConfigsCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ListRaspConfigsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListRaspConfigs = "ListRaspConfigs"

// ListRaspConfigsRequest generates a "volcengine/request.Request" representing the
// client's request for the ListRaspConfigs operation. The "output" return
// value will be populated with the ListRaspConfigsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListRaspConfigsCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListRaspConfigsCommon Send returns without error.
//
// See ListRaspConfigs for more information on using the ListRaspConfigs
// API call, and error handling.
//
//    // Example sending a request using the ListRaspConfigsRequest method.
//    req, resp := client.ListRaspConfigsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECCENTER20240508) ListRaspConfigsRequest(input *ListRaspConfigsInput) (req *request.Request, output *ListRaspConfigsOutput) {
	op := &request.Operation{
		Name:       opListRaspConfigs,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListRaspConfigsInput{}
	}

	output = &ListRaspConfigsOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListRaspConfigs API operation for SECCENTER20240508.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SECCENTER20240508's
// API operation ListRaspConfigs for usage and error information.
func (c *SECCENTER20240508) ListRaspConfigs(input *ListRaspConfigsInput) (*ListRaspConfigsOutput, error) {
	req, out := c.ListRaspConfigsRequest(input)
	return out, req.Send()
}

// ListRaspConfigsWithContext is the same as ListRaspConfigs with the addition of
// the ability to pass a context and additional request options.
//
// See ListRaspConfigs for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECCENTER20240508) ListRaspConfigsWithContext(ctx volcengine.Context, input *ListRaspConfigsInput, opts ...request.Option) (*ListRaspConfigsOutput, error) {
	req, out := c.ListRaspConfigsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type BlockForListRaspConfigsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	HookFunc []*string `type:"list" json:",omitempty"`

	HookParam *int64 `type:"int64" json:",omitempty"`

	Rules []*RuleForListRaspConfigsOutput `type:"list" json:",omitempty"`

	Runtime *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s BlockForListRaspConfigsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s BlockForListRaspConfigsOutput) GoString() string {
	return s.String()
}

// SetHookFunc sets the HookFunc field's value.
func (s *BlockForListRaspConfigsOutput) SetHookFunc(v []*string) *BlockForListRaspConfigsOutput {
	s.HookFunc = v
	return s
}

// SetHookParam sets the HookParam field's value.
func (s *BlockForListRaspConfigsOutput) SetHookParam(v int64) *BlockForListRaspConfigsOutput {
	s.HookParam = &v
	return s
}

// SetRules sets the Rules field's value.
func (s *BlockForListRaspConfigsOutput) SetRules(v []*RuleForListRaspConfigsOutput) *BlockForListRaspConfigsOutput {
	s.Rules = v
	return s
}

// SetRuntime sets the Runtime field's value.
func (s *BlockForListRaspConfigsOutput) SetRuntime(v string) *BlockForListRaspConfigsOutput {
	s.Runtime = &v
	return s
}

type DataForListRaspConfigsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	AllProcessInject *bool `type:"boolean" json:",omitempty"`

	Blocks []*BlockForListRaspConfigsOutput `type:"list" json:",omitempty"`

	Filters []*FilterForListRaspConfigsOutput `type:"list" json:",omitempty"`

	ID *string `type:"string" json:",omitempty"`

	IfProtect *bool `type:"boolean" json:",omitempty"`

	InjectConfigList []*InjectConfigListForListRaspConfigsOutput `type:"list" json:",omitempty"`

	LocalProjectInject *bool `type:"boolean" json:",omitempty"`

	Name *string `type:"string" json:",omitempty"`

	ProtectMethod *string `type:"string" json:",omitempty"`

	ProtectedAgentCount *int64 `type:"int64" json:",omitempty"`

	ProtectedProcessCount *int64 `type:"int64" json:",omitempty"`

	Range *RangeForListRaspConfigsOutput `type:"structure" json:",omitempty"`

	Runtime *string `type:"string" json:",omitempty"`

	Switch *SwitchForListRaspConfigsOutput `type:"structure" json:",omitempty"`

	ToBeProtectedAgentCount *int64 `type:"int64" json:",omitempty"`

	ToBeProtectedProcessCount *int64 `type:"int64" json:",omitempty"`

	TopGroupID *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s DataForListRaspConfigsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DataForListRaspConfigsOutput) GoString() string {
	return s.String()
}

// SetAllProcessInject sets the AllProcessInject field's value.
func (s *DataForListRaspConfigsOutput) SetAllProcessInject(v bool) *DataForListRaspConfigsOutput {
	s.AllProcessInject = &v
	return s
}

// SetBlocks sets the Blocks field's value.
func (s *DataForListRaspConfigsOutput) SetBlocks(v []*BlockForListRaspConfigsOutput) *DataForListRaspConfigsOutput {
	s.Blocks = v
	return s
}

// SetFilters sets the Filters field's value.
func (s *DataForListRaspConfigsOutput) SetFilters(v []*FilterForListRaspConfigsOutput) *DataForListRaspConfigsOutput {
	s.Filters = v
	return s
}

// SetID sets the ID field's value.
func (s *DataForListRaspConfigsOutput) SetID(v string) *DataForListRaspConfigsOutput {
	s.ID = &v
	return s
}

// SetIfProtect sets the IfProtect field's value.
func (s *DataForListRaspConfigsOutput) SetIfProtect(v bool) *DataForListRaspConfigsOutput {
	s.IfProtect = &v
	return s
}

// SetInjectConfigList sets the InjectConfigList field's value.
func (s *DataForListRaspConfigsOutput) SetInjectConfigList(v []*InjectConfigListForListRaspConfigsOutput) *DataForListRaspConfigsOutput {
	s.InjectConfigList = v
	return s
}

// SetLocalProjectInject sets the LocalProjectInject field's value.
func (s *DataForListRaspConfigsOutput) SetLocalProjectInject(v bool) *DataForListRaspConfigsOutput {
	s.LocalProjectInject = &v
	return s
}

// SetName sets the Name field's value.
func (s *DataForListRaspConfigsOutput) SetName(v string) *DataForListRaspConfigsOutput {
	s.Name = &v
	return s
}

// SetProtectMethod sets the ProtectMethod field's value.
func (s *DataForListRaspConfigsOutput) SetProtectMethod(v string) *DataForListRaspConfigsOutput {
	s.ProtectMethod = &v
	return s
}

// SetProtectedAgentCount sets the ProtectedAgentCount field's value.
func (s *DataForListRaspConfigsOutput) SetProtectedAgentCount(v int64) *DataForListRaspConfigsOutput {
	s.ProtectedAgentCount = &v
	return s
}

// SetProtectedProcessCount sets the ProtectedProcessCount field's value.
func (s *DataForListRaspConfigsOutput) SetProtectedProcessCount(v int64) *DataForListRaspConfigsOutput {
	s.ProtectedProcessCount = &v
	return s
}

// SetRange sets the Range field's value.
func (s *DataForListRaspConfigsOutput) SetRange(v *RangeForListRaspConfigsOutput) *DataForListRaspConfigsOutput {
	s.Range = v
	return s
}

// SetRuntime sets the Runtime field's value.
func (s *DataForListRaspConfigsOutput) SetRuntime(v string) *DataForListRaspConfigsOutput {
	s.Runtime = &v
	return s
}

// SetSwitch sets the Switch field's value.
func (s *DataForListRaspConfigsOutput) SetSwitch(v *SwitchForListRaspConfigsOutput) *DataForListRaspConfigsOutput {
	s.Switch = v
	return s
}

// SetToBeProtectedAgentCount sets the ToBeProtectedAgentCount field's value.
func (s *DataForListRaspConfigsOutput) SetToBeProtectedAgentCount(v int64) *DataForListRaspConfigsOutput {
	s.ToBeProtectedAgentCount = &v
	return s
}

// SetToBeProtectedProcessCount sets the ToBeProtectedProcessCount field's value.
func (s *DataForListRaspConfigsOutput) SetToBeProtectedProcessCount(v int64) *DataForListRaspConfigsOutput {
	s.ToBeProtectedProcessCount = &v
	return s
}

// SetTopGroupID sets the TopGroupID field's value.
func (s *DataForListRaspConfigsOutput) SetTopGroupID(v string) *DataForListRaspConfigsOutput {
	s.TopGroupID = &v
	return s
}

type FilterForListRaspConfigsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	HookFunc []*string `type:"list" json:",omitempty"`

	HookParam *int64 `type:"int64" json:",omitempty"`

	Rules []*RuleForListRaspConfigsOutput `type:"list" json:",omitempty"`

	Runtime *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s FilterForListRaspConfigsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s FilterForListRaspConfigsOutput) GoString() string {
	return s.String()
}

// SetHookFunc sets the HookFunc field's value.
func (s *FilterForListRaspConfigsOutput) SetHookFunc(v []*string) *FilterForListRaspConfigsOutput {
	s.HookFunc = v
	return s
}

// SetHookParam sets the HookParam field's value.
func (s *FilterForListRaspConfigsOutput) SetHookParam(v int64) *FilterForListRaspConfigsOutput {
	s.HookParam = &v
	return s
}

// SetRules sets the Rules field's value.
func (s *FilterForListRaspConfigsOutput) SetRules(v []*RuleForListRaspConfigsOutput) *FilterForListRaspConfigsOutput {
	s.Rules = v
	return s
}

// SetRuntime sets the Runtime field's value.
func (s *FilterForListRaspConfigsOutput) SetRuntime(v string) *FilterForListRaspConfigsOutput {
	s.Runtime = &v
	return s
}

type InjectConfigListForListRaspConfigsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	MatchContent []*string `type:"list" json:",omitempty"`

	MatchKey *string `type:"string" json:",omitempty"`

	MatchType *int64 `type:"int64" json:",omitempty"`
}

// String returns the string representation
func (s InjectConfigListForListRaspConfigsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s InjectConfigListForListRaspConfigsOutput) GoString() string {
	return s.String()
}

// SetMatchContent sets the MatchContent field's value.
func (s *InjectConfigListForListRaspConfigsOutput) SetMatchContent(v []*string) *InjectConfigListForListRaspConfigsOutput {
	s.MatchContent = v
	return s
}

// SetMatchKey sets the MatchKey field's value.
func (s *InjectConfigListForListRaspConfigsOutput) SetMatchKey(v string) *InjectConfigListForListRaspConfigsOutput {
	s.MatchKey = &v
	return s
}

// SetMatchType sets the MatchType field's value.
func (s *InjectConfigListForListRaspConfigsOutput) SetMatchType(v int64) *InjectConfigListForListRaspConfigsOutput {
	s.MatchType = &v
	return s
}

type ListRaspConfigsInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	AgentID *string `type:"string" json:",omitempty"`

	CloudProviders []*string `type:"list" json:",omitempty"`

	Content *string `type:"string" json:",omitempty"`

	Hostname *string `type:"string" json:",omitempty"`

	IP *string `type:"string" json:",omitempty"`

	IfBlock *bool `type:"boolean" json:",omitempty"`

	IfFilter *bool `type:"boolean" json:",omitempty"`

	IfProtect *bool `type:"boolean" json:",omitempty"`

	LeafGroupIDs []*string `type:"list" json:",omitempty"`

	Name *string `type:"string" json:",omitempty"`

	// PageNumber is a required field
	PageNumber *int64 `type:"int64" json:",omitempty" required:"true"`

	// PageSize is a required field
	PageSize *int64 `type:"int64" json:",omitempty" required:"true"`

	Runtime []*string `type:"list" json:",omitempty"`

	SortBy *string `type:"string" json:",omitempty"`

	SortOrder *string `type:"string" json:",omitempty"`

	Tags []*string `type:"list" json:",omitempty"`

	TopGroupID *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ListRaspConfigsInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListRaspConfigsInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ListRaspConfigsInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ListRaspConfigsInput"}
	if s.PageNumber == nil {
		invalidParams.Add(request.NewErrParamRequired("PageNumber"))
	}
	if s.PageSize == nil {
		invalidParams.Add(request.NewErrParamRequired("PageSize"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAgentID sets the AgentID field's value.
func (s *ListRaspConfigsInput) SetAgentID(v string) *ListRaspConfigsInput {
	s.AgentID = &v
	return s
}

// SetCloudProviders sets the CloudProviders field's value.
func (s *ListRaspConfigsInput) SetCloudProviders(v []*string) *ListRaspConfigsInput {
	s.CloudProviders = v
	return s
}

// SetContent sets the Content field's value.
func (s *ListRaspConfigsInput) SetContent(v string) *ListRaspConfigsInput {
	s.Content = &v
	return s
}

// SetHostname sets the Hostname field's value.
func (s *ListRaspConfigsInput) SetHostname(v string) *ListRaspConfigsInput {
	s.Hostname = &v
	return s
}

// SetIP sets the IP field's value.
func (s *ListRaspConfigsInput) SetIP(v string) *ListRaspConfigsInput {
	s.IP = &v
	return s
}

// SetIfBlock sets the IfBlock field's value.
func (s *ListRaspConfigsInput) SetIfBlock(v bool) *ListRaspConfigsInput {
	s.IfBlock = &v
	return s
}

// SetIfFilter sets the IfFilter field's value.
func (s *ListRaspConfigsInput) SetIfFilter(v bool) *ListRaspConfigsInput {
	s.IfFilter = &v
	return s
}

// SetIfProtect sets the IfProtect field's value.
func (s *ListRaspConfigsInput) SetIfProtect(v bool) *ListRaspConfigsInput {
	s.IfProtect = &v
	return s
}

// SetLeafGroupIDs sets the LeafGroupIDs field's value.
func (s *ListRaspConfigsInput) SetLeafGroupIDs(v []*string) *ListRaspConfigsInput {
	s.LeafGroupIDs = v
	return s
}

// SetName sets the Name field's value.
func (s *ListRaspConfigsInput) SetName(v string) *ListRaspConfigsInput {
	s.Name = &v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *ListRaspConfigsInput) SetPageNumber(v int64) *ListRaspConfigsInput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *ListRaspConfigsInput) SetPageSize(v int64) *ListRaspConfigsInput {
	s.PageSize = &v
	return s
}

// SetRuntime sets the Runtime field's value.
func (s *ListRaspConfigsInput) SetRuntime(v []*string) *ListRaspConfigsInput {
	s.Runtime = v
	return s
}

// SetSortBy sets the SortBy field's value.
func (s *ListRaspConfigsInput) SetSortBy(v string) *ListRaspConfigsInput {
	s.SortBy = &v
	return s
}

// SetSortOrder sets the SortOrder field's value.
func (s *ListRaspConfigsInput) SetSortOrder(v string) *ListRaspConfigsInput {
	s.SortOrder = &v
	return s
}

// SetTags sets the Tags field's value.
func (s *ListRaspConfigsInput) SetTags(v []*string) *ListRaspConfigsInput {
	s.Tags = v
	return s
}

// SetTopGroupID sets the TopGroupID field's value.
func (s *ListRaspConfigsInput) SetTopGroupID(v string) *ListRaspConfigsInput {
	s.TopGroupID = &v
	return s
}

type ListRaspConfigsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Data []*DataForListRaspConfigsOutput `type:"list" json:",omitempty"`

	PageNumber *int64 `type:"int64" json:",omitempty"`

	PageSize *int64 `type:"int64" json:",omitempty"`

	TotalCount *int64 `type:"int64" json:",omitempty"`
}

// String returns the string representation
func (s ListRaspConfigsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListRaspConfigsOutput) GoString() string {
	return s.String()
}

// SetData sets the Data field's value.
func (s *ListRaspConfigsOutput) SetData(v []*DataForListRaspConfigsOutput) *ListRaspConfigsOutput {
	s.Data = v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *ListRaspConfigsOutput) SetPageNumber(v int64) *ListRaspConfigsOutput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *ListRaspConfigsOutput) SetPageSize(v int64) *ListRaspConfigsOutput {
	s.PageSize = &v
	return s
}

// SetTotalCount sets the TotalCount field's value.
func (s *ListRaspConfigsOutput) SetTotalCount(v int64) *ListRaspConfigsOutput {
	s.TotalCount = &v
	return s
}

type RangeForListRaspConfigsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	AgentIDList []*string `type:"list" json:",omitempty"`

	AllHost *bool `type:"boolean" json:",omitempty"`

	LeafGroupIDs []*string `type:"list" json:",omitempty"`

	SingleGroupPath *string `type:"string" json:",omitempty"`

	SingleHostname *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s RangeForListRaspConfigsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s RangeForListRaspConfigsOutput) GoString() string {
	return s.String()
}

// SetAgentIDList sets the AgentIDList field's value.
func (s *RangeForListRaspConfigsOutput) SetAgentIDList(v []*string) *RangeForListRaspConfigsOutput {
	s.AgentIDList = v
	return s
}

// SetAllHost sets the AllHost field's value.
func (s *RangeForListRaspConfigsOutput) SetAllHost(v bool) *RangeForListRaspConfigsOutput {
	s.AllHost = &v
	return s
}

// SetLeafGroupIDs sets the LeafGroupIDs field's value.
func (s *RangeForListRaspConfigsOutput) SetLeafGroupIDs(v []*string) *RangeForListRaspConfigsOutput {
	s.LeafGroupIDs = v
	return s
}

// SetSingleGroupPath sets the SingleGroupPath field's value.
func (s *RangeForListRaspConfigsOutput) SetSingleGroupPath(v string) *RangeForListRaspConfigsOutput {
	s.SingleGroupPath = &v
	return s
}

// SetSingleHostname sets the SingleHostname field's value.
func (s *RangeForListRaspConfigsOutput) SetSingleHostname(v string) *RangeForListRaspConfigsOutput {
	s.SingleHostname = &v
	return s
}

type RuleForListRaspConfigsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Rule *string `type:"string" json:",omitempty"`

	Type *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s RuleForListRaspConfigsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s RuleForListRaspConfigsOutput) GoString() string {
	return s.String()
}

// SetRule sets the Rule field's value.
func (s *RuleForListRaspConfigsOutput) SetRule(v string) *RuleForListRaspConfigsOutput {
	s.Rule = &v
	return s
}

// SetType sets the Type field's value.
func (s *RuleForListRaspConfigsOutput) SetType(v string) *RuleForListRaspConfigsOutput {
	s.Type = &v
	return s
}

type SwitchForListRaspConfigsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Classupload *bool `type:"boolean" json:"classupload,omitempty"`

	File *bool `type:"boolean" json:"file,omitempty"`

	Load *bool `type:"boolean" json:"load,omitempty"`

	Memshell *bool `type:"boolean" json:"memshell,omitempty"`

	Net *bool `type:"boolean" json:"net,omitempty"`

	Process *bool `type:"boolean" json:"process,omitempty"`

	Reflect *bool `type:"boolean" json:"reflect,omitempty"`
}

// String returns the string representation
func (s SwitchForListRaspConfigsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s SwitchForListRaspConfigsOutput) GoString() string {
	return s.String()
}

// SetClassupload sets the Classupload field's value.
func (s *SwitchForListRaspConfigsOutput) SetClassupload(v bool) *SwitchForListRaspConfigsOutput {
	s.Classupload = &v
	return s
}

// SetFile sets the File field's value.
func (s *SwitchForListRaspConfigsOutput) SetFile(v bool) *SwitchForListRaspConfigsOutput {
	s.File = &v
	return s
}

// SetLoad sets the Load field's value.
func (s *SwitchForListRaspConfigsOutput) SetLoad(v bool) *SwitchForListRaspConfigsOutput {
	s.Load = &v
	return s
}

// SetMemshell sets the Memshell field's value.
func (s *SwitchForListRaspConfigsOutput) SetMemshell(v bool) *SwitchForListRaspConfigsOutput {
	s.Memshell = &v
	return s
}

// SetNet sets the Net field's value.
func (s *SwitchForListRaspConfigsOutput) SetNet(v bool) *SwitchForListRaspConfigsOutput {
	s.Net = &v
	return s
}

// SetProcess sets the Process field's value.
func (s *SwitchForListRaspConfigsOutput) SetProcess(v bool) *SwitchForListRaspConfigsOutput {
	s.Process = &v
	return s
}

// SetReflect sets the Reflect field's value.
func (s *SwitchForListRaspConfigsOutput) SetReflect(v bool) *SwitchForListRaspConfigsOutput {
	s.Reflect = &v
	return s
}
