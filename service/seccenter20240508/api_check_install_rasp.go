// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package seccenter20240508

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opCheckInstallRaspCommon = "CheckInstallRasp"

// CheckInstallRaspCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the CheckInstallRaspCommon operation. The "output" return
// value will be populated with the CheckInstallRaspCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CheckInstallRaspCommon Request to send the API call to the service.
// the "output" return value is not valid until after CheckInstallRaspCommon Send returns without error.
//
// See CheckInstallRaspCommon for more information on using the CheckInstallRaspCommon
// API call, and error handling.
//
//    // Example sending a request using the CheckInstallRaspCommonRequest method.
//    req, resp := client.CheckInstallRaspCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECCENTER20240508) CheckInstallRaspCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCheckInstallRaspCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CheckInstallRaspCommon API operation for SECCENTER20240508.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SECCENTER20240508's
// API operation CheckInstallRaspCommon for usage and error information.
func (c *SECCENTER20240508) CheckInstallRaspCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CheckInstallRaspCommonRequest(input)
	return out, req.Send()
}

// CheckInstallRaspCommonWithContext is the same as CheckInstallRaspCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CheckInstallRaspCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECCENTER20240508) CheckInstallRaspCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CheckInstallRaspCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCheckInstallRasp = "CheckInstallRasp"

// CheckInstallRaspRequest generates a "volcengine/request.Request" representing the
// client's request for the CheckInstallRasp operation. The "output" return
// value will be populated with the CheckInstallRaspCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CheckInstallRaspCommon Request to send the API call to the service.
// the "output" return value is not valid until after CheckInstallRaspCommon Send returns without error.
//
// See CheckInstallRasp for more information on using the CheckInstallRasp
// API call, and error handling.
//
//    // Example sending a request using the CheckInstallRaspRequest method.
//    req, resp := client.CheckInstallRaspRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECCENTER20240508) CheckInstallRaspRequest(input *CheckInstallRaspInput) (req *request.Request, output *CheckInstallRaspOutput) {
	op := &request.Operation{
		Name:       opCheckInstallRasp,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CheckInstallRaspInput{}
	}

	output = &CheckInstallRaspOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CheckInstallRasp API operation for SECCENTER20240508.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SECCENTER20240508's
// API operation CheckInstallRasp for usage and error information.
func (c *SECCENTER20240508) CheckInstallRasp(input *CheckInstallRaspInput) (*CheckInstallRaspOutput, error) {
	req, out := c.CheckInstallRaspRequest(input)
	return out, req.Send()
}

// CheckInstallRaspWithContext is the same as CheckInstallRasp with the addition of
// the ability to pass a context and additional request options.
//
// See CheckInstallRasp for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECCENTER20240508) CheckInstallRaspWithContext(ctx volcengine.Context, input *CheckInstallRaspInput, opts ...request.Option) (*CheckInstallRaspOutput, error) {
	req, out := c.CheckInstallRaspRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type CheckInstallRaspInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	AgentIDs []*string `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s CheckInstallRaspInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CheckInstallRaspInput) GoString() string {
	return s.String()
}

// SetAgentIDs sets the AgentIDs field's value.
func (s *CheckInstallRaspInput) SetAgentIDs(v []*string) *CheckInstallRaspInput {
	s.AgentIDs = v
	return s
}

type CheckInstallRaspOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	ChosenCount *int64 `type:"int64" json:",omitempty"`

	HitLimit *bool `type:"boolean" json:",omitempty"`

	LeftAuthorizationCount *int64 `type:"int64" json:",omitempty"`

	OpenCount *int64 `type:"int64" json:",omitempty"`
}

// String returns the string representation
func (s CheckInstallRaspOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CheckInstallRaspOutput) GoString() string {
	return s.String()
}

// SetChosenCount sets the ChosenCount field's value.
func (s *CheckInstallRaspOutput) SetChosenCount(v int64) *CheckInstallRaspOutput {
	s.ChosenCount = &v
	return s
}

// SetHitLimit sets the HitLimit field's value.
func (s *CheckInstallRaspOutput) SetHitLimit(v bool) *CheckInstallRaspOutput {
	s.HitLimit = &v
	return s
}

// SetLeftAuthorizationCount sets the LeftAuthorizationCount field's value.
func (s *CheckInstallRaspOutput) SetLeftAuthorizationCount(v int64) *CheckInstallRaspOutput {
	s.LeftAuthorizationCount = &v
	return s
}

// SetOpenCount sets the OpenCount field's value.
func (s *CheckInstallRaspOutput) SetOpenCount(v int64) *CheckInstallRaspOutput {
	s.OpenCount = &v
	return s
}
