// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package seccenter20240508

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opGetGeoLocationCommon = "GetGeoLocation"

// GetGeoLocationCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the GetGeoLocationCommon operation. The "output" return
// value will be populated with the GetGeoLocationCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetGeoLocationCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetGeoLocationCommon Send returns without error.
//
// See GetGeoLocationCommon for more information on using the GetGeoLocationCommon
// API call, and error handling.
//
//    // Example sending a request using the GetGeoLocationCommonRequest method.
//    req, resp := client.GetGeoLocationCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECCENTER20240508) GetGeoLocationCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opGetGeoLocationCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetGeoLocationCommon API operation for SECCENTER20240508.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SECCENTER20240508's
// API operation GetGeoLocationCommon for usage and error information.
func (c *SECCENTER20240508) GetGeoLocationCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.GetGeoLocationCommonRequest(input)
	return out, req.Send()
}

// GetGeoLocationCommonWithContext is the same as GetGeoLocationCommon with the addition of
// the ability to pass a context and additional request options.
//
// See GetGeoLocationCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECCENTER20240508) GetGeoLocationCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.GetGeoLocationCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opGetGeoLocation = "GetGeoLocation"

// GetGeoLocationRequest generates a "volcengine/request.Request" representing the
// client's request for the GetGeoLocation operation. The "output" return
// value will be populated with the GetGeoLocationCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetGeoLocationCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetGeoLocationCommon Send returns without error.
//
// See GetGeoLocation for more information on using the GetGeoLocation
// API call, and error handling.
//
//    // Example sending a request using the GetGeoLocationRequest method.
//    req, resp := client.GetGeoLocationRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECCENTER20240508) GetGeoLocationRequest(input *GetGeoLocationInput) (req *request.Request, output *GetGeoLocationOutput) {
	op := &request.Operation{
		Name:       opGetGeoLocation,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &GetGeoLocationInput{}
	}

	output = &GetGeoLocationOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetGeoLocation API operation for SECCENTER20240508.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SECCENTER20240508's
// API operation GetGeoLocation for usage and error information.
func (c *SECCENTER20240508) GetGeoLocation(input *GetGeoLocationInput) (*GetGeoLocationOutput, error) {
	req, out := c.GetGeoLocationRequest(input)
	return out, req.Send()
}

// GetGeoLocationWithContext is the same as GetGeoLocation with the addition of
// the ability to pass a context and additional request options.
//
// See GetGeoLocation for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECCENTER20240508) GetGeoLocationWithContext(ctx volcengine.Context, input *GetGeoLocationInput, opts ...request.Option) (*GetGeoLocationOutput, error) {
	req, out := c.GetGeoLocationRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type GetGeoLocationInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	GeonameID *int64 `type:"int64" json:",omitempty"`
}

// String returns the string representation
func (s GetGeoLocationInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetGeoLocationInput) GoString() string {
	return s.String()
}

// SetGeonameID sets the GeonameID field's value.
func (s *GetGeoLocationInput) SetGeonameID(v int64) *GetGeoLocationInput {
	s.GeonameID = &v
	return s
}

type GetGeoLocationOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Locations []*LocationForGetGeoLocationOutput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s GetGeoLocationOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetGeoLocationOutput) GoString() string {
	return s.String()
}

// SetLocations sets the Locations field's value.
func (s *GetGeoLocationOutput) SetLocations(v []*LocationForGetGeoLocationOutput) *GetGeoLocationOutput {
	s.Locations = v
	return s
}

type LocationForGetGeoLocationOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	GeonameID *int64 `type:"int64" json:",omitempty"`

	Name *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s LocationForGetGeoLocationOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s LocationForGetGeoLocationOutput) GoString() string {
	return s.String()
}

// SetGeonameID sets the GeonameID field's value.
func (s *LocationForGetGeoLocationOutput) SetGeonameID(v int64) *LocationForGetGeoLocationOutput {
	s.GeonameID = &v
	return s
}

// SetName sets the Name field's value.
func (s *LocationForGetGeoLocationOutput) SetName(v string) *LocationForGetGeoLocationOutput {
	s.Name = &v
	return s
}
