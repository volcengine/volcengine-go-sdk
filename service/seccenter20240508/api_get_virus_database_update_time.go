// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package seccenter20240508

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opGetVirusDatabaseUpdateTimeCommon = "GetVirusDatabaseUpdateTime"

// GetVirusDatabaseUpdateTimeCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the GetVirusDatabaseUpdateTimeCommon operation. The "output" return
// value will be populated with the GetVirusDatabaseUpdateTimeCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetVirusDatabaseUpdateTimeCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetVirusDatabaseUpdateTimeCommon Send returns without error.
//
// See GetVirusDatabaseUpdateTimeCommon for more information on using the GetVirusDatabaseUpdateTimeCommon
// API call, and error handling.
//
//    // Example sending a request using the GetVirusDatabaseUpdateTimeCommonRequest method.
//    req, resp := client.GetVirusDatabaseUpdateTimeCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECCENTER20240508) GetVirusDatabaseUpdateTimeCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opGetVirusDatabaseUpdateTimeCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetVirusDatabaseUpdateTimeCommon API operation for SECCENTER20240508.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SECCENTER20240508's
// API operation GetVirusDatabaseUpdateTimeCommon for usage and error information.
func (c *SECCENTER20240508) GetVirusDatabaseUpdateTimeCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.GetVirusDatabaseUpdateTimeCommonRequest(input)
	return out, req.Send()
}

// GetVirusDatabaseUpdateTimeCommonWithContext is the same as GetVirusDatabaseUpdateTimeCommon with the addition of
// the ability to pass a context and additional request options.
//
// See GetVirusDatabaseUpdateTimeCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECCENTER20240508) GetVirusDatabaseUpdateTimeCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.GetVirusDatabaseUpdateTimeCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opGetVirusDatabaseUpdateTime = "GetVirusDatabaseUpdateTime"

// GetVirusDatabaseUpdateTimeRequest generates a "volcengine/request.Request" representing the
// client's request for the GetVirusDatabaseUpdateTime operation. The "output" return
// value will be populated with the GetVirusDatabaseUpdateTimeCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetVirusDatabaseUpdateTimeCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetVirusDatabaseUpdateTimeCommon Send returns without error.
//
// See GetVirusDatabaseUpdateTime for more information on using the GetVirusDatabaseUpdateTime
// API call, and error handling.
//
//    // Example sending a request using the GetVirusDatabaseUpdateTimeRequest method.
//    req, resp := client.GetVirusDatabaseUpdateTimeRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECCENTER20240508) GetVirusDatabaseUpdateTimeRequest(input *GetVirusDatabaseUpdateTimeInput) (req *request.Request, output *GetVirusDatabaseUpdateTimeOutput) {
	op := &request.Operation{
		Name:       opGetVirusDatabaseUpdateTime,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &GetVirusDatabaseUpdateTimeInput{}
	}

	output = &GetVirusDatabaseUpdateTimeOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetVirusDatabaseUpdateTime API operation for SECCENTER20240508.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SECCENTER20240508's
// API operation GetVirusDatabaseUpdateTime for usage and error information.
func (c *SECCENTER20240508) GetVirusDatabaseUpdateTime(input *GetVirusDatabaseUpdateTimeInput) (*GetVirusDatabaseUpdateTimeOutput, error) {
	req, out := c.GetVirusDatabaseUpdateTimeRequest(input)
	return out, req.Send()
}

// GetVirusDatabaseUpdateTimeWithContext is the same as GetVirusDatabaseUpdateTime with the addition of
// the ability to pass a context and additional request options.
//
// See GetVirusDatabaseUpdateTime for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECCENTER20240508) GetVirusDatabaseUpdateTimeWithContext(ctx volcengine.Context, input *GetVirusDatabaseUpdateTimeInput, opts ...request.Option) (*GetVirusDatabaseUpdateTimeOutput, error) {
	req, out := c.GetVirusDatabaseUpdateTimeRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type GetVirusDatabaseUpdateTimeInput struct {
	_ struct{} `type:"structure" json:",omitempty"`
}

// String returns the string representation
func (s GetVirusDatabaseUpdateTimeInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetVirusDatabaseUpdateTimeInput) GoString() string {
	return s.String()
}

type GetVirusDatabaseUpdateTimeOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	UpdateTime *int64 `type:"int64" json:",omitempty"`
}

// String returns the string representation
func (s GetVirusDatabaseUpdateTimeOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetVirusDatabaseUpdateTimeOutput) GoString() string {
	return s.String()
}

// SetUpdateTime sets the UpdateTime field's value.
func (s *GetVirusDatabaseUpdateTimeOutput) SetUpdateTime(v int64) *GetVirusDatabaseUpdateTimeOutput {
	s.UpdateTime = &v
	return s
}
