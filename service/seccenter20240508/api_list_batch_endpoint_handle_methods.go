// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package seccenter20240508

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opListBatchEndpointHandleMethodsCommon = "ListBatchEndpointHandleMethods"

// ListBatchEndpointHandleMethodsCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ListBatchEndpointHandleMethodsCommon operation. The "output" return
// value will be populated with the ListBatchEndpointHandleMethodsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListBatchEndpointHandleMethodsCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListBatchEndpointHandleMethodsCommon Send returns without error.
//
// See ListBatchEndpointHandleMethodsCommon for more information on using the ListBatchEndpointHandleMethodsCommon
// API call, and error handling.
//
//    // Example sending a request using the ListBatchEndpointHandleMethodsCommonRequest method.
//    req, resp := client.ListBatchEndpointHandleMethodsCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECCENTER20240508) ListBatchEndpointHandleMethodsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opListBatchEndpointHandleMethodsCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListBatchEndpointHandleMethodsCommon API operation for SECCENTER20240508.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SECCENTER20240508's
// API operation ListBatchEndpointHandleMethodsCommon for usage and error information.
func (c *SECCENTER20240508) ListBatchEndpointHandleMethodsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ListBatchEndpointHandleMethodsCommonRequest(input)
	return out, req.Send()
}

// ListBatchEndpointHandleMethodsCommonWithContext is the same as ListBatchEndpointHandleMethodsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ListBatchEndpointHandleMethodsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECCENTER20240508) ListBatchEndpointHandleMethodsCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ListBatchEndpointHandleMethodsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListBatchEndpointHandleMethods = "ListBatchEndpointHandleMethods"

// ListBatchEndpointHandleMethodsRequest generates a "volcengine/request.Request" representing the
// client's request for the ListBatchEndpointHandleMethods operation. The "output" return
// value will be populated with the ListBatchEndpointHandleMethodsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListBatchEndpointHandleMethodsCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListBatchEndpointHandleMethodsCommon Send returns without error.
//
// See ListBatchEndpointHandleMethods for more information on using the ListBatchEndpointHandleMethods
// API call, and error handling.
//
//    // Example sending a request using the ListBatchEndpointHandleMethodsRequest method.
//    req, resp := client.ListBatchEndpointHandleMethodsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECCENTER20240508) ListBatchEndpointHandleMethodsRequest(input *ListBatchEndpointHandleMethodsInput) (req *request.Request, output *ListBatchEndpointHandleMethodsOutput) {
	op := &request.Operation{
		Name:       opListBatchEndpointHandleMethods,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListBatchEndpointHandleMethodsInput{}
	}

	output = &ListBatchEndpointHandleMethodsOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListBatchEndpointHandleMethods API operation for SECCENTER20240508.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SECCENTER20240508's
// API operation ListBatchEndpointHandleMethods for usage and error information.
func (c *SECCENTER20240508) ListBatchEndpointHandleMethods(input *ListBatchEndpointHandleMethodsInput) (*ListBatchEndpointHandleMethodsOutput, error) {
	req, out := c.ListBatchEndpointHandleMethodsRequest(input)
	return out, req.Send()
}

// ListBatchEndpointHandleMethodsWithContext is the same as ListBatchEndpointHandleMethods with the addition of
// the ability to pass a context and additional request options.
//
// See ListBatchEndpointHandleMethods for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECCENTER20240508) ListBatchEndpointHandleMethodsWithContext(ctx volcengine.Context, input *ListBatchEndpointHandleMethodsInput, opts ...request.Option) (*ListBatchEndpointHandleMethodsOutput, error) {
	req, out := c.ListBatchEndpointHandleMethodsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ListBatchEndpointHandleMethodsInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	AlarmIDList []*string `type:"list" json:",omitempty"`

	// AlarmType is a required field
	AlarmType *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s ListBatchEndpointHandleMethodsInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListBatchEndpointHandleMethodsInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ListBatchEndpointHandleMethodsInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ListBatchEndpointHandleMethodsInput"}
	if s.AlarmType == nil {
		invalidParams.Add(request.NewErrParamRequired("AlarmType"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAlarmIDList sets the AlarmIDList field's value.
func (s *ListBatchEndpointHandleMethodsInput) SetAlarmIDList(v []*string) *ListBatchEndpointHandleMethodsInput {
	s.AlarmIDList = v
	return s
}

// SetAlarmType sets the AlarmType field's value.
func (s *ListBatchEndpointHandleMethodsInput) SetAlarmType(v string) *ListBatchEndpointHandleMethodsInput {
	s.AlarmType = &v
	return s
}

type ListBatchEndpointHandleMethodsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	OperationList []*OperationListForListBatchEndpointHandleMethodsOutput `type:"list" json:",omitempty"`

	Support *bool `type:"boolean" json:",omitempty"`
}

// String returns the string representation
func (s ListBatchEndpointHandleMethodsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListBatchEndpointHandleMethodsOutput) GoString() string {
	return s.String()
}

// SetOperationList sets the OperationList field's value.
func (s *ListBatchEndpointHandleMethodsOutput) SetOperationList(v []*OperationListForListBatchEndpointHandleMethodsOutput) *ListBatchEndpointHandleMethodsOutput {
	s.OperationList = v
	return s
}

// SetSupport sets the Support field's value.
func (s *ListBatchEndpointHandleMethodsOutput) SetSupport(v bool) *ListBatchEndpointHandleMethodsOutput {
	s.Support = &v
	return s
}

type OperationListForListBatchEndpointHandleMethodsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	AgentID *string `type:"string" json:",omitempty"`

	AlarmIDList []*string `type:"list" json:",omitempty"`

	FileList []*string `type:"list" json:",omitempty"`

	ProcList []*ProcListForListBatchEndpointHandleMethodsOutput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s OperationListForListBatchEndpointHandleMethodsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s OperationListForListBatchEndpointHandleMethodsOutput) GoString() string {
	return s.String()
}

// SetAgentID sets the AgentID field's value.
func (s *OperationListForListBatchEndpointHandleMethodsOutput) SetAgentID(v string) *OperationListForListBatchEndpointHandleMethodsOutput {
	s.AgentID = &v
	return s
}

// SetAlarmIDList sets the AlarmIDList field's value.
func (s *OperationListForListBatchEndpointHandleMethodsOutput) SetAlarmIDList(v []*string) *OperationListForListBatchEndpointHandleMethodsOutput {
	s.AlarmIDList = v
	return s
}

// SetFileList sets the FileList field's value.
func (s *OperationListForListBatchEndpointHandleMethodsOutput) SetFileList(v []*string) *OperationListForListBatchEndpointHandleMethodsOutput {
	s.FileList = v
	return s
}

// SetProcList sets the ProcList field's value.
func (s *OperationListForListBatchEndpointHandleMethodsOutput) SetProcList(v []*ProcListForListBatchEndpointHandleMethodsOutput) *OperationListForListBatchEndpointHandleMethodsOutput {
	s.ProcList = v
	return s
}

type ProcListForListBatchEndpointHandleMethodsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Cmdline *string `type:"string" json:",omitempty"`

	Exe *string `type:"string" json:",omitempty"`

	Pid *int64 `type:"int64" json:",omitempty"`
}

// String returns the string representation
func (s ProcListForListBatchEndpointHandleMethodsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ProcListForListBatchEndpointHandleMethodsOutput) GoString() string {
	return s.String()
}

// SetCmdline sets the Cmdline field's value.
func (s *ProcListForListBatchEndpointHandleMethodsOutput) SetCmdline(v string) *ProcListForListBatchEndpointHandleMethodsOutput {
	s.Cmdline = &v
	return s
}

// SetExe sets the Exe field's value.
func (s *ProcListForListBatchEndpointHandleMethodsOutput) SetExe(v string) *ProcListForListBatchEndpointHandleMethodsOutput {
	s.Exe = &v
	return s
}

// SetPid sets the Pid field's value.
func (s *ProcListForListBatchEndpointHandleMethodsOutput) SetPid(v int64) *ProcListForListBatchEndpointHandleMethodsOutput {
	s.Pid = &v
	return s
}
