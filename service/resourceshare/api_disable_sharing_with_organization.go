// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package resourceshare

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDisableSharingWithOrganizationCommon = "DisableSharingWithOrganization"

// DisableSharingWithOrganizationCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DisableSharingWithOrganizationCommon operation. The "output" return
// value will be populated with the DisableSharingWithOrganizationCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DisableSharingWithOrganizationCommon Request to send the API call to the service.
// the "output" return value is not valid until after DisableSharingWithOrganizationCommon Send returns without error.
//
// See DisableSharingWithOrganizationCommon for more information on using the DisableSharingWithOrganizationCommon
// API call, and error handling.
//
//    // Example sending a request using the DisableSharingWithOrganizationCommonRequest method.
//    req, resp := client.DisableSharingWithOrganizationCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RESOURCESHARE) DisableSharingWithOrganizationCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDisableSharingWithOrganizationCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DisableSharingWithOrganizationCommon API operation for RESOURCE_SHARE.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for RESOURCE_SHARE's
// API operation DisableSharingWithOrganizationCommon for usage and error information.
func (c *RESOURCESHARE) DisableSharingWithOrganizationCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DisableSharingWithOrganizationCommonRequest(input)
	return out, req.Send()
}

// DisableSharingWithOrganizationCommonWithContext is the same as DisableSharingWithOrganizationCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DisableSharingWithOrganizationCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RESOURCESHARE) DisableSharingWithOrganizationCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DisableSharingWithOrganizationCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDisableSharingWithOrganization = "DisableSharingWithOrganization"

// DisableSharingWithOrganizationRequest generates a "volcengine/request.Request" representing the
// client's request for the DisableSharingWithOrganization operation. The "output" return
// value will be populated with the DisableSharingWithOrganizationCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DisableSharingWithOrganizationCommon Request to send the API call to the service.
// the "output" return value is not valid until after DisableSharingWithOrganizationCommon Send returns without error.
//
// See DisableSharingWithOrganization for more information on using the DisableSharingWithOrganization
// API call, and error handling.
//
//    // Example sending a request using the DisableSharingWithOrganizationRequest method.
//    req, resp := client.DisableSharingWithOrganizationRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RESOURCESHARE) DisableSharingWithOrganizationRequest(input *DisableSharingWithOrganizationInput) (req *request.Request, output *DisableSharingWithOrganizationOutput) {
	op := &request.Operation{
		Name:       opDisableSharingWithOrganization,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DisableSharingWithOrganizationInput{}
	}

	output = &DisableSharingWithOrganizationOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DisableSharingWithOrganization API operation for RESOURCE_SHARE.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for RESOURCE_SHARE's
// API operation DisableSharingWithOrganization for usage and error information.
func (c *RESOURCESHARE) DisableSharingWithOrganization(input *DisableSharingWithOrganizationInput) (*DisableSharingWithOrganizationOutput, error) {
	req, out := c.DisableSharingWithOrganizationRequest(input)
	return out, req.Send()
}

// DisableSharingWithOrganizationWithContext is the same as DisableSharingWithOrganization with the addition of
// the ability to pass a context and additional request options.
//
// See DisableSharingWithOrganization for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RESOURCESHARE) DisableSharingWithOrganizationWithContext(ctx volcengine.Context, input *DisableSharingWithOrganizationInput, opts ...request.Option) (*DisableSharingWithOrganizationOutput, error) {
	req, out := c.DisableSharingWithOrganizationRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DisableSharingWithOrganizationInput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s DisableSharingWithOrganizationInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DisableSharingWithOrganizationInput) GoString() string {
	return s.String()
}

type DisableSharingWithOrganizationOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s DisableSharingWithOrganizationOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DisableSharingWithOrganizationOutput) GoString() string {
	return s.String()
}
