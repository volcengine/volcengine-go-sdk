// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package resourceshare

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opAcceptResourceShareInvitationCommon = "AcceptResourceShareInvitation"

// AcceptResourceShareInvitationCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the AcceptResourceShareInvitationCommon operation. The "output" return
// value will be populated with the AcceptResourceShareInvitationCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned AcceptResourceShareInvitationCommon Request to send the API call to the service.
// the "output" return value is not valid until after AcceptResourceShareInvitationCommon Send returns without error.
//
// See AcceptResourceShareInvitationCommon for more information on using the AcceptResourceShareInvitationCommon
// API call, and error handling.
//
//    // Example sending a request using the AcceptResourceShareInvitationCommonRequest method.
//    req, resp := client.AcceptResourceShareInvitationCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RESOURCESHARE) AcceptResourceShareInvitationCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opAcceptResourceShareInvitationCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// AcceptResourceShareInvitationCommon API operation for RESOURCE_SHARE.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for RESOURCE_SHARE's
// API operation AcceptResourceShareInvitationCommon for usage and error information.
func (c *RESOURCESHARE) AcceptResourceShareInvitationCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.AcceptResourceShareInvitationCommonRequest(input)
	return out, req.Send()
}

// AcceptResourceShareInvitationCommonWithContext is the same as AcceptResourceShareInvitationCommon with the addition of
// the ability to pass a context and additional request options.
//
// See AcceptResourceShareInvitationCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RESOURCESHARE) AcceptResourceShareInvitationCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.AcceptResourceShareInvitationCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opAcceptResourceShareInvitation = "AcceptResourceShareInvitation"

// AcceptResourceShareInvitationRequest generates a "volcengine/request.Request" representing the
// client's request for the AcceptResourceShareInvitation operation. The "output" return
// value will be populated with the AcceptResourceShareInvitationCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned AcceptResourceShareInvitationCommon Request to send the API call to the service.
// the "output" return value is not valid until after AcceptResourceShareInvitationCommon Send returns without error.
//
// See AcceptResourceShareInvitation for more information on using the AcceptResourceShareInvitation
// API call, and error handling.
//
//    // Example sending a request using the AcceptResourceShareInvitationRequest method.
//    req, resp := client.AcceptResourceShareInvitationRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RESOURCESHARE) AcceptResourceShareInvitationRequest(input *AcceptResourceShareInvitationInput) (req *request.Request, output *AcceptResourceShareInvitationOutput) {
	op := &request.Operation{
		Name:       opAcceptResourceShareInvitation,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &AcceptResourceShareInvitationInput{}
	}

	output = &AcceptResourceShareInvitationOutput{}
	req = c.newRequest(op, input, output)

	return
}

// AcceptResourceShareInvitation API operation for RESOURCE_SHARE.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for RESOURCE_SHARE's
// API operation AcceptResourceShareInvitation for usage and error information.
func (c *RESOURCESHARE) AcceptResourceShareInvitation(input *AcceptResourceShareInvitationInput) (*AcceptResourceShareInvitationOutput, error) {
	req, out := c.AcceptResourceShareInvitationRequest(input)
	return out, req.Send()
}

// AcceptResourceShareInvitationWithContext is the same as AcceptResourceShareInvitation with the addition of
// the ability to pass a context and additional request options.
//
// See AcceptResourceShareInvitation for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RESOURCESHARE) AcceptResourceShareInvitationWithContext(ctx volcengine.Context, input *AcceptResourceShareInvitationInput, opts ...request.Option) (*AcceptResourceShareInvitationOutput, error) {
	req, out := c.AcceptResourceShareInvitationRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type AcceptResourceShareInvitationInput struct {
	_ struct{} `type:"structure"`

	// ResourceShareInvitationTrn is a required field
	ResourceShareInvitationTrn *string `type:"string" required:"true"`
}

// String returns the string representation
func (s AcceptResourceShareInvitationInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s AcceptResourceShareInvitationInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *AcceptResourceShareInvitationInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "AcceptResourceShareInvitationInput"}
	if s.ResourceShareInvitationTrn == nil {
		invalidParams.Add(request.NewErrParamRequired("ResourceShareInvitationTrn"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetResourceShareInvitationTrn sets the ResourceShareInvitationTrn field's value.
func (s *AcceptResourceShareInvitationInput) SetResourceShareInvitationTrn(v string) *AcceptResourceShareInvitationInput {
	s.ResourceShareInvitationTrn = &v
	return s
}

type AcceptResourceShareInvitationOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s AcceptResourceShareInvitationOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s AcceptResourceShareInvitationOutput) GoString() string {
	return s.String()
}
