// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package resourceshare

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opAssociateResourceShareCommon = "AssociateResourceShare"

// AssociateResourceShareCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the AssociateResourceShareCommon operation. The "output" return
// value will be populated with the AssociateResourceShareCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned AssociateResourceShareCommon Request to send the API call to the service.
// the "output" return value is not valid until after AssociateResourceShareCommon Send returns without error.
//
// See AssociateResourceShareCommon for more information on using the AssociateResourceShareCommon
// API call, and error handling.
//
//    // Example sending a request using the AssociateResourceShareCommonRequest method.
//    req, resp := client.AssociateResourceShareCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RESOURCESHARE) AssociateResourceShareCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opAssociateResourceShareCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// AssociateResourceShareCommon API operation for RESOURCE_SHARE.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for RESOURCE_SHARE's
// API operation AssociateResourceShareCommon for usage and error information.
func (c *RESOURCESHARE) AssociateResourceShareCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.AssociateResourceShareCommonRequest(input)
	return out, req.Send()
}

// AssociateResourceShareCommonWithContext is the same as AssociateResourceShareCommon with the addition of
// the ability to pass a context and additional request options.
//
// See AssociateResourceShareCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RESOURCESHARE) AssociateResourceShareCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.AssociateResourceShareCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opAssociateResourceShare = "AssociateResourceShare"

// AssociateResourceShareRequest generates a "volcengine/request.Request" representing the
// client's request for the AssociateResourceShare operation. The "output" return
// value will be populated with the AssociateResourceShareCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned AssociateResourceShareCommon Request to send the API call to the service.
// the "output" return value is not valid until after AssociateResourceShareCommon Send returns without error.
//
// See AssociateResourceShare for more information on using the AssociateResourceShare
// API call, and error handling.
//
//    // Example sending a request using the AssociateResourceShareRequest method.
//    req, resp := client.AssociateResourceShareRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RESOURCESHARE) AssociateResourceShareRequest(input *AssociateResourceShareInput) (req *request.Request, output *AssociateResourceShareOutput) {
	op := &request.Operation{
		Name:       opAssociateResourceShare,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &AssociateResourceShareInput{}
	}

	output = &AssociateResourceShareOutput{}
	req = c.newRequest(op, input, output)

	return
}

// AssociateResourceShare API operation for RESOURCE_SHARE.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for RESOURCE_SHARE's
// API operation AssociateResourceShare for usage and error information.
func (c *RESOURCESHARE) AssociateResourceShare(input *AssociateResourceShareInput) (*AssociateResourceShareOutput, error) {
	req, out := c.AssociateResourceShareRequest(input)
	return out, req.Send()
}

// AssociateResourceShareWithContext is the same as AssociateResourceShare with the addition of
// the ability to pass a context and additional request options.
//
// See AssociateResourceShare for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RESOURCESHARE) AssociateResourceShareWithContext(ctx volcengine.Context, input *AssociateResourceShareInput, opts ...request.Option) (*AssociateResourceShareOutput, error) {
	req, out := c.AssociateResourceShareRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type AssociateResourceShareInput struct {
	_ struct{} `type:"structure"`

	Principals *string `type:"string"`

	// ResourceShareTrn is a required field
	ResourceShareTrn *string `type:"string" required:"true"`

	ResourceTrns *string `type:"string"`
}

// String returns the string representation
func (s AssociateResourceShareInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s AssociateResourceShareInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *AssociateResourceShareInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "AssociateResourceShareInput"}
	if s.ResourceShareTrn == nil {
		invalidParams.Add(request.NewErrParamRequired("ResourceShareTrn"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetPrincipals sets the Principals field's value.
func (s *AssociateResourceShareInput) SetPrincipals(v string) *AssociateResourceShareInput {
	s.Principals = &v
	return s
}

// SetResourceShareTrn sets the ResourceShareTrn field's value.
func (s *AssociateResourceShareInput) SetResourceShareTrn(v string) *AssociateResourceShareInput {
	s.ResourceShareTrn = &v
	return s
}

// SetResourceTrns sets the ResourceTrns field's value.
func (s *AssociateResourceShareInput) SetResourceTrns(v string) *AssociateResourceShareInput {
	s.ResourceTrns = &v
	return s
}

type AssociateResourceShareOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s AssociateResourceShareOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s AssociateResourceShareOutput) GoString() string {
	return s.String()
}
