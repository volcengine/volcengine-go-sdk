// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package resourceshare

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opEnableSharingWithOrganizationCommon = "EnableSharingWithOrganization"

// EnableSharingWithOrganizationCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the EnableSharingWithOrganizationCommon operation. The "output" return
// value will be populated with the EnableSharingWithOrganizationCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned EnableSharingWithOrganizationCommon Request to send the API call to the service.
// the "output" return value is not valid until after EnableSharingWithOrganizationCommon Send returns without error.
//
// See EnableSharingWithOrganizationCommon for more information on using the EnableSharingWithOrganizationCommon
// API call, and error handling.
//
//    // Example sending a request using the EnableSharingWithOrganizationCommonRequest method.
//    req, resp := client.EnableSharingWithOrganizationCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RESOURCESHARE) EnableSharingWithOrganizationCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opEnableSharingWithOrganizationCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// EnableSharingWithOrganizationCommon API operation for RESOURCE_SHARE.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for RESOURCE_SHARE's
// API operation EnableSharingWithOrganizationCommon for usage and error information.
func (c *RESOURCESHARE) EnableSharingWithOrganizationCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.EnableSharingWithOrganizationCommonRequest(input)
	return out, req.Send()
}

// EnableSharingWithOrganizationCommonWithContext is the same as EnableSharingWithOrganizationCommon with the addition of
// the ability to pass a context and additional request options.
//
// See EnableSharingWithOrganizationCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RESOURCESHARE) EnableSharingWithOrganizationCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.EnableSharingWithOrganizationCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opEnableSharingWithOrganization = "EnableSharingWithOrganization"

// EnableSharingWithOrganizationRequest generates a "volcengine/request.Request" representing the
// client's request for the EnableSharingWithOrganization operation. The "output" return
// value will be populated with the EnableSharingWithOrganizationCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned EnableSharingWithOrganizationCommon Request to send the API call to the service.
// the "output" return value is not valid until after EnableSharingWithOrganizationCommon Send returns without error.
//
// See EnableSharingWithOrganization for more information on using the EnableSharingWithOrganization
// API call, and error handling.
//
//    // Example sending a request using the EnableSharingWithOrganizationRequest method.
//    req, resp := client.EnableSharingWithOrganizationRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RESOURCESHARE) EnableSharingWithOrganizationRequest(input *EnableSharingWithOrganizationInput) (req *request.Request, output *EnableSharingWithOrganizationOutput) {
	op := &request.Operation{
		Name:       opEnableSharingWithOrganization,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &EnableSharingWithOrganizationInput{}
	}

	output = &EnableSharingWithOrganizationOutput{}
	req = c.newRequest(op, input, output)

	return
}

// EnableSharingWithOrganization API operation for RESOURCE_SHARE.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for RESOURCE_SHARE's
// API operation EnableSharingWithOrganization for usage and error information.
func (c *RESOURCESHARE) EnableSharingWithOrganization(input *EnableSharingWithOrganizationInput) (*EnableSharingWithOrganizationOutput, error) {
	req, out := c.EnableSharingWithOrganizationRequest(input)
	return out, req.Send()
}

// EnableSharingWithOrganizationWithContext is the same as EnableSharingWithOrganization with the addition of
// the ability to pass a context and additional request options.
//
// See EnableSharingWithOrganization for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RESOURCESHARE) EnableSharingWithOrganizationWithContext(ctx volcengine.Context, input *EnableSharingWithOrganizationInput, opts ...request.Option) (*EnableSharingWithOrganizationOutput, error) {
	req, out := c.EnableSharingWithOrganizationRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type EnableSharingWithOrganizationInput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s EnableSharingWithOrganizationInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s EnableSharingWithOrganizationInput) GoString() string {
	return s.String()
}

type EnableSharingWithOrganizationOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s EnableSharingWithOrganizationOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s EnableSharingWithOrganizationOutput) GoString() string {
	return s.String()
}
