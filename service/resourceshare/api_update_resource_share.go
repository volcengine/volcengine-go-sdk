// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package resourceshare

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opUpdateResourceShareCommon = "UpdateResourceShare"

// UpdateResourceShareCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateResourceShareCommon operation. The "output" return
// value will be populated with the UpdateResourceShareCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateResourceShareCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateResourceShareCommon Send returns without error.
//
// See UpdateResourceShareCommon for more information on using the UpdateResourceShareCommon
// API call, and error handling.
//
//    // Example sending a request using the UpdateResourceShareCommonRequest method.
//    req, resp := client.UpdateResourceShareCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RESOURCESHARE) UpdateResourceShareCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opUpdateResourceShareCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// UpdateResourceShareCommon API operation for RESOURCE_SHARE.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for RESOURCE_SHARE's
// API operation UpdateResourceShareCommon for usage and error information.
func (c *RESOURCESHARE) UpdateResourceShareCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.UpdateResourceShareCommonRequest(input)
	return out, req.Send()
}

// UpdateResourceShareCommonWithContext is the same as UpdateResourceShareCommon with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateResourceShareCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RESOURCESHARE) UpdateResourceShareCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.UpdateResourceShareCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opUpdateResourceShare = "UpdateResourceShare"

// UpdateResourceShareRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateResourceShare operation. The "output" return
// value will be populated with the UpdateResourceShareCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateResourceShareCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateResourceShareCommon Send returns without error.
//
// See UpdateResourceShare for more information on using the UpdateResourceShare
// API call, and error handling.
//
//    // Example sending a request using the UpdateResourceShareRequest method.
//    req, resp := client.UpdateResourceShareRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RESOURCESHARE) UpdateResourceShareRequest(input *UpdateResourceShareInput) (req *request.Request, output *UpdateResourceShareOutput) {
	op := &request.Operation{
		Name:       opUpdateResourceShare,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UpdateResourceShareInput{}
	}

	output = &UpdateResourceShareOutput{}
	req = c.newRequest(op, input, output)

	return
}

// UpdateResourceShare API operation for RESOURCE_SHARE.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for RESOURCE_SHARE's
// API operation UpdateResourceShare for usage and error information.
func (c *RESOURCESHARE) UpdateResourceShare(input *UpdateResourceShareInput) (*UpdateResourceShareOutput, error) {
	req, out := c.UpdateResourceShareRequest(input)
	return out, req.Send()
}

// UpdateResourceShareWithContext is the same as UpdateResourceShare with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateResourceShare for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RESOURCESHARE) UpdateResourceShareWithContext(ctx volcengine.Context, input *UpdateResourceShareInput, opts ...request.Option) (*UpdateResourceShareOutput, error) {
	req, out := c.UpdateResourceShareRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type UpdateResourceShareInput struct {
	_ struct{} `type:"structure"`

	AllowShareType *string `type:"string"`

	Name *string `type:"string"`

	// ResourceShareTrn is a required field
	ResourceShareTrn *string `type:"string" required:"true"`
}

// String returns the string representation
func (s UpdateResourceShareInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateResourceShareInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UpdateResourceShareInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "UpdateResourceShareInput"}
	if s.ResourceShareTrn == nil {
		invalidParams.Add(request.NewErrParamRequired("ResourceShareTrn"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAllowShareType sets the AllowShareType field's value.
func (s *UpdateResourceShareInput) SetAllowShareType(v string) *UpdateResourceShareInput {
	s.AllowShareType = &v
	return s
}

// SetName sets the Name field's value.
func (s *UpdateResourceShareInput) SetName(v string) *UpdateResourceShareInput {
	s.Name = &v
	return s
}

// SetResourceShareTrn sets the ResourceShareTrn field's value.
func (s *UpdateResourceShareInput) SetResourceShareTrn(v string) *UpdateResourceShareInput {
	s.ResourceShareTrn = &v
	return s
}

type UpdateResourceShareOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s UpdateResourceShareOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateResourceShareOutput) GoString() string {
	return s.String()
}
