// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package resourceshare

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opListPrincipalsCommon = "ListPrincipals"

// ListPrincipalsCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ListPrincipalsCommon operation. The "output" return
// value will be populated with the ListPrincipalsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListPrincipalsCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListPrincipalsCommon Send returns without error.
//
// See ListPrincipalsCommon for more information on using the ListPrincipalsCommon
// API call, and error handling.
//
//    // Example sending a request using the ListPrincipalsCommonRequest method.
//    req, resp := client.ListPrincipalsCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RESOURCESHARE) ListPrincipalsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opListPrincipalsCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// ListPrincipalsCommon API operation for RESOURCE_SHARE.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for RESOURCE_SHARE's
// API operation ListPrincipalsCommon for usage and error information.
func (c *RESOURCESHARE) ListPrincipalsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ListPrincipalsCommonRequest(input)
	return out, req.Send()
}

// ListPrincipalsCommonWithContext is the same as ListPrincipalsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ListPrincipalsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RESOURCESHARE) ListPrincipalsCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ListPrincipalsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListPrincipals = "ListPrincipals"

// ListPrincipalsRequest generates a "volcengine/request.Request" representing the
// client's request for the ListPrincipals operation. The "output" return
// value will be populated with the ListPrincipalsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListPrincipalsCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListPrincipalsCommon Send returns without error.
//
// See ListPrincipals for more information on using the ListPrincipals
// API call, and error handling.
//
//    // Example sending a request using the ListPrincipalsRequest method.
//    req, resp := client.ListPrincipalsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RESOURCESHARE) ListPrincipalsRequest(input *ListPrincipalsInput) (req *request.Request, output *ListPrincipalsOutput) {
	op := &request.Operation{
		Name:       opListPrincipals,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListPrincipalsInput{}
	}

	output = &ListPrincipalsOutput{}
	req = c.newRequest(op, input, output)

	return
}

// ListPrincipals API operation for RESOURCE_SHARE.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for RESOURCE_SHARE's
// API operation ListPrincipals for usage and error information.
func (c *RESOURCESHARE) ListPrincipals(input *ListPrincipalsInput) (*ListPrincipalsOutput, error) {
	req, out := c.ListPrincipalsRequest(input)
	return out, req.Send()
}

// ListPrincipalsWithContext is the same as ListPrincipals with the addition of
// the ability to pass a context and additional request options.
//
// See ListPrincipals for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RESOURCESHARE) ListPrincipalsWithContext(ctx volcengine.Context, input *ListPrincipalsInput, opts ...request.Option) (*ListPrincipalsOutput, error) {
	req, out := c.ListPrincipalsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ListPrincipalsInput struct {
	_ struct{} `type:"structure"`

	MaxResults *int64 `type:"int64"`

	NextToken *string `type:"string"`

	Principals *string `type:"string"`

	ResourceShareTrns *string `type:"string"`

	ResourceTrn *string `type:"string"`

	ResourceType *string `type:"string"`
}

// String returns the string representation
func (s ListPrincipalsInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListPrincipalsInput) GoString() string {
	return s.String()
}

// SetMaxResults sets the MaxResults field's value.
func (s *ListPrincipalsInput) SetMaxResults(v int64) *ListPrincipalsInput {
	s.MaxResults = &v
	return s
}

// SetNextToken sets the NextToken field's value.
func (s *ListPrincipalsInput) SetNextToken(v string) *ListPrincipalsInput {
	s.NextToken = &v
	return s
}

// SetPrincipals sets the Principals field's value.
func (s *ListPrincipalsInput) SetPrincipals(v string) *ListPrincipalsInput {
	s.Principals = &v
	return s
}

// SetResourceShareTrns sets the ResourceShareTrns field's value.
func (s *ListPrincipalsInput) SetResourceShareTrns(v string) *ListPrincipalsInput {
	s.ResourceShareTrns = &v
	return s
}

// SetResourceTrn sets the ResourceTrn field's value.
func (s *ListPrincipalsInput) SetResourceTrn(v string) *ListPrincipalsInput {
	s.ResourceTrn = &v
	return s
}

// SetResourceType sets the ResourceType field's value.
func (s *ListPrincipalsInput) SetResourceType(v string) *ListPrincipalsInput {
	s.ResourceType = &v
	return s
}

type ListPrincipalsOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	NextToken *string `type:"string"`

	Principals []*PrincipalForListPrincipalsOutput `type:"list"`
}

// String returns the string representation
func (s ListPrincipalsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListPrincipalsOutput) GoString() string {
	return s.String()
}

// SetNextToken sets the NextToken field's value.
func (s *ListPrincipalsOutput) SetNextToken(v string) *ListPrincipalsOutput {
	s.NextToken = &v
	return s
}

// SetPrincipals sets the Principals field's value.
func (s *ListPrincipalsOutput) SetPrincipals(v []*PrincipalForListPrincipalsOutput) *ListPrincipalsOutput {
	s.Principals = v
	return s
}

type PrincipalForListPrincipalsOutput struct {
	_ struct{} `type:"structure"`

	External *bool `type:"boolean"`

	Id *string `type:"string"`

	ResourceShares []*ResourceShareForListPrincipalsOutput `type:"list"`
}

// String returns the string representation
func (s PrincipalForListPrincipalsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s PrincipalForListPrincipalsOutput) GoString() string {
	return s.String()
}

// SetExternal sets the External field's value.
func (s *PrincipalForListPrincipalsOutput) SetExternal(v bool) *PrincipalForListPrincipalsOutput {
	s.External = &v
	return s
}

// SetId sets the Id field's value.
func (s *PrincipalForListPrincipalsOutput) SetId(v string) *PrincipalForListPrincipalsOutput {
	s.Id = &v
	return s
}

// SetResourceShares sets the ResourceShares field's value.
func (s *PrincipalForListPrincipalsOutput) SetResourceShares(v []*ResourceShareForListPrincipalsOutput) *PrincipalForListPrincipalsOutput {
	s.ResourceShares = v
	return s
}

type ResourceShareForListPrincipalsOutput struct {
	_ struct{} `type:"structure"`

	ResourceShareName *string `type:"string"`

	ResourceShareTrn *string `type:"string"`

	ShareTime *string `type:"string"`
}

// String returns the string representation
func (s ResourceShareForListPrincipalsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ResourceShareForListPrincipalsOutput) GoString() string {
	return s.String()
}

// SetResourceShareName sets the ResourceShareName field's value.
func (s *ResourceShareForListPrincipalsOutput) SetResourceShareName(v string) *ResourceShareForListPrincipalsOutput {
	s.ResourceShareName = &v
	return s
}

// SetResourceShareTrn sets the ResourceShareTrn field's value.
func (s *ResourceShareForListPrincipalsOutput) SetResourceShareTrn(v string) *ResourceShareForListPrincipalsOutput {
	s.ResourceShareTrn = &v
	return s
}

// SetShareTime sets the ShareTime field's value.
func (s *ResourceShareForListPrincipalsOutput) SetShareTime(v string) *ResourceShareForListPrincipalsOutput {
	s.ShareTime = &v
	return s
}
