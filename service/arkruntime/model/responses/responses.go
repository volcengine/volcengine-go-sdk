// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.29.3
// source: responses.proto

package responses

import (
	"reflect"
	"sync"

	"google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
	"google.golang.org/protobuf/types/known/structpb"

	"github.com/volcengine/volcengine-go-sdk/service/arkruntime/model"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ResponsesServiceTier_Enum int32

const (
	ResponsesServiceTier_unspecified ResponsesServiceTier_Enum = 0
	ResponsesServiceTier_auto        ResponsesServiceTier_Enum = 1
	ResponsesServiceTier_default     ResponsesServiceTier_Enum = 2
)

// Enum value maps for ResponsesServiceTier_Enum.
var (
	ResponsesServiceTier_Enum_name = map[int32]string{
		0: "unspecified",
		1: "auto",
		2: "default",
	}
	ResponsesServiceTier_Enum_value = map[string]int32{
		"unspecified": 0,
		"auto":        1,
		"default":     2,
	}
)

func (x ResponsesServiceTier_Enum) Enum() *ResponsesServiceTier_Enum {
	p := new(ResponsesServiceTier_Enum)
	*p = x
	return p
}

func (x ResponsesServiceTier_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResponsesServiceTier_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_responses_proto_enumTypes[0].Descriptor()
}

func (ResponsesServiceTier_Enum) Type() protoreflect.EnumType {
	return &file_responses_proto_enumTypes[0]
}

func (x ResponsesServiceTier_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResponsesServiceTier_Enum.Descriptor instead.
func (ResponsesServiceTier_Enum) EnumDescriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{0, 0}
}

type ResponsesTruncation_Enum int32

const (
	ResponsesTruncation_unspecified ResponsesTruncation_Enum = 0
	ResponsesTruncation_auto        ResponsesTruncation_Enum = 1
	ResponsesTruncation_disabled    ResponsesTruncation_Enum = 2
)

// Enum value maps for ResponsesTruncation_Enum.
var (
	ResponsesTruncation_Enum_name = map[int32]string{
		0: "unspecified",
		1: "auto",
		2: "disabled",
	}
	ResponsesTruncation_Enum_value = map[string]int32{
		"unspecified": 0,
		"auto":        1,
		"disabled":    2,
	}
)

func (x ResponsesTruncation_Enum) Enum() *ResponsesTruncation_Enum {
	p := new(ResponsesTruncation_Enum)
	*p = x
	return p
}

func (x ResponsesTruncation_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResponsesTruncation_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_responses_proto_enumTypes[1].Descriptor()
}

func (ResponsesTruncation_Enum) Type() protoreflect.EnumType {
	return &file_responses_proto_enumTypes[1]
}

func (x ResponsesTruncation_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResponsesTruncation_Enum.Descriptor instead.
func (ResponsesTruncation_Enum) EnumDescriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{1, 0}
}

type AnnotationType_Enum int32

const (
	AnnotationType_unspecified  AnnotationType_Enum = 0
	AnnotationType_url_citation AnnotationType_Enum = 1
)

// Enum value maps for AnnotationType_Enum.
var (
	AnnotationType_Enum_name = map[int32]string{
		0: "unspecified",
		1: "url_citation",
	}
	AnnotationType_Enum_value = map[string]int32{
		"unspecified":  0,
		"url_citation": 1,
	}
)

func (x AnnotationType_Enum) Enum() *AnnotationType_Enum {
	p := new(AnnotationType_Enum)
	*p = x
	return p
}

func (x AnnotationType_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AnnotationType_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_responses_proto_enumTypes[2].Descriptor()
}

func (AnnotationType_Enum) Type() protoreflect.EnumType {
	return &file_responses_proto_enumTypes[2]
}

func (x AnnotationType_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AnnotationType_Enum.Descriptor instead.
func (AnnotationType_Enum) EnumDescriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{2, 0}
}

type ResponseImageProcessType_Enum int32

const (
	ResponseImageProcessType_unspecified ResponseImageProcessType_Enum = 0
	ResponseImageProcessType_point       ResponseImageProcessType_Enum = 1
	ResponseImageProcessType_grounding   ResponseImageProcessType_Enum = 2
	ResponseImageProcessType_rotate      ResponseImageProcessType_Enum = 3
	ResponseImageProcessType_zoom        ResponseImageProcessType_Enum = 4
)

// Enum value maps for ResponseImageProcessType_Enum.
var (
	ResponseImageProcessType_Enum_name = map[int32]string{
		0: "unspecified",
		1: "point",
		2: "grounding",
		3: "rotate",
		4: "zoom",
	}
	ResponseImageProcessType_Enum_value = map[string]int32{
		"unspecified": 0,
		"point":       1,
		"grounding":   2,
		"rotate":      3,
		"zoom":        4,
	}
)

func (x ResponseImageProcessType_Enum) Enum() *ResponseImageProcessType_Enum {
	p := new(ResponseImageProcessType_Enum)
	*p = x
	return p
}

func (x ResponseImageProcessType_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResponseImageProcessType_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_responses_proto_enumTypes[3].Descriptor()
}

func (ResponseImageProcessType_Enum) Type() protoreflect.EnumType {
	return &file_responses_proto_enumTypes[3]
}

func (x ResponseImageProcessType_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResponseImageProcessType_Enum.Descriptor instead.
func (ResponseImageProcessType_Enum) EnumDescriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{3, 0}
}

type ItemType_Enum int32

const (
	ItemType_unspecified           ItemType_Enum = 0
	ItemType_message               ItemType_Enum = 1
	ItemType_function_call         ItemType_Enum = 2
	ItemType_function_call_output  ItemType_Enum = 3
	ItemType_reasoning             ItemType_Enum = 4
	ItemType_item_reference        ItemType_Enum = 5
	ItemType_transcription         ItemType_Enum = 6
	ItemType_web_search_call       ItemType_Enum = 7
	ItemType_image_process         ItemType_Enum = 8
	ItemType_mcp_approval_request  ItemType_Enum = 9
	ItemType_mcp_approval_response ItemType_Enum = 10
	ItemType_mcp_list_tools        ItemType_Enum = 11
	ItemType_mcp_call              ItemType_Enum = 12
)

// Enum value maps for ItemType_Enum.
var (
	ItemType_Enum_name = map[int32]string{
		0:  "unspecified",
		1:  "message",
		2:  "function_call",
		3:  "function_call_output",
		4:  "reasoning",
		5:  "item_reference",
		6:  "transcription",
		7:  "web_search_call",
		8:  "image_process",
		9:  "mcp_approval_request",
		10: "mcp_approval_response",
		11: "mcp_list_tools",
		12: "mcp_call",
	}
	ItemType_Enum_value = map[string]int32{
		"unspecified":           0,
		"message":               1,
		"function_call":         2,
		"function_call_output":  3,
		"reasoning":             4,
		"item_reference":        5,
		"transcription":         6,
		"web_search_call":       7,
		"image_process":         8,
		"mcp_approval_request":  9,
		"mcp_approval_response": 10,
		"mcp_list_tools":        11,
		"mcp_call":              12,
	}
)

func (x ItemType_Enum) Enum() *ItemType_Enum {
	p := new(ItemType_Enum)
	*p = x
	return p
}

func (x ItemType_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ItemType_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_responses_proto_enumTypes[4].Descriptor()
}

func (ItemType_Enum) Type() protoreflect.EnumType {
	return &file_responses_proto_enumTypes[4]
}

func (x ItemType_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ItemType_Enum.Descriptor instead.
func (ItemType_Enum) EnumDescriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{6, 0}
}

type MessageRole_Enum int32

const (
	MessageRole_unspecified MessageRole_Enum = 0
	MessageRole_user        MessageRole_Enum = 1
	MessageRole_system      MessageRole_Enum = 2
	MessageRole_developer   MessageRole_Enum = 3
	MessageRole_assistant   MessageRole_Enum = 4
)

// Enum value maps for MessageRole_Enum.
var (
	MessageRole_Enum_name = map[int32]string{
		0: "unspecified",
		1: "user",
		2: "system",
		3: "developer",
		4: "assistant",
	}
	MessageRole_Enum_value = map[string]int32{
		"unspecified": 0,
		"user":        1,
		"system":      2,
		"developer":   3,
		"assistant":   4,
	}
)

func (x MessageRole_Enum) Enum() *MessageRole_Enum {
	p := new(MessageRole_Enum)
	*p = x
	return p
}

func (x MessageRole_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageRole_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_responses_proto_enumTypes[5].Descriptor()
}

func (MessageRole_Enum) Type() protoreflect.EnumType {
	return &file_responses_proto_enumTypes[5]
}

func (x MessageRole_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageRole_Enum.Descriptor instead.
func (MessageRole_Enum) EnumDescriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{7, 0}
}

type ContentItemImageDetail_Enum int32

const (
	ContentItemImageDetail_auto ContentItemImageDetail_Enum = 0
	ContentItemImageDetail_high ContentItemImageDetail_Enum = 1
	ContentItemImageDetail_low  ContentItemImageDetail_Enum = 2
)

// Enum value maps for ContentItemImageDetail_Enum.
var (
	ContentItemImageDetail_Enum_name = map[int32]string{
		0: "auto",
		1: "high",
		2: "low",
	}
	ContentItemImageDetail_Enum_value = map[string]int32{
		"auto": 0,
		"high": 1,
		"low":  2,
	}
)

func (x ContentItemImageDetail_Enum) Enum() *ContentItemImageDetail_Enum {
	p := new(ContentItemImageDetail_Enum)
	*p = x
	return p
}

func (x ContentItemImageDetail_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContentItemImageDetail_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_responses_proto_enumTypes[6].Descriptor()
}

func (ContentItemImageDetail_Enum) Type() protoreflect.EnumType {
	return &file_responses_proto_enumTypes[6]
}

func (x ContentItemImageDetail_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContentItemImageDetail_Enum.Descriptor instead.
func (ContentItemImageDetail_Enum) EnumDescriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{8, 0}
}

type ContentItemType_Enum int32

const (
	ContentItemType_unspecified        ContentItemType_Enum = 0
	ContentItemType_input_text         ContentItemType_Enum = 1
	ContentItemType_input_image        ContentItemType_Enum = 2
	ContentItemType_input_video        ContentItemType_Enum = 3
	ContentItemType_output_text        ContentItemType_Enum = 4
	ContentItemType_summary_text       ContentItemType_Enum = 5 // reasoning 的 summary
	ContentItemType_transcription_text ContentItemType_Enum = 6 // asr 的 result
	ContentItemType_input_audio        ContentItemType_Enum = 7
)

// Enum value maps for ContentItemType_Enum.
var (
	ContentItemType_Enum_name = map[int32]string{
		0: "unspecified",
		1: "input_text",
		2: "input_image",
		3: "input_video",
		4: "output_text",
		5: "summary_text",
		6: "transcription_text",
		7: "input_audio",
	}
	ContentItemType_Enum_value = map[string]int32{
		"unspecified":        0,
		"input_text":         1,
		"input_image":        2,
		"input_video":        3,
		"output_text":        4,
		"summary_text":       5,
		"transcription_text": 6,
		"input_audio":        7,
	}
)

func (x ContentItemType_Enum) Enum() *ContentItemType_Enum {
	p := new(ContentItemType_Enum)
	*p = x
	return p
}

func (x ContentItemType_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContentItemType_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_responses_proto_enumTypes[7].Descriptor()
}

func (ContentItemType_Enum) Type() protoreflect.EnumType {
	return &file_responses_proto_enumTypes[7]
}

func (x ContentItemType_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContentItemType_Enum.Descriptor instead.
func (ContentItemType_Enum) EnumDescriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{9, 0}
}

type ItemStatus_Enum int32

const (
	ItemStatus_unspecified ItemStatus_Enum = 0
	ItemStatus_in_progress ItemStatus_Enum = 1
	ItemStatus_completed   ItemStatus_Enum = 2
	ItemStatus_incomplete  ItemStatus_Enum = 3
	ItemStatus_searching   ItemStatus_Enum = 4 // for web search
	ItemStatus_failed      ItemStatus_Enum = 5 // for web search
)

// Enum value maps for ItemStatus_Enum.
var (
	ItemStatus_Enum_name = map[int32]string{
		0: "unspecified",
		1: "in_progress",
		2: "completed",
		3: "incomplete",
		4: "searching",
		5: "failed",
	}
	ItemStatus_Enum_value = map[string]int32{
		"unspecified": 0,
		"in_progress": 1,
		"completed":   2,
		"incomplete":  3,
		"searching":   4,
		"failed":      5,
	}
)

func (x ItemStatus_Enum) Enum() *ItemStatus_Enum {
	p := new(ItemStatus_Enum)
	*p = x
	return p
}

func (x ItemStatus_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ItemStatus_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_responses_proto_enumTypes[8].Descriptor()
}

func (ItemStatus_Enum) Type() protoreflect.EnumType {
	return &file_responses_proto_enumTypes[8]
}

func (x ItemStatus_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ItemStatus_Enum.Descriptor instead.
func (ItemStatus_Enum) EnumDescriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{10, 0}
}

type ResponseStatus_Enum int32

const (
	ResponseStatus_unspecified ResponseStatus_Enum = 0
	ResponseStatus_in_progress ResponseStatus_Enum = 1
	ResponseStatus_completed   ResponseStatus_Enum = 2
	ResponseStatus_incomplete  ResponseStatus_Enum = 3
	ResponseStatus_failed      ResponseStatus_Enum = 4
)

// Enum value maps for ResponseStatus_Enum.
var (
	ResponseStatus_Enum_name = map[int32]string{
		0: "unspecified",
		1: "in_progress",
		2: "completed",
		3: "incomplete",
		4: "failed",
	}
	ResponseStatus_Enum_value = map[string]int32{
		"unspecified": 0,
		"in_progress": 1,
		"completed":   2,
		"incomplete":  3,
		"failed":      4,
	}
)

func (x ResponseStatus_Enum) Enum() *ResponseStatus_Enum {
	p := new(ResponseStatus_Enum)
	*p = x
	return p
}

func (x ResponseStatus_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResponseStatus_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_responses_proto_enumTypes[9].Descriptor()
}

func (ResponseStatus_Enum) Type() protoreflect.EnumType {
	return &file_responses_proto_enumTypes[9]
}

func (x ResponseStatus_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResponseStatus_Enum.Descriptor instead.
func (ResponseStatus_Enum) EnumDescriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{11, 0}
}

type ThinkingType_Enum int32

const (
	ThinkingType_unspecified ThinkingType_Enum = 0
	ThinkingType_auto        ThinkingType_Enum = 1
	ThinkingType_disabled    ThinkingType_Enum = 2
	ThinkingType_enabled     ThinkingType_Enum = 3
)

// Enum value maps for ThinkingType_Enum.
var (
	ThinkingType_Enum_name = map[int32]string{
		0: "unspecified",
		1: "auto",
		2: "disabled",
		3: "enabled",
	}
	ThinkingType_Enum_value = map[string]int32{
		"unspecified": 0,
		"auto":        1,
		"disabled":    2,
		"enabled":     3,
	}
)

func (x ThinkingType_Enum) Enum() *ThinkingType_Enum {
	p := new(ThinkingType_Enum)
	*p = x
	return p
}

func (x ThinkingType_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ThinkingType_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_responses_proto_enumTypes[10].Descriptor()
}

func (ThinkingType_Enum) Type() protoreflect.EnumType {
	return &file_responses_proto_enumTypes[10]
}

func (x ThinkingType_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ThinkingType_Enum.Descriptor instead.
func (ThinkingType_Enum) EnumDescriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{12, 0}
}

type TextType_Enum int32

const (
	TextType_unspecified TextType_Enum = 0
	TextType_text        TextType_Enum = 1
	TextType_json_object TextType_Enum = 2
	TextType_json_schema TextType_Enum = 3
)

// Enum value maps for TextType_Enum.
var (
	TextType_Enum_name = map[int32]string{
		0: "unspecified",
		1: "text",
		2: "json_object",
		3: "json_schema",
	}
	TextType_Enum_value = map[string]int32{
		"unspecified": 0,
		"text":        1,
		"json_object": 2,
		"json_schema": 3,
	}
)

func (x TextType_Enum) Enum() *TextType_Enum {
	p := new(TextType_Enum)
	*p = x
	return p
}

func (x TextType_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TextType_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_responses_proto_enumTypes[11].Descriptor()
}

func (TextType_Enum) Type() protoreflect.EnumType {
	return &file_responses_proto_enumTypes[11]
}

func (x TextType_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TextType_Enum.Descriptor instead.
func (TextType_Enum) EnumDescriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{13, 0}
}

type ToolChoiceMode_Enum int32

const (
	ToolChoiceMode_unspecified ToolChoiceMode_Enum = 0
	ToolChoiceMode_auto        ToolChoiceMode_Enum = 1
	ToolChoiceMode_none        ToolChoiceMode_Enum = 2
	ToolChoiceMode_required    ToolChoiceMode_Enum = 3
)

// Enum value maps for ToolChoiceMode_Enum.
var (
	ToolChoiceMode_Enum_name = map[int32]string{
		0: "unspecified",
		1: "auto",
		2: "none",
		3: "required",
	}
	ToolChoiceMode_Enum_value = map[string]int32{
		"unspecified": 0,
		"auto":        1,
		"none":        2,
		"required":    3,
	}
)

func (x ToolChoiceMode_Enum) Enum() *ToolChoiceMode_Enum {
	p := new(ToolChoiceMode_Enum)
	*p = x
	return p
}

func (x ToolChoiceMode_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ToolChoiceMode_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_responses_proto_enumTypes[12].Descriptor()
}

func (ToolChoiceMode_Enum) Type() protoreflect.EnumType {
	return &file_responses_proto_enumTypes[12]
}

func (x ToolChoiceMode_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ToolChoiceMode_Enum.Descriptor instead.
func (ToolChoiceMode_Enum) EnumDescriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{14, 0}
}

type ToolType_Enum int32

const (
	ToolType_unspecified        ToolType_Enum = 0
	ToolType_function           ToolType_Enum = 1
	ToolType_web_search_preview ToolType_Enum = 2
	ToolType_web_search         ToolType_Enum = 3
	ToolType_image_process      ToolType_Enum = 4
	ToolType_mcp                ToolType_Enum = 5
)

// Enum value maps for ToolType_Enum.
var (
	ToolType_Enum_name = map[int32]string{
		0: "unspecified",
		1: "function",
		2: "web_search_preview",
		3: "web_search",
		4: "image_process",
		5: "mcp",
	}
	ToolType_Enum_value = map[string]int32{
		"unspecified":        0,
		"function":           1,
		"web_search_preview": 2,
		"web_search":         3,
		"image_process":      4,
		"mcp":                5,
	}
)

func (x ToolType_Enum) Enum() *ToolType_Enum {
	p := new(ToolType_Enum)
	*p = x
	return p
}

func (x ToolType_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ToolType_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_responses_proto_enumTypes[13].Descriptor()
}

func (ToolType_Enum) Type() protoreflect.EnumType {
	return &file_responses_proto_enumTypes[13]
}

func (x ToolType_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ToolType_Enum.Descriptor instead.
func (ToolType_Enum) EnumDescriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{15, 0}
}

type UserLocationType_Enum int32

const (
	UserLocationType_unspecified UserLocationType_Enum = 0
	UserLocationType_approximate UserLocationType_Enum = 1
)

// Enum value maps for UserLocationType_Enum.
var (
	UserLocationType_Enum_name = map[int32]string{
		0: "unspecified",
		1: "approximate",
	}
	UserLocationType_Enum_value = map[string]int32{
		"unspecified": 0,
		"approximate": 1,
	}
)

func (x UserLocationType_Enum) Enum() *UserLocationType_Enum {
	p := new(UserLocationType_Enum)
	*p = x
	return p
}

func (x UserLocationType_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserLocationType_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_responses_proto_enumTypes[14].Descriptor()
}

func (UserLocationType_Enum) Type() protoreflect.EnumType {
	return &file_responses_proto_enumTypes[14]
}

func (x UserLocationType_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserLocationType_Enum.Descriptor instead.
func (UserLocationType_Enum) EnumDescriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{16, 0}
}

type ObjectType_Enum int32

const (
	ObjectType_unspecified ObjectType_Enum = 0
	ObjectType_response    ObjectType_Enum = 1
	ObjectType_list        ObjectType_Enum = 2
)

// Enum value maps for ObjectType_Enum.
var (
	ObjectType_Enum_name = map[int32]string{
		0: "unspecified",
		1: "response",
		2: "list",
	}
	ObjectType_Enum_value = map[string]int32{
		"unspecified": 0,
		"response":    1,
		"list":        2,
	}
)

func (x ObjectType_Enum) Enum() *ObjectType_Enum {
	p := new(ObjectType_Enum)
	*p = x
	return p
}

func (x ObjectType_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ObjectType_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_responses_proto_enumTypes[15].Descriptor()
}

func (ObjectType_Enum) Type() protoreflect.EnumType {
	return &file_responses_proto_enumTypes[15]
}

func (x ObjectType_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ObjectType_Enum.Descriptor instead.
func (ObjectType_Enum) EnumDescriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{17, 0}
}

type ReasoningEffort_Enum int32

const (
	ReasoningEffort_unspecified ReasoningEffort_Enum = 0
	ReasoningEffort_minimal     ReasoningEffort_Enum = 1
	ReasoningEffort_low         ReasoningEffort_Enum = 2
	ReasoningEffort_medium      ReasoningEffort_Enum = 3
	ReasoningEffort_high        ReasoningEffort_Enum = 4
)

// Enum value maps for ReasoningEffort_Enum.
var (
	ReasoningEffort_Enum_name = map[int32]string{
		0: "unspecified",
		1: "minimal",
		2: "low",
		3: "medium",
		4: "high",
	}
	ReasoningEffort_Enum_value = map[string]int32{
		"unspecified": 0,
		"minimal":     1,
		"low":         2,
		"medium":      3,
		"high":        4,
	}
)

func (x ReasoningEffort_Enum) Enum() *ReasoningEffort_Enum {
	p := new(ReasoningEffort_Enum)
	*p = x
	return p
}

func (x ReasoningEffort_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReasoningEffort_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_responses_proto_enumTypes[16].Descriptor()
}

func (ReasoningEffort_Enum) Type() protoreflect.EnumType {
	return &file_responses_proto_enumTypes[16]
}

func (x ReasoningEffort_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReasoningEffort_Enum.Descriptor instead.
func (ReasoningEffort_Enum) EnumDescriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{18, 0}
}

type EventType_Enum int32

const (
	EventType_unspecified                             EventType_Enum = 0
	EventType_response_created                        EventType_Enum = 1
	EventType_response_in_progress                    EventType_Enum = 2
	EventType_response_completed                      EventType_Enum = 3
	EventType_response_failed                         EventType_Enum = 4
	EventType_response_incomplete                     EventType_Enum = 5
	EventType_response_output_item_added              EventType_Enum = 6
	EventType_response_output_item_done               EventType_Enum = 7
	EventType_response_content_part_added             EventType_Enum = 8
	EventType_response_content_part_done              EventType_Enum = 9
	EventType_response_output_text_delta              EventType_Enum = 10
	EventType_response_output_text_done               EventType_Enum = 11
	EventType_response_reasoning_summary_text_delta   EventType_Enum = 12
	EventType_response_reasoning_summary_text_done    EventType_Enum = 13
	EventType_response_reasoning_summary_part_added   EventType_Enum = 14
	EventType_response_reasoning_summary_part_done    EventType_Enum = 15
	EventType_response_function_call_arguments_delta  EventType_Enum = 16
	EventType_response_function_call_arguments_done   EventType_Enum = 17
	EventType_error                                   EventType_Enum = 18
	EventType_response_transcription_part_added       EventType_Enum = 19
	EventType_response_transcription_part_done        EventType_Enum = 20
	EventType_response_transcription_text_delta       EventType_Enum = 21
	EventType_response_transcription_text_done        EventType_Enum = 22
	EventType_response_web_search_call_in_progress    EventType_Enum = 23
	EventType_response_web_search_call_searching      EventType_Enum = 24
	EventType_response_web_search_call_completed      EventType_Enum = 25
	EventType_response_output_text_annotation_added   EventType_Enum = 26
	EventType_response_image_process_call_in_progress EventType_Enum = 30
	EventType_response_image_process_call_progressing EventType_Enum = 31
	EventType_response_image_process_call_completed   EventType_Enum = 32
	EventType_response_image_process_call_failed      EventType_Enum = 33
	EventType_response_mcp_list_tools_in_progress     EventType_Enum = 34
	EventType_response_mcp_list_tools_completed       EventType_Enum = 35
	EventType_response_mcp_call_in_progress           EventType_Enum = 36
	EventType_response_mcp_call_arguments_delta       EventType_Enum = 37
	EventType_response_mcp_call_arguments_done        EventType_Enum = 38
	EventType_response_mcp_call_completed             EventType_Enum = 39
	EventType_response_mcp_call_failed                EventType_Enum = 40
)

// Enum value maps for EventType_Enum.
var (
	EventType_Enum_name = map[int32]string{
		0:  "unspecified",
		1:  "response.created",
		2:  "response.in_progress",
		3:  "response.completed",
		4:  "response.failed",
		5:  "response.incomplete",
		6:  "response.output_item.added",
		7:  "response.output_item.done",
		8:  "response.content_part.added",
		9:  "response.content_part.done",
		10: "response.output_text.delta",
		11: "response.output_text.done",
		12: "response.reasoning_summary_text.delta",
		13: "response.reasoning_summary_text.done",
		14: "response.reasoning_summary_part.added",
		15: "response.reasoning_summary_part.done",
		16: "response.function_call_arguments.delta",
		17: "response.function_call_arguments.done",
		18: "error",
		19: "response.transcription_part.added",
		20: "response.transcription_part.done",
		21: "response.transcription_text.delta",
		22: "response.transcription_text.done",
		23: "response.web_search_call.in_progress",
		24: "response.web_search_call.searching",
		25: "response.web_search_call.completed",
		26: "response.output_text.annotation.added",
		30: "response.image_process_call.in_progress",
		31: "response.image_process_call.progressing",
		32: "response.image_process_call.completed",
		33: "response.image_process_call.failed",
		34: "response.mcp_list_tools.in_progress",
		35: "response.mcp_list_tools.completed",
		36: "response.mcp_call.in_progress",
		37: "response.mcp_call_arguments.delta",
		38: "response.mcp_call_arguments.done",
		39: "response.mcp_call.completed",
		40: "response.mcp_call.failed",
	}
	EventType_Enum_value = map[string]int32{
		"unspecified":                             0,
		"response.created":                        1,
		"response.in_progress":                    2,
		"response.completed":                      3,
		"response.failed":                         4,
		"response.incomplete":                     5,
		"response.output_item.added":              6,
		"response.output_item.done":               7,
		"response.content_part.added":             8,
		"response.content_part.done":              9,
		"response.output_text.delta":              10,
		"response.output_text.done":               11,
		"response.reasoning_summary_text.delta":   12,
		"response.reasoning_summary_text.done":    13,
		"response.reasoning_summary_part.added":   14,
		"response.reasoning_summary_part.done":    15,
		"response.function_call_arguments.delta":  16,
		"response.function_call_arguments.done":   17,
		"error":                                   18,
		"response.transcription_part.added":       19,
		"response.transcription_part.done":        20,
		"response.transcription_text.delta":       21,
		"response.transcription_text.done":        22,
		"response.web_search_call.in_progress":    23,
		"response.web_search_call.searching":      24,
		"response.web_search_call.completed":      25,
		"response.output_text.annotation.added":   26,
		"response.image_process_call.in_progress": 30,
		"response.image_process_call.progressing": 31,
		"response.image_process_call.completed":   32,
		"response.image_process_call.failed":      33,
		"response.mcp_list_tools.in_progress":     34,
		"response.mcp_list_tools.completed":       35,
		"response.mcp_call.in_progress":           36,
		"response.mcp_call_arguments.delta":       37,
		"response.mcp_call_arguments.done":        38,
		"response.mcp_call.completed":             39,
		"response.mcp_call.failed":                40,
	}
)

func (x EventType_Enum) Enum() *EventType_Enum {
	p := new(EventType_Enum)
	*p = x
	return p
}

func (x EventType_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventType_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_responses_proto_enumTypes[17].Descriptor()
}

func (EventType_Enum) Type() protoreflect.EnumType {
	return &file_responses_proto_enumTypes[17]
}

func (x EventType_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventType_Enum.Descriptor instead.
func (EventType_Enum) EnumDescriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{19, 0}
}

type IncludeType_Enum int32

const (
	IncludeType_unspecified IncludeType_Enum = 0
	IncludeType_image_url   IncludeType_Enum = 1 // @inject_tag: query:"message.input_image.image_url"
)

// Enum value maps for IncludeType_Enum.
var (
	IncludeType_Enum_name = map[int32]string{
		0: "unspecified",
		1: "image_url",
	}
	IncludeType_Enum_value = map[string]int32{
		"unspecified": 0,
		"image_url":   1,
	}
)

func (x IncludeType_Enum) Enum() *IncludeType_Enum {
	p := new(IncludeType_Enum)
	*p = x
	return p
}

func (x IncludeType_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IncludeType_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_responses_proto_enumTypes[18].Descriptor()
}

func (IncludeType_Enum) Type() protoreflect.EnumType {
	return &file_responses_proto_enumTypes[18]
}

func (x IncludeType_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IncludeType_Enum.Descriptor instead.
func (IncludeType_Enum) EnumDescriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{20, 0}
}

type CacheType_Enum int32

const (
	CacheType_unspecified CacheType_Enum = 0
	CacheType_disabled    CacheType_Enum = 1
	CacheType_enabled     CacheType_Enum = 2
)

// Enum value maps for CacheType_Enum.
var (
	CacheType_Enum_name = map[int32]string{
		0: "unspecified",
		1: "disabled",
		2: "enabled",
	}
	CacheType_Enum_value = map[string]int32{
		"unspecified": 0,
		"disabled":    1,
		"enabled":     2,
	}
)

func (x CacheType_Enum) Enum() *CacheType_Enum {
	p := new(CacheType_Enum)
	*p = x
	return p
}

func (x CacheType_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CacheType_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_responses_proto_enumTypes[19].Descriptor()
}

func (CacheType_Enum) Type() protoreflect.EnumType {
	return &file_responses_proto_enumTypes[19]
}

func (x CacheType_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CacheType_Enum.Descriptor instead.
func (CacheType_Enum) EnumDescriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{21, 0}
}

type ChunkingStrategyType_Enum int32

const (
	ChunkingStrategyType_unspecified ChunkingStrategyType_Enum = 0
	ChunkingStrategyType_server_vad  ChunkingStrategyType_Enum = 1
)

// Enum value maps for ChunkingStrategyType_Enum.
var (
	ChunkingStrategyType_Enum_name = map[int32]string{
		0: "unspecified",
		1: "server_vad",
	}
	ChunkingStrategyType_Enum_value = map[string]int32{
		"unspecified": 0,
		"server_vad":  1,
	}
)

func (x ChunkingStrategyType_Enum) Enum() *ChunkingStrategyType_Enum {
	p := new(ChunkingStrategyType_Enum)
	*p = x
	return p
}

func (x ChunkingStrategyType_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChunkingStrategyType_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_responses_proto_enumTypes[20].Descriptor()
}

func (ChunkingStrategyType_Enum) Type() protoreflect.EnumType {
	return &file_responses_proto_enumTypes[20]
}

func (x ChunkingStrategyType_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChunkingStrategyType_Enum.Descriptor instead.
func (ChunkingStrategyType_Enum) EnumDescriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{22, 0}
}

type ActionType_Enum int32

const (
	ActionType_unspecified ActionType_Enum = 0
	ActionType_search      ActionType_Enum = 1
)

// Enum value maps for ActionType_Enum.
var (
	ActionType_Enum_name = map[int32]string{
		0: "unspecified",
		1: "search",
	}
	ActionType_Enum_value = map[string]int32{
		"unspecified": 0,
		"search":      1,
	}
)

func (x ActionType_Enum) Enum() *ActionType_Enum {
	p := new(ActionType_Enum)
	*p = x
	return p
}

func (x ActionType_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionType_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_responses_proto_enumTypes[21].Descriptor()
}

func (ActionType_Enum) Type() protoreflect.EnumType {
	return &file_responses_proto_enumTypes[21]
}

func (x ActionType_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActionType_Enum.Descriptor instead.
func (ActionType_Enum) EnumDescriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{49, 0}
}

type SourceType_Enum int32

const (
	SourceType_unspecified   SourceType_Enum = 0
	SourceType_toutiao       SourceType_Enum = 1
	SourceType_douyin        SourceType_Enum = 2
	SourceType_moji          SourceType_Enum = 3
	SourceType_search_engine SourceType_Enum = 4
)

// Enum value maps for SourceType_Enum.
var (
	SourceType_Enum_name = map[int32]string{
		0: "unspecified",
		1: "toutiao",
		2: "douyin",
		3: "moji",
		4: "search_engine",
	}
	SourceType_Enum_value = map[string]int32{
		"unspecified":   0,
		"toutiao":       1,
		"douyin":        2,
		"moji":          3,
		"search_engine": 4,
	}
)

func (x SourceType_Enum) Enum() *SourceType_Enum {
	p := new(SourceType_Enum)
	*p = x
	return p
}

func (x SourceType_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SourceType_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_responses_proto_enumTypes[22].Descriptor()
}

func (SourceType_Enum) Type() protoreflect.EnumType {
	return &file_responses_proto_enumTypes[22]
}

func (x SourceType_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SourceType_Enum.Descriptor instead.
func (SourceType_Enum) EnumDescriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{62, 0}
}

type ApprovalMode_Enum int32

const (
	ApprovalMode_unspecified ApprovalMode_Enum = 0
	ApprovalMode_always      ApprovalMode_Enum = 1
	ApprovalMode_never       ApprovalMode_Enum = 2
)

// Enum value maps for ApprovalMode_Enum.
var (
	ApprovalMode_Enum_name = map[int32]string{
		0: "unspecified",
		1: "always",
		2: "never",
	}
	ApprovalMode_Enum_value = map[string]int32{
		"unspecified": 0,
		"always":      1,
		"never":       2,
	}
)

func (x ApprovalMode_Enum) Enum() *ApprovalMode_Enum {
	p := new(ApprovalMode_Enum)
	*p = x
	return p
}

func (x ApprovalMode_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ApprovalMode_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_responses_proto_enumTypes[23].Descriptor()
}

func (ApprovalMode_Enum) Type() protoreflect.EnumType {
	return &file_responses_proto_enumTypes[23]
}

func (x ApprovalMode_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ApprovalMode_Enum.Descriptor instead.
func (ApprovalMode_Enum) EnumDescriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{74, 0}
}

type ResponsesServiceTier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResponsesServiceTier) Reset() {
	*x = ResponsesServiceTier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponsesServiceTier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponsesServiceTier) ProtoMessage() {}

func (x *ResponsesServiceTier) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponsesServiceTier.ProtoReflect.Descriptor instead.
func (*ResponsesServiceTier) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{0}
}

type ResponsesTruncation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResponsesTruncation) Reset() {
	*x = ResponsesTruncation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponsesTruncation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponsesTruncation) ProtoMessage() {}

func (x *ResponsesTruncation) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponsesTruncation.ProtoReflect.Descriptor instead.
func (*ResponsesTruncation) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{1}
}

type AnnotationType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AnnotationType) Reset() {
	*x = AnnotationType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnnotationType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnnotationType) ProtoMessage() {}

func (x *AnnotationType) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnnotationType.ProtoReflect.Descriptor instead.
func (*AnnotationType) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{2}
}

type ResponseImageProcessType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResponseImageProcessType) Reset() {
	*x = ResponseImageProcessType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseImageProcessType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseImageProcessType) ProtoMessage() {}

func (x *ResponseImageProcessType) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseImageProcessType.ProtoReflect.Descriptor instead.
func (*ResponseImageProcessType) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{3}
}

type CoverImage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url    *string `protobuf:"bytes,1,opt,name=url,proto3,oneof" json:"url,omitempty"`
	Width  *int64  `protobuf:"varint,2,opt,name=width,proto3,oneof" json:"width,omitempty"`
	Height *int64  `protobuf:"varint,3,opt,name=height,proto3,oneof" json:"height,omitempty"`
}

func (x *CoverImage) Reset() {
	*x = CoverImage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoverImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoverImage) ProtoMessage() {}

func (x *CoverImage) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoverImage.ProtoReflect.Descriptor instead.
func (*CoverImage) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{4}
}

func (x *CoverImage) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *CoverImage) GetWidth() int64 {
	if x != nil && x.Width != nil {
		return *x.Width
	}
	return 0
}

func (x *CoverImage) GetHeight() int64 {
	if x != nil && x.Height != nil {
		return *x.Height
	}
	return 0
}

type Annotation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  AnnotationType_Enum `protobuf:"varint,1,opt,name=type,proto3,enum=responses.AnnotationType_Enum" json:"type,omitempty"`
	Title string              `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Url   string              `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	// openai does not have
	LogoUrl       *string     `protobuf:"bytes,4,opt,name=logo_url,json=logoUrl,proto3,oneof" json:"logo_url,omitempty"`
	MobileUrl     *string     `protobuf:"bytes,5,opt,name=mobile_url,json=mobileUrl,proto3,oneof" json:"mobile_url,omitempty"`
	SiteName      *string     `protobuf:"bytes,6,opt,name=site_name,json=siteName,proto3,oneof" json:"site_name,omitempty"`
	PublishTime   *string     `protobuf:"bytes,7,opt,name=publish_time,json=publishTime,proto3,oneof" json:"publish_time,omitempty"`
	CoverImage    *CoverImage `protobuf:"bytes,8,opt,name=cover_image,json=coverImage,proto3,oneof" json:"cover_image,omitempty"`
	Summary       *string     `protobuf:"bytes,9,opt,name=summary,proto3,oneof" json:"summary,omitempty"`
	FreshnessInfo *string     `protobuf:"bytes,10,opt,name=freshness_info,json=freshnessInfo,proto3,oneof" json:"freshness_info,omitempty"`
}

func (x *Annotation) Reset() {
	*x = Annotation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Annotation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Annotation) ProtoMessage() {}

func (x *Annotation) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Annotation.ProtoReflect.Descriptor instead.
func (*Annotation) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{5}
}

func (x *Annotation) GetType() AnnotationType_Enum {
	if x != nil {
		return x.Type
	}
	return AnnotationType_unspecified
}

func (x *Annotation) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Annotation) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Annotation) GetLogoUrl() string {
	if x != nil && x.LogoUrl != nil {
		return *x.LogoUrl
	}
	return ""
}

func (x *Annotation) GetMobileUrl() string {
	if x != nil && x.MobileUrl != nil {
		return *x.MobileUrl
	}
	return ""
}

func (x *Annotation) GetSiteName() string {
	if x != nil && x.SiteName != nil {
		return *x.SiteName
	}
	return ""
}

func (x *Annotation) GetPublishTime() string {
	if x != nil && x.PublishTime != nil {
		return *x.PublishTime
	}
	return ""
}

func (x *Annotation) GetCoverImage() *CoverImage {
	if x != nil {
		return x.CoverImage
	}
	return nil
}

func (x *Annotation) GetSummary() string {
	if x != nil && x.Summary != nil {
		return *x.Summary
	}
	return ""
}

func (x *Annotation) GetFreshnessInfo() string {
	if x != nil && x.FreshnessInfo != nil {
		return *x.FreshnessInfo
	}
	return ""
}

type ItemType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ItemType) Reset() {
	*x = ItemType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemType) ProtoMessage() {}

func (x *ItemType) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemType.ProtoReflect.Descriptor instead.
func (*ItemType) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{6}
}

type MessageRole struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MessageRole) Reset() {
	*x = MessageRole{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageRole) ProtoMessage() {}

func (x *MessageRole) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageRole.ProtoReflect.Descriptor instead.
func (*MessageRole) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{7}
}

type ContentItemImageDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ContentItemImageDetail) Reset() {
	*x = ContentItemImageDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentItemImageDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentItemImageDetail) ProtoMessage() {}

func (x *ContentItemImageDetail) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentItemImageDetail.ProtoReflect.Descriptor instead.
func (*ContentItemImageDetail) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{8}
}

type ContentItemType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ContentItemType) Reset() {
	*x = ContentItemType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentItemType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentItemType) ProtoMessage() {}

func (x *ContentItemType) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentItemType.ProtoReflect.Descriptor instead.
func (*ContentItemType) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{9}
}

type ItemStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ItemStatus) Reset() {
	*x = ItemStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemStatus) ProtoMessage() {}

func (x *ItemStatus) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemStatus.ProtoReflect.Descriptor instead.
func (*ItemStatus) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{10}
}

type ResponseStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResponseStatus) Reset() {
	*x = ResponseStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseStatus) ProtoMessage() {}

func (x *ResponseStatus) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseStatus.ProtoReflect.Descriptor instead.
func (*ResponseStatus) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{11}
}

type ThinkingType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ThinkingType) Reset() {
	*x = ThinkingType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThinkingType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThinkingType) ProtoMessage() {}

func (x *ThinkingType) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThinkingType.ProtoReflect.Descriptor instead.
func (*ThinkingType) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{12}
}

type TextType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TextType) Reset() {
	*x = TextType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextType) ProtoMessage() {}

func (x *TextType) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextType.ProtoReflect.Descriptor instead.
func (*TextType) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{13}
}

type ToolChoiceMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ToolChoiceMode) Reset() {
	*x = ToolChoiceMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToolChoiceMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToolChoiceMode) ProtoMessage() {}

func (x *ToolChoiceMode) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToolChoiceMode.ProtoReflect.Descriptor instead.
func (*ToolChoiceMode) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{14}
}

type ToolType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ToolType) Reset() {
	*x = ToolType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToolType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToolType) ProtoMessage() {}

func (x *ToolType) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToolType.ProtoReflect.Descriptor instead.
func (*ToolType) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{15}
}

type UserLocationType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UserLocationType) Reset() {
	*x = UserLocationType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserLocationType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLocationType) ProtoMessage() {}

func (x *UserLocationType) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLocationType.ProtoReflect.Descriptor instead.
func (*UserLocationType) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{16}
}

type ObjectType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ObjectType) Reset() {
	*x = ObjectType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectType) ProtoMessage() {}

func (x *ObjectType) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectType.ProtoReflect.Descriptor instead.
func (*ObjectType) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{17}
}

type ReasoningEffort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReasoningEffort) Reset() {
	*x = ReasoningEffort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReasoningEffort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReasoningEffort) ProtoMessage() {}

func (x *ReasoningEffort) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReasoningEffort.ProtoReflect.Descriptor instead.
func (*ReasoningEffort) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{18}
}

type EventType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EventType) Reset() {
	*x = EventType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventType) ProtoMessage() {}

func (x *EventType) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventType.ProtoReflect.Descriptor instead.
func (*EventType) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{19}
}

type IncludeType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IncludeType) Reset() {
	*x = IncludeType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncludeType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncludeType) ProtoMessage() {}

func (x *IncludeType) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncludeType.ProtoReflect.Descriptor instead.
func (*IncludeType) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{20}
}

type CacheType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CacheType) Reset() {
	*x = CacheType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CacheType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CacheType) ProtoMessage() {}

func (x *CacheType) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CacheType.ProtoReflect.Descriptor instead.
func (*CacheType) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{21}
}

type ChunkingStrategyType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ChunkingStrategyType) Reset() {
	*x = ChunkingStrategyType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChunkingStrategyType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkingStrategyType) ProtoMessage() {}

func (x *ChunkingStrategyType) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkingStrategyType.ProtoReflect.Descriptor instead.
func (*ChunkingStrategyType) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{22}
}

type ResponsesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Input              *ResponsesInput            `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
	Model              string                     `protobuf:"bytes,2,opt,name=model,proto3" json:"model,omitempty"`
	MaxOutputTokens    *int64                     `protobuf:"varint,3,opt,name=max_output_tokens,json=maxOutputTokens,proto3,oneof" json:"max_output_tokens,omitempty"`
	PreviousResponseId *string                    `protobuf:"bytes,4,opt,name=previous_response_id,json=previousResponseId,proto3,oneof" json:"previous_response_id,omitempty"`
	Thinking           *ResponsesThinking         `protobuf:"bytes,5,opt,name=thinking,proto3,oneof" json:"thinking,omitempty"`
	ServiceTier        *ResponsesServiceTier_Enum `protobuf:"varint,6,opt,name=service_tier,json=serviceTier,proto3,enum=responses.ResponsesServiceTier_Enum,oneof" json:"service_tier,omitempty"`
	Store              *bool                      `protobuf:"varint,7,opt,name=store,proto3,oneof" json:"store,omitempty"`
	Stream             *bool                      `protobuf:"varint,8,opt,name=stream,proto3,oneof" json:"stream,omitempty"`
	Temperature        *float64                   `protobuf:"fixed64,9,opt,name=temperature,proto3,oneof" json:"temperature,omitempty"`
	Tools              []*ResponsesTool           `protobuf:"bytes,10,rep,name=tools,proto3" json:"tools,omitempty"`
	TopP               *float64                   `protobuf:"fixed64,11,opt,name=top_p,json=topP,proto3,oneof" json:"top_p,omitempty"`
	Instructions       *string                    `protobuf:"bytes,12,opt,name=instructions,proto3,oneof" json:"instructions,omitempty"`
	Include            []IncludeType_Enum         `protobuf:"varint,13,rep,packed,name=include,proto3,enum=responses.IncludeType_Enum" json:"include,omitempty"`
	Caching            *ResponsesCaching          `protobuf:"bytes,14,opt,name=caching,proto3,oneof" json:"caching,omitempty"`
	Text               *ResponsesText             `protobuf:"bytes,15,opt,name=text,proto3,oneof" json:"text,omitempty"`
	ExpireAt           *int64                     `protobuf:"varint,16,opt,name=expire_at,json=expireAt,proto3,oneof" json:"expire_at,omitempty"`
	ToolChoice         *ResponsesToolChoice       `protobuf:"bytes,17,opt,name=tool_choice,json=toolChoice,proto3,oneof" json:"tool_choice,omitempty"`
	ParallelToolCalls  *bool                      `protobuf:"varint,18,opt,name=parallel_tool_calls,json=parallelToolCalls,proto3,oneof" json:"parallel_tool_calls,omitempty"`
	MaxToolCalls       *int64                     `protobuf:"varint,19,opt,name=max_tool_calls,json=maxToolCalls,proto3,oneof" json:"max_tool_calls,omitempty"`
	Reasoning          *ResponsesReasoning        `protobuf:"bytes,20,opt,name=reasoning,proto3,oneof" json:"reasoning,omitempty"`
}

func (x *ResponsesRequest) Reset() {
	*x = ResponsesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponsesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponsesRequest) ProtoMessage() {}

func (x *ResponsesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponsesRequest.ProtoReflect.Descriptor instead.
func (*ResponsesRequest) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{23}
}

func (x *ResponsesRequest) GetInput() *ResponsesInput {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *ResponsesRequest) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *ResponsesRequest) GetMaxOutputTokens() int64 {
	if x != nil && x.MaxOutputTokens != nil {
		return *x.MaxOutputTokens
	}
	return 0
}

func (x *ResponsesRequest) GetPreviousResponseId() string {
	if x != nil && x.PreviousResponseId != nil {
		return *x.PreviousResponseId
	}
	return ""
}

func (x *ResponsesRequest) GetThinking() *ResponsesThinking {
	if x != nil {
		return x.Thinking
	}
	return nil
}

func (x *ResponsesRequest) GetServiceTier() ResponsesServiceTier_Enum {
	if x != nil && x.ServiceTier != nil {
		return *x.ServiceTier
	}
	return ResponsesServiceTier_unspecified
}

func (x *ResponsesRequest) GetStore() bool {
	if x != nil && x.Store != nil {
		return *x.Store
	}
	return false
}

func (x *ResponsesRequest) GetStream() bool {
	if x != nil && x.Stream != nil {
		return *x.Stream
	}
	return false
}

func (x *ResponsesRequest) GetTemperature() float64 {
	if x != nil && x.Temperature != nil {
		return *x.Temperature
	}
	return 0
}

func (x *ResponsesRequest) GetTools() []*ResponsesTool {
	if x != nil {
		return x.Tools
	}
	return nil
}

func (x *ResponsesRequest) GetTopP() float64 {
	if x != nil && x.TopP != nil {
		return *x.TopP
	}
	return 0
}

func (x *ResponsesRequest) GetInstructions() string {
	if x != nil && x.Instructions != nil {
		return *x.Instructions
	}
	return ""
}

func (x *ResponsesRequest) GetInclude() []IncludeType_Enum {
	if x != nil {
		return x.Include
	}
	return nil
}

func (x *ResponsesRequest) GetCaching() *ResponsesCaching {
	if x != nil {
		return x.Caching
	}
	return nil
}

func (x *ResponsesRequest) GetText() *ResponsesText {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *ResponsesRequest) GetExpireAt() int64 {
	if x != nil && x.ExpireAt != nil {
		return *x.ExpireAt
	}
	return 0
}

func (x *ResponsesRequest) GetToolChoice() *ResponsesToolChoice {
	if x != nil {
		return x.ToolChoice
	}
	return nil
}

func (x *ResponsesRequest) GetParallelToolCalls() bool {
	if x != nil && x.ParallelToolCalls != nil {
		return *x.ParallelToolCalls
	}
	return false
}

func (x *ResponsesRequest) GetMaxToolCalls() int64 {
	if x != nil && x.MaxToolCalls != nil {
		return *x.MaxToolCalls
	}
	return 0
}

func (x *ResponsesRequest) GetReasoning() *ResponsesReasoning {
	if x != nil {
		return x.Reasoning
	}
	return nil
}

type ResponsesInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Union:
	//
	//	*ResponsesInput_StringValue
	//	*ResponsesInput_ListValue
	Union isResponsesInput_Union `protobuf_oneof:"union"`
}

func (x *ResponsesInput) Reset() {
	*x = ResponsesInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponsesInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponsesInput) ProtoMessage() {}

func (x *ResponsesInput) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponsesInput.ProtoReflect.Descriptor instead.
func (*ResponsesInput) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{24}
}

func (m *ResponsesInput) GetUnion() isResponsesInput_Union {
	if m != nil {
		return m.Union
	}
	return nil
}

func (x *ResponsesInput) GetStringValue() string {
	if x, ok := x.GetUnion().(*ResponsesInput_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (x *ResponsesInput) GetListValue() *InputItemList {
	if x, ok := x.GetUnion().(*ResponsesInput_ListValue); ok {
		return x.ListValue
	}
	return nil
}

type isResponsesInput_Union interface {
	isResponsesInput_Union()
}

type ResponsesInput_StringValue struct {
	StringValue string `protobuf:"bytes,1,opt,name=stringValue,proto3,oneof"`
}

type ResponsesInput_ListValue struct {
	ListValue *InputItemList `protobuf:"bytes,2,opt,name=listValue,proto3,oneof"`
}

func (*ResponsesInput_StringValue) isResponsesInput_Union() {}

func (*ResponsesInput_ListValue) isResponsesInput_Union() {}

type ResponsesReasoning struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Effort ReasoningEffort_Enum `protobuf:"varint,1,opt,name=effort,proto3,enum=responses.ReasoningEffort_Enum" json:"effort,omitempty"`
}

func (x *ResponsesReasoning) Reset() {
	*x = ResponsesReasoning{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponsesReasoning) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponsesReasoning) ProtoMessage() {}

func (x *ResponsesReasoning) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponsesReasoning.ProtoReflect.Descriptor instead.
func (*ResponsesReasoning) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{25}
}

func (x *ResponsesReasoning) GetEffort() ReasoningEffort_Enum {
	if x != nil {
		return x.Effort
	}
	return ReasoningEffort_unspecified
}

type InputItemList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ListValue []*InputItem `protobuf:"bytes,1,rep,name=listValue,proto3" json:"listValue,omitempty"`
}

func (x *InputItemList) Reset() {
	*x = InputItemList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputItemList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputItemList) ProtoMessage() {}

func (x *InputItemList) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputItemList.ProtoReflect.Descriptor instead.
func (*InputItemList) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{26}
}

func (x *InputItemList) GetListValue() []*InputItem {
	if x != nil {
		return x.ListValue
	}
	return nil
}

type InputItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Union:
	//
	//	*InputItem_EasyMessage
	//	*InputItem_InputMessage
	//	*InputItem_OutputMessage
	//	*InputItem_FunctionToolCall
	//	*InputItem_FunctionToolCallOutput
	//	*InputItem_Reasoning
	//	*InputItem_Reference
	//	*InputItem_ImageProcess
	//	*InputItem_McpApprovalRequest
	//	*InputItem_McpApprovalResponse
	//	*InputItem_McpListTools
	//	*InputItem_FunctionMcpCall
	//	*InputItem_FunctionWebSearchCall
	Union isInputItem_Union `protobuf_oneof:"union"`
}

func (x *InputItem) Reset() {
	*x = InputItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputItem) ProtoMessage() {}

func (x *InputItem) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputItem.ProtoReflect.Descriptor instead.
func (*InputItem) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{27}
}

func (m *InputItem) GetUnion() isInputItem_Union {
	if m != nil {
		return m.Union
	}
	return nil
}

func (x *InputItem) GetEasyMessage() *ItemEasyMessage {
	if x, ok := x.GetUnion().(*InputItem_EasyMessage); ok {
		return x.EasyMessage
	}
	return nil
}

func (x *InputItem) GetInputMessage() *ItemInputMessage {
	if x, ok := x.GetUnion().(*InputItem_InputMessage); ok {
		return x.InputMessage
	}
	return nil
}

func (x *InputItem) GetOutputMessage() *ItemOutputMessage {
	if x, ok := x.GetUnion().(*InputItem_OutputMessage); ok {
		return x.OutputMessage
	}
	return nil
}

func (x *InputItem) GetFunctionToolCall() *ItemFunctionToolCall {
	if x, ok := x.GetUnion().(*InputItem_FunctionToolCall); ok {
		return x.FunctionToolCall
	}
	return nil
}

func (x *InputItem) GetFunctionToolCallOutput() *ItemFunctionToolCallOutput {
	if x, ok := x.GetUnion().(*InputItem_FunctionToolCallOutput); ok {
		return x.FunctionToolCallOutput
	}
	return nil
}

func (x *InputItem) GetReasoning() *ItemReasoning {
	if x, ok := x.GetUnion().(*InputItem_Reasoning); ok {
		return x.Reasoning
	}
	return nil
}

func (x *InputItem) GetReference() *ItemReference {
	if x, ok := x.GetUnion().(*InputItem_Reference); ok {
		return x.Reference
	}
	return nil
}

func (x *InputItem) GetImageProcess() *ItemFunctionImageProcess {
	if x, ok := x.GetUnion().(*InputItem_ImageProcess); ok {
		return x.ImageProcess
	}
	return nil
}

func (x *InputItem) GetMcpApprovalRequest() *ItemFunctionMcpApprovalRequest {
	if x, ok := x.GetUnion().(*InputItem_McpApprovalRequest); ok {
		return x.McpApprovalRequest
	}
	return nil
}

func (x *InputItem) GetMcpApprovalResponse() *ItemFunctionMcpApprovalResponse {
	if x, ok := x.GetUnion().(*InputItem_McpApprovalResponse); ok {
		return x.McpApprovalResponse
	}
	return nil
}

func (x *InputItem) GetMcpListTools() *ItemFunctionMcpListTools {
	if x, ok := x.GetUnion().(*InputItem_McpListTools); ok {
		return x.McpListTools
	}
	return nil
}

func (x *InputItem) GetFunctionMcpCall() *ItemFunctionMcpCall {
	if x, ok := x.GetUnion().(*InputItem_FunctionMcpCall); ok {
		return x.FunctionMcpCall
	}
	return nil
}

func (x *InputItem) GetFunctionWebSearchCall() *ItemFunctionWebSearch {
	if x, ok := x.GetUnion().(*InputItem_FunctionWebSearchCall); ok {
		return x.FunctionWebSearchCall
	}
	return nil
}

type isInputItem_Union interface {
	isInputItem_Union()
}

type InputItem_EasyMessage struct {
	EasyMessage *ItemEasyMessage `protobuf:"bytes,1,opt,name=easy_message,json=easyMessage,proto3,oneof"`
}

type InputItem_InputMessage struct {
	InputMessage *ItemInputMessage `protobuf:"bytes,2,opt,name=input_message,json=inputMessage,proto3,oneof"`
}

type InputItem_OutputMessage struct {
	OutputMessage *ItemOutputMessage `protobuf:"bytes,3,opt,name=output_message,json=outputMessage,proto3,oneof"`
}

type InputItem_FunctionToolCall struct {
	FunctionToolCall *ItemFunctionToolCall `protobuf:"bytes,4,opt,name=function_tool_call,json=functionToolCall,proto3,oneof"`
}

type InputItem_FunctionToolCallOutput struct {
	FunctionToolCallOutput *ItemFunctionToolCallOutput `protobuf:"bytes,5,opt,name=function_tool_call_output,json=functionToolCallOutput,proto3,oneof"`
}

type InputItem_Reasoning struct {
	Reasoning *ItemReasoning `protobuf:"bytes,6,opt,name=reasoning,proto3,oneof"`
}

type InputItem_Reference struct {
	Reference *ItemReference `protobuf:"bytes,7,opt,name=reference,proto3,oneof"`
}

type InputItem_ImageProcess struct {
	ImageProcess *ItemFunctionImageProcess `protobuf:"bytes,8,opt,name=image_process,json=imageProcess,proto3,oneof"`
}

type InputItem_McpApprovalRequest struct {
	McpApprovalRequest *ItemFunctionMcpApprovalRequest `protobuf:"bytes,9,opt,name=mcp_approval_request,json=mcpApprovalRequest,proto3,oneof"`
}

type InputItem_McpApprovalResponse struct {
	McpApprovalResponse *ItemFunctionMcpApprovalResponse `protobuf:"bytes,10,opt,name=mcp_approval_response,json=mcpApprovalResponse,proto3,oneof"`
}

type InputItem_McpListTools struct {
	McpListTools *ItemFunctionMcpListTools `protobuf:"bytes,11,opt,name=mcp_list_tools,json=mcpListTools,proto3,oneof"`
}

type InputItem_FunctionMcpCall struct {
	FunctionMcpCall *ItemFunctionMcpCall `protobuf:"bytes,12,opt,name=function_mcp_call,json=functionMcpCall,proto3,oneof"`
}

type InputItem_FunctionWebSearchCall struct {
	FunctionWebSearchCall *ItemFunctionWebSearch `protobuf:"bytes,13,opt,name=function_web_search_call,json=functionWebSearchCall,proto3,oneof"`
}

func (*InputItem_EasyMessage) isInputItem_Union() {}

func (*InputItem_InputMessage) isInputItem_Union() {}

func (*InputItem_OutputMessage) isInputItem_Union() {}

func (*InputItem_FunctionToolCall) isInputItem_Union() {}

func (*InputItem_FunctionToolCallOutput) isInputItem_Union() {}

func (*InputItem_Reasoning) isInputItem_Union() {}

func (*InputItem_Reference) isInputItem_Union() {}

func (*InputItem_ImageProcess) isInputItem_Union() {}

func (*InputItem_McpApprovalRequest) isInputItem_Union() {}

func (*InputItem_McpApprovalResponse) isInputItem_Union() {}

func (*InputItem_McpListTools) isInputItem_Union() {}

func (*InputItem_FunctionMcpCall) isInputItem_Union() {}

func (*InputItem_FunctionWebSearchCall) isInputItem_Union() {}

type ItemEasyMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    *ItemType_Enum   `protobuf:"varint,1,opt,name=type,proto3,enum=responses.ItemType_Enum,oneof" json:"type,omitempty"`
	Role    MessageRole_Enum `protobuf:"varint,2,opt,name=role,proto3,enum=responses.MessageRole_Enum" json:"role,omitempty"`
	Content *MessageContent  `protobuf:"bytes,3,opt,name=content,proto3,oneof" json:"content,omitempty"`
	Id      *string          `protobuf:"bytes,4,opt,name=id,proto3,oneof" json:"id,omitempty"`
}

func (x *ItemEasyMessage) Reset() {
	*x = ItemEasyMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemEasyMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemEasyMessage) ProtoMessage() {}

func (x *ItemEasyMessage) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemEasyMessage.ProtoReflect.Descriptor instead.
func (*ItemEasyMessage) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{28}
}

func (x *ItemEasyMessage) GetType() ItemType_Enum {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ItemType_unspecified
}

func (x *ItemEasyMessage) GetRole() MessageRole_Enum {
	if x != nil {
		return x.Role
	}
	return MessageRole_unspecified
}

func (x *ItemEasyMessage) GetContent() *MessageContent {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *ItemEasyMessage) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

type MessageContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Union:
	//
	//	*MessageContent_StringValue
	//	*MessageContent_ListValue
	Union isMessageContent_Union `protobuf_oneof:"union"`
}

func (x *MessageContent) Reset() {
	*x = MessageContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageContent) ProtoMessage() {}

func (x *MessageContent) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageContent.ProtoReflect.Descriptor instead.
func (*MessageContent) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{29}
}

func (m *MessageContent) GetUnion() isMessageContent_Union {
	if m != nil {
		return m.Union
	}
	return nil
}

func (x *MessageContent) GetStringValue() string {
	if x, ok := x.GetUnion().(*MessageContent_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (x *MessageContent) GetListValue() *ContentItemList {
	if x, ok := x.GetUnion().(*MessageContent_ListValue); ok {
		return x.ListValue
	}
	return nil
}

type isMessageContent_Union interface {
	isMessageContent_Union()
}

type MessageContent_StringValue struct {
	StringValue string `protobuf:"bytes,1,opt,name=StringValue,proto3,oneof"`
}

type MessageContent_ListValue struct {
	ListValue *ContentItemList `protobuf:"bytes,2,opt,name=ListValue,proto3,oneof"`
}

func (*MessageContent_StringValue) isMessageContent_Union() {}

func (*MessageContent_ListValue) isMessageContent_Union() {}

type ContentItemList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ListValue []*ContentItem `protobuf:"bytes,1,rep,name=ListValue,proto3" json:"ListValue,omitempty"`
}

func (x *ContentItemList) Reset() {
	*x = ContentItemList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentItemList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentItemList) ProtoMessage() {}

func (x *ContentItemList) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentItemList.ProtoReflect.Descriptor instead.
func (*ContentItemList) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{30}
}

func (x *ContentItemList) GetListValue() []*ContentItem {
	if x != nil {
		return x.ListValue
	}
	return nil
}

type ContentItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Union:
	//
	//	*ContentItem_Text
	//	*ContentItem_Image
	//	*ContentItem_Video
	//	*ContentItem_Audio
	Union isContentItem_Union `protobuf_oneof:"union"`
}

func (x *ContentItem) Reset() {
	*x = ContentItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentItem) ProtoMessage() {}

func (x *ContentItem) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentItem.ProtoReflect.Descriptor instead.
func (*ContentItem) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{31}
}

func (m *ContentItem) GetUnion() isContentItem_Union {
	if m != nil {
		return m.Union
	}
	return nil
}

func (x *ContentItem) GetText() *ContentItemText {
	if x, ok := x.GetUnion().(*ContentItem_Text); ok {
		return x.Text
	}
	return nil
}

func (x *ContentItem) GetImage() *ContentItemImage {
	if x, ok := x.GetUnion().(*ContentItem_Image); ok {
		return x.Image
	}
	return nil
}

func (x *ContentItem) GetVideo() *ContentItemVideo {
	if x, ok := x.GetUnion().(*ContentItem_Video); ok {
		return x.Video
	}
	return nil
}

func (x *ContentItem) GetAudio() *ContentItemAudio {
	if x, ok := x.GetUnion().(*ContentItem_Audio); ok {
		return x.Audio
	}
	return nil
}

type isContentItem_Union interface {
	isContentItem_Union()
}

type ContentItem_Text struct {
	Text *ContentItemText `protobuf:"bytes,1,opt,name=text,proto3,oneof"`
}

type ContentItem_Image struct {
	Image *ContentItemImage `protobuf:"bytes,2,opt,name=image,proto3,oneof"`
}

type ContentItem_Video struct {
	Video *ContentItemVideo `protobuf:"bytes,3,opt,name=video,proto3,oneof"`
}

type ContentItem_Audio struct {
	Audio *ContentItemAudio `protobuf:"bytes,4,opt,name=audio,proto3,oneof"`
}

func (*ContentItem_Text) isContentItem_Union() {}

func (*ContentItem_Image) isContentItem_Union() {}

func (*ContentItem_Video) isContentItem_Union() {}

func (*ContentItem_Audio) isContentItem_Union() {}

type OutputContentItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Union:
	//
	//	*OutputContentItem_Text
	Union isOutputContentItem_Union `protobuf_oneof:"union"`
}

func (x *OutputContentItem) Reset() {
	*x = OutputContentItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutputContentItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutputContentItem) ProtoMessage() {}

func (x *OutputContentItem) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutputContentItem.ProtoReflect.Descriptor instead.
func (*OutputContentItem) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{32}
}

func (m *OutputContentItem) GetUnion() isOutputContentItem_Union {
	if m != nil {
		return m.Union
	}
	return nil
}

func (x *OutputContentItem) GetText() *OutputContentItemText {
	if x, ok := x.GetUnion().(*OutputContentItem_Text); ok {
		return x.Text
	}
	return nil
}

type isOutputContentItem_Union interface {
	isOutputContentItem_Union()
}

type OutputContentItem_Text struct {
	Text *OutputContentItemText `protobuf:"bytes,1,opt,name=text,proto3,oneof"`
}

func (*OutputContentItem_Text) isOutputContentItem_Union() {}

type ContentItemText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type               ContentItemType_Enum    `protobuf:"varint,1,opt,name=type,proto3,enum=responses.ContentItemType_Enum" json:"type,omitempty"`
	Text               string                  `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	IsFrame            *bool                   `protobuf:"varint,3,opt,name=is_frame,json=isFrame,proto3,oneof" json:"-"` // @inject_tag: json:"-"
	TranslationOptions *TextTranslationOptions `protobuf:"bytes,4,opt,name=translation_options,json=translationOptions,proto3,oneof" json:"translation_options,omitempty"`
}

func (x *ContentItemText) Reset() {
	*x = ContentItemText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentItemText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentItemText) ProtoMessage() {}

func (x *ContentItemText) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentItemText.ProtoReflect.Descriptor instead.
func (*ContentItemText) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{33}
}

func (x *ContentItemText) GetType() ContentItemType_Enum {
	if x != nil {
		return x.Type
	}
	return ContentItemType_unspecified
}

func (x *ContentItemText) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *ContentItemText) GetIsFrame() bool {
	if x != nil && x.IsFrame != nil {
		return *x.IsFrame
	}
	return false
}

func (x *ContentItemText) GetTranslationOptions() *TextTranslationOptions {
	if x != nil {
		return x.TranslationOptions
	}
	return nil
}

type TextTranslationOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceLanguage string `protobuf:"bytes,1,opt,name=source_language,json=sourceLanguage,proto3" json:"source_language,omitempty"`
	TargetLanguage string `protobuf:"bytes,2,opt,name=target_language,json=targetLanguage,proto3" json:"target_language,omitempty"`
}

func (x *TextTranslationOptions) Reset() {
	*x = TextTranslationOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextTranslationOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextTranslationOptions) ProtoMessage() {}

func (x *TextTranslationOptions) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextTranslationOptions.ProtoReflect.Descriptor instead.
func (*TextTranslationOptions) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{34}
}

func (x *TextTranslationOptions) GetSourceLanguage() string {
	if x != nil {
		return x.SourceLanguage
	}
	return ""
}

func (x *TextTranslationOptions) GetTargetLanguage() string {
	if x != nil {
		return x.TargetLanguage
	}
	return ""
}

type ImagePixelLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxPixels *int64 `protobuf:"varint,1,opt,name=max_pixels,json=maxPixels,proto3,oneof" json:"max_pixels,omitempty"`
	MinPixels *int64 `protobuf:"varint,2,opt,name=min_pixels,json=minPixels,proto3,oneof" json:"min_pixels,omitempty"`
}

func (x *ImagePixelLimit) Reset() {
	*x = ImagePixelLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImagePixelLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImagePixelLimit) ProtoMessage() {}

func (x *ImagePixelLimit) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImagePixelLimit.ProtoReflect.Descriptor instead.
func (*ImagePixelLimit) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{35}
}

func (x *ImagePixelLimit) GetMaxPixels() int64 {
	if x != nil && x.MaxPixels != nil {
		return *x.MaxPixels
	}
	return 0
}

func (x *ImagePixelLimit) GetMinPixels() int64 {
	if x != nil && x.MinPixels != nil {
		return *x.MinPixels
	}
	return 0
}

type ContentItemImage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type            ContentItemType_Enum         `protobuf:"varint,1,opt,name=type,proto3,enum=responses.ContentItemType_Enum" json:"type,omitempty"`
	Detail          *ContentItemImageDetail_Enum `protobuf:"varint,2,opt,name=detail,proto3,enum=responses.ContentItemImageDetail_Enum,oneof" json:"detail,omitempty"`
	ImageUrl        string                       `protobuf:"bytes,3,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
	FileId          *string                      `protobuf:"bytes,4,opt,name=file_id,json=fileId,proto3,oneof" json:"file_id,omitempty"`
	IsFrame         *bool                        `protobuf:"varint,5,opt,name=is_frame,json=isFrame,proto3,oneof" json:"is_frame,omitempty"`
	ImagePixelLimit *ImagePixelLimit             `protobuf:"bytes,6,opt,name=image_pixel_limit,json=imagePixelLimit,proto3,oneof" json:"image_pixel_limit,omitempty"`
	ImageBytes      []byte                       `protobuf:"bytes,7,opt,name=image_bytes,json=imageBytes,proto3,oneof" json:"-"` // @inject_tag: json:"-"
}

func (x *ContentItemImage) Reset() {
	*x = ContentItemImage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentItemImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentItemImage) ProtoMessage() {}

func (x *ContentItemImage) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentItemImage.ProtoReflect.Descriptor instead.
func (*ContentItemImage) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{36}
}

func (x *ContentItemImage) GetType() ContentItemType_Enum {
	if x != nil {
		return x.Type
	}
	return ContentItemType_unspecified
}

func (x *ContentItemImage) GetDetail() ContentItemImageDetail_Enum {
	if x != nil && x.Detail != nil {
		return *x.Detail
	}
	return ContentItemImageDetail_auto
}

func (x *ContentItemImage) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *ContentItemImage) GetFileId() string {
	if x != nil && x.FileId != nil {
		return *x.FileId
	}
	return ""
}

func (x *ContentItemImage) GetIsFrame() bool {
	if x != nil && x.IsFrame != nil {
		return *x.IsFrame
	}
	return false
}

func (x *ContentItemImage) GetImagePixelLimit() *ImagePixelLimit {
	if x != nil {
		return x.ImagePixelLimit
	}
	return nil
}

func (x *ContentItemImage) GetImageBytes() []byte {
	if x != nil {
		return x.ImageBytes
	}
	return nil
}

type ContentItemAudio struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type             ContentItemType_Enum   `protobuf:"varint,1,opt,name=type,proto3,enum=responses.ContentItemType_Enum" json:"type,omitempty"`
	ChunkingStrategy *AudioChunkingStrategy `protobuf:"bytes,2,opt,name=chunking_strategy,json=chunkingStrategy,proto3,oneof" json:"chunking_strategy,omitempty"`
	AudioUrl         string                 `protobuf:"bytes,3,opt,name=audio_url,json=audioUrl,proto3" json:"audio_url,omitempty"`
	FileId           *string                `protobuf:"bytes,4,opt,name=file_id,json=fileId,proto3,oneof" json:"file_id,omitempty"`
	AudioBytes       []byte                 `protobuf:"bytes,7,opt,name=audio_bytes,json=audioBytes,proto3,oneof" json:"-"` // @inject_tag: json:"-"
}

func (x *ContentItemAudio) Reset() {
	*x = ContentItemAudio{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentItemAudio) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentItemAudio) ProtoMessage() {}

func (x *ContentItemAudio) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentItemAudio.ProtoReflect.Descriptor instead.
func (*ContentItemAudio) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{37}
}

func (x *ContentItemAudio) GetType() ContentItemType_Enum {
	if x != nil {
		return x.Type
	}
	return ContentItemType_unspecified
}

func (x *ContentItemAudio) GetChunkingStrategy() *AudioChunkingStrategy {
	if x != nil {
		return x.ChunkingStrategy
	}
	return nil
}

func (x *ContentItemAudio) GetAudioUrl() string {
	if x != nil {
		return x.AudioUrl
	}
	return ""
}

func (x *ContentItemAudio) GetFileId() string {
	if x != nil && x.FileId != nil {
		return *x.FileId
	}
	return ""
}

func (x *ContentItemAudio) GetAudioBytes() []byte {
	if x != nil {
		return x.AudioBytes
	}
	return nil
}

type AudioChunkingStrategy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type              ChunkingStrategyType_Enum `protobuf:"varint,1,opt,name=type,proto3,enum=responses.ChunkingStrategyType_Enum" json:"type,omitempty"`
	PrefixPaddingMs   *int64                    `protobuf:"varint,2,opt,name=prefix_padding_ms,json=prefixPaddingMs,proto3,oneof" json:"prefix_padding_ms,omitempty"`
	SilenceDurationMs *int64                    `protobuf:"varint,3,opt,name=silence_duration_ms,json=silenceDurationMs,proto3,oneof" json:"silence_duration_ms,omitempty"`
	Threshold         *float64                  `protobuf:"fixed64,4,opt,name=threshold,proto3,oneof" json:"threshold,omitempty"`
}

func (x *AudioChunkingStrategy) Reset() {
	*x = AudioChunkingStrategy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudioChunkingStrategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioChunkingStrategy) ProtoMessage() {}

func (x *AudioChunkingStrategy) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioChunkingStrategy.ProtoReflect.Descriptor instead.
func (*AudioChunkingStrategy) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{38}
}

func (x *AudioChunkingStrategy) GetType() ChunkingStrategyType_Enum {
	if x != nil {
		return x.Type
	}
	return ChunkingStrategyType_unspecified
}

func (x *AudioChunkingStrategy) GetPrefixPaddingMs() int64 {
	if x != nil && x.PrefixPaddingMs != nil {
		return *x.PrefixPaddingMs
	}
	return 0
}

func (x *AudioChunkingStrategy) GetSilenceDurationMs() int64 {
	if x != nil && x.SilenceDurationMs != nil {
		return *x.SilenceDurationMs
	}
	return 0
}

func (x *AudioChunkingStrategy) GetThreshold() float64 {
	if x != nil && x.Threshold != nil {
		return *x.Threshold
	}
	return 0
}

type ContentItemVideo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     ContentItemType_Enum `protobuf:"varint,1,opt,name=type,proto3,enum=responses.ContentItemType_Enum" json:"type,omitempty"`
	VideoUrl string               `protobuf:"bytes,3,opt,name=video_url,json=videoUrl,proto3" json:"video_url,omitempty"`
	FileId   *string              `protobuf:"bytes,4,opt,name=file_id,json=fileId,proto3,oneof" json:"file_id,omitempty"`
	Fps      *float32             `protobuf:"fixed32,5,opt,name=fps,proto3,oneof" json:"fps,omitempty"`
}

func (x *ContentItemVideo) Reset() {
	*x = ContentItemVideo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentItemVideo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentItemVideo) ProtoMessage() {}

func (x *ContentItemVideo) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentItemVideo.ProtoReflect.Descriptor instead.
func (*ContentItemVideo) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{39}
}

func (x *ContentItemVideo) GetType() ContentItemType_Enum {
	if x != nil {
		return x.Type
	}
	return ContentItemType_unspecified
}

func (x *ContentItemVideo) GetVideoUrl() string {
	if x != nil {
		return x.VideoUrl
	}
	return ""
}

func (x *ContentItemVideo) GetFileId() string {
	if x != nil && x.FileId != nil {
		return *x.FileId
	}
	return ""
}

func (x *ContentItemVideo) GetFps() float32 {
	if x != nil && x.Fps != nil {
		return *x.Fps
	}
	return 0
}

type ItemInputMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    *ItemType_Enum   `protobuf:"varint,1,opt,name=type,proto3,enum=responses.ItemType_Enum,oneof" json:"type,omitempty"`
	Role    MessageRole_Enum `protobuf:"varint,2,opt,name=role,proto3,enum=responses.MessageRole_Enum" json:"role,omitempty"`
	Content []*ContentItem   `protobuf:"bytes,3,rep,name=content,proto3" json:"content,omitempty"`
	Status  *ItemStatus_Enum `protobuf:"varint,4,opt,name=status,proto3,enum=responses.ItemStatus_Enum,oneof" json:"status,omitempty"`
	Id      *string          `protobuf:"bytes,5,opt,name=id,proto3,oneof" json:"id,omitempty"`
}

func (x *ItemInputMessage) Reset() {
	*x = ItemInputMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemInputMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemInputMessage) ProtoMessage() {}

func (x *ItemInputMessage) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemInputMessage.ProtoReflect.Descriptor instead.
func (*ItemInputMessage) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{40}
}

func (x *ItemInputMessage) GetType() ItemType_Enum {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ItemType_unspecified
}

func (x *ItemInputMessage) GetRole() MessageRole_Enum {
	if x != nil {
		return x.Role
	}
	return MessageRole_unspecified
}

func (x *ItemInputMessage) GetContent() []*ContentItem {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *ItemInputMessage) GetStatus() ItemStatus_Enum {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ItemStatus_unspecified
}

func (x *ItemInputMessage) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

type ItemOutputMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    ItemType_Enum        `protobuf:"varint,1,opt,name=type,proto3,enum=responses.ItemType_Enum" json:"type,omitempty"`
	Role    MessageRole_Enum     `protobuf:"varint,2,opt,name=role,proto3,enum=responses.MessageRole_Enum" json:"role,omitempty"`
	Content []*OutputContentItem `protobuf:"bytes,3,rep,name=content,proto3" json:"content,omitempty"`
	Status  ItemStatus_Enum      `protobuf:"varint,4,opt,name=status,proto3,enum=responses.ItemStatus_Enum" json:"status,omitempty"`
	Id      string               `protobuf:"bytes,5,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ItemOutputMessage) Reset() {
	*x = ItemOutputMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemOutputMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemOutputMessage) ProtoMessage() {}

func (x *ItemOutputMessage) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemOutputMessage.ProtoReflect.Descriptor instead.
func (*ItemOutputMessage) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{41}
}

func (x *ItemOutputMessage) GetType() ItemType_Enum {
	if x != nil {
		return x.Type
	}
	return ItemType_unspecified
}

func (x *ItemOutputMessage) GetRole() MessageRole_Enum {
	if x != nil {
		return x.Role
	}
	return MessageRole_unspecified
}

func (x *ItemOutputMessage) GetContent() []*OutputContentItem {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *ItemOutputMessage) GetStatus() ItemStatus_Enum {
	if x != nil {
		return x.Status
	}
	return ItemStatus_unspecified
}

func (x *ItemOutputMessage) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ItemFunctionWebSearch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   ItemType_Enum   `protobuf:"varint,1,opt,name=type,proto3,enum=responses.ItemType_Enum" json:"type,omitempty"`
	Action *Action         `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
	Status ItemStatus_Enum `protobuf:"varint,3,opt,name=status,proto3,enum=responses.ItemStatus_Enum" json:"status,omitempty"`
	Id     string          `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ItemFunctionWebSearch) Reset() {
	*x = ItemFunctionWebSearch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemFunctionWebSearch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemFunctionWebSearch) ProtoMessage() {}

func (x *ItemFunctionWebSearch) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemFunctionWebSearch.ProtoReflect.Descriptor instead.
func (*ItemFunctionWebSearch) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{42}
}

func (x *ItemFunctionWebSearch) GetType() ItemType_Enum {
	if x != nil {
		return x.Type
	}
	return ItemType_unspecified
}

func (x *ItemFunctionWebSearch) GetAction() *Action {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *ItemFunctionWebSearch) GetStatus() ItemStatus_Enum {
	if x != nil {
		return x.Status
	}
	return ItemStatus_unspecified
}

func (x *ItemFunctionWebSearch) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ItemFunctionImageProcess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      ItemType_Enum               `protobuf:"varint,1,opt,name=type,proto3,enum=responses.ItemType_Enum" json:"type,omitempty"`
	Action    *ResponseImageProcessAction `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
	Arguments *ResponseImageProcessArgs   `protobuf:"bytes,3,opt,name=arguments,proto3" json:"arguments,omitempty"`
	Status    ItemStatus_Enum             `protobuf:"varint,4,opt,name=status,proto3,enum=responses.ItemStatus_Enum" json:"status,omitempty"`
	Id        string                      `protobuf:"bytes,5,opt,name=id,proto3" json:"id,omitempty"`
	Error     *ResponseImageProcessError  `protobuf:"bytes,6,opt,name=error,proto3,oneof" json:"error,omitempty"`
}

func (x *ItemFunctionImageProcess) Reset() {
	*x = ItemFunctionImageProcess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemFunctionImageProcess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemFunctionImageProcess) ProtoMessage() {}

func (x *ItemFunctionImageProcess) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemFunctionImageProcess.ProtoReflect.Descriptor instead.
func (*ItemFunctionImageProcess) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{43}
}

func (x *ItemFunctionImageProcess) GetType() ItemType_Enum {
	if x != nil {
		return x.Type
	}
	return ItemType_unspecified
}

func (x *ItemFunctionImageProcess) GetAction() *ResponseImageProcessAction {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *ItemFunctionImageProcess) GetArguments() *ResponseImageProcessArgs {
	if x != nil {
		return x.Arguments
	}
	return nil
}

func (x *ItemFunctionImageProcess) GetStatus() ItemStatus_Enum {
	if x != nil {
		return x.Status
	}
	return ItemStatus_unspecified
}

func (x *ItemFunctionImageProcess) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ItemFunctionImageProcess) GetError() *ResponseImageProcessError {
	if x != nil {
		return x.Error
	}
	return nil
}

type ItemFunctionMcpApprovalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        ItemType_Enum `protobuf:"varint,1,opt,name=type,proto3,enum=responses.ItemType_Enum" json:"type,omitempty"`
	ServerLabel string        `protobuf:"bytes,2,opt,name=server_label,json=serverLabel,proto3" json:"server_label,omitempty"`
	Arguments   string        `protobuf:"bytes,3,opt,name=arguments,proto3" json:"arguments,omitempty"`
	Name        string        `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Id          string        `protobuf:"bytes,5,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ItemFunctionMcpApprovalRequest) Reset() {
	*x = ItemFunctionMcpApprovalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemFunctionMcpApprovalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemFunctionMcpApprovalRequest) ProtoMessage() {}

func (x *ItemFunctionMcpApprovalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemFunctionMcpApprovalRequest.ProtoReflect.Descriptor instead.
func (*ItemFunctionMcpApprovalRequest) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{44}
}

func (x *ItemFunctionMcpApprovalRequest) GetType() ItemType_Enum {
	if x != nil {
		return x.Type
	}
	return ItemType_unspecified
}

func (x *ItemFunctionMcpApprovalRequest) GetServerLabel() string {
	if x != nil {
		return x.ServerLabel
	}
	return ""
}

func (x *ItemFunctionMcpApprovalRequest) GetArguments() string {
	if x != nil {
		return x.Arguments
	}
	return ""
}

func (x *ItemFunctionMcpApprovalRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ItemFunctionMcpApprovalRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ItemFunctionMcpApprovalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type              ItemType_Enum `protobuf:"varint,1,opt,name=type,proto3,enum=responses.ItemType_Enum" json:"type,omitempty"`
	Id                *string       `protobuf:"bytes,2,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Approve           bool          `protobuf:"varint,3,opt,name=approve,proto3" json:"approve,omitempty"`
	ApprovalRequestId string        `protobuf:"bytes,4,opt,name=approval_request_id,json=approvalRequestId,proto3" json:"approval_request_id,omitempty"`
}

func (x *ItemFunctionMcpApprovalResponse) Reset() {
	*x = ItemFunctionMcpApprovalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemFunctionMcpApprovalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemFunctionMcpApprovalResponse) ProtoMessage() {}

func (x *ItemFunctionMcpApprovalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemFunctionMcpApprovalResponse.ProtoReflect.Descriptor instead.
func (*ItemFunctionMcpApprovalResponse) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{45}
}

func (x *ItemFunctionMcpApprovalResponse) GetType() ItemType_Enum {
	if x != nil {
		return x.Type
	}
	return ItemType_unspecified
}

func (x *ItemFunctionMcpApprovalResponse) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *ItemFunctionMcpApprovalResponse) GetApprove() bool {
	if x != nil {
		return x.Approve
	}
	return false
}

func (x *ItemFunctionMcpApprovalResponse) GetApprovalRequestId() string {
	if x != nil {
		return x.ApprovalRequestId
	}
	return ""
}

type McpTool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string           `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	InputSchema *structpb.Struct `protobuf:"bytes,3,opt,name=input_schema,json=inputSchema,proto3,oneof" json:"input_schema,omitempty"`
}

func (x *McpTool) Reset() {
	*x = McpTool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *McpTool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*McpTool) ProtoMessage() {}

func (x *McpTool) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use McpTool.ProtoReflect.Descriptor instead.
func (*McpTool) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{46}
}

func (x *McpTool) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *McpTool) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *McpTool) GetInputSchema() *structpb.Struct {
	if x != nil {
		return x.InputSchema
	}
	return nil
}

type ItemFunctionMcpListTools struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        ItemType_Enum `protobuf:"varint,1,opt,name=type,proto3,enum=responses.ItemType_Enum" json:"type,omitempty"`
	ServerLabel string        `protobuf:"bytes,2,opt,name=server_label,json=serverLabel,proto3" json:"server_label,omitempty"`
	Tools       []*McpTool    `protobuf:"bytes,3,rep,name=tools,proto3" json:"tools,omitempty"`
	Id          string        `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ItemFunctionMcpListTools) Reset() {
	*x = ItemFunctionMcpListTools{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemFunctionMcpListTools) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemFunctionMcpListTools) ProtoMessage() {}

func (x *ItemFunctionMcpListTools) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemFunctionMcpListTools.ProtoReflect.Descriptor instead.
func (*ItemFunctionMcpListTools) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{47}
}

func (x *ItemFunctionMcpListTools) GetType() ItemType_Enum {
	if x != nil {
		return x.Type
	}
	return ItemType_unspecified
}

func (x *ItemFunctionMcpListTools) GetServerLabel() string {
	if x != nil {
		return x.ServerLabel
	}
	return ""
}

func (x *ItemFunctionMcpListTools) GetTools() []*McpTool {
	if x != nil {
		return x.Tools
	}
	return nil
}

func (x *ItemFunctionMcpListTools) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ItemFunctionMcpCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type              ItemType_Enum `protobuf:"varint,1,opt,name=type,proto3,enum=responses.ItemType_Enum" json:"type,omitempty"`
	ServerLabel       string        `protobuf:"bytes,2,opt,name=server_label,json=serverLabel,proto3" json:"server_label,omitempty"`
	ApprovalRequestId *string       `protobuf:"bytes,3,opt,name=approval_request_id,json=approvalRequestId,proto3,oneof" json:"approval_request_id,omitempty"`
	Arguments         string        `protobuf:"bytes,4,opt,name=arguments,proto3" json:"arguments,omitempty"`
	Error             *string       `protobuf:"bytes,5,opt,name=error,proto3,oneof" json:"error,omitempty"`
	Name              string        `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Output            *string       `protobuf:"bytes,7,opt,name=output,proto3,oneof" json:"output,omitempty"`
	Id                string        `protobuf:"bytes,8,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ItemFunctionMcpCall) Reset() {
	*x = ItemFunctionMcpCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemFunctionMcpCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemFunctionMcpCall) ProtoMessage() {}

func (x *ItemFunctionMcpCall) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemFunctionMcpCall.ProtoReflect.Descriptor instead.
func (*ItemFunctionMcpCall) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{48}
}

func (x *ItemFunctionMcpCall) GetType() ItemType_Enum {
	if x != nil {
		return x.Type
	}
	return ItemType_unspecified
}

func (x *ItemFunctionMcpCall) GetServerLabel() string {
	if x != nil {
		return x.ServerLabel
	}
	return ""
}

func (x *ItemFunctionMcpCall) GetApprovalRequestId() string {
	if x != nil && x.ApprovalRequestId != nil {
		return *x.ApprovalRequestId
	}
	return ""
}

func (x *ItemFunctionMcpCall) GetArguments() string {
	if x != nil {
		return x.Arguments
	}
	return ""
}

func (x *ItemFunctionMcpCall) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

func (x *ItemFunctionMcpCall) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ItemFunctionMcpCall) GetOutput() string {
	if x != nil && x.Output != nil {
		return *x.Output
	}
	return ""
}

func (x *ItemFunctionMcpCall) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ActionType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ActionType) Reset() {
	*x = ActionType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionType) ProtoMessage() {}

func (x *ActionType) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionType.ProtoReflect.Descriptor instead.
func (*ActionType) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{49}
}

type Action struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query string          `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Type  ActionType_Enum `protobuf:"varint,2,opt,name=type,proto3,enum=responses.ActionType_Enum" json:"type,omitempty"`
}

func (x *Action) Reset() {
	*x = Action{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Action) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action) ProtoMessage() {}

func (x *Action) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action.ProtoReflect.Descriptor instead.
func (*Action) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{50}
}

func (x *Action) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *Action) GetType() ActionType_Enum {
	if x != nil {
		return x.Type
	}
	return ActionType_unspecified
}

type OutputContentItemText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type ContentItemType_Enum `protobuf:"varint,1,opt,name=type,proto3,enum=responses.ContentItemType_Enum" json:"type,omitempty"`
	Text string               `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	// other output specific field like annotation
	Annotations []*Annotation `protobuf:"bytes,3,rep,name=annotations,proto3" json:"annotations,omitempty"`
}

func (x *OutputContentItemText) Reset() {
	*x = OutputContentItemText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutputContentItemText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutputContentItemText) ProtoMessage() {}

func (x *OutputContentItemText) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutputContentItemText.ProtoReflect.Descriptor instead.
func (*OutputContentItemText) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{51}
}

func (x *OutputContentItemText) GetType() ContentItemType_Enum {
	if x != nil {
		return x.Type
	}
	return ContentItemType_unspecified
}

func (x *OutputContentItemText) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *OutputContentItemText) GetAnnotations() []*Annotation {
	if x != nil {
		return x.Annotations
	}
	return nil
}

type ItemFunctionToolCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arguments string           `protobuf:"bytes,1,opt,name=arguments,proto3" json:"arguments,omitempty"`
	CallId    string           `protobuf:"bytes,2,opt,name=call_id,json=callId,proto3" json:"call_id,omitempty"`
	Name      string           `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Type      ItemType_Enum    `protobuf:"varint,4,opt,name=type,proto3,enum=responses.ItemType_Enum" json:"type,omitempty"`
	Id        *string          `protobuf:"bytes,5,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Status    *ItemStatus_Enum `protobuf:"varint,6,opt,name=status,proto3,enum=responses.ItemStatus_Enum,oneof" json:"status,omitempty"`
}

func (x *ItemFunctionToolCall) Reset() {
	*x = ItemFunctionToolCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemFunctionToolCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemFunctionToolCall) ProtoMessage() {}

func (x *ItemFunctionToolCall) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemFunctionToolCall.ProtoReflect.Descriptor instead.
func (*ItemFunctionToolCall) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{52}
}

func (x *ItemFunctionToolCall) GetArguments() string {
	if x != nil {
		return x.Arguments
	}
	return ""
}

func (x *ItemFunctionToolCall) GetCallId() string {
	if x != nil {
		return x.CallId
	}
	return ""
}

func (x *ItemFunctionToolCall) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ItemFunctionToolCall) GetType() ItemType_Enum {
	if x != nil {
		return x.Type
	}
	return ItemType_unspecified
}

func (x *ItemFunctionToolCall) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *ItemFunctionToolCall) GetStatus() ItemStatus_Enum {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ItemStatus_unspecified
}

type ItemFunctionToolCallOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Output string           `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
	CallId string           `protobuf:"bytes,2,opt,name=call_id,json=callId,proto3" json:"call_id,omitempty"`
	Type   ItemType_Enum    `protobuf:"varint,3,opt,name=type,proto3,enum=responses.ItemType_Enum" json:"type,omitempty"`
	Id     *string          `protobuf:"bytes,4,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Status *ItemStatus_Enum `protobuf:"varint,5,opt,name=status,proto3,enum=responses.ItemStatus_Enum,oneof" json:"status,omitempty"`
}

func (x *ItemFunctionToolCallOutput) Reset() {
	*x = ItemFunctionToolCallOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemFunctionToolCallOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemFunctionToolCallOutput) ProtoMessage() {}

func (x *ItemFunctionToolCallOutput) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemFunctionToolCallOutput.ProtoReflect.Descriptor instead.
func (*ItemFunctionToolCallOutput) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{53}
}

func (x *ItemFunctionToolCallOutput) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

func (x *ItemFunctionToolCallOutput) GetCallId() string {
	if x != nil {
		return x.CallId
	}
	return ""
}

func (x *ItemFunctionToolCallOutput) GetType() ItemType_Enum {
	if x != nil {
		return x.Type
	}
	return ItemType_unspecified
}

func (x *ItemFunctionToolCallOutput) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *ItemFunctionToolCallOutput) GetStatus() ItemStatus_Enum {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ItemStatus_unspecified
}

type ItemReasoning struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      *string                 `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Type    ItemType_Enum           `protobuf:"varint,2,opt,name=type,proto3,enum=responses.ItemType_Enum" json:"type,omitempty"`
	Summary []*ReasoningSummaryPart `protobuf:"bytes,3,rep,name=summary,proto3" json:"summary,omitempty"`
	Status  ItemStatus_Enum         `protobuf:"varint,4,opt,name=status,proto3,enum=responses.ItemStatus_Enum" json:"status,omitempty"`
}

func (x *ItemReasoning) Reset() {
	*x = ItemReasoning{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemReasoning) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemReasoning) ProtoMessage() {}

func (x *ItemReasoning) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemReasoning.ProtoReflect.Descriptor instead.
func (*ItemReasoning) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{54}
}

func (x *ItemReasoning) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *ItemReasoning) GetType() ItemType_Enum {
	if x != nil {
		return x.Type
	}
	return ItemType_unspecified
}

func (x *ItemReasoning) GetSummary() []*ReasoningSummaryPart {
	if x != nil {
		return x.Summary
	}
	return nil
}

func (x *ItemReasoning) GetStatus() ItemStatus_Enum {
	if x != nil {
		return x.Status
	}
	return ItemStatus_unspecified
}

type ItemTranscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            *string              `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Type          ItemType_Enum        `protobuf:"varint,2,opt,name=type,proto3,enum=responses.ItemType_Enum" json:"type,omitempty"`
	Transcription []*TranscriptionPart `protobuf:"bytes,3,rep,name=transcription,proto3" json:"transcription,omitempty"`
	Status        ItemStatus_Enum      `protobuf:"varint,4,opt,name=status,proto3,enum=responses.ItemStatus_Enum" json:"status,omitempty"`
}

func (x *ItemTranscription) Reset() {
	*x = ItemTranscription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemTranscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemTranscription) ProtoMessage() {}

func (x *ItemTranscription) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemTranscription.ProtoReflect.Descriptor instead.
func (*ItemTranscription) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{55}
}

func (x *ItemTranscription) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *ItemTranscription) GetType() ItemType_Enum {
	if x != nil {
		return x.Type
	}
	return ItemType_unspecified
}

func (x *ItemTranscription) GetTranscription() []*TranscriptionPart {
	if x != nil {
		return x.Transcription
	}
	return nil
}

func (x *ItemTranscription) GetStatus() ItemStatus_Enum {
	if x != nil {
		return x.Status
	}
	return ItemStatus_unspecified
}

type TranscriptionPart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   ContentItemType_Enum `protobuf:"varint,1,opt,name=type,proto3,enum=responses.ContentItemType_Enum" json:"type,omitempty"`
	Text   string               `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	Chunks []*AudioChunk        `protobuf:"bytes,3,rep,name=chunks,proto3" json:"chunks,omitempty"`
}

func (x *TranscriptionPart) Reset() {
	*x = TranscriptionPart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptionPart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptionPart) ProtoMessage() {}

func (x *TranscriptionPart) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptionPart.ProtoReflect.Descriptor instead.
func (*TranscriptionPart) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{56}
}

func (x *TranscriptionPart) GetType() ContentItemType_Enum {
	if x != nil {
		return x.Type
	}
	return ContentItemType_unspecified
}

func (x *TranscriptionPart) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *TranscriptionPart) GetChunks() []*AudioChunk {
	if x != nil {
		return x.Chunks
	}
	return nil
}

type ItemReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type *ItemType_Enum `protobuf:"varint,2,opt,name=type,proto3,enum=responses.ItemType_Enum,oneof" json:"type,omitempty"`
}

func (x *ItemReference) Reset() {
	*x = ItemReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemReference) ProtoMessage() {}

func (x *ItemReference) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemReference.ProtoReflect.Descriptor instead.
func (*ItemReference) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{57}
}

func (x *ItemReference) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ItemReference) GetType() ItemType_Enum {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ItemType_unspecified
}

type ResponsesThinking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *ThinkingType_Enum `protobuf:"varint,1,opt,name=type,proto3,enum=responses.ThinkingType_Enum,oneof" json:"type,omitempty"`
}

func (x *ResponsesThinking) Reset() {
	*x = ResponsesThinking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponsesThinking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponsesThinking) ProtoMessage() {}

func (x *ResponsesThinking) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponsesThinking.ProtoReflect.Descriptor instead.
func (*ResponsesThinking) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{58}
}

func (x *ResponsesThinking) GetType() ThinkingType_Enum {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ThinkingType_unspecified
}

type ResponsesToolChoice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Union:
	//
	//	*ResponsesToolChoice_Mode
	//	*ResponsesToolChoice_FunctionToolChoice
	Union isResponsesToolChoice_Union `protobuf_oneof:"union"`
}

func (x *ResponsesToolChoice) Reset() {
	*x = ResponsesToolChoice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponsesToolChoice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponsesToolChoice) ProtoMessage() {}

func (x *ResponsesToolChoice) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponsesToolChoice.ProtoReflect.Descriptor instead.
func (*ResponsesToolChoice) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{59}
}

func (m *ResponsesToolChoice) GetUnion() isResponsesToolChoice_Union {
	if m != nil {
		return m.Union
	}
	return nil
}

func (x *ResponsesToolChoice) GetMode() ToolChoiceMode_Enum {
	if x, ok := x.GetUnion().(*ResponsesToolChoice_Mode); ok {
		return x.Mode
	}
	return ToolChoiceMode_unspecified
}

func (x *ResponsesToolChoice) GetFunctionToolChoice() *FunctionToolChoice {
	if x, ok := x.GetUnion().(*ResponsesToolChoice_FunctionToolChoice); ok {
		return x.FunctionToolChoice
	}
	return nil
}

type isResponsesToolChoice_Union interface {
	isResponsesToolChoice_Union()
}

type ResponsesToolChoice_Mode struct {
	Mode ToolChoiceMode_Enum `protobuf:"varint,1,opt,name=mode,proto3,enum=responses.ToolChoiceMode_Enum,oneof"`
}

type ResponsesToolChoice_FunctionToolChoice struct {
	FunctionToolChoice *FunctionToolChoice `protobuf:"bytes,2,opt,name=function_tool_choice,json=functionToolChoice,proto3,oneof"`
}

func (*ResponsesToolChoice_Mode) isResponsesToolChoice_Union() {}

func (*ResponsesToolChoice_FunctionToolChoice) isResponsesToolChoice_Union() {}

type FunctionToolChoice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        ToolType_Enum `protobuf:"varint,1,opt,name=type,proto3,enum=responses.ToolType_Enum" json:"type,omitempty"`
	Name        string        `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ServerLabel string        `protobuf:"bytes,3,opt,name=server_label,json=serverLabel,proto3" json:"server_label,omitempty"`
}

func (x *FunctionToolChoice) Reset() {
	*x = FunctionToolChoice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FunctionToolChoice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionToolChoice) ProtoMessage() {}

func (x *FunctionToolChoice) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionToolChoice.ProtoReflect.Descriptor instead.
func (*FunctionToolChoice) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{60}
}

func (x *FunctionToolChoice) GetType() ToolType_Enum {
	if x != nil {
		return x.Type
	}
	return ToolType_unspecified
}

func (x *FunctionToolChoice) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FunctionToolChoice) GetServerLabel() string {
	if x != nil {
		return x.ServerLabel
	}
	return ""
}

type ResponsesTool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Union:
	//
	//	*ResponsesTool_ToolFunction
	//	*ResponsesTool_ToolWebSearch
	//	*ResponsesTool_ToolImageProcess
	//	*ResponsesTool_ToolMcp
	Union isResponsesTool_Union `protobuf_oneof:"union"`
}

func (x *ResponsesTool) Reset() {
	*x = ResponsesTool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponsesTool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponsesTool) ProtoMessage() {}

func (x *ResponsesTool) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponsesTool.ProtoReflect.Descriptor instead.
func (*ResponsesTool) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{61}
}

func (m *ResponsesTool) GetUnion() isResponsesTool_Union {
	if m != nil {
		return m.Union
	}
	return nil
}

func (x *ResponsesTool) GetToolFunction() *ToolFunction {
	if x, ok := x.GetUnion().(*ResponsesTool_ToolFunction); ok {
		return x.ToolFunction
	}
	return nil
}

func (x *ResponsesTool) GetToolWebSearch() *ToolWebSearch {
	if x, ok := x.GetUnion().(*ResponsesTool_ToolWebSearch); ok {
		return x.ToolWebSearch
	}
	return nil
}

func (x *ResponsesTool) GetToolImageProcess() *ToolImageProcess {
	if x, ok := x.GetUnion().(*ResponsesTool_ToolImageProcess); ok {
		return x.ToolImageProcess
	}
	return nil
}

func (x *ResponsesTool) GetToolMcp() *ToolMcp {
	if x, ok := x.GetUnion().(*ResponsesTool_ToolMcp); ok {
		return x.ToolMcp
	}
	return nil
}

type isResponsesTool_Union interface {
	isResponsesTool_Union()
}

type ResponsesTool_ToolFunction struct {
	ToolFunction *ToolFunction `protobuf:"bytes,1,opt,name=tool_function,json=toolFunction,proto3,oneof"`
}

type ResponsesTool_ToolWebSearch struct {
	ToolWebSearch *ToolWebSearch `protobuf:"bytes,2,opt,name=tool_web_search,json=toolWebSearch,proto3,oneof"`
}

type ResponsesTool_ToolImageProcess struct {
	ToolImageProcess *ToolImageProcess `protobuf:"bytes,3,opt,name=tool_image_process,json=toolImageProcess,proto3,oneof"`
}

type ResponsesTool_ToolMcp struct {
	ToolMcp *ToolMcp `protobuf:"bytes,4,opt,name=tool_mcp,json=toolMcp,proto3,oneof"`
}

func (*ResponsesTool_ToolFunction) isResponsesTool_Union() {}

func (*ResponsesTool_ToolWebSearch) isResponsesTool_Union() {}

func (*ResponsesTool_ToolImageProcess) isResponsesTool_Union() {}

func (*ResponsesTool_ToolMcp) isResponsesTool_Union() {}

type SourceType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SourceType) Reset() {
	*x = SourceType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SourceType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceType) ProtoMessage() {}

func (x *SourceType) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceType.ProtoReflect.Descriptor instead.
func (*SourceType) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{62}
}

type UserLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     UserLocationType_Enum `protobuf:"varint,1,opt,name=type,proto3,enum=responses.UserLocationType_Enum" json:"type,omitempty"`
	City     *string               `protobuf:"bytes,2,opt,name=city,proto3,oneof" json:"city,omitempty"`
	Country  *string               `protobuf:"bytes,3,opt,name=country,proto3,oneof" json:"country,omitempty"`
	Region   *string               `protobuf:"bytes,4,opt,name=region,proto3,oneof" json:"region,omitempty"`
	Timezone *string               `protobuf:"bytes,5,opt,name=timezone,proto3,oneof" json:"timezone,omitempty"`
}

func (x *UserLocation) Reset() {
	*x = UserLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLocation) ProtoMessage() {}

func (x *UserLocation) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLocation.ProtoReflect.Descriptor instead.
func (*UserLocation) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{63}
}

func (x *UserLocation) GetType() UserLocationType_Enum {
	if x != nil {
		return x.Type
	}
	return UserLocationType_unspecified
}

func (x *UserLocation) GetCity() string {
	if x != nil && x.City != nil {
		return *x.City
	}
	return ""
}

func (x *UserLocation) GetCountry() string {
	if x != nil && x.Country != nil {
		return *x.Country
	}
	return ""
}

func (x *UserLocation) GetRegion() string {
	if x != nil && x.Region != nil {
		return *x.Region
	}
	return ""
}

func (x *UserLocation) GetTimezone() string {
	if x != nil && x.Timezone != nil {
		return *x.Timezone
	}
	return ""
}

type ToolWebSearch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type         ToolType_Enum     `protobuf:"varint,1,opt,name=type,proto3,enum=responses.ToolType_Enum" json:"type,omitempty"`
	Limit        *int64            `protobuf:"varint,2,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
	UserLocation *UserLocation     `protobuf:"bytes,3,opt,name=user_location,json=userLocation,proto3,oneof" json:"user_location,omitempty"`
	Sources      []SourceType_Enum `protobuf:"varint,4,rep,packed,name=sources,proto3,enum=responses.SourceType_Enum" json:"sources,omitempty"`
}

func (x *ToolWebSearch) Reset() {
	*x = ToolWebSearch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToolWebSearch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToolWebSearch) ProtoMessage() {}

func (x *ToolWebSearch) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToolWebSearch.ProtoReflect.Descriptor instead.
func (*ToolWebSearch) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{64}
}

func (x *ToolWebSearch) GetType() ToolType_Enum {
	if x != nil {
		return x.Type
	}
	return ToolType_unspecified
}

func (x *ToolWebSearch) GetLimit() int64 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *ToolWebSearch) GetUserLocation() *UserLocation {
	if x != nil {
		return x.UserLocation
	}
	return nil
}

func (x *ToolWebSearch) GetSources() []SourceType_Enum {
	if x != nil {
		return x.Sources
	}
	return nil
}

type ImageProcessPointOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *string `protobuf:"bytes,1,opt,name=type,proto3,oneof" json:"type,omitempty"`
}

func (x *ImageProcessPointOptions) Reset() {
	*x = ImageProcessPointOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageProcessPointOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageProcessPointOptions) ProtoMessage() {}

func (x *ImageProcessPointOptions) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageProcessPointOptions.ProtoReflect.Descriptor instead.
func (*ImageProcessPointOptions) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{65}
}

func (x *ImageProcessPointOptions) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

type ImageProcessGroundingOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *string `protobuf:"bytes,1,opt,name=type,proto3,oneof" json:"type,omitempty"`
}

func (x *ImageProcessGroundingOptions) Reset() {
	*x = ImageProcessGroundingOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageProcessGroundingOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageProcessGroundingOptions) ProtoMessage() {}

func (x *ImageProcessGroundingOptions) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageProcessGroundingOptions.ProtoReflect.Descriptor instead.
func (*ImageProcessGroundingOptions) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{66}
}

func (x *ImageProcessGroundingOptions) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

type ImageProcessZoomOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *string `protobuf:"bytes,1,opt,name=type,proto3,oneof" json:"type,omitempty"`
}

func (x *ImageProcessZoomOptions) Reset() {
	*x = ImageProcessZoomOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageProcessZoomOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageProcessZoomOptions) ProtoMessage() {}

func (x *ImageProcessZoomOptions) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageProcessZoomOptions.ProtoReflect.Descriptor instead.
func (*ImageProcessZoomOptions) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{67}
}

func (x *ImageProcessZoomOptions) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

type ImageProcessRotateOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *string `protobuf:"bytes,1,opt,name=type,proto3,oneof" json:"type,omitempty"`
}

func (x *ImageProcessRotateOptions) Reset() {
	*x = ImageProcessRotateOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageProcessRotateOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageProcessRotateOptions) ProtoMessage() {}

func (x *ImageProcessRotateOptions) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageProcessRotateOptions.ProtoReflect.Descriptor instead.
func (*ImageProcessRotateOptions) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{68}
}

func (x *ImageProcessRotateOptions) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

type ToolImageProcess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      ToolType_Enum                 `protobuf:"varint,1,opt,name=type,proto3,enum=responses.ToolType_Enum" json:"type,omitempty"`
	Point     *ImageProcessPointOptions     `protobuf:"bytes,2,opt,name=point,proto3,oneof" json:"point,omitempty"`
	Grounding *ImageProcessGroundingOptions `protobuf:"bytes,3,opt,name=grounding,proto3,oneof" json:"grounding,omitempty"`
	Zoom      *ImageProcessZoomOptions      `protobuf:"bytes,4,opt,name=zoom,proto3,oneof" json:"zoom,omitempty"`
	Rotate    *ImageProcessRotateOptions    `protobuf:"bytes,5,opt,name=rotate,proto3,oneof" json:"rotate,omitempty"`
}

func (x *ToolImageProcess) Reset() {
	*x = ToolImageProcess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToolImageProcess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToolImageProcess) ProtoMessage() {}

func (x *ToolImageProcess) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToolImageProcess.ProtoReflect.Descriptor instead.
func (*ToolImageProcess) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{69}
}

func (x *ToolImageProcess) GetType() ToolType_Enum {
	if x != nil {
		return x.Type
	}
	return ToolType_unspecified
}

func (x *ToolImageProcess) GetPoint() *ImageProcessPointOptions {
	if x != nil {
		return x.Point
	}
	return nil
}

func (x *ToolImageProcess) GetGrounding() *ImageProcessGroundingOptions {
	if x != nil {
		return x.Grounding
	}
	return nil
}

func (x *ToolImageProcess) GetZoom() *ImageProcessZoomOptions {
	if x != nil {
		return x.Zoom
	}
	return nil
}

func (x *ToolImageProcess) GetRotate() *ImageProcessRotateOptions {
	if x != nil {
		return x.Rotate
	}
	return nil
}

type McpAllowedToolsList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []string `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *McpAllowedToolsList) Reset() {
	*x = McpAllowedToolsList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *McpAllowedToolsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*McpAllowedToolsList) ProtoMessage() {}

func (x *McpAllowedToolsList) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use McpAllowedToolsList.ProtoReflect.Descriptor instead.
func (*McpAllowedToolsList) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{70}
}

func (x *McpAllowedToolsList) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

type McpAllowedToolsFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ToolNames []string `protobuf:"bytes,1,rep,name=tool_names,json=toolNames,proto3" json:"tool_names,omitempty"`
}

func (x *McpAllowedToolsFilter) Reset() {
	*x = McpAllowedToolsFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *McpAllowedToolsFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*McpAllowedToolsFilter) ProtoMessage() {}

func (x *McpAllowedToolsFilter) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use McpAllowedToolsFilter.ProtoReflect.Descriptor instead.
func (*McpAllowedToolsFilter) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{71}
}

func (x *McpAllowedToolsFilter) GetToolNames() []string {
	if x != nil {
		return x.ToolNames
	}
	return nil
}

type McpAllowedTools struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Union:
	//
	//	*McpAllowedTools_List
	//	*McpAllowedTools_Filter
	Union isMcpAllowedTools_Union `protobuf_oneof:"union"`
}

func (x *McpAllowedTools) Reset() {
	*x = McpAllowedTools{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *McpAllowedTools) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*McpAllowedTools) ProtoMessage() {}

func (x *McpAllowedTools) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use McpAllowedTools.ProtoReflect.Descriptor instead.
func (*McpAllowedTools) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{72}
}

func (m *McpAllowedTools) GetUnion() isMcpAllowedTools_Union {
	if m != nil {
		return m.Union
	}
	return nil
}

func (x *McpAllowedTools) GetList() *McpAllowedToolsList {
	if x, ok := x.GetUnion().(*McpAllowedTools_List); ok {
		return x.List
	}
	return nil
}

func (x *McpAllowedTools) GetFilter() *McpAllowedToolsFilter {
	if x, ok := x.GetUnion().(*McpAllowedTools_Filter); ok {
		return x.Filter
	}
	return nil
}

type isMcpAllowedTools_Union interface {
	isMcpAllowedTools_Union()
}

type McpAllowedTools_List struct {
	List *McpAllowedToolsList `protobuf:"bytes,1,opt,name=list,proto3,oneof"`
}

type McpAllowedTools_Filter struct {
	Filter *McpAllowedToolsFilter `protobuf:"bytes,2,opt,name=filter,proto3,oneof"`
}

func (*McpAllowedTools_List) isMcpAllowedTools_Union() {}

func (*McpAllowedTools_Filter) isMcpAllowedTools_Union() {}

type McpRequireApproval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Union:
	//
	//	*McpRequireApproval_Mode
	//	*McpRequireApproval_Filter
	Union isMcpRequireApproval_Union `protobuf_oneof:"union"`
}

func (x *McpRequireApproval) Reset() {
	*x = McpRequireApproval{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *McpRequireApproval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*McpRequireApproval) ProtoMessage() {}

func (x *McpRequireApproval) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use McpRequireApproval.ProtoReflect.Descriptor instead.
func (*McpRequireApproval) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{73}
}

func (m *McpRequireApproval) GetUnion() isMcpRequireApproval_Union {
	if m != nil {
		return m.Union
	}
	return nil
}

func (x *McpRequireApproval) GetMode() ApprovalMode_Enum {
	if x, ok := x.GetUnion().(*McpRequireApproval_Mode); ok {
		return x.Mode
	}
	return ApprovalMode_unspecified
}

func (x *McpRequireApproval) GetFilter() *McpToolApprovalFilter {
	if x, ok := x.GetUnion().(*McpRequireApproval_Filter); ok {
		return x.Filter
	}
	return nil
}

type isMcpRequireApproval_Union interface {
	isMcpRequireApproval_Union()
}

type McpRequireApproval_Mode struct {
	Mode ApprovalMode_Enum `protobuf:"varint,1,opt,name=mode,proto3,enum=responses.ApprovalMode_Enum,oneof"` // "always" or "never"
}

type McpRequireApproval_Filter struct {
	Filter *McpToolApprovalFilter `protobuf:"bytes,2,opt,name=filter,proto3,oneof"` // dict
}

func (*McpRequireApproval_Mode) isMcpRequireApproval_Union() {}

func (*McpRequireApproval_Filter) isMcpRequireApproval_Union() {}

type ApprovalMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ApprovalMode) Reset() {
	*x = ApprovalMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApprovalMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApprovalMode) ProtoMessage() {}

func (x *ApprovalMode) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApprovalMode.ProtoReflect.Descriptor instead.
func (*ApprovalMode) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{74}
}

type McpToolApprovalFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Always *McpToolApprovalFilterAlways `protobuf:"bytes,1,opt,name=always,proto3,oneof" json:"always,omitempty"`
	Never  *McpToolApprovalFilterNever  `protobuf:"bytes,2,opt,name=never,proto3,oneof" json:"never,omitempty"`
}

func (x *McpToolApprovalFilter) Reset() {
	*x = McpToolApprovalFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *McpToolApprovalFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*McpToolApprovalFilter) ProtoMessage() {}

func (x *McpToolApprovalFilter) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use McpToolApprovalFilter.ProtoReflect.Descriptor instead.
func (*McpToolApprovalFilter) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{75}
}

func (x *McpToolApprovalFilter) GetAlways() *McpToolApprovalFilterAlways {
	if x != nil {
		return x.Always
	}
	return nil
}

func (x *McpToolApprovalFilter) GetNever() *McpToolApprovalFilterNever {
	if x != nil {
		return x.Never
	}
	return nil
}

type McpToolApprovalFilterAlways struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ToolNames []string `protobuf:"bytes,1,rep,name=tool_names,json=toolNames,proto3" json:"tool_names,omitempty"`
}

func (x *McpToolApprovalFilterAlways) Reset() {
	*x = McpToolApprovalFilterAlways{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *McpToolApprovalFilterAlways) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*McpToolApprovalFilterAlways) ProtoMessage() {}

func (x *McpToolApprovalFilterAlways) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use McpToolApprovalFilterAlways.ProtoReflect.Descriptor instead.
func (*McpToolApprovalFilterAlways) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{76}
}

func (x *McpToolApprovalFilterAlways) GetToolNames() []string {
	if x != nil {
		return x.ToolNames
	}
	return nil
}

type McpToolApprovalFilterNever struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ToolNames []string `protobuf:"bytes,1,rep,name=tool_names,json=toolNames,proto3" json:"tool_names,omitempty"`
}

func (x *McpToolApprovalFilterNever) Reset() {
	*x = McpToolApprovalFilterNever{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *McpToolApprovalFilterNever) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*McpToolApprovalFilterNever) ProtoMessage() {}

func (x *McpToolApprovalFilterNever) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use McpToolApprovalFilterNever.ProtoReflect.Descriptor instead.
func (*McpToolApprovalFilterNever) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{77}
}

func (x *McpToolApprovalFilterNever) GetToolNames() []string {
	if x != nil {
		return x.ToolNames
	}
	return nil
}

type ToolMcp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type              ToolType_Enum       `protobuf:"varint,1,opt,name=type,proto3,enum=responses.ToolType_Enum" json:"type,omitempty"`
	ServerLabel       string              `protobuf:"bytes,2,opt,name=server_label,json=serverLabel,proto3" json:"server_label,omitempty"`
	ServerUrl         string              `protobuf:"bytes,3,opt,name=server_url,json=serverUrl,proto3" json:"server_url,omitempty"`
	AllowedTools      *McpAllowedTools    `protobuf:"bytes,4,opt,name=allowed_tools,json=allowedTools,proto3,oneof" json:"allowed_tools,omitempty"`
	Headers           map[string]string   `protobuf:"bytes,5,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	RequireApproval   *McpRequireApproval `protobuf:"bytes,6,opt,name=require_approval,json=requireApproval,proto3,oneof" json:"require_approval,omitempty"`
	ServerDescription *string             `protobuf:"bytes,7,opt,name=server_description,json=serverDescription,proto3,oneof" json:"server_description,omitempty"`
}

func (x *ToolMcp) Reset() {
	*x = ToolMcp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToolMcp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToolMcp) ProtoMessage() {}

func (x *ToolMcp) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToolMcp.ProtoReflect.Descriptor instead.
func (*ToolMcp) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{78}
}

func (x *ToolMcp) GetType() ToolType_Enum {
	if x != nil {
		return x.Type
	}
	return ToolType_unspecified
}

func (x *ToolMcp) GetServerLabel() string {
	if x != nil {
		return x.ServerLabel
	}
	return ""
}

func (x *ToolMcp) GetServerUrl() string {
	if x != nil {
		return x.ServerUrl
	}
	return ""
}

func (x *ToolMcp) GetAllowedTools() *McpAllowedTools {
	if x != nil {
		return x.AllowedTools
	}
	return nil
}

func (x *ToolMcp) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *ToolMcp) GetRequireApproval() *McpRequireApproval {
	if x != nil {
		return x.RequireApproval
	}
	return nil
}

func (x *ToolMcp) GetServerDescription() string {
	if x != nil && x.ServerDescription != nil {
		return *x.ServerDescription
	}
	return ""
}

type ToolFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Strict      *bool         `protobuf:"varint,2,opt,name=strict,proto3,oneof" json:"strict,omitempty"`
	Type        ToolType_Enum `protobuf:"varint,3,opt,name=type,proto3,enum=responses.ToolType_Enum" json:"type,omitempty"`
	Description *string       `protobuf:"bytes,4,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Parameters  *Bytes        `protobuf:"bytes,5,opt,name=parameters,proto3" json:"parameters,omitempty"`
}

func (x *ToolFunction) Reset() {
	*x = ToolFunction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToolFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToolFunction) ProtoMessage() {}

func (x *ToolFunction) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToolFunction.ProtoReflect.Descriptor instead.
func (*ToolFunction) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{79}
}

func (x *ToolFunction) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ToolFunction) GetStrict() bool {
	if x != nil && x.Strict != nil {
		return *x.Strict
	}
	return false
}

func (x *ToolFunction) GetType() ToolType_Enum {
	if x != nil {
		return x.Type
	}
	return ToolType_unspecified
}

func (x *ToolFunction) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *ToolFunction) GetParameters() *Bytes {
	if x != nil {
		return x.Parameters
	}
	return nil
}

type Bytes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Bytes) Reset() {
	*x = Bytes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bytes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bytes) ProtoMessage() {}

func (x *Bytes) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bytes.ProtoReflect.Descriptor instead.
func (*Bytes) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{80}
}

func (x *Bytes) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type ResponseObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreatedAt          int64                      `protobuf:"varint,1,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Error              *Error                     `protobuf:"bytes,2,opt,name=error,proto3,oneof" json:"error,omitempty"`
	Id                 string                     `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	IncompleteDetails  *IncompleteDetails         `protobuf:"bytes,4,opt,name=incomplete_details,json=incompleteDetails,proto3,oneof" json:"incomplete_details,omitempty"`
	MaxOutputTokens    *int64                     `protobuf:"varint,5,opt,name=max_output_tokens,json=maxOutputTokens,proto3,oneof" json:"max_output_tokens,omitempty"`
	Model              string                     `protobuf:"bytes,6,opt,name=model,proto3" json:"model,omitempty"`
	Object             ObjectType_Enum            `protobuf:"varint,7,opt,name=object,proto3,enum=responses.ObjectType_Enum" json:"object,omitempty"`
	Output             []*OutputItem              `protobuf:"bytes,8,rep,name=output,proto3" json:"output,omitempty"`
	PreviousResponseId *string                    `protobuf:"bytes,9,opt,name=previous_response_id,json=previousResponseId,proto3,oneof" json:"previous_response_id,omitempty"`
	Thinking           *ResponsesThinking         `protobuf:"bytes,10,opt,name=thinking,proto3,oneof" json:"thinking,omitempty"`
	ServiceTier        *ResponsesServiceTier_Enum `protobuf:"varint,11,opt,name=service_tier,json=serviceTier,proto3,enum=responses.ResponsesServiceTier_Enum,oneof" json:"service_tier,omitempty"`
	Status             ResponseStatus_Enum        `protobuf:"varint,12,opt,name=status,proto3,enum=responses.ResponseStatus_Enum" json:"status,omitempty"`
	Temperature        *float64                   `protobuf:"fixed64,13,opt,name=temperature,proto3,oneof" json:"temperature,omitempty"`
	Tools              []*ResponsesTool           `protobuf:"bytes,14,rep,name=tools,proto3" json:"tools,omitempty"`
	TopP               *float64                   `protobuf:"fixed64,15,opt,name=top_p,json=topP,proto3,oneof" json:"top_p,omitempty"`
	Usage              *Usage                     `protobuf:"bytes,16,opt,name=usage,proto3,oneof" json:"usage,omitempty"`
	Caching            *ResponsesCaching          `protobuf:"bytes,17,opt,name=caching,proto3,oneof" json:"caching,omitempty"`
	Text               *ResponsesText             `protobuf:"bytes,18,opt,name=text,proto3,oneof" json:"text,omitempty"`
	Instructions       *string                    `protobuf:"bytes,19,opt,name=instructions,proto3,oneof" json:"instructions,omitempty"`
	Store              *bool                      `protobuf:"varint,20,opt,name=store,proto3,oneof" json:"store,omitempty"`
	ExpireAt           *int64                     `protobuf:"varint,21,opt,name=expire_at,json=expireAt,proto3,oneof" json:"expire_at,omitempty"`
	ToolChoice         *ResponsesToolChoice       `protobuf:"bytes,22,opt,name=tool_choice,json=toolChoice,proto3,oneof" json:"tool_choice,omitempty"`
	ParallelToolCalls  *bool                      `protobuf:"varint,23,opt,name=parallel_tool_calls,json=parallelToolCalls,proto3,oneof" json:"parallel_tool_calls,omitempty"`
	MaxToolCalls       *int64                     `protobuf:"varint,24,opt,name=max_tool_calls,json=maxToolCalls,proto3,oneof" json:"max_tool_calls,omitempty"`
	ToolUsage          *ToolUsage                 `protobuf:"bytes,25,opt,name=tool_usage,json=toolUsage,proto3,oneof" json:"tool_usage,omitempty"`
	model.HttpHeader
}

func (x *ResponseObject) Reset() {
	*x = ResponseObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseObject) ProtoMessage() {}

func (x *ResponseObject) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseObject.ProtoReflect.Descriptor instead.
func (*ResponseObject) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{81}
}

func (x *ResponseObject) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *ResponseObject) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ResponseObject) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ResponseObject) GetIncompleteDetails() *IncompleteDetails {
	if x != nil {
		return x.IncompleteDetails
	}
	return nil
}

func (x *ResponseObject) GetMaxOutputTokens() int64 {
	if x != nil && x.MaxOutputTokens != nil {
		return *x.MaxOutputTokens
	}
	return 0
}

func (x *ResponseObject) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *ResponseObject) GetObject() ObjectType_Enum {
	if x != nil {
		return x.Object
	}
	return ObjectType_unspecified
}

func (x *ResponseObject) GetOutput() []*OutputItem {
	if x != nil {
		return x.Output
	}
	return nil
}

func (x *ResponseObject) GetPreviousResponseId() string {
	if x != nil && x.PreviousResponseId != nil {
		return *x.PreviousResponseId
	}
	return ""
}

func (x *ResponseObject) GetThinking() *ResponsesThinking {
	if x != nil {
		return x.Thinking
	}
	return nil
}

func (x *ResponseObject) GetServiceTier() ResponsesServiceTier_Enum {
	if x != nil && x.ServiceTier != nil {
		return *x.ServiceTier
	}
	return ResponsesServiceTier_unspecified
}

func (x *ResponseObject) GetStatus() ResponseStatus_Enum {
	if x != nil {
		return x.Status
	}
	return ResponseStatus_unspecified
}

func (x *ResponseObject) GetTemperature() float64 {
	if x != nil && x.Temperature != nil {
		return *x.Temperature
	}
	return 0
}

func (x *ResponseObject) GetTools() []*ResponsesTool {
	if x != nil {
		return x.Tools
	}
	return nil
}

func (x *ResponseObject) GetTopP() float64 {
	if x != nil && x.TopP != nil {
		return *x.TopP
	}
	return 0
}

func (x *ResponseObject) GetUsage() *Usage {
	if x != nil {
		return x.Usage
	}
	return nil
}

func (x *ResponseObject) GetCaching() *ResponsesCaching {
	if x != nil {
		return x.Caching
	}
	return nil
}

func (x *ResponseObject) GetText() *ResponsesText {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *ResponseObject) GetInstructions() string {
	if x != nil && x.Instructions != nil {
		return *x.Instructions
	}
	return ""
}

func (x *ResponseObject) GetStore() bool {
	if x != nil && x.Store != nil {
		return *x.Store
	}
	return false
}

func (x *ResponseObject) GetExpireAt() int64 {
	if x != nil && x.ExpireAt != nil {
		return *x.ExpireAt
	}
	return 0
}

func (x *ResponseObject) GetToolChoice() *ResponsesToolChoice {
	if x != nil {
		return x.ToolChoice
	}
	return nil
}

func (x *ResponseObject) GetParallelToolCalls() bool {
	if x != nil && x.ParallelToolCalls != nil {
		return *x.ParallelToolCalls
	}
	return false
}

func (x *ResponseObject) GetMaxToolCalls() int64 {
	if x != nil && x.MaxToolCalls != nil {
		return *x.MaxToolCalls
	}
	return 0
}

func (x *ResponseObject) GetToolUsage() *ToolUsage {
	if x != nil {
		return x.ToolUsage
	}
	return nil
}

type WebSearchUsage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count   int64            `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Details map[string]int64 `protobuf:"bytes,2,rep,name=details,proto3" json:"details,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *WebSearchUsage) Reset() {
	*x = WebSearchUsage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebSearchUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebSearchUsage) ProtoMessage() {}

func (x *WebSearchUsage) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebSearchUsage.ProtoReflect.Descriptor instead.
func (*WebSearchUsage) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{82}
}

func (x *WebSearchUsage) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *WebSearchUsage) GetDetails() map[string]int64 {
	if x != nil {
		return x.Details
	}
	return nil
}

type McpUsage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details map[string]int64 `protobuf:"bytes,2,rep,name=details,proto3" json:"details,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *McpUsage) Reset() {
	*x = McpUsage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *McpUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*McpUsage) ProtoMessage() {}

func (x *McpUsage) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use McpUsage.ProtoReflect.Descriptor instead.
func (*McpUsage) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{83}
}

func (x *McpUsage) GetDetails() map[string]int64 {
	if x != nil {
		return x.Details
	}
	return nil
}

type ToolUsage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WebSearchUsage *WebSearchUsage `protobuf:"bytes,1,opt,name=web_search_usage,json=webSearchUsage,proto3,oneof" json:"web_search_usage,omitempty"`
	McpUsage       *McpUsage       `protobuf:"bytes,2,opt,name=mcp_usage,json=mcpUsage,proto3,oneof" json:"mcp_usage,omitempty"`
}

func (x *ToolUsage) Reset() {
	*x = ToolUsage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToolUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToolUsage) ProtoMessage() {}

func (x *ToolUsage) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToolUsage.ProtoReflect.Descriptor instead.
func (*ToolUsage) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{84}
}

func (x *ToolUsage) GetWebSearchUsage() *WebSearchUsage {
	if x != nil {
		return x.WebSearchUsage
	}
	return nil
}

func (x *ToolUsage) GetMcpUsage() *McpUsage {
	if x != nil {
		return x.McpUsage
	}
	return nil
}

type OutputItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Union:
	//
	//	*OutputItem_OutputMessage
	//	*OutputItem_FunctionToolCall
	//	*OutputItem_Reasoning
	//	*OutputItem_Transcription
	//	*OutputItem_FunctionWebSearch
	//	*OutputItem_FunctionImageProcess
	//	*OutputItem_FunctionMcpApprovalRequest
	//	*OutputItem_FunctionMcpListTools
	//	*OutputItem_FunctionMcpCall
	Union isOutputItem_Union `protobuf_oneof:"union"`
}

func (x *OutputItem) Reset() {
	*x = OutputItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutputItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutputItem) ProtoMessage() {}

func (x *OutputItem) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutputItem.ProtoReflect.Descriptor instead.
func (*OutputItem) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{85}
}

func (m *OutputItem) GetUnion() isOutputItem_Union {
	if m != nil {
		return m.Union
	}
	return nil
}

func (x *OutputItem) GetOutputMessage() *ItemOutputMessage {
	if x, ok := x.GetUnion().(*OutputItem_OutputMessage); ok {
		return x.OutputMessage
	}
	return nil
}

func (x *OutputItem) GetFunctionToolCall() *ItemFunctionToolCall {
	if x, ok := x.GetUnion().(*OutputItem_FunctionToolCall); ok {
		return x.FunctionToolCall
	}
	return nil
}

func (x *OutputItem) GetReasoning() *ItemReasoning {
	if x, ok := x.GetUnion().(*OutputItem_Reasoning); ok {
		return x.Reasoning
	}
	return nil
}

func (x *OutputItem) GetTranscription() *ItemTranscription {
	if x, ok := x.GetUnion().(*OutputItem_Transcription); ok {
		return x.Transcription
	}
	return nil
}

func (x *OutputItem) GetFunctionWebSearch() *ItemFunctionWebSearch {
	if x, ok := x.GetUnion().(*OutputItem_FunctionWebSearch); ok {
		return x.FunctionWebSearch
	}
	return nil
}

func (x *OutputItem) GetFunctionImageProcess() *ItemFunctionImageProcess {
	if x, ok := x.GetUnion().(*OutputItem_FunctionImageProcess); ok {
		return x.FunctionImageProcess
	}
	return nil
}

func (x *OutputItem) GetFunctionMcpApprovalRequest() *ItemFunctionMcpApprovalRequest {
	if x, ok := x.GetUnion().(*OutputItem_FunctionMcpApprovalRequest); ok {
		return x.FunctionMcpApprovalRequest
	}
	return nil
}

func (x *OutputItem) GetFunctionMcpListTools() *ItemFunctionMcpListTools {
	if x, ok := x.GetUnion().(*OutputItem_FunctionMcpListTools); ok {
		return x.FunctionMcpListTools
	}
	return nil
}

func (x *OutputItem) GetFunctionMcpCall() *ItemFunctionMcpCall {
	if x, ok := x.GetUnion().(*OutputItem_FunctionMcpCall); ok {
		return x.FunctionMcpCall
	}
	return nil
}

type isOutputItem_Union interface {
	isOutputItem_Union()
}

type OutputItem_OutputMessage struct {
	OutputMessage *ItemOutputMessage `protobuf:"bytes,1,opt,name=output_message,json=outputMessage,proto3,oneof"`
}

type OutputItem_FunctionToolCall struct {
	FunctionToolCall *ItemFunctionToolCall `protobuf:"bytes,2,opt,name=function_tool_call,json=functionToolCall,proto3,oneof"`
}

type OutputItem_Reasoning struct {
	Reasoning *ItemReasoning `protobuf:"bytes,3,opt,name=reasoning,proto3,oneof"`
}

type OutputItem_Transcription struct {
	Transcription *ItemTranscription `protobuf:"bytes,4,opt,name=transcription,proto3,oneof"`
}

type OutputItem_FunctionWebSearch struct {
	FunctionWebSearch *ItemFunctionWebSearch `protobuf:"bytes,5,opt,name=function_web_search,json=functionWebSearch,proto3,oneof"`
}

type OutputItem_FunctionImageProcess struct {
	FunctionImageProcess *ItemFunctionImageProcess `protobuf:"bytes,6,opt,name=function_image_process,json=functionImageProcess,proto3,oneof"`
}

type OutputItem_FunctionMcpApprovalRequest struct {
	FunctionMcpApprovalRequest *ItemFunctionMcpApprovalRequest `protobuf:"bytes,7,opt,name=function_mcp_approval_request,json=functionMcpApprovalRequest,proto3,oneof"`
}

type OutputItem_FunctionMcpListTools struct {
	FunctionMcpListTools *ItemFunctionMcpListTools `protobuf:"bytes,8,opt,name=function_mcp_list_tools,json=functionMcpListTools,proto3,oneof"`
}

type OutputItem_FunctionMcpCall struct {
	FunctionMcpCall *ItemFunctionMcpCall `protobuf:"bytes,9,opt,name=function_mcp_call,json=functionMcpCall,proto3,oneof"`
}

func (*OutputItem_OutputMessage) isOutputItem_Union() {}

func (*OutputItem_FunctionToolCall) isOutputItem_Union() {}

func (*OutputItem_Reasoning) isOutputItem_Union() {}

func (*OutputItem_Transcription) isOutputItem_Union() {}

func (*OutputItem_FunctionWebSearch) isOutputItem_Union() {}

func (*OutputItem_FunctionImageProcess) isOutputItem_Union() {}

func (*OutputItem_FunctionMcpApprovalRequest) isOutputItem_Union() {}

func (*OutputItem_FunctionMcpListTools) isOutputItem_Union() {}

func (*OutputItem_FunctionMcpCall) isOutputItem_Union() {}

type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{86}
}

func (x *Error) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Error) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type IncompleteDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason        string         `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
	ContentFilter *ContentFilter `protobuf:"bytes,2,opt,name=content_filter,json=contentFilter,proto3,oneof" json:"content_filter,omitempty"`
}

func (x *IncompleteDetails) Reset() {
	*x = IncompleteDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncompleteDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncompleteDetails) ProtoMessage() {}

func (x *IncompleteDetails) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncompleteDetails.ProtoReflect.Descriptor instead.
func (*IncompleteDetails) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{87}
}

func (x *IncompleteDetails) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *IncompleteDetails) GetContentFilter() *ContentFilter {
	if x != nil {
		return x.ContentFilter
	}
	return nil
}

type ContentFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Details string `protobuf:"bytes,2,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *ContentFilter) Reset() {
	*x = ContentFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentFilter) ProtoMessage() {}

func (x *ContentFilter) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentFilter.ProtoReflect.Descriptor instead.
func (*ContentFilter) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{88}
}

func (x *ContentFilter) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ContentFilter) GetDetails() string {
	if x != nil {
		return x.Details
	}
	return ""
}

type Usage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InputTokens         int64                `protobuf:"varint,1,opt,name=input_tokens,json=inputTokens,proto3" json:"input_tokens"`    // @inject_tag: json:"input_tokens"
	OutputTokens        int64                `protobuf:"varint,2,opt,name=output_tokens,json=outputTokens,proto3" json:"output_tokens"` // @inject_tag: json:"output_tokens"
	TotalTokens         int64                `protobuf:"varint,3,opt,name=total_tokens,json=totalTokens,proto3" json:"total_tokens"`    // @inject_tag: json:"total_tokens"
	InputTokensDetails  *InputTokensDetails  `protobuf:"bytes,4,opt,name=input_tokens_details,json=inputTokensDetails,proto3" json:"input_tokens_details,omitempty"`
	OutputTokensDetails *OutputTokensDetails `protobuf:"bytes,5,opt,name=output_tokens_details,json=outputTokensDetails,proto3" json:"output_tokens_details,omitempty"`
}

func (x *Usage) Reset() {
	*x = Usage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Usage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Usage) ProtoMessage() {}

func (x *Usage) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Usage.ProtoReflect.Descriptor instead.
func (*Usage) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{89}
}

func (x *Usage) GetInputTokens() int64 {
	if x != nil {
		return x.InputTokens
	}
	return 0
}

func (x *Usage) GetOutputTokens() int64 {
	if x != nil {
		return x.OutputTokens
	}
	return 0
}

func (x *Usage) GetTotalTokens() int64 {
	if x != nil {
		return x.TotalTokens
	}
	return 0
}

func (x *Usage) GetInputTokensDetails() *InputTokensDetails {
	if x != nil {
		return x.InputTokensDetails
	}
	return nil
}

func (x *Usage) GetOutputTokensDetails() *OutputTokensDetails {
	if x != nil {
		return x.OutputTokensDetails
	}
	return nil
}

type InputTokensDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CachedTokens int64 `protobuf:"varint,1,opt,name=cached_tokens,json=cachedTokens,proto3" json:"cached_tokens"` // @inject_tag: json:"cached_tokens"
	AudioTokens  int64 `protobuf:"varint,2,opt,name=audio_tokens,json=audioTokens,proto3" json:"audio_tokens,omitempty"`
}

func (x *InputTokensDetails) Reset() {
	*x = InputTokensDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputTokensDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputTokensDetails) ProtoMessage() {}

func (x *InputTokensDetails) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputTokensDetails.ProtoReflect.Descriptor instead.
func (*InputTokensDetails) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{90}
}

func (x *InputTokensDetails) GetCachedTokens() int64 {
	if x != nil {
		return x.CachedTokens
	}
	return 0
}

func (x *InputTokensDetails) GetAudioTokens() int64 {
	if x != nil {
		return x.AudioTokens
	}
	return 0
}

type OutputTokensDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReasoningTokens int64 `protobuf:"varint,1,opt,name=reasoning_tokens,json=reasoningTokens,proto3" json:"reasoning_tokens"` // @inject_tag: json:"reasoning_tokens"
}

func (x *OutputTokensDetails) Reset() {
	*x = OutputTokensDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutputTokensDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutputTokensDetails) ProtoMessage() {}

func (x *OutputTokensDetails) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutputTokensDetails.ProtoReflect.Descriptor instead.
func (*OutputTokensDetails) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{91}
}

func (x *OutputTokensDetails) GetReasoningTokens() int64 {
	if x != nil {
		return x.ReasoningTokens
	}
	return 0
}

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Event:
	//
	//	*Event_Response
	//	*Event_Item
	//	*Event_ContentPart
	//	*Event_Text
	//	*Event_ReasoningPart
	//	*Event_ReasoningText
	//	*Event_FunctionCallArguments
	//	*Event_Error
	//	*Event_TranscriptionPart
	//	*Event_TranscriptionText
	//	*Event_ResponseWebSearchCallInProgress
	//	*Event_ResponseWebSearchCallSearching
	//	*Event_ResponseWebSearchCallCompleted
	//	*Event_ResponseAnnotationAdded
	//	*Event_ResponseImageProcessCallInProgress
	//	*Event_ResponseImageProcessCallProcessing
	//	*Event_ResponseImageProcessCallCompleted
	//	*Event_ResponseMcpListToolsInProgress
	//	*Event_ResponseMcpListToolsCompleted
	//	*Event_ResponseMcpCallInProgress
	//	*Event_ResponseMcpCallArgumentsDelta
	//	*Event_ResponseMcpCallArgumentsDone
	//	*Event_ResponseMcpCallCompleted
	//	*Event_ResponseMcpCallFailed
	//	*Event_ResponseMcpApprovalRequest
	Event isEvent_Event `protobuf_oneof:"event"`
}

func (e *Event) Reset() {
	*e = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(e))
		ms.StoreMessageInfo(mi)
	}
}

func (e *Event) String() string {
	return protoimpl.X.MessageStringOf(e)
}

func (*Event) ProtoMessage() {}

func (e *Event) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && e != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(e))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(e)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{92}
}

func (e *Event) GetEvent() isEvent_Event {
	if e != nil {
		return e.Event
	}
	return nil
}

func (e *Event) GetResponse() *ResponseEvent {
	if x, ok := e.GetEvent().(*Event_Response); ok {
		return x.Response
	}
	return nil
}

func (e *Event) GetItem() *ItemEvent {
	if x, ok := e.GetEvent().(*Event_Item); ok {
		return x.Item
	}
	return nil
}

func (e *Event) GetContentPart() *ContentPartEvent {
	if x, ok := e.GetEvent().(*Event_ContentPart); ok {
		return x.ContentPart
	}
	return nil
}

func (e *Event) GetText() *OutputTextEvent {
	if x, ok := e.GetEvent().(*Event_Text); ok {
		return x.Text
	}
	return nil
}

func (e *Event) GetReasoningPart() *ReasoningSummaryPartEvent {
	if x, ok := e.GetEvent().(*Event_ReasoningPart); ok {
		return x.ReasoningPart
	}
	return nil
}

func (e *Event) GetReasoningText() *ReasoningSummaryTextEvent {
	if x, ok := e.GetEvent().(*Event_ReasoningText); ok {
		return x.ReasoningText
	}
	return nil
}

func (e *Event) GetFunctionCallArguments() *FunctionCallArgumentsEvent {
	if x, ok := e.GetEvent().(*Event_FunctionCallArguments); ok {
		return x.FunctionCallArguments
	}
	return nil
}

func (e *Event) GetError() *ErrorEvent {
	if x, ok := e.GetEvent().(*Event_Error); ok {
		return x.Error
	}
	return nil
}

func (e *Event) GetTranscriptionPart() *TranscriptionPartEvent {
	if x, ok := e.GetEvent().(*Event_TranscriptionPart); ok {
		return x.TranscriptionPart
	}
	return nil
}

func (e *Event) GetTranscriptionText() *TranscriptionTextEvent {
	if x, ok := e.GetEvent().(*Event_TranscriptionText); ok {
		return x.TranscriptionText
	}
	return nil
}

func (e *Event) GetResponseWebSearchCallInProgress() *ResponseWebSearchCallInProgressEvent {
	if x, ok := e.GetEvent().(*Event_ResponseWebSearchCallInProgress); ok {
		return x.ResponseWebSearchCallInProgress
	}
	return nil
}

func (e *Event) GetResponseWebSearchCallSearching() *ResponseWebSearchCallSearchingEvent {
	if x, ok := e.GetEvent().(*Event_ResponseWebSearchCallSearching); ok {
		return x.ResponseWebSearchCallSearching
	}
	return nil
}

func (e *Event) GetResponseWebSearchCallCompleted() *ResponseWebSearchCallCompletedEvent {
	if x, ok := e.GetEvent().(*Event_ResponseWebSearchCallCompleted); ok {
		return x.ResponseWebSearchCallCompleted
	}
	return nil
}

func (e *Event) GetResponseAnnotationAdded() *ResponseAnnotationAddedEvent {
	if x, ok := e.GetEvent().(*Event_ResponseAnnotationAdded); ok {
		return x.ResponseAnnotationAdded
	}
	return nil
}

func (e *Event) GetResponseImageProcessCallInProgress() *ResponseImageProcessCallInProgressEvent {
	if x, ok := e.GetEvent().(*Event_ResponseImageProcessCallInProgress); ok {
		return x.ResponseImageProcessCallInProgress
	}
	return nil
}

func (e *Event) GetResponseImageProcessCallProcessing() *ResponseImageProcessCallProcessingEvent {
	if x, ok := e.GetEvent().(*Event_ResponseImageProcessCallProcessing); ok {
		return x.ResponseImageProcessCallProcessing
	}
	return nil
}

func (e *Event) GetResponseImageProcessCallCompleted() *ResponseImageProcessCallCompletedEvent {
	if x, ok := e.GetEvent().(*Event_ResponseImageProcessCallCompleted); ok {
		return x.ResponseImageProcessCallCompleted
	}
	return nil
}

func (e *Event) GetResponseMcpListToolsInProgress() *ResponseMcpListToolsInProgressEvent {
	if x, ok := e.GetEvent().(*Event_ResponseMcpListToolsInProgress); ok {
		return x.ResponseMcpListToolsInProgress
	}
	return nil
}

func (e *Event) GetResponseMcpListToolsCompleted() *ResponseMcpListToolsCompletedEvent {
	if x, ok := e.GetEvent().(*Event_ResponseMcpListToolsCompleted); ok {
		return x.ResponseMcpListToolsCompleted
	}
	return nil
}

func (e *Event) GetResponseMcpCallInProgress() *ResponseMcpCallInProgressEvent {
	if x, ok := e.GetEvent().(*Event_ResponseMcpCallInProgress); ok {
		return x.ResponseMcpCallInProgress
	}
	return nil
}

func (e *Event) GetResponseMcpCallArgumentsDelta() *ResponseMcpCallArgumentsDeltaEvent {
	if x, ok := e.GetEvent().(*Event_ResponseMcpCallArgumentsDelta); ok {
		return x.ResponseMcpCallArgumentsDelta
	}
	return nil
}

func (e *Event) GetResponseMcpCallArgumentsDone() *ResponseMcpCallArgumentsDoneEvent {
	if x, ok := e.GetEvent().(*Event_ResponseMcpCallArgumentsDone); ok {
		return x.ResponseMcpCallArgumentsDone
	}
	return nil
}

func (e *Event) GetResponseMcpCallCompleted() *ResponseMcpCallCompletedEvent {
	if x, ok := e.GetEvent().(*Event_ResponseMcpCallCompleted); ok {
		return x.ResponseMcpCallCompleted
	}
	return nil
}

func (e *Event) GetResponseMcpCallFailed() *ResponseMcpCallFailedEvent {
	if x, ok := e.GetEvent().(*Event_ResponseMcpCallFailed); ok {
		return x.ResponseMcpCallFailed
	}
	return nil
}

func (e *Event) GetResponseMcpApprovalRequest() *ResponseMcpApprovalRequestEvent {
	if x, ok := e.GetEvent().(*Event_ResponseMcpApprovalRequest); ok {
		return x.ResponseMcpApprovalRequest
	}
	return nil
}

type isEvent_Event interface {
	isEvent_Event()
}

type Event_Response struct {
	Response *ResponseEvent `protobuf:"bytes,1,opt,name=response,proto3,oneof"` // .created .in_progress .completed .failed .incomplete
}

type Event_Item struct {
	Item *ItemEvent `protobuf:"bytes,2,opt,name=item,proto3,oneof"` // .added .done
}

type Event_ContentPart struct {
	ContentPart *ContentPartEvent `protobuf:"bytes,3,opt,name=content_part,json=contentPart,proto3,oneof"` // .added .done
}

type Event_Text struct {
	Text *OutputTextEvent `protobuf:"bytes,4,opt,name=text,proto3,oneof"` // .delta .done
}

type Event_ReasoningPart struct {
	ReasoningPart *ReasoningSummaryPartEvent `protobuf:"bytes,5,opt,name=reasoning_part,json=reasoningPart,proto3,oneof"` // .added .done
}

type Event_ReasoningText struct {
	ReasoningText *ReasoningSummaryTextEvent `protobuf:"bytes,6,opt,name=reasoning_text,json=reasoningText,proto3,oneof"` //.delta.done
}

type Event_FunctionCallArguments struct {
	FunctionCallArguments *FunctionCallArgumentsEvent `protobuf:"bytes,7,opt,name=function_call_arguments,json=functionCallArguments,proto3,oneof"` // .delta .done
}

type Event_Error struct {
	Error *ErrorEvent `protobuf:"bytes,8,opt,name=error,proto3,oneof"`
}

type Event_TranscriptionPart struct {
	TranscriptionPart *TranscriptionPartEvent `protobuf:"bytes,9,opt,name=transcription_part,json=transcriptionPart,proto3,oneof"` //.delta.done
}

type Event_TranscriptionText struct {
	TranscriptionText *TranscriptionTextEvent `protobuf:"bytes,10,opt,name=transcription_text,json=transcriptionText,proto3,oneof"` //.delta.done
}

type Event_ResponseWebSearchCallInProgress struct {
	ResponseWebSearchCallInProgress *ResponseWebSearchCallInProgressEvent `protobuf:"bytes,11,opt,name=response_web_search_call_in_progress,json=responseWebSearchCallInProgress,proto3,oneof"`
}

type Event_ResponseWebSearchCallSearching struct {
	ResponseWebSearchCallSearching *ResponseWebSearchCallSearchingEvent `protobuf:"bytes,12,opt,name=response_web_search_call_searching,json=responseWebSearchCallSearching,proto3,oneof"`
}

type Event_ResponseWebSearchCallCompleted struct {
	ResponseWebSearchCallCompleted *ResponseWebSearchCallCompletedEvent `protobuf:"bytes,13,opt,name=response_web_search_call_completed,json=responseWebSearchCallCompleted,proto3,oneof"`
}

type Event_ResponseAnnotationAdded struct {
	ResponseAnnotationAdded *ResponseAnnotationAddedEvent `protobuf:"bytes,14,opt,name=response_annotation_added,json=responseAnnotationAdded,proto3,oneof"`
}

type Event_ResponseImageProcessCallInProgress struct {
	ResponseImageProcessCallInProgress *ResponseImageProcessCallInProgressEvent `protobuf:"bytes,15,opt,name=response_image_process_call_in_progress,json=responseImageProcessCallInProgress,proto3,oneof"`
}

type Event_ResponseImageProcessCallProcessing struct {
	ResponseImageProcessCallProcessing *ResponseImageProcessCallProcessingEvent `protobuf:"bytes,16,opt,name=response_image_process_call_processing,json=responseImageProcessCallProcessing,proto3,oneof"`
}

type Event_ResponseImageProcessCallCompleted struct {
	ResponseImageProcessCallCompleted *ResponseImageProcessCallCompletedEvent `protobuf:"bytes,17,opt,name=response_image_process_call_completed,json=responseImageProcessCallCompleted,proto3,oneof"`
}

type Event_ResponseMcpListToolsInProgress struct {
	ResponseMcpListToolsInProgress *ResponseMcpListToolsInProgressEvent `protobuf:"bytes,18,opt,name=response_mcp_list_tools_in_progress,json=responseMcpListToolsInProgress,proto3,oneof"`
}

type Event_ResponseMcpListToolsCompleted struct {
	ResponseMcpListToolsCompleted *ResponseMcpListToolsCompletedEvent `protobuf:"bytes,19,opt,name=response_mcp_list_tools_completed,json=responseMcpListToolsCompleted,proto3,oneof"`
}

type Event_ResponseMcpCallInProgress struct {
	ResponseMcpCallInProgress *ResponseMcpCallInProgressEvent `protobuf:"bytes,20,opt,name=response_mcp_call_in_progress,json=responseMcpCallInProgress,proto3,oneof"`
}

type Event_ResponseMcpCallArgumentsDelta struct {
	ResponseMcpCallArgumentsDelta *ResponseMcpCallArgumentsDeltaEvent `protobuf:"bytes,21,opt,name=response_mcp_call_arguments_delta,json=responseMcpCallArgumentsDelta,proto3,oneof"`
}

type Event_ResponseMcpCallArgumentsDone struct {
	ResponseMcpCallArgumentsDone *ResponseMcpCallArgumentsDoneEvent `protobuf:"bytes,22,opt,name=response_mcp_call_arguments_done,json=responseMcpCallArgumentsDone,proto3,oneof"`
}

type Event_ResponseMcpCallCompleted struct {
	ResponseMcpCallCompleted *ResponseMcpCallCompletedEvent `protobuf:"bytes,23,opt,name=response_mcp_call_completed,json=responseMcpCallCompleted,proto3,oneof"`
}

type Event_ResponseMcpCallFailed struct {
	ResponseMcpCallFailed *ResponseMcpCallFailedEvent `protobuf:"bytes,24,opt,name=response_mcp_call_failed,json=responseMcpCallFailed,proto3,oneof"`
}

type Event_ResponseMcpApprovalRequest struct {
	ResponseMcpApprovalRequest *ResponseMcpApprovalRequestEvent `protobuf:"bytes,25,opt,name=response_mcp_approval_request,json=responseMcpApprovalRequest,proto3,oneof"`
}

func (*Event_Response) isEvent_Event() {}

func (*Event_Item) isEvent_Event() {}

func (*Event_ContentPart) isEvent_Event() {}

func (*Event_Text) isEvent_Event() {}

func (*Event_ReasoningPart) isEvent_Event() {}

func (*Event_ReasoningText) isEvent_Event() {}

func (*Event_FunctionCallArguments) isEvent_Event() {}

func (*Event_Error) isEvent_Event() {}

func (*Event_TranscriptionPart) isEvent_Event() {}

func (*Event_TranscriptionText) isEvent_Event() {}

func (*Event_ResponseWebSearchCallInProgress) isEvent_Event() {}

func (*Event_ResponseWebSearchCallSearching) isEvent_Event() {}

func (*Event_ResponseWebSearchCallCompleted) isEvent_Event() {}

func (*Event_ResponseAnnotationAdded) isEvent_Event() {}

func (*Event_ResponseImageProcessCallInProgress) isEvent_Event() {}

func (*Event_ResponseImageProcessCallProcessing) isEvent_Event() {}

func (*Event_ResponseImageProcessCallCompleted) isEvent_Event() {}

func (*Event_ResponseMcpListToolsInProgress) isEvent_Event() {}

func (*Event_ResponseMcpListToolsCompleted) isEvent_Event() {}

func (*Event_ResponseMcpCallInProgress) isEvent_Event() {}

func (*Event_ResponseMcpCallArgumentsDelta) isEvent_Event() {}

func (*Event_ResponseMcpCallArgumentsDone) isEvent_Event() {}

func (*Event_ResponseMcpCallCompleted) isEvent_Event() {}

func (*Event_ResponseMcpCallFailed) isEvent_Event() {}

func (*Event_ResponseMcpApprovalRequest) isEvent_Event() {}

type ResponseMcpApprovalRequestEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                       EventType_Enum                  `protobuf:"varint,1,opt,name=type,proto3,enum=responses.EventType_Enum" json:"type,omitempty"`
	FunctionMcpApprovalRequest *ItemFunctionMcpApprovalRequest `protobuf:"bytes,2,opt,name=function_mcp_approval_request,json=functionMcpApprovalRequest,proto3" json:"function_mcp_approval_request,omitempty"`
	OutputIndex                int64                           `protobuf:"varint,3,opt,name=output_index,json=outputIndex,proto3" json:"output_index,omitempty"`
	SequenceNumber             int64                           `protobuf:"varint,4,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number"` // @inject_tag: json:"sequence_number"
}

func (x *ResponseMcpApprovalRequestEvent) Reset() {
	*x = ResponseMcpApprovalRequestEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseMcpApprovalRequestEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseMcpApprovalRequestEvent) ProtoMessage() {}

func (x *ResponseMcpApprovalRequestEvent) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseMcpApprovalRequestEvent.ProtoReflect.Descriptor instead.
func (*ResponseMcpApprovalRequestEvent) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{93}
}

func (x *ResponseMcpApprovalRequestEvent) GetType() EventType_Enum {
	if x != nil {
		return x.Type
	}
	return EventType_unspecified
}

func (x *ResponseMcpApprovalRequestEvent) GetFunctionMcpApprovalRequest() *ItemFunctionMcpApprovalRequest {
	if x != nil {
		return x.FunctionMcpApprovalRequest
	}
	return nil
}

func (x *ResponseMcpApprovalRequestEvent) GetOutputIndex() int64 {
	if x != nil {
		return x.OutputIndex
	}
	return 0
}

func (x *ResponseMcpApprovalRequestEvent) GetSequenceNumber() int64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

type ResponseWebSearchCallInProgressEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type           EventType_Enum `protobuf:"varint,1,opt,name=type,proto3,enum=responses.EventType_Enum" json:"type,omitempty"`
	ItemId         string         `protobuf:"bytes,2,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	OutputIndex    int64          `protobuf:"varint,3,opt,name=output_index,json=outputIndex,proto3" json:"output_index,omitempty"`
	SequenceNumber int64          `protobuf:"varint,4,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number"` // @inject_tag: json:"sequence_number"
}

func (x *ResponseWebSearchCallInProgressEvent) Reset() {
	*x = ResponseWebSearchCallInProgressEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseWebSearchCallInProgressEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseWebSearchCallInProgressEvent) ProtoMessage() {}

func (x *ResponseWebSearchCallInProgressEvent) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseWebSearchCallInProgressEvent.ProtoReflect.Descriptor instead.
func (*ResponseWebSearchCallInProgressEvent) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{94}
}

func (x *ResponseWebSearchCallInProgressEvent) GetType() EventType_Enum {
	if x != nil {
		return x.Type
	}
	return EventType_unspecified
}

func (x *ResponseWebSearchCallInProgressEvent) GetItemId() string {
	if x != nil {
		return x.ItemId
	}
	return ""
}

func (x *ResponseWebSearchCallInProgressEvent) GetOutputIndex() int64 {
	if x != nil {
		return x.OutputIndex
	}
	return 0
}

func (x *ResponseWebSearchCallInProgressEvent) GetSequenceNumber() int64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

type ResponseWebSearchCallSearchingEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type           EventType_Enum `protobuf:"varint,1,opt,name=type,proto3,enum=responses.EventType_Enum" json:"type,omitempty"`
	ItemId         string         `protobuf:"bytes,2,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	OutputIndex    int64          `protobuf:"varint,3,opt,name=output_index,json=outputIndex,proto3" json:"output_index,omitempty"`
	SequenceNumber int64          `protobuf:"varint,4,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number"` // @inject_tag: json:"sequence_number"
}

func (x *ResponseWebSearchCallSearchingEvent) Reset() {
	*x = ResponseWebSearchCallSearchingEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseWebSearchCallSearchingEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseWebSearchCallSearchingEvent) ProtoMessage() {}

func (x *ResponseWebSearchCallSearchingEvent) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseWebSearchCallSearchingEvent.ProtoReflect.Descriptor instead.
func (*ResponseWebSearchCallSearchingEvent) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{95}
}

func (x *ResponseWebSearchCallSearchingEvent) GetType() EventType_Enum {
	if x != nil {
		return x.Type
	}
	return EventType_unspecified
}

func (x *ResponseWebSearchCallSearchingEvent) GetItemId() string {
	if x != nil {
		return x.ItemId
	}
	return ""
}

func (x *ResponseWebSearchCallSearchingEvent) GetOutputIndex() int64 {
	if x != nil {
		return x.OutputIndex
	}
	return 0
}

func (x *ResponseWebSearchCallSearchingEvent) GetSequenceNumber() int64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

type ResponseWebSearchCallCompletedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type           EventType_Enum `protobuf:"varint,1,opt,name=type,proto3,enum=responses.EventType_Enum" json:"type,omitempty"`
	ItemId         string         `protobuf:"bytes,2,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	OutputIndex    int64          `protobuf:"varint,3,opt,name=output_index,json=outputIndex,proto3" json:"output_index,omitempty"`
	SequenceNumber int64          `protobuf:"varint,4,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number"` // @inject_tag: json:"sequence_number"
}

func (x *ResponseWebSearchCallCompletedEvent) Reset() {
	*x = ResponseWebSearchCallCompletedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseWebSearchCallCompletedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseWebSearchCallCompletedEvent) ProtoMessage() {}

func (x *ResponseWebSearchCallCompletedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseWebSearchCallCompletedEvent.ProtoReflect.Descriptor instead.
func (*ResponseWebSearchCallCompletedEvent) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{96}
}

func (x *ResponseWebSearchCallCompletedEvent) GetType() EventType_Enum {
	if x != nil {
		return x.Type
	}
	return EventType_unspecified
}

func (x *ResponseWebSearchCallCompletedEvent) GetItemId() string {
	if x != nil {
		return x.ItemId
	}
	return ""
}

func (x *ResponseWebSearchCallCompletedEvent) GetOutputIndex() int64 {
	if x != nil {
		return x.OutputIndex
	}
	return 0
}

func (x *ResponseWebSearchCallCompletedEvent) GetSequenceNumber() int64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

type ResponseImageProcessAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type           string  `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	ResultImageUrl *string `protobuf:"bytes,3,opt,name=result_image_url,json=resultImageUrl,proto3,oneof" json:"result_image_url,omitempty"`
}

func (x *ResponseImageProcessAction) Reset() {
	*x = ResponseImageProcessAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseImageProcessAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseImageProcessAction) ProtoMessage() {}

func (x *ResponseImageProcessAction) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseImageProcessAction.ProtoReflect.Descriptor instead.
func (*ResponseImageProcessAction) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{97}
}

func (x *ResponseImageProcessAction) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ResponseImageProcessAction) GetResultImageUrl() string {
	if x != nil && x.ResultImageUrl != nil {
		return *x.ResultImageUrl
	}
	return ""
}

type ResponseImageProcessPointArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageIndex int32  `protobuf:"varint,1,opt,name=image_index,json=imageIndex,proto3" json:"image_index"` // @inject_tag: json:"image_index"
	Points     string `protobuf:"bytes,2,opt,name=points,proto3" json:"points,omitempty"`
	DrawLine   bool   `protobuf:"varint,3,opt,name=drawLine,proto3" json:"draw_line"` // @inject_tag: json:"draw_line"
}

func (x *ResponseImageProcessPointArgs) Reset() {
	*x = ResponseImageProcessPointArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseImageProcessPointArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseImageProcessPointArgs) ProtoMessage() {}

func (x *ResponseImageProcessPointArgs) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseImageProcessPointArgs.ProtoReflect.Descriptor instead.
func (*ResponseImageProcessPointArgs) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{98}
}

func (x *ResponseImageProcessPointArgs) GetImageIndex() int32 {
	if x != nil {
		return x.ImageIndex
	}
	return 0
}

func (x *ResponseImageProcessPointArgs) GetPoints() string {
	if x != nil {
		return x.Points
	}
	return ""
}

func (x *ResponseImageProcessPointArgs) GetDrawLine() bool {
	if x != nil {
		return x.DrawLine
	}
	return false
}

type ResponseImageProcessError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ResponseImageProcessError) Reset() {
	*x = ResponseImageProcessError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseImageProcessError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseImageProcessError) ProtoMessage() {}

func (x *ResponseImageProcessError) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseImageProcessError.ProtoReflect.Descriptor instead.
func (*ResponseImageProcessError) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{99}
}

func (x *ResponseImageProcessError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ResponseImageProcessGroundingArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageIndex int32  `protobuf:"varint,1,opt,name=image_index,json=imageIndex,proto3" json:"image_index"` // @inject_tag: json:"image_index"
	BboxStr    string `protobuf:"bytes,2,opt,name=bbox_str,json=bboxStr,proto3" json:"bbox_str,omitempty"`
	Crop       bool   `protobuf:"varint,3,opt,name=crop,proto3" json:"crop"` // @inject_tag: json:"crop"
}

func (x *ResponseImageProcessGroundingArgs) Reset() {
	*x = ResponseImageProcessGroundingArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseImageProcessGroundingArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseImageProcessGroundingArgs) ProtoMessage() {}

func (x *ResponseImageProcessGroundingArgs) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseImageProcessGroundingArgs.ProtoReflect.Descriptor instead.
func (*ResponseImageProcessGroundingArgs) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{100}
}

func (x *ResponseImageProcessGroundingArgs) GetImageIndex() int32 {
	if x != nil {
		return x.ImageIndex
	}
	return 0
}

func (x *ResponseImageProcessGroundingArgs) GetBboxStr() string {
	if x != nil {
		return x.BboxStr
	}
	return ""
}

func (x *ResponseImageProcessGroundingArgs) GetCrop() bool {
	if x != nil {
		return x.Crop
	}
	return false
}

type ResponseImageProcessRotateArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageIndex int32 `protobuf:"varint,1,opt,name=image_index,json=imageIndex,proto3" json:"image_index"` // @inject_tag: json:"image_index"
	Degree     int32 `protobuf:"varint,2,opt,name=degree,proto3" json:"degree"`                           // @inject_tag: json:"degree"
}

func (x *ResponseImageProcessRotateArgs) Reset() {
	*x = ResponseImageProcessRotateArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseImageProcessRotateArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseImageProcessRotateArgs) ProtoMessage() {}

func (x *ResponseImageProcessRotateArgs) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseImageProcessRotateArgs.ProtoReflect.Descriptor instead.
func (*ResponseImageProcessRotateArgs) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{101}
}

func (x *ResponseImageProcessRotateArgs) GetImageIndex() int32 {
	if x != nil {
		return x.ImageIndex
	}
	return 0
}

func (x *ResponseImageProcessRotateArgs) GetDegree() int32 {
	if x != nil {
		return x.Degree
	}
	return 0
}

type ResponseImageProcessZoomArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageIndex int32   `protobuf:"varint,1,opt,name=image_index,json=imageIndex,proto3" json:"image_index"` // @inject_tag: json:"image_index"
	BboxStr    string  `protobuf:"bytes,2,opt,name=bbox_str,json=bboxStr,proto3" json:"bbox_str,omitempty"`
	Scale      float64 `protobuf:"fixed64,3,opt,name=scale,proto3" json:"scale"` // @inject_tag: json:"scale"
}

func (x *ResponseImageProcessZoomArgs) Reset() {
	*x = ResponseImageProcessZoomArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseImageProcessZoomArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseImageProcessZoomArgs) ProtoMessage() {}

func (x *ResponseImageProcessZoomArgs) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseImageProcessZoomArgs.ProtoReflect.Descriptor instead.
func (*ResponseImageProcessZoomArgs) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{102}
}

func (x *ResponseImageProcessZoomArgs) GetImageIndex() int32 {
	if x != nil {
		return x.ImageIndex
	}
	return 0
}

func (x *ResponseImageProcessZoomArgs) GetBboxStr() string {
	if x != nil {
		return x.BboxStr
	}
	return ""
}

func (x *ResponseImageProcessZoomArgs) GetScale() float64 {
	if x != nil {
		return x.Scale
	}
	return 0
}

type ResponseImageProcessArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Union:
	//
	//	*ResponseImageProcessArgs_PointArgs
	//	*ResponseImageProcessArgs_GroundingArgs
	//	*ResponseImageProcessArgs_RotateArgs
	//	*ResponseImageProcessArgs_ZoomArgs
	Union isResponseImageProcessArgs_Union `protobuf_oneof:"union"`
}

func (x *ResponseImageProcessArgs) Reset() {
	*x = ResponseImageProcessArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseImageProcessArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseImageProcessArgs) ProtoMessage() {}

func (x *ResponseImageProcessArgs) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseImageProcessArgs.ProtoReflect.Descriptor instead.
func (*ResponseImageProcessArgs) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{103}
}

func (m *ResponseImageProcessArgs) GetUnion() isResponseImageProcessArgs_Union {
	if m != nil {
		return m.Union
	}
	return nil
}

func (x *ResponseImageProcessArgs) GetPointArgs() *ResponseImageProcessPointArgs {
	if x, ok := x.GetUnion().(*ResponseImageProcessArgs_PointArgs); ok {
		return x.PointArgs
	}
	return nil
}

func (x *ResponseImageProcessArgs) GetGroundingArgs() *ResponseImageProcessGroundingArgs {
	if x, ok := x.GetUnion().(*ResponseImageProcessArgs_GroundingArgs); ok {
		return x.GroundingArgs
	}
	return nil
}

func (x *ResponseImageProcessArgs) GetRotateArgs() *ResponseImageProcessRotateArgs {
	if x, ok := x.GetUnion().(*ResponseImageProcessArgs_RotateArgs); ok {
		return x.RotateArgs
	}
	return nil
}

func (x *ResponseImageProcessArgs) GetZoomArgs() *ResponseImageProcessZoomArgs {
	if x, ok := x.GetUnion().(*ResponseImageProcessArgs_ZoomArgs); ok {
		return x.ZoomArgs
	}
	return nil
}

type isResponseImageProcessArgs_Union interface {
	isResponseImageProcessArgs_Union()
}

type ResponseImageProcessArgs_PointArgs struct {
	PointArgs *ResponseImageProcessPointArgs `protobuf:"bytes,1,opt,name=point_args,json=pointArgs,proto3,oneof"`
}

type ResponseImageProcessArgs_GroundingArgs struct {
	GroundingArgs *ResponseImageProcessGroundingArgs `protobuf:"bytes,2,opt,name=grounding_args,json=groundingArgs,proto3,oneof"`
}

type ResponseImageProcessArgs_RotateArgs struct {
	RotateArgs *ResponseImageProcessRotateArgs `protobuf:"bytes,3,opt,name=rotate_args,json=rotateArgs,proto3,oneof"`
}

type ResponseImageProcessArgs_ZoomArgs struct {
	ZoomArgs *ResponseImageProcessZoomArgs `protobuf:"bytes,4,opt,name=zoom_args,json=zoomArgs,proto3,oneof"`
}

func (*ResponseImageProcessArgs_PointArgs) isResponseImageProcessArgs_Union() {}

func (*ResponseImageProcessArgs_GroundingArgs) isResponseImageProcessArgs_Union() {}

func (*ResponseImageProcessArgs_RotateArgs) isResponseImageProcessArgs_Union() {}

func (*ResponseImageProcessArgs_ZoomArgs) isResponseImageProcessArgs_Union() {}

type ResponseImageProcessCallInProgressEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type           EventType_Enum `protobuf:"varint,1,opt,name=type,proto3,enum=responses.EventType_Enum" json:"type,omitempty"`
	ItemId         string         `protobuf:"bytes,2,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	OutputIndex    int64          `protobuf:"varint,3,opt,name=output_index,json=outputIndex,proto3" json:"output_index,omitempty"`
	SequenceNumber int64          `protobuf:"varint,4,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number"` // @inject_tag: json:"sequence_number"
}

func (x *ResponseImageProcessCallInProgressEvent) Reset() {
	*x = ResponseImageProcessCallInProgressEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseImageProcessCallInProgressEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseImageProcessCallInProgressEvent) ProtoMessage() {}

func (x *ResponseImageProcessCallInProgressEvent) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseImageProcessCallInProgressEvent.ProtoReflect.Descriptor instead.
func (*ResponseImageProcessCallInProgressEvent) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{104}
}

func (x *ResponseImageProcessCallInProgressEvent) GetType() EventType_Enum {
	if x != nil {
		return x.Type
	}
	return EventType_unspecified
}

func (x *ResponseImageProcessCallInProgressEvent) GetItemId() string {
	if x != nil {
		return x.ItemId
	}
	return ""
}

func (x *ResponseImageProcessCallInProgressEvent) GetOutputIndex() int64 {
	if x != nil {
		return x.OutputIndex
	}
	return 0
}

func (x *ResponseImageProcessCallInProgressEvent) GetSequenceNumber() int64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

type ResponseImageProcessCallProcessingEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type           EventType_Enum              `protobuf:"varint,1,opt,name=type,proto3,enum=responses.EventType_Enum" json:"type,omitempty"`
	ItemId         string                      `protobuf:"bytes,2,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	OutputIndex    int64                       `protobuf:"varint,3,opt,name=output_index,json=outputIndex,proto3" json:"output_index,omitempty"`
	SequenceNumber int64                       `protobuf:"varint,4,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number"` // @inject_tag: json:"sequence_number"
	Action         *ResponseImageProcessAction `protobuf:"bytes,5,opt,name=action,proto3" json:"action,omitempty"`
	Arguments      *ResponseImageProcessArgs   `protobuf:"bytes,6,opt,name=arguments,proto3" json:"arguments,omitempty"`
}

func (x *ResponseImageProcessCallProcessingEvent) Reset() {
	*x = ResponseImageProcessCallProcessingEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseImageProcessCallProcessingEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseImageProcessCallProcessingEvent) ProtoMessage() {}

func (x *ResponseImageProcessCallProcessingEvent) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseImageProcessCallProcessingEvent.ProtoReflect.Descriptor instead.
func (*ResponseImageProcessCallProcessingEvent) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{105}
}

func (x *ResponseImageProcessCallProcessingEvent) GetType() EventType_Enum {
	if x != nil {
		return x.Type
	}
	return EventType_unspecified
}

func (x *ResponseImageProcessCallProcessingEvent) GetItemId() string {
	if x != nil {
		return x.ItemId
	}
	return ""
}

func (x *ResponseImageProcessCallProcessingEvent) GetOutputIndex() int64 {
	if x != nil {
		return x.OutputIndex
	}
	return 0
}

func (x *ResponseImageProcessCallProcessingEvent) GetSequenceNumber() int64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *ResponseImageProcessCallProcessingEvent) GetAction() *ResponseImageProcessAction {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *ResponseImageProcessCallProcessingEvent) GetArguments() *ResponseImageProcessArgs {
	if x != nil {
		return x.Arguments
	}
	return nil
}

type ResponseImageProcessCallCompletedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type           EventType_Enum              `protobuf:"varint,1,opt,name=type,proto3,enum=responses.EventType_Enum" json:"type,omitempty"`
	ItemId         string                      `protobuf:"bytes,2,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	OutputIndex    int64                       `protobuf:"varint,3,opt,name=output_index,json=outputIndex,proto3" json:"output_index,omitempty"`
	SequenceNumber int64                       `protobuf:"varint,4,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number"` // @inject_tag: json:"sequence_number"
	Action         *ResponseImageProcessAction `protobuf:"bytes,5,opt,name=action,proto3" json:"action,omitempty"`
	Arguments      *ResponseImageProcessArgs   `protobuf:"bytes,6,opt,name=arguments,proto3" json:"arguments,omitempty"`
	Error          *ResponseImageProcessError  `protobuf:"bytes,7,opt,name=error,proto3,oneof" json:"error,omitempty"`
}

func (x *ResponseImageProcessCallCompletedEvent) Reset() {
	*x = ResponseImageProcessCallCompletedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseImageProcessCallCompletedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseImageProcessCallCompletedEvent) ProtoMessage() {}

func (x *ResponseImageProcessCallCompletedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseImageProcessCallCompletedEvent.ProtoReflect.Descriptor instead.
func (*ResponseImageProcessCallCompletedEvent) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{106}
}

func (x *ResponseImageProcessCallCompletedEvent) GetType() EventType_Enum {
	if x != nil {
		return x.Type
	}
	return EventType_unspecified
}

func (x *ResponseImageProcessCallCompletedEvent) GetItemId() string {
	if x != nil {
		return x.ItemId
	}
	return ""
}

func (x *ResponseImageProcessCallCompletedEvent) GetOutputIndex() int64 {
	if x != nil {
		return x.OutputIndex
	}
	return 0
}

func (x *ResponseImageProcessCallCompletedEvent) GetSequenceNumber() int64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *ResponseImageProcessCallCompletedEvent) GetAction() *ResponseImageProcessAction {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *ResponseImageProcessCallCompletedEvent) GetArguments() *ResponseImageProcessArgs {
	if x != nil {
		return x.Arguments
	}
	return nil
}

func (x *ResponseImageProcessCallCompletedEvent) GetError() *ResponseImageProcessError {
	if x != nil {
		return x.Error
	}
	return nil
}

type ResponseMcpListToolsInProgressEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type           EventType_Enum `protobuf:"varint,1,opt,name=type,proto3,enum=responses.EventType_Enum" json:"type,omitempty"`
	ItemId         string         `protobuf:"bytes,2,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	OutputIndex    int64          `protobuf:"varint,3,opt,name=output_index,json=outputIndex,proto3" json:"output_index,omitempty"`
	SequenceNumber int64          `protobuf:"varint,4,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number"` // @inject_tag: json:"sequence_number"
}

func (x *ResponseMcpListToolsInProgressEvent) Reset() {
	*x = ResponseMcpListToolsInProgressEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseMcpListToolsInProgressEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseMcpListToolsInProgressEvent) ProtoMessage() {}

func (x *ResponseMcpListToolsInProgressEvent) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseMcpListToolsInProgressEvent.ProtoReflect.Descriptor instead.
func (*ResponseMcpListToolsInProgressEvent) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{107}
}

func (x *ResponseMcpListToolsInProgressEvent) GetType() EventType_Enum {
	if x != nil {
		return x.Type
	}
	return EventType_unspecified
}

func (x *ResponseMcpListToolsInProgressEvent) GetItemId() string {
	if x != nil {
		return x.ItemId
	}
	return ""
}

func (x *ResponseMcpListToolsInProgressEvent) GetOutputIndex() int64 {
	if x != nil {
		return x.OutputIndex
	}
	return 0
}

func (x *ResponseMcpListToolsInProgressEvent) GetSequenceNumber() int64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

type ResponseMcpListToolsCompletedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type           EventType_Enum `protobuf:"varint,1,opt,name=type,proto3,enum=responses.EventType_Enum" json:"type,omitempty"`
	ItemId         string         `protobuf:"bytes,2,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	OutputIndex    int64          `protobuf:"varint,3,opt,name=output_index,json=outputIndex,proto3" json:"output_index,omitempty"`
	SequenceNumber int64          `protobuf:"varint,4,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number"` // @inject_tag: json:"sequence_number"
}

func (x *ResponseMcpListToolsCompletedEvent) Reset() {
	*x = ResponseMcpListToolsCompletedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseMcpListToolsCompletedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseMcpListToolsCompletedEvent) ProtoMessage() {}

func (x *ResponseMcpListToolsCompletedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseMcpListToolsCompletedEvent.ProtoReflect.Descriptor instead.
func (*ResponseMcpListToolsCompletedEvent) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{108}
}

func (x *ResponseMcpListToolsCompletedEvent) GetType() EventType_Enum {
	if x != nil {
		return x.Type
	}
	return EventType_unspecified
}

func (x *ResponseMcpListToolsCompletedEvent) GetItemId() string {
	if x != nil {
		return x.ItemId
	}
	return ""
}

func (x *ResponseMcpListToolsCompletedEvent) GetOutputIndex() int64 {
	if x != nil {
		return x.OutputIndex
	}
	return 0
}

func (x *ResponseMcpListToolsCompletedEvent) GetSequenceNumber() int64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

type ResponseMcpCallInProgressEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type           EventType_Enum `protobuf:"varint,1,opt,name=type,proto3,enum=responses.EventType_Enum" json:"type,omitempty"`
	ItemId         string         `protobuf:"bytes,2,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	OutputIndex    int64          `protobuf:"varint,3,opt,name=output_index,json=outputIndex,proto3" json:"output_index,omitempty"`
	SequenceNumber int64          `protobuf:"varint,4,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number"` // @inject_tag: json:"sequence_number"
}

func (x *ResponseMcpCallInProgressEvent) Reset() {
	*x = ResponseMcpCallInProgressEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseMcpCallInProgressEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseMcpCallInProgressEvent) ProtoMessage() {}

func (x *ResponseMcpCallInProgressEvent) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseMcpCallInProgressEvent.ProtoReflect.Descriptor instead.
func (*ResponseMcpCallInProgressEvent) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{109}
}

func (x *ResponseMcpCallInProgressEvent) GetType() EventType_Enum {
	if x != nil {
		return x.Type
	}
	return EventType_unspecified
}

func (x *ResponseMcpCallInProgressEvent) GetItemId() string {
	if x != nil {
		return x.ItemId
	}
	return ""
}

func (x *ResponseMcpCallInProgressEvent) GetOutputIndex() int64 {
	if x != nil {
		return x.OutputIndex
	}
	return 0
}

func (x *ResponseMcpCallInProgressEvent) GetSequenceNumber() int64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

type ResponseMcpCallArgumentsDeltaEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type           EventType_Enum `protobuf:"varint,1,opt,name=type,proto3,enum=responses.EventType_Enum" json:"type,omitempty"`
	ItemId         string         `protobuf:"bytes,2,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	OutputIndex    int64          `protobuf:"varint,3,opt,name=output_index,json=outputIndex,proto3" json:"output_index,omitempty"`
	SequenceNumber int64          `protobuf:"varint,4,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number"` // @inject_tag: json:"sequence_number"
	Delta          string         `protobuf:"bytes,5,opt,name=delta,proto3" json:"delta,omitempty"`
}

func (x *ResponseMcpCallArgumentsDeltaEvent) Reset() {
	*x = ResponseMcpCallArgumentsDeltaEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseMcpCallArgumentsDeltaEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseMcpCallArgumentsDeltaEvent) ProtoMessage() {}

func (x *ResponseMcpCallArgumentsDeltaEvent) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseMcpCallArgumentsDeltaEvent.ProtoReflect.Descriptor instead.
func (*ResponseMcpCallArgumentsDeltaEvent) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{110}
}

func (x *ResponseMcpCallArgumentsDeltaEvent) GetType() EventType_Enum {
	if x != nil {
		return x.Type
	}
	return EventType_unspecified
}

func (x *ResponseMcpCallArgumentsDeltaEvent) GetItemId() string {
	if x != nil {
		return x.ItemId
	}
	return ""
}

func (x *ResponseMcpCallArgumentsDeltaEvent) GetOutputIndex() int64 {
	if x != nil {
		return x.OutputIndex
	}
	return 0
}

func (x *ResponseMcpCallArgumentsDeltaEvent) GetSequenceNumber() int64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *ResponseMcpCallArgumentsDeltaEvent) GetDelta() string {
	if x != nil {
		return x.Delta
	}
	return ""
}

type ResponseMcpCallArgumentsDoneEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type           EventType_Enum `protobuf:"varint,1,opt,name=type,proto3,enum=responses.EventType_Enum" json:"type,omitempty"`
	ItemId         string         `protobuf:"bytes,2,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	OutputIndex    int64          `protobuf:"varint,3,opt,name=output_index,json=outputIndex,proto3" json:"output_index,omitempty"`
	SequenceNumber int64          `protobuf:"varint,4,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number"` // @inject_tag: json:"sequence_number"
	Arguments      string         `protobuf:"bytes,5,opt,name=arguments,proto3" json:"arguments,omitempty"`
}

func (x *ResponseMcpCallArgumentsDoneEvent) Reset() {
	*x = ResponseMcpCallArgumentsDoneEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseMcpCallArgumentsDoneEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseMcpCallArgumentsDoneEvent) ProtoMessage() {}

func (x *ResponseMcpCallArgumentsDoneEvent) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseMcpCallArgumentsDoneEvent.ProtoReflect.Descriptor instead.
func (*ResponseMcpCallArgumentsDoneEvent) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{111}
}

func (x *ResponseMcpCallArgumentsDoneEvent) GetType() EventType_Enum {
	if x != nil {
		return x.Type
	}
	return EventType_unspecified
}

func (x *ResponseMcpCallArgumentsDoneEvent) GetItemId() string {
	if x != nil {
		return x.ItemId
	}
	return ""
}

func (x *ResponseMcpCallArgumentsDoneEvent) GetOutputIndex() int64 {
	if x != nil {
		return x.OutputIndex
	}
	return 0
}

func (x *ResponseMcpCallArgumentsDoneEvent) GetSequenceNumber() int64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *ResponseMcpCallArgumentsDoneEvent) GetArguments() string {
	if x != nil {
		return x.Arguments
	}
	return ""
}

type ResponseMcpCallCompletedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type           EventType_Enum `protobuf:"varint,1,opt,name=type,proto3,enum=responses.EventType_Enum" json:"type,omitempty"`
	ItemId         string         `protobuf:"bytes,2,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	OutputIndex    int64          `protobuf:"varint,3,opt,name=output_index,json=outputIndex,proto3" json:"output_index,omitempty"`
	SequenceNumber int64          `protobuf:"varint,4,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number"` // @inject_tag: json:"sequence_number"
}

func (x *ResponseMcpCallCompletedEvent) Reset() {
	*x = ResponseMcpCallCompletedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseMcpCallCompletedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseMcpCallCompletedEvent) ProtoMessage() {}

func (x *ResponseMcpCallCompletedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseMcpCallCompletedEvent.ProtoReflect.Descriptor instead.
func (*ResponseMcpCallCompletedEvent) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{112}
}

func (x *ResponseMcpCallCompletedEvent) GetType() EventType_Enum {
	if x != nil {
		return x.Type
	}
	return EventType_unspecified
}

func (x *ResponseMcpCallCompletedEvent) GetItemId() string {
	if x != nil {
		return x.ItemId
	}
	return ""
}

func (x *ResponseMcpCallCompletedEvent) GetOutputIndex() int64 {
	if x != nil {
		return x.OutputIndex
	}
	return 0
}

func (x *ResponseMcpCallCompletedEvent) GetSequenceNumber() int64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

type ResponseMcpCallFailedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type           EventType_Enum `protobuf:"varint,1,opt,name=type,proto3,enum=responses.EventType_Enum" json:"type,omitempty"`
	ItemId         string         `protobuf:"bytes,2,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	OutputIndex    int64          `protobuf:"varint,3,opt,name=output_index,json=outputIndex,proto3" json:"output_index,omitempty"`
	SequenceNumber int64          `protobuf:"varint,4,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number"` // @inject_tag: json:"sequence_number"
}

func (x *ResponseMcpCallFailedEvent) Reset() {
	*x = ResponseMcpCallFailedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseMcpCallFailedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseMcpCallFailedEvent) ProtoMessage() {}

func (x *ResponseMcpCallFailedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseMcpCallFailedEvent.ProtoReflect.Descriptor instead.
func (*ResponseMcpCallFailedEvent) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{113}
}

func (x *ResponseMcpCallFailedEvent) GetType() EventType_Enum {
	if x != nil {
		return x.Type
	}
	return EventType_unspecified
}

func (x *ResponseMcpCallFailedEvent) GetItemId() string {
	if x != nil {
		return x.ItemId
	}
	return ""
}

func (x *ResponseMcpCallFailedEvent) GetOutputIndex() int64 {
	if x != nil {
		return x.OutputIndex
	}
	return 0
}

func (x *ResponseMcpCallFailedEvent) GetSequenceNumber() int64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

type ResponseEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type           EventType_Enum  `protobuf:"varint,1,opt,name=type,proto3,enum=responses.EventType_Enum" json:"type,omitempty"`
	Response       *ResponseObject `protobuf:"bytes,2,opt,name=response,proto3" json:"response,omitempty"`
	SequenceNumber int64           `protobuf:"varint,3,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number"` // @inject_tag: json:"sequence_number"
}

func (x *ResponseEvent) Reset() {
	*x = ResponseEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseEvent) ProtoMessage() {}

func (x *ResponseEvent) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseEvent.ProtoReflect.Descriptor instead.
func (*ResponseEvent) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{114}
}

func (x *ResponseEvent) GetType() EventType_Enum {
	if x != nil {
		return x.Type
	}
	return EventType_unspecified
}

func (x *ResponseEvent) GetResponse() *ResponseObject {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *ResponseEvent) GetSequenceNumber() int64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

type ItemEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type           EventType_Enum `protobuf:"varint,1,opt,name=type,proto3,enum=responses.EventType_Enum" json:"type,omitempty"`
	OutputIndex    int64          `protobuf:"varint,2,opt,name=output_index,json=outputIndex,proto3" json:"output_index"` // @inject_tag: json:"output_index"
	Item           *OutputItem    `protobuf:"bytes,3,opt,name=item,proto3" json:"item,omitempty"`
	SequenceNumber int64          `protobuf:"varint,4,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number"` // @inject_tag: json:"sequence_number"
}

func (x *ItemEvent) Reset() {
	*x = ItemEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemEvent) ProtoMessage() {}

func (x *ItemEvent) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemEvent.ProtoReflect.Descriptor instead.
func (*ItemEvent) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{115}
}

func (x *ItemEvent) GetType() EventType_Enum {
	if x != nil {
		return x.Type
	}
	return EventType_unspecified
}

func (x *ItemEvent) GetOutputIndex() int64 {
	if x != nil {
		return x.OutputIndex
	}
	return 0
}

func (x *ItemEvent) GetItem() *OutputItem {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *ItemEvent) GetSequenceNumber() int64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

type ContentPartEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type           EventType_Enum     `protobuf:"varint,1,opt,name=type,proto3,enum=responses.EventType_Enum" json:"type,omitempty"`
	ContentIndex   int64              `protobuf:"varint,2,opt,name=content_index,json=contentIndex,proto3" json:"content_index"` // @inject_tag: json:"content_index"
	ItemId         string             `protobuf:"bytes,3,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	OutputIndex    int64              `protobuf:"varint,4,opt,name=output_index,json=outputIndex,proto3" json:"output_index,omitempty"`
	Part           *OutputContentItem `protobuf:"bytes,5,opt,name=part,proto3" json:"part,omitempty"`
	SequenceNumber int64              `protobuf:"varint,6,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number"` // @inject_tag: json:"sequence_number"
}

func (x *ContentPartEvent) Reset() {
	*x = ContentPartEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentPartEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentPartEvent) ProtoMessage() {}

func (x *ContentPartEvent) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentPartEvent.ProtoReflect.Descriptor instead.
func (*ContentPartEvent) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{116}
}

func (x *ContentPartEvent) GetType() EventType_Enum {
	if x != nil {
		return x.Type
	}
	return EventType_unspecified
}

func (x *ContentPartEvent) GetContentIndex() int64 {
	if x != nil {
		return x.ContentIndex
	}
	return 0
}

func (x *ContentPartEvent) GetItemId() string {
	if x != nil {
		return x.ItemId
	}
	return ""
}

func (x *ContentPartEvent) GetOutputIndex() int64 {
	if x != nil {
		return x.OutputIndex
	}
	return 0
}

func (x *ContentPartEvent) GetPart() *OutputContentItem {
	if x != nil {
		return x.Part
	}
	return nil
}

func (x *ContentPartEvent) GetSequenceNumber() int64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

type OutputTextEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type           EventType_Enum `protobuf:"varint,1,opt,name=type,proto3,enum=responses.EventType_Enum" json:"type,omitempty"`
	ContentIndex   int64          `protobuf:"varint,2,opt,name=content_index,json=contentIndex,proto3" json:"content_index"` // @inject_tag: json:"content_index"
	Delta          *string        `protobuf:"bytes,3,opt,name=delta,proto3,oneof" json:"delta,omitempty"`
	ItemId         string         `protobuf:"bytes,4,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	OutputIndex    int64          `protobuf:"varint,5,opt,name=output_index,json=outputIndex,proto3" json:"output_index"` // @inject_tag: json:"output_index"
	Text           *string        `protobuf:"bytes,6,opt,name=text,proto3,oneof" json:"text,omitempty"`
	SequenceNumber int64          `protobuf:"varint,7,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number"` // @inject_tag: json:"sequence_number"
}

func (x *OutputTextEvent) Reset() {
	*x = OutputTextEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutputTextEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutputTextEvent) ProtoMessage() {}

func (x *OutputTextEvent) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutputTextEvent.ProtoReflect.Descriptor instead.
func (*OutputTextEvent) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{117}
}

func (x *OutputTextEvent) GetType() EventType_Enum {
	if x != nil {
		return x.Type
	}
	return EventType_unspecified
}

func (x *OutputTextEvent) GetContentIndex() int64 {
	if x != nil {
		return x.ContentIndex
	}
	return 0
}

func (x *OutputTextEvent) GetDelta() string {
	if x != nil && x.Delta != nil {
		return *x.Delta
	}
	return ""
}

func (x *OutputTextEvent) GetItemId() string {
	if x != nil {
		return x.ItemId
	}
	return ""
}

func (x *OutputTextEvent) GetOutputIndex() int64 {
	if x != nil {
		return x.OutputIndex
	}
	return 0
}

func (x *OutputTextEvent) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *OutputTextEvent) GetSequenceNumber() int64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

type ResponseAnnotationAddedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type            EventType_Enum `protobuf:"varint,1,opt,name=type,proto3,enum=responses.EventType_Enum" json:"type,omitempty"`
	ContentIndex    int64          `protobuf:"varint,2,opt,name=content_index,json=contentIndex,proto3" json:"content_index"` // @inject_tag: json:"content_index"
	Delta           *string        `protobuf:"bytes,3,opt,name=delta,proto3,oneof" json:"delta,omitempty"`
	ItemId          string         `protobuf:"bytes,4,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	OutputIndex     int64          `protobuf:"varint,5,opt,name=output_index,json=outputIndex,proto3" json:"output_index"` // @inject_tag: json:"output_index"
	Text            *string        `protobuf:"bytes,6,opt,name=text,proto3,oneof" json:"text,omitempty"`
	AnnotationIndex int64          `protobuf:"varint,7,opt,name=annotation_index,json=annotationIndex,proto3" json:"annotation_index,omitempty"` // @inject_tag json:"annotation_index"
	Annotation      *Annotation    `protobuf:"bytes,8,opt,name=annotation,proto3" json:"annotation,omitempty"`
	SequenceNumber  int64          `protobuf:"varint,9,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number"` // @inject_tag: json:"sequence_number"
}

func (x *ResponseAnnotationAddedEvent) Reset() {
	*x = ResponseAnnotationAddedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseAnnotationAddedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseAnnotationAddedEvent) ProtoMessage() {}

func (x *ResponseAnnotationAddedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseAnnotationAddedEvent.ProtoReflect.Descriptor instead.
func (*ResponseAnnotationAddedEvent) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{118}
}

func (x *ResponseAnnotationAddedEvent) GetType() EventType_Enum {
	if x != nil {
		return x.Type
	}
	return EventType_unspecified
}

func (x *ResponseAnnotationAddedEvent) GetContentIndex() int64 {
	if x != nil {
		return x.ContentIndex
	}
	return 0
}

func (x *ResponseAnnotationAddedEvent) GetDelta() string {
	if x != nil && x.Delta != nil {
		return *x.Delta
	}
	return ""
}

func (x *ResponseAnnotationAddedEvent) GetItemId() string {
	if x != nil {
		return x.ItemId
	}
	return ""
}

func (x *ResponseAnnotationAddedEvent) GetOutputIndex() int64 {
	if x != nil {
		return x.OutputIndex
	}
	return 0
}

func (x *ResponseAnnotationAddedEvent) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *ResponseAnnotationAddedEvent) GetAnnotationIndex() int64 {
	if x != nil {
		return x.AnnotationIndex
	}
	return 0
}

func (x *ResponseAnnotationAddedEvent) GetAnnotation() *Annotation {
	if x != nil {
		return x.Annotation
	}
	return nil
}

func (x *ResponseAnnotationAddedEvent) GetSequenceNumber() int64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

type ReasoningSummaryPartEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type           EventType_Enum        `protobuf:"varint,1,opt,name=type,proto3,enum=responses.EventType_Enum" json:"type,omitempty"`
	ItemId         string                `protobuf:"bytes,2,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	OutputIndex    int64                 `protobuf:"varint,3,opt,name=output_index,json=outputIndex,proto3" json:"output_index"`    // @inject_tag: json:"output_index"
	SummaryIndex   int64                 `protobuf:"varint,4,opt,name=summary_index,json=summaryIndex,proto3" json:"summary_index"` // @inject_tag: json:"summary_index"
	Part           *ReasoningSummaryPart `protobuf:"bytes,5,opt,name=part,proto3" json:"part,omitempty"`
	SequenceNumber int64                 `protobuf:"varint,6,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number"` // @inject_tag: json:"sequence_number"
}

func (x *ReasoningSummaryPartEvent) Reset() {
	*x = ReasoningSummaryPartEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReasoningSummaryPartEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReasoningSummaryPartEvent) ProtoMessage() {}

func (x *ReasoningSummaryPartEvent) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReasoningSummaryPartEvent.ProtoReflect.Descriptor instead.
func (*ReasoningSummaryPartEvent) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{119}
}

func (x *ReasoningSummaryPartEvent) GetType() EventType_Enum {
	if x != nil {
		return x.Type
	}
	return EventType_unspecified
}

func (x *ReasoningSummaryPartEvent) GetItemId() string {
	if x != nil {
		return x.ItemId
	}
	return ""
}

func (x *ReasoningSummaryPartEvent) GetOutputIndex() int64 {
	if x != nil {
		return x.OutputIndex
	}
	return 0
}

func (x *ReasoningSummaryPartEvent) GetSummaryIndex() int64 {
	if x != nil {
		return x.SummaryIndex
	}
	return 0
}

func (x *ReasoningSummaryPartEvent) GetPart() *ReasoningSummaryPart {
	if x != nil {
		return x.Part
	}
	return nil
}

func (x *ReasoningSummaryPartEvent) GetSequenceNumber() int64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

type ReasoningSummaryPart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type ContentItemType_Enum `protobuf:"varint,1,opt,name=type,proto3,enum=responses.ContentItemType_Enum" json:"type,omitempty"`
	Text string               `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *ReasoningSummaryPart) Reset() {
	*x = ReasoningSummaryPart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReasoningSummaryPart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReasoningSummaryPart) ProtoMessage() {}

func (x *ReasoningSummaryPart) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReasoningSummaryPart.ProtoReflect.Descriptor instead.
func (*ReasoningSummaryPart) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{120}
}

func (x *ReasoningSummaryPart) GetType() ContentItemType_Enum {
	if x != nil {
		return x.Type
	}
	return ContentItemType_unspecified
}

func (x *ReasoningSummaryPart) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type ReasoningSummaryTextEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type           EventType_Enum `protobuf:"varint,1,opt,name=type,proto3,enum=responses.EventType_Enum" json:"type,omitempty"`
	SummaryIndex   int64          `protobuf:"varint,2,opt,name=summary_index,json=summaryIndex,proto3" json:"summary_index"` // @inject_tag: json:"summary_index"
	Delta          *string        `protobuf:"bytes,3,opt,name=delta,proto3,oneof" json:"delta,omitempty"`
	ItemId         string         `protobuf:"bytes,4,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	OutputIndex    int64          `protobuf:"varint,5,opt,name=output_index,json=outputIndex,proto3" json:"output_index"` // @inject_tag: json:"output_index"
	Text           *string        `protobuf:"bytes,6,opt,name=text,proto3,oneof" json:"text,omitempty"`
	SequenceNumber int64          `protobuf:"varint,7,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number"` // @inject_tag: json:"sequence_number"
}

func (x *ReasoningSummaryTextEvent) Reset() {
	*x = ReasoningSummaryTextEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReasoningSummaryTextEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReasoningSummaryTextEvent) ProtoMessage() {}

func (x *ReasoningSummaryTextEvent) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReasoningSummaryTextEvent.ProtoReflect.Descriptor instead.
func (*ReasoningSummaryTextEvent) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{121}
}

func (x *ReasoningSummaryTextEvent) GetType() EventType_Enum {
	if x != nil {
		return x.Type
	}
	return EventType_unspecified
}

func (x *ReasoningSummaryTextEvent) GetSummaryIndex() int64 {
	if x != nil {
		return x.SummaryIndex
	}
	return 0
}

func (x *ReasoningSummaryTextEvent) GetDelta() string {
	if x != nil && x.Delta != nil {
		return *x.Delta
	}
	return ""
}

func (x *ReasoningSummaryTextEvent) GetItemId() string {
	if x != nil {
		return x.ItemId
	}
	return ""
}

func (x *ReasoningSummaryTextEvent) GetOutputIndex() int64 {
	if x != nil {
		return x.OutputIndex
	}
	return 0
}

func (x *ReasoningSummaryTextEvent) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *ReasoningSummaryTextEvent) GetSequenceNumber() int64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

type FunctionCallArgumentsEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type           EventType_Enum `protobuf:"varint,1,opt,name=type,proto3,enum=responses.EventType_Enum" json:"type,omitempty"`
	Delta          *string        `protobuf:"bytes,3,opt,name=delta,proto3,oneof" json:"delta,omitempty"`
	ItemId         string         `protobuf:"bytes,4,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	OutputIndex    int64          `protobuf:"varint,5,opt,name=output_index,json=outputIndex,proto3" json:"output_index"` // @inject_tag: json:"output_index"
	Arguments      *string        `protobuf:"bytes,6,opt,name=arguments,proto3,oneof" json:"arguments,omitempty"`
	SequenceNumber int64          `protobuf:"varint,7,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number"` // @inject_tag: json:"sequence_number"
}

func (x *FunctionCallArgumentsEvent) Reset() {
	*x = FunctionCallArgumentsEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FunctionCallArgumentsEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionCallArgumentsEvent) ProtoMessage() {}

func (x *FunctionCallArgumentsEvent) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionCallArgumentsEvent.ProtoReflect.Descriptor instead.
func (*FunctionCallArgumentsEvent) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{122}
}

func (x *FunctionCallArgumentsEvent) GetType() EventType_Enum {
	if x != nil {
		return x.Type
	}
	return EventType_unspecified
}

func (x *FunctionCallArgumentsEvent) GetDelta() string {
	if x != nil && x.Delta != nil {
		return *x.Delta
	}
	return ""
}

func (x *FunctionCallArgumentsEvent) GetItemId() string {
	if x != nil {
		return x.ItemId
	}
	return ""
}

func (x *FunctionCallArgumentsEvent) GetOutputIndex() int64 {
	if x != nil {
		return x.OutputIndex
	}
	return 0
}

func (x *FunctionCallArgumentsEvent) GetArguments() string {
	if x != nil && x.Arguments != nil {
		return *x.Arguments
	}
	return ""
}

func (x *FunctionCallArgumentsEvent) GetSequenceNumber() int64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

type TranscriptionPartEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type               EventType_Enum     `protobuf:"varint,1,opt,name=type,proto3,enum=responses.EventType_Enum" json:"type,omitempty"`
	ItemId             string             `protobuf:"bytes,2,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	OutputIndex        int64              `protobuf:"varint,3,opt,name=output_index,json=outputIndex,proto3" json:"output_index"`                      // @inject_tag: json:"output_index"
	TranscriptionIndex int64              `protobuf:"varint,4,opt,name=transcription_index,json=transcriptionIndex,proto3" json:"transcription_index"` // @inject_tag: json:"transcription_index"
	Part               *TranscriptionPart `protobuf:"bytes,5,opt,name=part,proto3" json:"part,omitempty"`
	SequenceNumber     int64              `protobuf:"varint,6,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number"` // @inject_tag: json:"sequence_number"
}

func (x *TranscriptionPartEvent) Reset() {
	*x = TranscriptionPartEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptionPartEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptionPartEvent) ProtoMessage() {}

func (x *TranscriptionPartEvent) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptionPartEvent.ProtoReflect.Descriptor instead.
func (*TranscriptionPartEvent) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{123}
}

func (x *TranscriptionPartEvent) GetType() EventType_Enum {
	if x != nil {
		return x.Type
	}
	return EventType_unspecified
}

func (x *TranscriptionPartEvent) GetItemId() string {
	if x != nil {
		return x.ItemId
	}
	return ""
}

func (x *TranscriptionPartEvent) GetOutputIndex() int64 {
	if x != nil {
		return x.OutputIndex
	}
	return 0
}

func (x *TranscriptionPartEvent) GetTranscriptionIndex() int64 {
	if x != nil {
		return x.TranscriptionIndex
	}
	return 0
}

func (x *TranscriptionPartEvent) GetPart() *TranscriptionPart {
	if x != nil {
		return x.Part
	}
	return nil
}

func (x *TranscriptionPartEvent) GetSequenceNumber() int64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

type TranscriptionTextEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type               EventType_Enum `protobuf:"varint,1,opt,name=type,proto3,enum=responses.EventType_Enum" json:"type,omitempty"`
	TranscriptionIndex int64          `protobuf:"varint,2,opt,name=transcription_index,json=transcriptionIndex,proto3" json:"transcription_index"` // @inject_tag: json:"transcription_index"
	Delta              *string        `protobuf:"bytes,3,opt,name=delta,proto3,oneof" json:"delta,omitempty"`
	ItemId             string         `protobuf:"bytes,4,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	OutputIndex        int64          `protobuf:"varint,5,opt,name=output_index,json=outputIndex,proto3" json:"output_index"` // @inject_tag: json:"output_index"
	Text               *string        `protobuf:"bytes,6,opt,name=text,proto3,oneof" json:"text,omitempty"`
	SequenceNumber     int64          `protobuf:"varint,7,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number"` // @inject_tag: json:"sequence_number"
	StartTime          int64          `protobuf:"varint,8,opt,name=start_time,json=startTime,proto3" json:"start_time"`                // @inject_tag: json:"start_time"
	EndTime            int64          `protobuf:"varint,9,opt,name=end_time,json=endTime,proto3" json:"end_time"`                      // @inject_tag: json:"end_time"
	Chunks             []*AudioChunk  `protobuf:"bytes,10,rep,name=chunks,proto3" json:"chunks,omitempty"`
}

func (x *TranscriptionTextEvent) Reset() {
	*x = TranscriptionTextEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptionTextEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptionTextEvent) ProtoMessage() {}

func (x *TranscriptionTextEvent) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptionTextEvent.ProtoReflect.Descriptor instead.
func (*TranscriptionTextEvent) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{124}
}

func (x *TranscriptionTextEvent) GetType() EventType_Enum {
	if x != nil {
		return x.Type
	}
	return EventType_unspecified
}

func (x *TranscriptionTextEvent) GetTranscriptionIndex() int64 {
	if x != nil {
		return x.TranscriptionIndex
	}
	return 0
}

func (x *TranscriptionTextEvent) GetDelta() string {
	if x != nil && x.Delta != nil {
		return *x.Delta
	}
	return ""
}

func (x *TranscriptionTextEvent) GetItemId() string {
	if x != nil {
		return x.ItemId
	}
	return ""
}

func (x *TranscriptionTextEvent) GetOutputIndex() int64 {
	if x != nil {
		return x.OutputIndex
	}
	return 0
}

func (x *TranscriptionTextEvent) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *TranscriptionTextEvent) GetSequenceNumber() int64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *TranscriptionTextEvent) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *TranscriptionTextEvent) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *TranscriptionTextEvent) GetChunks() []*AudioChunk {
	if x != nil {
		return x.Chunks
	}
	return nil
}

type ErrorEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type           EventType_Enum `protobuf:"varint,1,opt,name=type,proto3,enum=responses.EventType_Enum" json:"type,omitempty"`
	Code           *string        `protobuf:"bytes,2,opt,name=code,proto3,oneof" json:"code,omitempty"`
	Message        string         `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Param          *string        `protobuf:"bytes,4,opt,name=param,proto3,oneof" json:"param,omitempty"`
	SequenceNumber int64          `protobuf:"varint,5,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number"` // @inject_tag: json:"sequence_number"
}

func (x *ErrorEvent) Reset() {
	*x = ErrorEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorEvent) ProtoMessage() {}

func (x *ErrorEvent) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorEvent.ProtoReflect.Descriptor instead.
func (*ErrorEvent) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{125}
}

func (x *ErrorEvent) GetType() EventType_Enum {
	if x != nil {
		return x.Type
	}
	return EventType_unspecified
}

func (x *ErrorEvent) GetCode() string {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return ""
}

func (x *ErrorEvent) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ErrorEvent) GetParam() string {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return ""
}

func (x *ErrorEvent) GetSequenceNumber() int64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

type ResponsesCaching struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *CacheType_Enum `protobuf:"varint,1,opt,name=type,proto3,enum=responses.CacheType_Enum,oneof" json:"type,omitempty"`
}

func (x *ResponsesCaching) Reset() {
	*x = ResponsesCaching{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponsesCaching) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponsesCaching) ProtoMessage() {}

func (x *ResponsesCaching) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponsesCaching.ProtoReflect.Descriptor instead.
func (*ResponsesCaching) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{126}
}

func (x *ResponsesCaching) GetType() CacheType_Enum {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return CacheType_unspecified
}

type ResponsesText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Format *TextFormat `protobuf:"bytes,1,opt,name=format,proto3" json:"format,omitempty"`
}

func (x *ResponsesText) Reset() {
	*x = ResponsesText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponsesText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponsesText) ProtoMessage() {}

func (x *ResponsesText) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponsesText.ProtoReflect.Descriptor instead.
func (*ResponsesText) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{127}
}

func (x *ResponsesText) GetFormat() *TextFormat {
	if x != nil {
		return x.Format
	}
	return nil
}

type TextFormat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        TextType_Enum `protobuf:"varint,1,opt,name=type,proto3,enum=responses.TextType_Enum" json:"type,omitempty"`
	Schema      *Bytes        `protobuf:"bytes,2,opt,name=schema,proto3" json:"schema,omitempty"`
	Name        string        `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description *string       `protobuf:"bytes,4,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Strict      *bool         `protobuf:"varint,5,opt,name=strict,proto3,oneof" json:"strict,omitempty"`
}

func (x *TextFormat) Reset() {
	*x = TextFormat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextFormat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextFormat) ProtoMessage() {}

func (x *TextFormat) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextFormat.ProtoReflect.Descriptor instead.
func (*TextFormat) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{128}
}

func (x *TextFormat) GetType() TextType_Enum {
	if x != nil {
		return x.Type
	}
	return TextType_unspecified
}

func (x *TextFormat) GetSchema() *Bytes {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *TextFormat) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TextFormat) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *TextFormat) GetStrict() bool {
	if x != nil && x.Strict != nil {
		return *x.Strict
	}
	return false
}

type DeleteResponseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseId string `protobuf:"bytes,1,opt,name=response_id,json=responseId,proto3" json:"response_id" path:"response_id,required"` // @inject_tag: path:"response_id,required" json:"response_id"
}

func (x *DeleteResponseRequest) Reset() {
	*x = DeleteResponseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteResponseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteResponseRequest) ProtoMessage() {}

func (x *DeleteResponseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteResponseRequest.ProtoReflect.Descriptor instead.
func (*DeleteResponseRequest) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{129}
}

func (x *DeleteResponseRequest) GetResponseId() string {
	if x != nil {
		return x.ResponseId
	}
	return ""
}

type DeleteResponseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Object  ObjectType_Enum `protobuf:"varint,2,opt,name=object,proto3,enum=responses.ObjectType_Enum" json:"object,omitempty"`
	Deleted bool            `protobuf:"varint,3,opt,name=deleted,proto3" json:"deleted,omitempty"`
}

func (x *DeleteResponseResponse) Reset() {
	*x = DeleteResponseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteResponseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteResponseResponse) ProtoMessage() {}

func (x *DeleteResponseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteResponseResponse.ProtoReflect.Descriptor instead.
func (*DeleteResponseResponse) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{130}
}

func (x *DeleteResponseResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteResponseResponse) GetObject() ObjectType_Enum {
	if x != nil {
		return x.Object
	}
	return ObjectType_unspecified
}

func (x *DeleteResponseResponse) GetDeleted() bool {
	if x != nil {
		return x.Deleted
	}
	return false
}

type GetResponseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseId string `protobuf:"bytes,1,opt,name=response_id,json=responseId,proto3" json:"response_id,omitempty" path:"response_id,required"` // @inject_tag: path:"response_id,required"
}

func (x *GetResponseRequest) Reset() {
	*x = GetResponseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResponseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResponseRequest) ProtoMessage() {}

func (x *GetResponseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResponseRequest.ProtoReflect.Descriptor instead.
func (*GetResponseRequest) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{131}
}

func (x *GetResponseRequest) GetResponseId() string {
	if x != nil {
		return x.ResponseId
	}
	return ""
}

type ListInputItemsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseId string `protobuf:"bytes,1,opt,name=response_id,json=responseId,proto3" json:"response_id,omitempty" path:"response_id,required"` // @inject_tag: path:"response_id,required"
	// 可选 query 参数
	After   *string            `protobuf:"bytes,2,opt,name=after,proto3,oneof" json:"after,omitempty" query:"after,omitempty"`                                         // @inject_tag: query:"after,omitempty"
	Before  *string            `protobuf:"bytes,3,opt,name=before,proto3,oneof" json:"before,omitempty" query:"before,omitempty"`                                      // @inject_tag: query:"before,omitempty"
	Limit   *int32             `protobuf:"varint,4,opt,name=limit,proto3,oneof" json:"limit,omitempty" query:"limit,omitempty"`                                        // @inject_tag: query:"limit,omitempty"
	Order   *string            `protobuf:"bytes,5,opt,name=order,proto3,oneof" json:"order,omitempty" query:"order,omitempty"`                                         // @inject_tag: query:"order,omitempty"
	Include []IncludeType_Enum `protobuf:"varint,6,rep,packed,name=include,proto3,enum=responses.IncludeType_Enum" json:"include,omitempty" query:"include,omitempty"` // @inject_tag: query:"include,omitempty"
}

func (x *ListInputItemsRequest) Reset() {
	*x = ListInputItemsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInputItemsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInputItemsRequest) ProtoMessage() {}

func (x *ListInputItemsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInputItemsRequest.ProtoReflect.Descriptor instead.
func (*ListInputItemsRequest) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{132}
}

func (x *ListInputItemsRequest) GetResponseId() string {
	if x != nil {
		return x.ResponseId
	}
	return ""
}

func (x *ListInputItemsRequest) GetAfter() string {
	if x != nil && x.After != nil {
		return *x.After
	}
	return ""
}

func (x *ListInputItemsRequest) GetBefore() string {
	if x != nil && x.Before != nil {
		return *x.Before
	}
	return ""
}

func (x *ListInputItemsRequest) GetLimit() int32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *ListInputItemsRequest) GetOrder() string {
	if x != nil && x.Order != nil {
		return *x.Order
	}
	return ""
}

func (x *ListInputItemsRequest) GetInclude() []IncludeType_Enum {
	if x != nil {
		return x.Include
	}
	return nil
}

type ListInputItemsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Object  ObjectType_Enum `protobuf:"varint,1,opt,name=object,proto3,enum=responses.ObjectType_Enum" json:"object,omitempty"` // 固定为 "list"
	Data    []*InputItem    `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
	FirstId string          `protobuf:"bytes,3,opt,name=first_id,json=firstId,proto3" json:"first_id,omitempty"`
	LastId  string          `protobuf:"bytes,4,opt,name=last_id,json=lastId,proto3" json:"last_id,omitempty"`
	HasMore *bool           `protobuf:"varint,5,opt,name=has_more,json=hasMore,proto3,oneof" json:"has_more"` // @inject_tag: json:"has_more"
	model.HttpHeader
}

func (x *ListInputItemsResponse) Reset() {
	*x = ListInputItemsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInputItemsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInputItemsResponse) ProtoMessage() {}

func (x *ListInputItemsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInputItemsResponse.ProtoReflect.Descriptor instead.
func (*ListInputItemsResponse) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{133}
}

func (x *ListInputItemsResponse) GetObject() ObjectType_Enum {
	if x != nil {
		return x.Object
	}
	return ObjectType_unspecified
}

func (x *ListInputItemsResponse) GetData() []*InputItem {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ListInputItemsResponse) GetFirstId() string {
	if x != nil {
		return x.FirstId
	}
	return ""
}

func (x *ListInputItemsResponse) GetLastId() string {
	if x != nil {
		return x.LastId
	}
	return ""
}

func (x *ListInputItemsResponse) GetHasMore() bool {
	if x != nil && x.HasMore != nil {
		return *x.HasMore
	}
	return false
}

type AudioChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text      string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	StartTime int64  `protobuf:"varint,2,opt,name=start_time,json=startTime,proto3" json:"start_time"` // @inject_tag: json:"start_time"
	EndTime   int64  `protobuf:"varint,3,opt,name=end_time,json=endTime,proto3" json:"end_time"`       // @inject_tag: json:"end_time"
}

func (x *AudioChunk) Reset() {
	*x = AudioChunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_responses_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudioChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioChunk) ProtoMessage() {}

func (x *AudioChunk) ProtoReflect() protoreflect.Message {
	mi := &file_responses_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioChunk.ProtoReflect.Descriptor instead.
func (*AudioChunk) Descriptor() ([]byte, []int) {
	return file_responses_proto_rawDescGZIP(), []int{134}
}

func (x *AudioChunk) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *AudioChunk) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *AudioChunk) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

var File_responses_proto protoreflect.FileDescriptor

var file_responses_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x46, 0x0a, 0x14, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x69,
	0x65, 0x72, 0x22, 0x2e, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x61,
	0x75, 0x74, 0x6f, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x10, 0x02, 0x22, 0x46, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x54,
	0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2f, 0x0a, 0x04, 0x45, 0x6e, 0x75,
	0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x6f, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x22, 0x3b, 0x0a, 0x0e, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x29, 0x0a, 0x04,
	0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x75, 0x72, 0x6c, 0x5f, 0x63, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x01, 0x22, 0x63, 0x0a, 0x18, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x22, 0x47, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65,
	0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x7a, 0x6f, 0x6f, 0x6d, 0x10, 0x04, 0x22, 0x78, 0x0a, 0x0a,
	0x43, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x15, 0x0a, 0x03, 0x75, 0x72,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x88, 0x01,
	0x01, 0x12, 0x19, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x01, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x06,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x75, 0x72,
	0x6c, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xe8, 0x03, 0x0a, 0x0a, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45,
	0x6e, 0x75, 0x6d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72,
	0x6c, 0x12, 0x1e, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x55,
	0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x08, 0x73, 0x69, 0x74, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52,
	0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x3b, 0x0a, 0x0b, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73,
	0x2e, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x48, 0x04, 0x52, 0x0a, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52,
	0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0d, 0x66, 0x72, 0x65, 0x73, 0x68, 0x6e, 0x65, 0x73, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6c, 0x6f, 0x67, 0x6f,
	0x5f, 0x75, 0x72, 0x6c, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f,
	0x75, 0x72, 0x6c, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x66, 0x72, 0x65, 0x73, 0x68, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x22, 0x93, 0x02, 0x0a, 0x08, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x22, 0x86,
	0x02, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x66, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x10,
	0x04, 0x12, 0x12, 0x0a, 0x0e, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x77, 0x65, 0x62, 0x5f,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x10, 0x07, 0x12, 0x11, 0x0a,
	0x0d, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x10, 0x08,
	0x12, 0x18, 0x0a, 0x14, 0x6d, 0x63, 0x70, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x09, 0x12, 0x19, 0x0a, 0x15, 0x6d, 0x63,
	0x70, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x10, 0x0a, 0x12, 0x12, 0x0a, 0x0e, 0x6d, 0x63, 0x70, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x10, 0x0b, 0x12, 0x0c, 0x0a, 0x08, 0x6d, 0x63, 0x70,
	0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x10, 0x0c, 0x22, 0x5a, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x22, 0x4b, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f,
	0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12,
	0x08, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70,
	0x65, 0x72, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x10, 0x04, 0x22, 0x3d, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x74,
	0x65, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x23, 0x0a,
	0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x08, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x6f, 0x10, 0x00, 0x12,
	0x08, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x6c, 0x6f, 0x77,
	0x10, 0x02, 0x22, 0xa9, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x74,
	0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x22, 0x95, 0x01, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12,
	0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00,
	0x12, 0x0e, 0x0a, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x10, 0x01,
	0x12, 0x0f, 0x0a, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x10,
	0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x65, 0x78,
	0x74, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x74,
	0x65, 0x78, 0x74, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x10, 0x06, 0x12, 0x0f, 0x0a,
	0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x10, 0x07, 0x22, 0x70,
	0x0a, 0x0a, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x62, 0x0a, 0x04,
	0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x69,
	0x6e, 0x67, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x05,
	0x22, 0x65, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x53, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x69,
	0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x69,
	0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x66,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x04, 0x22, 0x4c, 0x0a, 0x0c, 0x54, 0x68, 0x69, 0x6e, 0x6b,
	0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x22, 0x3c, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12,
	0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00,
	0x12, 0x08, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x6f, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x10, 0x03, 0x22, 0x4f, 0x0a, 0x08, 0x54, 0x65, 0x78, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x43, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x10, 0x03, 0x22, 0x4b, 0x0a, 0x0e, 0x54, 0x6f, 0x6f, 0x6c, 0x43, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x39, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d,
	0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x6f, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x6e,
	0x6f, 0x6e, 0x65, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x10, 0x03, 0x22, 0x75, 0x0a, 0x08, 0x54, 0x6f, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x22,
	0x69, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x77, 0x65, 0x62, 0x5f, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x10, 0x02, 0x12, 0x0e,
	0x0a, 0x0a, 0x77, 0x65, 0x62, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x10, 0x03, 0x12, 0x11,
	0x0a, 0x0d, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x10,
	0x04, 0x12, 0x07, 0x0a, 0x03, 0x6d, 0x63, 0x70, 0x10, 0x05, 0x22, 0x3c, 0x0a, 0x10, 0x55, 0x73,
	0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x28,
	0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x78, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x10, 0x01, 0x22, 0x3d, 0x0a, 0x0a, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x2f, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f,
	0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12,
	0x0c, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x01, 0x12, 0x08, 0x0a,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x10, 0x02, 0x22, 0x56, 0x0a, 0x0f, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x69, 0x6e, 0x67, 0x45, 0x66, 0x66, 0x6f, 0x72, 0x74, 0x22, 0x43, 0x0a, 0x04, 0x45, 0x6e,
	0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x10, 0x01,
	0x12, 0x07, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x6d, 0x65, 0x64,
	0x69, 0x75, 0x6d, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x10, 0x04, 0x22,
	0xd1, 0x0a, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0xc3, 0x0a,
	0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x10, 0x01, 0x12, 0x18, 0x0a,
	0x14, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x10, 0x03, 0x12,
	0x13, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x66, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x10, 0x05, 0x12, 0x1e, 0x0a,
	0x1a, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x61, 0x64, 0x64, 0x65, 0x64, 0x10, 0x06, 0x12, 0x1d, 0x0a,
	0x19, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x10, 0x07, 0x12, 0x1f, 0x0a, 0x1b,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x65, 0x64, 0x10, 0x08, 0x12, 0x1e, 0x0a,
	0x1a, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x10, 0x09, 0x12, 0x1e, 0x0a,
	0x1a, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x10, 0x0a, 0x12, 0x1d, 0x0a,
	0x19, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x10, 0x0b, 0x12, 0x29, 0x0a, 0x25,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x69,
	0x6e, 0x67, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f,
	0x64, 0x65, 0x6c, 0x74, 0x61, 0x10, 0x0c, 0x12, 0x28, 0x0a, 0x24, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x10,
	0x0d, 0x12, 0x29, 0x0a, 0x25, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x65, 0x64, 0x10, 0x0e, 0x12, 0x28, 0x0a, 0x24,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x69,
	0x6e, 0x67, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x5f,
	0x64, 0x6f, 0x6e, 0x65, 0x10, 0x0f, 0x12, 0x2a, 0x0a, 0x26, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x6c, 0x6c,
	0x5f, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61,
	0x10, 0x10, 0x12, 0x29, 0x0a, 0x25, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x66,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x72, 0x67,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x10, 0x11, 0x12, 0x09, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x12, 0x12, 0x25, 0x0a, 0x21, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x65, 0x64, 0x10, 0x13, 0x12,
	0x24, 0x0a, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x64,
	0x6f, 0x6e, 0x65, 0x10, 0x14, 0x12, 0x25, 0x0a, 0x21, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x65, 0x78, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x10, 0x15, 0x12, 0x24, 0x0a, 0x20,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x64, 0x6f, 0x6e, 0x65,
	0x10, 0x16, 0x12, 0x28, 0x0a, 0x24, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x77,
	0x65, 0x62, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x69,
	0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x10, 0x17, 0x12, 0x26, 0x0a, 0x22,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x77, 0x65, 0x62, 0x5f, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x69,
	0x6e, 0x67, 0x10, 0x18, 0x12, 0x26, 0x0a, 0x22, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x5f, 0x77, 0x65, 0x62, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x63, 0x61, 0x6c, 0x6c,
	0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x10, 0x19, 0x12, 0x29, 0x0a, 0x25,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f,
	0x74, 0x65, 0x78, 0x74, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x61, 0x64, 0x64, 0x65, 0x64, 0x10, 0x1a, 0x12, 0x2b, 0x0a, 0x27, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x10, 0x1e, 0x12, 0x2b, 0x0a, 0x27, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x63,
	0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x10,
	0x1f, 0x12, 0x29, 0x0a, 0x25, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x61, 0x6c, 0x6c,
	0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x10, 0x20, 0x12, 0x26, 0x0a, 0x22,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x66, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x10, 0x21, 0x12, 0x27, 0x0a, 0x23, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x5f, 0x6d, 0x63, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x5f,
	0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x10, 0x22, 0x12, 0x25, 0x0a,
	0x21, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x63, 0x70, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x10, 0x23, 0x12, 0x21, 0x0a, 0x1d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x5f, 0x6d, 0x63, 0x70, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x10, 0x24, 0x12, 0x25, 0x0a, 0x21, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x63, 0x70, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x72, 0x67,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x10, 0x25, 0x12, 0x24,
	0x0a, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x63, 0x70, 0x5f, 0x63,
	0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x64, 0x6f,
	0x6e, 0x65, 0x10, 0x26, 0x12, 0x1f, 0x0a, 0x1b, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x5f, 0x6d, 0x63, 0x70, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x10, 0x27, 0x12, 0x1c, 0x0a, 0x18, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x5f, 0x6d, 0x63, 0x70, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x10, 0x28, 0x22, 0x35, 0x0a, 0x0b, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x26, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x10, 0x01, 0x22, 0x3f, 0x0a, 0x09, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x32, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12,
	0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00,
	0x12, 0x0c, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x01, 0x12, 0x0b,
	0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x22, 0x3f, 0x0a, 0x14, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x22, 0x27, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x64, 0x10, 0x01, 0x22, 0xc9, 0x09, 0x0a,
	0x10, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2f, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x2f, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x5f,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x70, 0x72, 0x65,
	0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x12, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x6f, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x3d, 0x0a, 0x08, 0x74, 0x68, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x54, 0x68, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67,
	0x48, 0x02, 0x52, 0x08, 0x74, 0x68, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12,
	0x4c, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x54, 0x69, 0x65, 0x72, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x03, 0x52, 0x0b, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x69, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52, 0x05,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x48, 0x05, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x48, 0x06, 0x52, 0x0b, 0x74, 0x65,
	0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x05,
	0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x73, 0x54, 0x6f, 0x6f, 0x6c, 0x52, 0x05, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x18, 0x0a, 0x05,
	0x74, 0x6f, 0x70, 0x5f, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x48, 0x07, 0x52, 0x04, 0x74,
	0x6f, 0x70, 0x50, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0c,
	0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x35, 0x0a, 0x07, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x1b, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x07, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x63, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x43, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x67, 0x48, 0x09, 0x52, 0x07, 0x63, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x88,
	0x01, 0x01, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x54, 0x65, 0x78, 0x74, 0x48, 0x0a, 0x52, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f,
	0x61, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x48, 0x0b, 0x52, 0x08, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x0b, 0x74, 0x6f, 0x6f, 0x6c, 0x5f,
	0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x73, 0x54, 0x6f, 0x6f, 0x6c, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x48, 0x0c, 0x52, 0x0a,
	0x74, 0x6f, 0x6f, 0x6c, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a,
	0x13, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x5f, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x63,
	0x61, 0x6c, 0x6c, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0d, 0x52, 0x11, 0x70, 0x61,
	0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x54, 0x6f, 0x6f, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x63,
	0x61, 0x6c, 0x6c, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x48, 0x0e, 0x52, 0x0c, 0x6d, 0x61,
	0x78, 0x54, 0x6f, 0x6f, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a,
	0x09, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x48,
	0x0f, 0x52, 0x09, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x42,
	0x14, 0x0a, 0x12, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f,
	0x75, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x74, 0x68, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x6f, 0x70, 0x5f, 0x70, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x63, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x65, 0x78,
	0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x61, 0x74, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42,
	0x16, 0x0a, 0x14, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x5f, 0x74, 0x6f, 0x6f,
	0x6c, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6d, 0x61, 0x78, 0x5f,
	0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x22, 0x77, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x22, 0x0a, 0x0b, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x38,
	0x0a, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x09, 0x6c,
	0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x6f,
	0x6e, 0x22, 0x4d, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x37, 0x0a, 0x06, 0x65, 0x66, 0x66, 0x6f, 0x72,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x45, 0x66, 0x66,
	0x6f, 0x72, 0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x06, 0x65, 0x66, 0x66, 0x6f, 0x72, 0x74,
	0x22, 0x43, 0x0a, 0x0d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x32, 0x0a, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x09, 0x6c, 0x69, 0x73, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x8e, 0x08, 0x0a, 0x09, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x3f, 0x0a, 0x0c, 0x65, 0x61, 0x73, 0x79, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x61, 0x73, 0x79, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x65, 0x61, 0x73, 0x79, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x42, 0x0a, 0x0d, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x45, 0x0a, 0x0e, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x49, 0x74, 0x65,
	0x6d, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00,
	0x52, 0x0d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x4f, 0x0a, 0x12, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6f, 0x6c,
	0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6f, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x10,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6f, 0x6c, 0x43, 0x61, 0x6c, 0x6c,
	0x12, 0x62, 0x0a, 0x19, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6f,
	0x6c, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e,
	0x49, 0x74, 0x65, 0x6d, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6f, 0x6c,
	0x43, 0x61, 0x6c, 0x6c, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x48, 0x00, 0x52, 0x16, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6f, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x69, 0x6e,
	0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x69, 0x6e,
	0x67, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x38,
	0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x09, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x4a, 0x0a, 0x0d, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x5d, 0x0a, 0x14, 0x6d, 0x63, 0x70, 0x5f, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x49,
	0x74, 0x65, 0x6d, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x63, 0x70, 0x41, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x12, 0x6d, 0x63, 0x70, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x60, 0x0a, 0x15, 0x6d, 0x63, 0x70, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x49,
	0x74, 0x65, 0x6d, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x63, 0x70, 0x41, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00,
	0x52, 0x13, 0x6d, 0x63, 0x70, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0e, 0x6d, 0x63, 0x70, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x63, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x6f,
	0x6c, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x6d, 0x63, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x6f,
	0x6c, 0x73, 0x12, 0x4c, 0x0a, 0x11, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d,
	0x63, 0x70, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x63, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52,
	0x0f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x63, 0x70, 0x43, 0x61, 0x6c, 0x6c,
	0x12, 0x5b, 0x0a, 0x18, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x65, 0x62,
	0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x49,
	0x74, 0x65, 0x6d, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x65, 0x62, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x48, 0x00, 0x52, 0x15, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x57, 0x65, 0x62, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x07, 0x0a,
	0x05, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x22, 0xe0, 0x01, 0x0a, 0x0f, 0x49, 0x74, 0x65, 0x6d, 0x45,
	0x61, 0x73, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e,
	0x75, 0x6d, 0x48, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a,
	0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x6f, 0x6c, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x38,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x48, 0x01, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x22, 0x79, 0x0a, 0x0e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0b, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0b, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x3a, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x75,
	0x6e, 0x69, 0x6f, 0x6e, 0x22, 0x47, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xe7, 0x01,
	0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x30, 0x0a,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x54, 0x65, 0x78, 0x74, 0x48, 0x00, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x33, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x48, 0x00, 0x52, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x33, 0x0a, 0x05, 0x61, 0x75, 0x64,
	0x69, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d,
	0x41, 0x75, 0x64, 0x69, 0x6f, 0x48, 0x00, 0x52, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x42, 0x07,
	0x0a, 0x05, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x22, 0x54, 0x0a, 0x11, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x36, 0x0a, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x65, 0x78, 0x74, 0x48, 0x00, 0x52, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x22, 0xf8, 0x01,
	0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x65, 0x78,
	0x74, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1f, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1e, 0x0a, 0x08, 0x69, 0x73,
	0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07,
	0x69, 0x73, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x57, 0x0a, 0x13, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x73, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x01, 0x52, 0x12, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x73, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x42, 0x16, 0x0a, 0x14, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x6a, 0x0a, 0x16, 0x54, 0x65, 0x78, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x22, 0x77, 0x0a, 0x0f, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x69, 0x78,
	0x65, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x22, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x70,
	0x69, 0x78, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x09, 0x6d,
	0x61, 0x78, 0x50, 0x69, 0x78, 0x65, 0x6c, 0x73, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6d,
	0x69, 0x6e, 0x5f, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x01, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x50, 0x69, 0x78, 0x65, 0x6c, 0x73, 0x88, 0x01, 0x01, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x73, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x73, 0x22, 0xa4, 0x03,
	0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1f, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75,
	0x6d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x43, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48,
	0x00, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x09,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x07, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x66, 0x69,
	0x6c, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x07, 0x69, 0x73, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x11, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x50, 0x69, 0x78, 0x65, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x48, 0x03,
	0x52, 0x0f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x69, 0x78, 0x65, 0x6c, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x04, 0x52, 0x0a, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x73, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x42, 0x14,
	0x0a, 0x12, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x22, 0xae, 0x02, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x52,
	0x0a, 0x11, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x48, 0x00, 0x52, 0x10, 0x63,
	0x68, 0x75, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x55, 0x72, 0x6c, 0x12,
	0x1c, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a,
	0x0b, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0c, 0x48, 0x02, 0x52, 0x0a, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x88, 0x01, 0x01, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x69, 0x6e, 0x67,
	0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x22, 0x96, 0x02, 0x0a, 0x15, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12,
	0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x69,
	0x6e, 0x67, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45,
	0x6e, 0x75, 0x6d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x11, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x5f, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x50, 0x61,
	0x64, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x73, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x73, 0x69,
	0x6c, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x11, 0x73, 0x69, 0x6c, 0x65, 0x6e,
	0x63, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x21, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x02, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x88,
	0x01, 0x01, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x70, 0x61,
	0x64, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x73, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x73, 0x69, 0x6c,
	0x65, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x73,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x22, 0xad,
	0x01, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1f, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e,
	0x75, 0x6d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x66, 0x70, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02,
	0x48, 0x01, 0x52, 0x03, 0x66, 0x70, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x66, 0x70, 0x73, 0x22, 0x91,
	0x02, 0x0a, 0x10, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x18, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x49, 0x74,
	0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x2e, 0x45, 0x6e, 0x75,
	0x6d, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02,
	0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x05, 0x0a, 0x03, 0x5f,
	0x69, 0x64, 0x22, 0xee, 0x01, 0x0a, 0x11, 0x49, 0x74, 0x65, 0x6d, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x2e, 0x45, 0x6e, 0x75,
	0x6d, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x73, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x32, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1a, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0xb4, 0x01, 0x0a, 0x15, 0x49, 0x74, 0x65, 0x6d, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x57, 0x65, 0x62, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x2c, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x45, 0x6e,
	0x75, 0x6d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xd9, 0x02, 0x0a, 0x18, 0x49,
	0x74, 0x65, 0x6d, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x41, 0x72, 0x67, 0x73, 0x52, 0x09, 0x61, 0x72,
	0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x45,
	0x6e, 0x75, 0x6d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xb3, 0x01, 0x0a, 0x1e, 0x49, 0x74, 0x65, 0x6d, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x63, 0x70, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75,
	0x6d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x72,
	0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xb5, 0x01, 0x0a,
	0x1f, 0x49, 0x74, 0x65, 0x6d, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x63, 0x70,
	0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18,
	0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x13,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x12, 0x2e, 0x0a,
	0x13, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x42, 0x05, 0x0a,
	0x03, 0x5f, 0x69, 0x64, 0x22, 0x91, 0x01, 0x0a, 0x07, 0x4d, 0x63, 0x70, 0x54, 0x6f, 0x6f, 0x6c,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x22, 0xa5, 0x01, 0x0a, 0x18, 0x49, 0x74, 0x65,
	0x6d, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x63, 0x70, 0x4c, 0x69, 0x73, 0x74,
	0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e,
	0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x28, 0x0a, 0x05, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x73, 0x2e, 0x4d, 0x63, 0x70, 0x54, 0x6f, 0x6f, 0x6c, 0x52, 0x05, 0x74, 0x6f, 0x6f, 0x6c, 0x73,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x22, 0xc2, 0x02, 0x0a, 0x13, 0x49, 0x74, 0x65, 0x6d, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x63, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x33, 0x0a, 0x13, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x11, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1c,
	0x0a, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x06, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x06, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x88, 0x01, 0x01, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x31, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x22, 0x23, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x10, 0x01, 0x22, 0x4e, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e,
	0x75, 0x6d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x99, 0x01, 0x0a, 0x15, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x65,
	0x78, 0x74, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1f, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75,
	0x6d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x37, 0x0a, 0x0b, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0xef, 0x01, 0x0a, 0x14, 0x49, 0x74, 0x65, 0x6d, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6f, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x1c, 0x0a,
	0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x63,
	0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x61,
	0x6c, 0x6c, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xdb, 0x01, 0x0a, 0x1a, 0x49, 0x74, 0x65, 0x6d, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6f, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x63, 0x61, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73,
	0x2e, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88,
	0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0xc8, 0x01, 0x0a, 0x0d, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45,
	0x6e, 0x75, 0x6d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x07, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x69, 0x6e, 0x67,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x50, 0x61, 0x72, 0x74, 0x52, 0x07, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x12, 0x32, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73,
	0x2e, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x45, 0x6e, 0x75, 0x6d,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x22,
	0xd5, 0x01, 0x0a, 0x11, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e,
	0x75, 0x6d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x52, 0x0d, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x22, 0x8b, 0x01, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x12, 0x33, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x2d, 0x0a, 0x06, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x73, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x06, 0x63,
	0x68, 0x75, 0x6e, 0x6b, 0x73, 0x22, 0x5b, 0x0a, 0x0d, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73,
	0x2e, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x22, 0x53, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x54,
	0x68, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x73, 0x2e, 0x54, 0x68, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45,
	0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0xa7, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x73, 0x54, 0x6f, 0x6f, 0x6c, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x12,
	0x34, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x54, 0x6f, 0x6f, 0x6c, 0x43, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52,
	0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x51, 0x0a, 0x14, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6f, 0x6c, 0x43, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x48, 0x00, 0x52, 0x12, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f,
	0x6f, 0x6c, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x6f,
	0x6e, 0x22, 0x79, 0x0a, 0x12, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6f,
	0x6c, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x73, 0x2e, 0x54, 0x6f, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0x9a, 0x02, 0x0a,
	0x0d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x54, 0x6f, 0x6f, 0x6c, 0x12, 0x3e,
	0x0a, 0x0d, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x73, 0x2e, 0x54, 0x6f, 0x6f, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x0c, 0x74, 0x6f, 0x6f, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42,
	0x0a, 0x0f, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x77, 0x65, 0x62, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x73, 0x2e, 0x54, 0x6f, 0x6f, 0x6c, 0x57, 0x65, 0x62, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x48, 0x00, 0x52, 0x0d, 0x74, 0x6f, 0x6f, 0x6c, 0x57, 0x65, 0x62, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x12, 0x4b, 0x0a, 0x12, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x54, 0x6f, 0x6f, 0x6c, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x10, 0x74,
	0x6f, 0x6f, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x2f, 0x0a, 0x08, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x6d, 0x63, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x54, 0x6f,
	0x6f, 0x6c, 0x4d, 0x63, 0x70, 0x48, 0x00, 0x52, 0x07, 0x74, 0x6f, 0x6f, 0x6c, 0x4d, 0x63, 0x70,
	0x42, 0x07, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x22, 0x5b, 0x0a, 0x0a, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x4d, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12,
	0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x74, 0x6f, 0x75, 0x74, 0x69, 0x61, 0x6f, 0x10, 0x01, 0x12, 0x0a, 0x0a,
	0x06, 0x64, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x6d, 0x6f, 0x6a,
	0x69, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x10, 0x04, 0x22, 0xe7, 0x01, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a,
	0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x63,
	0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65,
	0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65,
	0x22, 0xed, 0x01, 0x0a, 0x0d, 0x54, 0x6f, 0x6f, 0x6c, 0x57, 0x65, 0x62, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x18, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x54, 0x6f, 0x6f,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x19, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x00, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x0d, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52, 0x0c, 0x75,
	0x73, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x34,
	0x0a, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x1a, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x07, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x3c, 0x0a, 0x18, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x17, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x40,
	0x0a, 0x1c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x47, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x17,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x22, 0x3b, 0x0a, 0x17, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x5a, 0x6f, 0x6f, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x17, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3d, 0x0a,
	0x19, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x6f, 0x74,
	0x61, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0xf8, 0x02, 0x0a,
	0x10, 0x54, 0x6f, 0x6f, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x18, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x54, 0x6f, 0x6f, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x3e, 0x0a, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x4a, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x01, 0x52, 0x09, 0x67,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x04, 0x7a,
	0x6f, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x5a, 0x6f, 0x6f, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x02, 0x52,
	0x04, 0x7a, 0x6f, 0x6f, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x06, 0x72, 0x6f, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x73, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x03,
	0x52, 0x06, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x7a, 0x6f, 0x6f, 0x6d, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x22, 0x2d, 0x0a, 0x13, 0x4d, 0x63, 0x70, 0x41, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x36, 0x0a, 0x15, 0x4d, 0x63, 0x70, 0x41, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x8c,
	0x01, 0x0a, 0x0f, 0x4d, 0x63, 0x70, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x54, 0x6f, 0x6f,
	0x6c, 0x73, 0x12, 0x34, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x4d, 0x63, 0x70,
	0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x73, 0x2e, 0x4d, 0x63, 0x70, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x54,
	0x6f, 0x6f, 0x6c, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x42, 0x07, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x22, 0x8d, 0x01,
	0x0a, 0x12, 0x4d, 0x63, 0x70, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x41, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x61, 0x6c, 0x12, 0x32, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d,
	0x48, 0x00, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x73, 0x2e, 0x4d, 0x63, 0x70, 0x54, 0x6f, 0x6f, 0x6c, 0x41, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x42, 0x07, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x22, 0x3e, 0x0a,
	0x0c, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x2e, 0x0a,
	0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73,
	0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x6e, 0x65, 0x76, 0x65, 0x72, 0x10, 0x02, 0x22, 0xb3, 0x01,
	0x0a, 0x15, 0x4d, 0x63, 0x70, 0x54, 0x6f, 0x6f, 0x6c, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61,
	0x6c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x06, 0x61, 0x6c, 0x77, 0x61, 0x79,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x73, 0x2e, 0x4d, 0x63, 0x70, 0x54, 0x6f, 0x6f, 0x6c, 0x41, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x48,
	0x00, 0x52, 0x06, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x05,
	0x6e, 0x65, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x4d, 0x63, 0x70, 0x54, 0x6f, 0x6f, 0x6c, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4e, 0x65, 0x76,
	0x65, 0x72, 0x48, 0x01, 0x52, 0x05, 0x6e, 0x65, 0x76, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6e, 0x65,
	0x76, 0x65, 0x72, 0x22, 0x3c, 0x0a, 0x1b, 0x4d, 0x63, 0x70, 0x54, 0x6f, 0x6f, 0x6c, 0x41, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x6c, 0x77, 0x61,
	0x79, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x22, 0x3b, 0x0a, 0x1a, 0x4d, 0x63, 0x70, 0x54, 0x6f, 0x6f, 0x6c, 0x41, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4e, 0x65, 0x76, 0x65, 0x72, 0x12,
	0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0xf7,
	0x03, 0x0a, 0x07, 0x54, 0x6f, 0x6f, 0x6c, 0x4d, 0x63, 0x70, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x73, 0x2e, 0x54, 0x6f, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e,
	0x75, 0x6d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x44, 0x0a, 0x0d, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x4d, 0x63,
	0x70, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x48, 0x00, 0x52,
	0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x39, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x54, 0x6f,
	0x6f, 0x6c, 0x4d, 0x63, 0x70, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x4d, 0x0a, 0x10, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x73, 0x2e, 0x4d, 0x63, 0x70, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x41, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x61, 0x6c, 0x48, 0x01, 0x52, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x12, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x11, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x1a, 0x3a,
	0x0a, 0x0c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x42, 0x13, 0x0a, 0x11,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61,
	0x6c, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe1, 0x01, 0x0a, 0x0c, 0x54, 0x6f, 0x6f,
	0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a,
	0x06, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52,
	0x06, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x73, 0x2e, 0x54, 0x6f, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e,
	0x75, 0x6d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x30, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x1d, 0x0a, 0x05,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xd1, 0x0b, 0x0a, 0x0e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2b, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x50, 0x0a, 0x12, 0x69, 0x6e,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x48, 0x01, 0x52, 0x11, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11,
	0x6d, 0x61, 0x78, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a,
	0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x12, 0x32, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52,
	0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x2d, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x73, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x06,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x35, 0x0a, 0x14, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f,
	0x75, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x12, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a,
	0x08, 0x74, 0x68, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x73, 0x54, 0x68, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x48, 0x04, 0x52,
	0x08, 0x74, 0x68, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a, 0x0c,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x24, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x69, 0x65, 0x72, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x05, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x54, 0x69, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x25, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x48, 0x06, 0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x05, 0x74, 0x6f, 0x6f,
	0x6c, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x54, 0x6f,
	0x6f, 0x6c, 0x52, 0x05, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x18, 0x0a, 0x05, 0x74, 0x6f, 0x70,
	0x5f, 0x70, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x48, 0x07, 0x52, 0x04, 0x74, 0x6f, 0x70, 0x50,
	0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x48, 0x08, 0x52, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x3a, 0x0a, 0x07, 0x63, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x43, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x48, 0x09,
	0x52, 0x07, 0x63, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73,
	0x54, 0x65, 0x78, 0x74, 0x48, 0x0a, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x27, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0c, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x61, 0x74,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x48, 0x0d, 0x52, 0x08, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x0b, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x63, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73,
	0x54, 0x6f, 0x6f, 0x6c, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x48, 0x0e, 0x52, 0x0a, 0x74, 0x6f,
	0x6f, 0x6c, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x70,
	0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x5f, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x63, 0x61, 0x6c,
	0x6c, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0f, 0x52, 0x11, 0x70, 0x61, 0x72, 0x61,
	0x6c, 0x6c, 0x65, 0x6c, 0x54, 0x6f, 0x6f, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x29, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x63, 0x61, 0x6c,
	0x6c, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x48, 0x10, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x54,
	0x6f, 0x6f, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x0a, 0x74,
	0x6f, 0x6f, 0x6c, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x54, 0x6f, 0x6f, 0x6c,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x48, 0x11, 0x52, 0x09, 0x74, 0x6f, 0x6f, 0x6c, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42,
	0x15, 0x0a, 0x13, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x42, 0x17, 0x0a, 0x15,
	0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x68, 0x69, 0x6e, 0x6b, 0x69,
	0x6e, 0x67, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74,
	0x69, 0x65, 0x72, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x6f, 0x70, 0x5f, 0x70, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x67, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x5f, 0x61, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x63,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c,
	0x65, 0x6c, 0x5f, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x22,
	0xa4, 0x01, 0x0a, 0x0e, 0x57, 0x65, 0x62, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x57, 0x65, 0x62, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x82, 0x01, 0x0a, 0x08, 0x4d, 0x63, 0x70, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73,
	0x2e, 0x4d, 0x63, 0x70, 0x55, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x1a,
	0x3a, 0x0a, 0x0c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xaf, 0x01, 0x0a, 0x09,
	0x54, 0x6f, 0x6f, 0x6c, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x48, 0x0a, 0x10, 0x77, 0x65, 0x62,
	0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e,
	0x57, 0x65, 0x62, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00,
	0x52, 0x0e, 0x77, 0x65, 0x62, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x09, 0x6d, 0x63, 0x70, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x73, 0x2e, 0x4d, 0x63, 0x70, 0x55, 0x73, 0x61, 0x67, 0x65, 0x48, 0x01, 0x52, 0x08, 0x6d,
	0x63, 0x70, 0x55, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x77,
	0x65, 0x62, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x6d, 0x63, 0x70, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x22, 0xfa, 0x05,
	0x0a, 0x0a, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x45, 0x0a, 0x0e,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73,
	0x2e, 0x49, 0x74, 0x65, 0x6d, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x4f, 0x0a, 0x12, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6f, 0x6c, 0x43, 0x61, 0x6c, 0x6c,
	0x48, 0x00, 0x52, 0x10, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6f, 0x6c,
	0x43, 0x61, 0x6c, 0x6c, 0x12, 0x38, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x69, 0x6e,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x69, 0x6e,
	0x67, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x44,
	0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x13, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x77, 0x65, 0x62, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x49, 0x74,
	0x65, 0x6d, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x65, 0x62, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x48, 0x00, 0x52, 0x11, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x57,
	0x65, 0x62, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x5b, 0x0a, 0x16, 0x66, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52,
	0x14, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x6e, 0x0a, 0x1d, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6d, 0x63, 0x70, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x63, 0x70, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x1a, 0x66, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x63, 0x70, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5c, 0x0a, 0x17, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6d, 0x63, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x74, 0x6f, 0x6f, 0x6c, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x63, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x14, 0x66,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x63, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f,
	0x6f, 0x6c, 0x73, 0x12, 0x4c, 0x0a, 0x11, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6d, 0x63, 0x70, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x63, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00,
	0x52, 0x0f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x63, 0x70, 0x43, 0x61, 0x6c,
	0x6c, 0x42, 0x07, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x22, 0x35, 0x0a, 0x05, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x84, 0x01, 0x0a, 0x11, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12,
	0x44, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x3d, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x97, 0x02, 0x0a, 0x05, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x4f, 0x0a, 0x14,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x5f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x12, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x52, 0x0a,
	0x15, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x5f, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x13, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x22, 0x5c, 0x0a, 0x12, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x64, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x22,
	0x40, 0x0a, 0x13, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x73, 0x22, 0xdd, 0x13, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x08, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x49, 0x74,
	0x65, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12,
	0x40, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72,
	0x74, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x54, 0x65, 0x78, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x4d, 0x0a, 0x0e, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x69, 0x6e, 0x67,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x69, 0x6e,
	0x67, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x50, 0x61, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x0d, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x61,
	0x72, 0x74, 0x12, 0x4d, 0x0a, 0x0e, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x5f,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x69, 0x6e, 0x67,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x54, 0x65, 0x78, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x0d, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x78,
	0x74, 0x12, 0x5f, 0x0a, 0x17, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61,
	0x6c, 0x6c, 0x5f, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x41, 0x72, 0x67, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x15, 0x66, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x2d, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x52, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x61, 0x72, 0x74, 0x12, 0x52, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x80, 0x01, 0x0a, 0x24, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x77, 0x65, 0x62, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x57, 0x65, 0x62,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x1f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x57, 0x65, 0x62, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x61,
	0x6c, 0x6c, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x7c, 0x0a, 0x22,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x77, 0x65, 0x62, 0x5f, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x69,
	0x6e, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x57, 0x65, 0x62,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x1e, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x57, 0x65, 0x62, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x61, 0x6c,
	0x6c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x12, 0x7c, 0x0a, 0x22, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x77, 0x65, 0x62, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x57, 0x65, 0x62, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x43, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x1e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x57, 0x65, 0x62, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x61, 0x6c, 0x6c, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x65, 0x0a, 0x19, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x61, 0x64, 0x64, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x65, 0x64, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x17, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x65, 0x64, 0x12,
	0x89, 0x01, 0x0a, 0x27, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f,
	0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x22, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x43, 0x61, 0x6c,
	0x6c, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x88, 0x01, 0x0a, 0x26,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x43, 0x61, 0x6c,
	0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x22, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x85, 0x01, 0x0a, 0x25, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x21, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x43, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x7d,
	0x0a, 0x23, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x63, 0x70, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x4d, 0x63, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x49, 0x6e, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x1e, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x63, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f,
	0x6f, 0x6c, 0x73, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x79, 0x0a,
	0x21, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x63, 0x70, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x63, 0x70,
	0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x1d, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x4d, 0x63, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x6d, 0x0a, 0x1d, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x63, 0x70, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x6e,
	0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x63, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x19, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x63, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x79, 0x0a, 0x21, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x63, 0x70, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x72, 0x67,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x63, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x41, 0x72,
	0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x1d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x63, 0x70,
	0x43, 0x61, 0x6c, 0x6c, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x44, 0x65, 0x6c,
	0x74, 0x61, 0x12, 0x76, 0x0a, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d,
	0x63, 0x70, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x4d, 0x63, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x44, 0x6f, 0x6e, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x1c, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x63, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x41, 0x72, 0x67,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x69, 0x0a, 0x1b, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x63, 0x70, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x63, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x18, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x63, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x60, 0x0a, 0x18, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x5f, 0x6d, 0x63, 0x70, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x63, 0x70, 0x43,
	0x61, 0x6c, 0x6c, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x15, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x63, 0x70, 0x43, 0x61, 0x6c,
	0x6c, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x6f, 0x0a, 0x1d, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x63, 0x70, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x4d, 0x63, 0x70, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x1a, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x63, 0x70, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x22, 0x8a, 0x02, 0x0a, 0x1f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x63,
	0x70, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x6c, 0x0a, 0x1d, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6d, 0x63, 0x70, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x63, 0x70, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x1a, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x63, 0x70, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xba,
	0x01, 0x0a, 0x24, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x57, 0x65, 0x62, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x43, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xb9, 0x01, 0x0a, 0x23,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x57, 0x65, 0x62, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x19, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x27,
	0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xb9, 0x01, 0x0a, 0x23, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x57, 0x65, 0x62, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x61, 0x6c,
	0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x2d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x22, 0x74, 0x0a, 0x1a, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72,
	0x6c, 0x88, 0x01, 0x01, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x22, 0x74, 0x0a, 0x1d, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x72, 0x67, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x72, 0x61, 0x77, 0x4c, 0x69, 0x6e, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x72, 0x61, 0x77, 0x4c, 0x69, 0x6e, 0x65, 0x22,
	0x35, 0x0a, 0x19, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x73, 0x0a, 0x21, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x47, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x67, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x19, 0x0a, 0x08,
	0x62, 0x62, 0x6f, 0x78, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x62, 0x62, 0x6f, 0x78, 0x53, 0x74, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x72, 0x6f, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x63, 0x72, 0x6f, 0x70, 0x22, 0x59, 0x0a, 0x1e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x41, 0x72, 0x67, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16,
	0x0a, 0x06, 0x64, 0x65, 0x67, 0x72, 0x65, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x64, 0x65, 0x67, 0x72, 0x65, 0x65, 0x22, 0x70, 0x0a, 0x1c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5a, 0x6f,
	0x6f, 0x6d, 0x41, 0x72, 0x67, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x62, 0x6f, 0x78, 0x5f,
	0x73, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x62, 0x6f, 0x78, 0x53,
	0x74, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x22, 0xdb, 0x02, 0x0a, 0x18, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x41, 0x72, 0x67, 0x73, 0x12, 0x49, 0x0a, 0x0a, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x61,
	0x72, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x41,
	0x72, 0x67, 0x73, 0x48, 0x00, 0x52, 0x09, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x72, 0x67, 0x73,
	0x12, 0x55, 0x0a, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x72,
	0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x41, 0x72, 0x67, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x41, 0x72, 0x67, 0x73, 0x12, 0x4c, 0x0a, 0x0b, 0x72, 0x6f, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x6f, 0x74,
	0x61, 0x74, 0x65, 0x41, 0x72, 0x67, 0x73, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x6f, 0x74, 0x61, 0x74,
	0x65, 0x41, 0x72, 0x67, 0x73, 0x12, 0x46, 0x0a, 0x09, 0x7a, 0x6f, 0x6f, 0x6d, 0x5f, 0x61, 0x72,
	0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5a, 0x6f, 0x6f, 0x6d, 0x41, 0x72, 0x67,
	0x73, 0x48, 0x00, 0x52, 0x08, 0x7a, 0x6f, 0x6f, 0x6d, 0x41, 0x72, 0x67, 0x73, 0x42, 0x07, 0x0a,
	0x05, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x22, 0xbd, 0x01, 0x0a, 0x27, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x43,
	0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x19, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x27, 0x0a,
	0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xbf, 0x02, 0x0a, 0x27, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x43,
	0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x19, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x27, 0x0a,
	0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x41, 0x72, 0x67, 0x73, 0x52, 0x09, 0x61,
	0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x89, 0x03, 0x0a, 0x26, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x43, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x19, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x27,
	0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x41, 0x72, 0x67, 0x73, 0x52, 0x09,
	0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3f, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x22, 0xb9, 0x01, 0x0a, 0x23, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x4d, 0x63, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x49, 0x6e, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x74,
	0x65, 0x6d, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x22, 0xb8, 0x01, 0x0a, 0x22, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x63, 0x70,
	0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xb4, 0x01, 0x0a, 0x1e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x63, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x49,
	0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2d,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x22, 0xce, 0x01, 0x0a, 0x22, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d,
	0x63, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x44,
	0x65, 0x6c, 0x74, 0x61, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e,
	0x75, 0x6d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x65,
	0x6c, 0x74, 0x61, 0x22, 0xd5, 0x01, 0x0a, 0x21, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x4d, 0x63, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x44, 0x6f, 0x6e, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e,
	0x75, 0x6d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a,
	0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xb3, 0x01, 0x0a, 0x1d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x63, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69,
	0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x22, 0xb0, 0x01, 0x0a, 0x1a, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x63,
	0x70, 0x43, 0x61, 0x6c, 0x6c, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x2d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19,
	0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x27, 0x0a, 0x0f, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x22, 0x9e, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x0f,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xb1, 0x01, 0x0a, 0x09, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x19, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x29, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d,
	0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xfd, 0x01, 0x0a, 0x10, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2d,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x30,
	0x0a, 0x04, 0x70, 0x61, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x70, 0x61, 0x72, 0x74,
	0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x91, 0x02, 0x0a, 0x0f, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x54, 0x65, 0x78, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x19, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x07,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69,
	0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x64,
	0x65, 0x6c, 0x74, 0x61, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x22, 0x80, 0x03,
	0x0a, 0x1c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2d,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x19, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a,
	0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x35, 0x0a,
	0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x65, 0x78, 0x74,
	0x22, 0x89, 0x02, 0x0a, 0x19, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x50, 0x61, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2d,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x33,
	0x0a, 0x04, 0x70, 0x61, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x69,
	0x6e, 0x67, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x50, 0x61, 0x72, 0x74, 0x52, 0x04, 0x70,
	0x61, 0x72, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x5f, 0x0a, 0x14,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x50, 0x61, 0x72, 0x74, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45,
	0x6e, 0x75, 0x6d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0x9b, 0x02,
	0x0a, 0x19, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x54, 0x65, 0x78, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x2e,
	0x45, 0x6e, 0x75, 0x6d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x19, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x74, 0x65,
	0x6d, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x64, 0x65, 0x6c,
	0x74, 0x61, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x22, 0x86, 0x02, 0x0a, 0x1a,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x41, 0x72, 0x67, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45,
	0x6e, 0x75, 0x6d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x64, 0x65, 0x6c,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x74,
	0x61, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x21, 0x0a, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x61, 0x72, 0x67, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x22, 0x8f, 0x02, 0x0a, 0x16, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x2d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2f, 0x0a, 0x13, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x30, 0x0a, 0x04, 0x70,
	0x61, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x52, 0x04, 0x70, 0x61, 0x72, 0x74, 0x12, 0x27, 0x0a,
	0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x8d, 0x03, 0x0a, 0x16, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x2d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x19, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x2f, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x19, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x07,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69,
	0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73,
	0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x06, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x22, 0xc5, 0x01, 0x0a, 0x0a, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x88,
	0x01, 0x01, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x4f,
	0x0a, 0x10, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x43, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x67, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x19, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22,
	0x3e, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x54, 0x65, 0x78, 0x74,
	0x12, 0x2d, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x54, 0x65, 0x78,
	0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22,
	0xd7, 0x01, 0x0a, 0x0a, 0x54, 0x65, 0x78, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x2c,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x06,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x52, 0x06,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x01, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x22, 0x38, 0x0a, 0x15, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x49, 0x64, 0x22, 0x76, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x32, 0x0a,
	0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x22, 0x35, 0x0a, 0x12, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x49, 0x64, 0x22, 0x86, 0x02, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05,
	0x61, 0x66, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x62, 0x65, 0x66, 0x6f,
	0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x62, 0x65, 0x66, 0x6f,
	0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x19, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x03, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x07, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x07, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0xd7, 0x01, 0x0a, 0x16,
	0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e,
	0x75, 0x6d, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x72, 0x73, 0x74, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6c, 0x61, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x5f,
	0x6d, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x68, 0x61,
	0x73, 0x4d, 0x6f, 0x72, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x68, 0x61, 0x73,
	0x5f, 0x6d, 0x6f, 0x72, 0x65, 0x22, 0x5a, 0x0a, 0x0a, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x42, 0x40, 0x5a, 0x3e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x6c, 0x65, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x2f, 0x6d, 0x61, 0x61, 0x73, 0x2d, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x2f, 0x69, 0x64, 0x6c, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_responses_proto_rawDescOnce sync.Once
	file_responses_proto_rawDescData = file_responses_proto_rawDesc
)

func file_responses_proto_rawDescGZIP() []byte {
	file_responses_proto_rawDescOnce.Do(func() {
		file_responses_proto_rawDescData = protoimpl.X.CompressGZIP(file_responses_proto_rawDescData)
	})
	return file_responses_proto_rawDescData
}

var file_responses_proto_enumTypes = make([]protoimpl.EnumInfo, 24)
var file_responses_proto_msgTypes = make([]protoimpl.MessageInfo, 138)
var file_responses_proto_goTypes = []interface{}{
	(ResponsesServiceTier_Enum)(0),                  // 0: responses.ResponsesServiceTier.Enum
	(ResponsesTruncation_Enum)(0),                   // 1: responses.ResponsesTruncation.Enum
	(AnnotationType_Enum)(0),                        // 2: responses.AnnotationType.Enum
	(ResponseImageProcessType_Enum)(0),              // 3: responses.ResponseImageProcessType.Enum
	(ItemType_Enum)(0),                              // 4: responses.ItemType.Enum
	(MessageRole_Enum)(0),                           // 5: responses.MessageRole.Enum
	(ContentItemImageDetail_Enum)(0),                // 6: responses.ContentItemImageDetail.Enum
	(ContentItemType_Enum)(0),                       // 7: responses.ContentItemType.Enum
	(ItemStatus_Enum)(0),                            // 8: responses.ItemStatus.Enum
	(ResponseStatus_Enum)(0),                        // 9: responses.ResponseStatus.Enum
	(ThinkingType_Enum)(0),                          // 10: responses.ThinkingType.Enum
	(TextType_Enum)(0),                              // 11: responses.TextType.Enum
	(ToolChoiceMode_Enum)(0),                        // 12: responses.ToolChoiceMode.Enum
	(ToolType_Enum)(0),                              // 13: responses.ToolType.Enum
	(UserLocationType_Enum)(0),                      // 14: responses.UserLocationType.Enum
	(ObjectType_Enum)(0),                            // 15: responses.ObjectType.Enum
	(ReasoningEffort_Enum)(0),                       // 16: responses.ReasoningEffort.Enum
	(EventType_Enum)(0),                             // 17: responses.EventType.Enum
	(IncludeType_Enum)(0),                           // 18: responses.IncludeType.Enum
	(CacheType_Enum)(0),                             // 19: responses.CacheType.Enum
	(ChunkingStrategyType_Enum)(0),                  // 20: responses.ChunkingStrategyType.Enum
	(ActionType_Enum)(0),                            // 21: responses.ActionType.Enum
	(SourceType_Enum)(0),                            // 22: responses.SourceType.Enum
	(ApprovalMode_Enum)(0),                          // 23: responses.ApprovalMode.Enum
	(*ResponsesServiceTier)(nil),                    // 24: responses.ResponsesServiceTier
	(*ResponsesTruncation)(nil),                     // 25: responses.ResponsesTruncation
	(*AnnotationType)(nil),                          // 26: responses.AnnotationType
	(*ResponseImageProcessType)(nil),                // 27: responses.ResponseImageProcessType
	(*CoverImage)(nil),                              // 28: responses.CoverImage
	(*Annotation)(nil),                              // 29: responses.Annotation
	(*ItemType)(nil),                                // 30: responses.ItemType
	(*MessageRole)(nil),                             // 31: responses.MessageRole
	(*ContentItemImageDetail)(nil),                  // 32: responses.ContentItemImageDetail
	(*ContentItemType)(nil),                         // 33: responses.ContentItemType
	(*ItemStatus)(nil),                              // 34: responses.ItemStatus
	(*ResponseStatus)(nil),                          // 35: responses.ResponseStatus
	(*ThinkingType)(nil),                            // 36: responses.ThinkingType
	(*TextType)(nil),                                // 37: responses.TextType
	(*ToolChoiceMode)(nil),                          // 38: responses.ToolChoiceMode
	(*ToolType)(nil),                                // 39: responses.ToolType
	(*UserLocationType)(nil),                        // 40: responses.UserLocationType
	(*ObjectType)(nil),                              // 41: responses.ObjectType
	(*ReasoningEffort)(nil),                         // 42: responses.ReasoningEffort
	(*EventType)(nil),                               // 43: responses.EventType
	(*IncludeType)(nil),                             // 44: responses.IncludeType
	(*CacheType)(nil),                               // 45: responses.CacheType
	(*ChunkingStrategyType)(nil),                    // 46: responses.ChunkingStrategyType
	(*ResponsesRequest)(nil),                        // 47: responses.ResponsesRequest
	(*ResponsesInput)(nil),                          // 48: responses.ResponsesInput
	(*ResponsesReasoning)(nil),                      // 49: responses.ResponsesReasoning
	(*InputItemList)(nil),                           // 50: responses.InputItemList
	(*InputItem)(nil),                               // 51: responses.InputItem
	(*ItemEasyMessage)(nil),                         // 52: responses.ItemEasyMessage
	(*MessageContent)(nil),                          // 53: responses.MessageContent
	(*ContentItemList)(nil),                         // 54: responses.ContentItemList
	(*ContentItem)(nil),                             // 55: responses.ContentItem
	(*OutputContentItem)(nil),                       // 56: responses.OutputContentItem
	(*ContentItemText)(nil),                         // 57: responses.ContentItemText
	(*TextTranslationOptions)(nil),                  // 58: responses.TextTranslationOptions
	(*ImagePixelLimit)(nil),                         // 59: responses.ImagePixelLimit
	(*ContentItemImage)(nil),                        // 60: responses.ContentItemImage
	(*ContentItemAudio)(nil),                        // 61: responses.ContentItemAudio
	(*AudioChunkingStrategy)(nil),                   // 62: responses.AudioChunkingStrategy
	(*ContentItemVideo)(nil),                        // 63: responses.ContentItemVideo
	(*ItemInputMessage)(nil),                        // 64: responses.ItemInputMessage
	(*ItemOutputMessage)(nil),                       // 65: responses.ItemOutputMessage
	(*ItemFunctionWebSearch)(nil),                   // 66: responses.ItemFunctionWebSearch
	(*ItemFunctionImageProcess)(nil),                // 67: responses.ItemFunctionImageProcess
	(*ItemFunctionMcpApprovalRequest)(nil),          // 68: responses.ItemFunctionMcpApprovalRequest
	(*ItemFunctionMcpApprovalResponse)(nil),         // 69: responses.ItemFunctionMcpApprovalResponse
	(*McpTool)(nil),                                 // 70: responses.McpTool
	(*ItemFunctionMcpListTools)(nil),                // 71: responses.ItemFunctionMcpListTools
	(*ItemFunctionMcpCall)(nil),                     // 72: responses.ItemFunctionMcpCall
	(*ActionType)(nil),                              // 73: responses.ActionType
	(*Action)(nil),                                  // 74: responses.Action
	(*OutputContentItemText)(nil),                   // 75: responses.OutputContentItemText
	(*ItemFunctionToolCall)(nil),                    // 76: responses.ItemFunctionToolCall
	(*ItemFunctionToolCallOutput)(nil),              // 77: responses.ItemFunctionToolCallOutput
	(*ItemReasoning)(nil),                           // 78: responses.ItemReasoning
	(*ItemTranscription)(nil),                       // 79: responses.ItemTranscription
	(*TranscriptionPart)(nil),                       // 80: responses.TranscriptionPart
	(*ItemReference)(nil),                           // 81: responses.ItemReference
	(*ResponsesThinking)(nil),                       // 82: responses.ResponsesThinking
	(*ResponsesToolChoice)(nil),                     // 83: responses.ResponsesToolChoice
	(*FunctionToolChoice)(nil),                      // 84: responses.FunctionToolChoice
	(*ResponsesTool)(nil),                           // 85: responses.ResponsesTool
	(*SourceType)(nil),                              // 86: responses.SourceType
	(*UserLocation)(nil),                            // 87: responses.UserLocation
	(*ToolWebSearch)(nil),                           // 88: responses.ToolWebSearch
	(*ImageProcessPointOptions)(nil),                // 89: responses.ImageProcessPointOptions
	(*ImageProcessGroundingOptions)(nil),            // 90: responses.ImageProcessGroundingOptions
	(*ImageProcessZoomOptions)(nil),                 // 91: responses.ImageProcessZoomOptions
	(*ImageProcessRotateOptions)(nil),               // 92: responses.ImageProcessRotateOptions
	(*ToolImageProcess)(nil),                        // 93: responses.ToolImageProcess
	(*McpAllowedToolsList)(nil),                     // 94: responses.McpAllowedToolsList
	(*McpAllowedToolsFilter)(nil),                   // 95: responses.McpAllowedToolsFilter
	(*McpAllowedTools)(nil),                         // 96: responses.McpAllowedTools
	(*McpRequireApproval)(nil),                      // 97: responses.McpRequireApproval
	(*ApprovalMode)(nil),                            // 98: responses.ApprovalMode
	(*McpToolApprovalFilter)(nil),                   // 99: responses.McpToolApprovalFilter
	(*McpToolApprovalFilterAlways)(nil),             // 100: responses.McpToolApprovalFilterAlways
	(*McpToolApprovalFilterNever)(nil),              // 101: responses.McpToolApprovalFilterNever
	(*ToolMcp)(nil),                                 // 102: responses.ToolMcp
	(*ToolFunction)(nil),                            // 103: responses.ToolFunction
	(*Bytes)(nil),                                   // 104: responses.Bytes
	(*ResponseObject)(nil),                          // 105: responses.ResponseObject
	(*WebSearchUsage)(nil),                          // 106: responses.WebSearchUsage
	(*McpUsage)(nil),                                // 107: responses.McpUsage
	(*ToolUsage)(nil),                               // 108: responses.ToolUsage
	(*OutputItem)(nil),                              // 109: responses.OutputItem
	(*Error)(nil),                                   // 110: responses.Error
	(*IncompleteDetails)(nil),                       // 111: responses.IncompleteDetails
	(*ContentFilter)(nil),                           // 112: responses.ContentFilter
	(*Usage)(nil),                                   // 113: responses.Usage
	(*InputTokensDetails)(nil),                      // 114: responses.InputTokensDetails
	(*OutputTokensDetails)(nil),                     // 115: responses.OutputTokensDetails
	(*Event)(nil),                                   // 116: responses.Event
	(*ResponseMcpApprovalRequestEvent)(nil),         // 117: responses.ResponseMcpApprovalRequestEvent
	(*ResponseWebSearchCallInProgressEvent)(nil),    // 118: responses.ResponseWebSearchCallInProgressEvent
	(*ResponseWebSearchCallSearchingEvent)(nil),     // 119: responses.ResponseWebSearchCallSearchingEvent
	(*ResponseWebSearchCallCompletedEvent)(nil),     // 120: responses.ResponseWebSearchCallCompletedEvent
	(*ResponseImageProcessAction)(nil),              // 121: responses.ResponseImageProcessAction
	(*ResponseImageProcessPointArgs)(nil),           // 122: responses.ResponseImageProcessPointArgs
	(*ResponseImageProcessError)(nil),               // 123: responses.ResponseImageProcessError
	(*ResponseImageProcessGroundingArgs)(nil),       // 124: responses.ResponseImageProcessGroundingArgs
	(*ResponseImageProcessRotateArgs)(nil),          // 125: responses.ResponseImageProcessRotateArgs
	(*ResponseImageProcessZoomArgs)(nil),            // 126: responses.ResponseImageProcessZoomArgs
	(*ResponseImageProcessArgs)(nil),                // 127: responses.ResponseImageProcessArgs
	(*ResponseImageProcessCallInProgressEvent)(nil), // 128: responses.ResponseImageProcessCallInProgressEvent
	(*ResponseImageProcessCallProcessingEvent)(nil), // 129: responses.ResponseImageProcessCallProcessingEvent
	(*ResponseImageProcessCallCompletedEvent)(nil),  // 130: responses.ResponseImageProcessCallCompletedEvent
	(*ResponseMcpListToolsInProgressEvent)(nil),     // 131: responses.ResponseMcpListToolsInProgressEvent
	(*ResponseMcpListToolsCompletedEvent)(nil),      // 132: responses.ResponseMcpListToolsCompletedEvent
	(*ResponseMcpCallInProgressEvent)(nil),          // 133: responses.ResponseMcpCallInProgressEvent
	(*ResponseMcpCallArgumentsDeltaEvent)(nil),      // 134: responses.ResponseMcpCallArgumentsDeltaEvent
	(*ResponseMcpCallArgumentsDoneEvent)(nil),       // 135: responses.ResponseMcpCallArgumentsDoneEvent
	(*ResponseMcpCallCompletedEvent)(nil),           // 136: responses.ResponseMcpCallCompletedEvent
	(*ResponseMcpCallFailedEvent)(nil),              // 137: responses.ResponseMcpCallFailedEvent
	(*ResponseEvent)(nil),                           // 138: responses.ResponseEvent
	(*ItemEvent)(nil),                               // 139: responses.ItemEvent
	(*ContentPartEvent)(nil),                        // 140: responses.ContentPartEvent
	(*OutputTextEvent)(nil),                         // 141: responses.OutputTextEvent
	(*ResponseAnnotationAddedEvent)(nil),            // 142: responses.ResponseAnnotationAddedEvent
	(*ReasoningSummaryPartEvent)(nil),               // 143: responses.ReasoningSummaryPartEvent
	(*ReasoningSummaryPart)(nil),                    // 144: responses.ReasoningSummaryPart
	(*ReasoningSummaryTextEvent)(nil),               // 145: responses.ReasoningSummaryTextEvent
	(*FunctionCallArgumentsEvent)(nil),              // 146: responses.FunctionCallArgumentsEvent
	(*TranscriptionPartEvent)(nil),                  // 147: responses.TranscriptionPartEvent
	(*TranscriptionTextEvent)(nil),                  // 148: responses.TranscriptionTextEvent
	(*ErrorEvent)(nil),                              // 149: responses.ErrorEvent
	(*ResponsesCaching)(nil),                        // 150: responses.ResponsesCaching
	(*ResponsesText)(nil),                           // 151: responses.ResponsesText
	(*TextFormat)(nil),                              // 152: responses.TextFormat
	(*DeleteResponseRequest)(nil),                   // 153: responses.DeleteResponseRequest
	(*DeleteResponseResponse)(nil),                  // 154: responses.DeleteResponseResponse
	(*GetResponseRequest)(nil),                      // 155: responses.GetResponseRequest
	(*ListInputItemsRequest)(nil),                   // 156: responses.ListInputItemsRequest
	(*ListInputItemsResponse)(nil),                  // 157: responses.ListInputItemsResponse
	(*AudioChunk)(nil),                              // 158: responses.AudioChunk
	nil,                                             // 159: responses.ToolMcp.HeadersEntry
	nil,                                             // 160: responses.WebSearchUsage.DetailsEntry
	nil,                                             // 161: responses.McpUsage.DetailsEntry
	(*structpb.Struct)(nil),                         // 162: google.protobuf.Struct
}
var file_responses_proto_depIdxs = []int32{
	2,   // 0: responses.Annotation.type:type_name -> responses.AnnotationType.Enum
	28,  // 1: responses.Annotation.cover_image:type_name -> responses.CoverImage
	48,  // 2: responses.ResponsesRequest.input:type_name -> responses.ResponsesInput
	82,  // 3: responses.ResponsesRequest.thinking:type_name -> responses.ResponsesThinking
	0,   // 4: responses.ResponsesRequest.service_tier:type_name -> responses.ResponsesServiceTier.Enum
	85,  // 5: responses.ResponsesRequest.tools:type_name -> responses.ResponsesTool
	18,  // 6: responses.ResponsesRequest.include:type_name -> responses.IncludeType.Enum
	150, // 7: responses.ResponsesRequest.caching:type_name -> responses.ResponsesCaching
	151, // 8: responses.ResponsesRequest.text:type_name -> responses.ResponsesText
	83,  // 9: responses.ResponsesRequest.tool_choice:type_name -> responses.ResponsesToolChoice
	49,  // 10: responses.ResponsesRequest.reasoning:type_name -> responses.ResponsesReasoning
	50,  // 11: responses.ResponsesInput.listValue:type_name -> responses.InputItemList
	16,  // 12: responses.ResponsesReasoning.effort:type_name -> responses.ReasoningEffort.Enum
	51,  // 13: responses.InputItemList.listValue:type_name -> responses.InputItem
	52,  // 14: responses.InputItem.easy_message:type_name -> responses.ItemEasyMessage
	64,  // 15: responses.InputItem.input_message:type_name -> responses.ItemInputMessage
	65,  // 16: responses.InputItem.output_message:type_name -> responses.ItemOutputMessage
	76,  // 17: responses.InputItem.function_tool_call:type_name -> responses.ItemFunctionToolCall
	77,  // 18: responses.InputItem.function_tool_call_output:type_name -> responses.ItemFunctionToolCallOutput
	78,  // 19: responses.InputItem.reasoning:type_name -> responses.ItemReasoning
	81,  // 20: responses.InputItem.reference:type_name -> responses.ItemReference
	67,  // 21: responses.InputItem.image_process:type_name -> responses.ItemFunctionImageProcess
	68,  // 22: responses.InputItem.mcp_approval_request:type_name -> responses.ItemFunctionMcpApprovalRequest
	69,  // 23: responses.InputItem.mcp_approval_response:type_name -> responses.ItemFunctionMcpApprovalResponse
	71,  // 24: responses.InputItem.mcp_list_tools:type_name -> responses.ItemFunctionMcpListTools
	72,  // 25: responses.InputItem.function_mcp_call:type_name -> responses.ItemFunctionMcpCall
	66,  // 26: responses.InputItem.function_web_search_call:type_name -> responses.ItemFunctionWebSearch
	4,   // 27: responses.ItemEasyMessage.type:type_name -> responses.ItemType.Enum
	5,   // 28: responses.ItemEasyMessage.role:type_name -> responses.MessageRole.Enum
	53,  // 29: responses.ItemEasyMessage.content:type_name -> responses.MessageContent
	54,  // 30: responses.MessageContent.ListValue:type_name -> responses.ContentItemList
	55,  // 31: responses.ContentItemList.ListValue:type_name -> responses.ContentItem
	57,  // 32: responses.ContentItem.text:type_name -> responses.ContentItemText
	60,  // 33: responses.ContentItem.image:type_name -> responses.ContentItemImage
	63,  // 34: responses.ContentItem.video:type_name -> responses.ContentItemVideo
	61,  // 35: responses.ContentItem.audio:type_name -> responses.ContentItemAudio
	75,  // 36: responses.OutputContentItem.text:type_name -> responses.OutputContentItemText
	7,   // 37: responses.ContentItemText.type:type_name -> responses.ContentItemType.Enum
	58,  // 38: responses.ContentItemText.translation_options:type_name -> responses.TextTranslationOptions
	7,   // 39: responses.ContentItemImage.type:type_name -> responses.ContentItemType.Enum
	6,   // 40: responses.ContentItemImage.detail:type_name -> responses.ContentItemImageDetail.Enum
	59,  // 41: responses.ContentItemImage.image_pixel_limit:type_name -> responses.ImagePixelLimit
	7,   // 42: responses.ContentItemAudio.type:type_name -> responses.ContentItemType.Enum
	62,  // 43: responses.ContentItemAudio.chunking_strategy:type_name -> responses.AudioChunkingStrategy
	20,  // 44: responses.AudioChunkingStrategy.type:type_name -> responses.ChunkingStrategyType.Enum
	7,   // 45: responses.ContentItemVideo.type:type_name -> responses.ContentItemType.Enum
	4,   // 46: responses.ItemInputMessage.type:type_name -> responses.ItemType.Enum
	5,   // 47: responses.ItemInputMessage.role:type_name -> responses.MessageRole.Enum
	55,  // 48: responses.ItemInputMessage.content:type_name -> responses.ContentItem
	8,   // 49: responses.ItemInputMessage.status:type_name -> responses.ItemStatus.Enum
	4,   // 50: responses.ItemOutputMessage.type:type_name -> responses.ItemType.Enum
	5,   // 51: responses.ItemOutputMessage.role:type_name -> responses.MessageRole.Enum
	56,  // 52: responses.ItemOutputMessage.content:type_name -> responses.OutputContentItem
	8,   // 53: responses.ItemOutputMessage.status:type_name -> responses.ItemStatus.Enum
	4,   // 54: responses.ItemFunctionWebSearch.type:type_name -> responses.ItemType.Enum
	74,  // 55: responses.ItemFunctionWebSearch.action:type_name -> responses.Action
	8,   // 56: responses.ItemFunctionWebSearch.status:type_name -> responses.ItemStatus.Enum
	4,   // 57: responses.ItemFunctionImageProcess.type:type_name -> responses.ItemType.Enum
	121, // 58: responses.ItemFunctionImageProcess.action:type_name -> responses.ResponseImageProcessAction
	127, // 59: responses.ItemFunctionImageProcess.arguments:type_name -> responses.ResponseImageProcessArgs
	8,   // 60: responses.ItemFunctionImageProcess.status:type_name -> responses.ItemStatus.Enum
	123, // 61: responses.ItemFunctionImageProcess.error:type_name -> responses.ResponseImageProcessError
	4,   // 62: responses.ItemFunctionMcpApprovalRequest.type:type_name -> responses.ItemType.Enum
	4,   // 63: responses.ItemFunctionMcpApprovalResponse.type:type_name -> responses.ItemType.Enum
	162, // 64: responses.McpTool.input_schema:type_name -> google.protobuf.Struct
	4,   // 65: responses.ItemFunctionMcpListTools.type:type_name -> responses.ItemType.Enum
	70,  // 66: responses.ItemFunctionMcpListTools.tools:type_name -> responses.McpTool
	4,   // 67: responses.ItemFunctionMcpCall.type:type_name -> responses.ItemType.Enum
	21,  // 68: responses.Action.type:type_name -> responses.ActionType.Enum
	7,   // 69: responses.OutputContentItemText.type:type_name -> responses.ContentItemType.Enum
	29,  // 70: responses.OutputContentItemText.annotations:type_name -> responses.Annotation
	4,   // 71: responses.ItemFunctionToolCall.type:type_name -> responses.ItemType.Enum
	8,   // 72: responses.ItemFunctionToolCall.status:type_name -> responses.ItemStatus.Enum
	4,   // 73: responses.ItemFunctionToolCallOutput.type:type_name -> responses.ItemType.Enum
	8,   // 74: responses.ItemFunctionToolCallOutput.status:type_name -> responses.ItemStatus.Enum
	4,   // 75: responses.ItemReasoning.type:type_name -> responses.ItemType.Enum
	144, // 76: responses.ItemReasoning.summary:type_name -> responses.ReasoningSummaryPart
	8,   // 77: responses.ItemReasoning.status:type_name -> responses.ItemStatus.Enum
	4,   // 78: responses.ItemTranscription.type:type_name -> responses.ItemType.Enum
	80,  // 79: responses.ItemTranscription.transcription:type_name -> responses.TranscriptionPart
	8,   // 80: responses.ItemTranscription.status:type_name -> responses.ItemStatus.Enum
	7,   // 81: responses.TranscriptionPart.type:type_name -> responses.ContentItemType.Enum
	158, // 82: responses.TranscriptionPart.chunks:type_name -> responses.AudioChunk
	4,   // 83: responses.ItemReference.type:type_name -> responses.ItemType.Enum
	10,  // 84: responses.ResponsesThinking.type:type_name -> responses.ThinkingType.Enum
	12,  // 85: responses.ResponsesToolChoice.mode:type_name -> responses.ToolChoiceMode.Enum
	84,  // 86: responses.ResponsesToolChoice.function_tool_choice:type_name -> responses.FunctionToolChoice
	13,  // 87: responses.FunctionToolChoice.type:type_name -> responses.ToolType.Enum
	103, // 88: responses.ResponsesTool.tool_function:type_name -> responses.ToolFunction
	88,  // 89: responses.ResponsesTool.tool_web_search:type_name -> responses.ToolWebSearch
	93,  // 90: responses.ResponsesTool.tool_image_process:type_name -> responses.ToolImageProcess
	102, // 91: responses.ResponsesTool.tool_mcp:type_name -> responses.ToolMcp
	14,  // 92: responses.UserLocation.type:type_name -> responses.UserLocationType.Enum
	13,  // 93: responses.ToolWebSearch.type:type_name -> responses.ToolType.Enum
	87,  // 94: responses.ToolWebSearch.user_location:type_name -> responses.UserLocation
	22,  // 95: responses.ToolWebSearch.sources:type_name -> responses.SourceType.Enum
	13,  // 96: responses.ToolImageProcess.type:type_name -> responses.ToolType.Enum
	89,  // 97: responses.ToolImageProcess.point:type_name -> responses.ImageProcessPointOptions
	90,  // 98: responses.ToolImageProcess.grounding:type_name -> responses.ImageProcessGroundingOptions
	91,  // 99: responses.ToolImageProcess.zoom:type_name -> responses.ImageProcessZoomOptions
	92,  // 100: responses.ToolImageProcess.rotate:type_name -> responses.ImageProcessRotateOptions
	94,  // 101: responses.McpAllowedTools.list:type_name -> responses.McpAllowedToolsList
	95,  // 102: responses.McpAllowedTools.filter:type_name -> responses.McpAllowedToolsFilter
	23,  // 103: responses.McpRequireApproval.mode:type_name -> responses.ApprovalMode.Enum
	99,  // 104: responses.McpRequireApproval.filter:type_name -> responses.McpToolApprovalFilter
	100, // 105: responses.McpToolApprovalFilter.always:type_name -> responses.McpToolApprovalFilterAlways
	101, // 106: responses.McpToolApprovalFilter.never:type_name -> responses.McpToolApprovalFilterNever
	13,  // 107: responses.ToolMcp.type:type_name -> responses.ToolType.Enum
	96,  // 108: responses.ToolMcp.allowed_tools:type_name -> responses.McpAllowedTools
	159, // 109: responses.ToolMcp.headers:type_name -> responses.ToolMcp.HeadersEntry
	97,  // 110: responses.ToolMcp.require_approval:type_name -> responses.McpRequireApproval
	13,  // 111: responses.ToolFunction.type:type_name -> responses.ToolType.Enum
	104, // 112: responses.ToolFunction.parameters:type_name -> responses.Bytes
	110, // 113: responses.ResponseObject.error:type_name -> responses.Error
	111, // 114: responses.ResponseObject.incomplete_details:type_name -> responses.IncompleteDetails
	15,  // 115: responses.ResponseObject.object:type_name -> responses.ObjectType.Enum
	109, // 116: responses.ResponseObject.output:type_name -> responses.OutputItem
	82,  // 117: responses.ResponseObject.thinking:type_name -> responses.ResponsesThinking
	0,   // 118: responses.ResponseObject.service_tier:type_name -> responses.ResponsesServiceTier.Enum
	9,   // 119: responses.ResponseObject.status:type_name -> responses.ResponseStatus.Enum
	85,  // 120: responses.ResponseObject.tools:type_name -> responses.ResponsesTool
	113, // 121: responses.ResponseObject.usage:type_name -> responses.Usage
	150, // 122: responses.ResponseObject.caching:type_name -> responses.ResponsesCaching
	151, // 123: responses.ResponseObject.text:type_name -> responses.ResponsesText
	83,  // 124: responses.ResponseObject.tool_choice:type_name -> responses.ResponsesToolChoice
	108, // 125: responses.ResponseObject.tool_usage:type_name -> responses.ToolUsage
	160, // 126: responses.WebSearchUsage.details:type_name -> responses.WebSearchUsage.DetailsEntry
	161, // 127: responses.McpUsage.details:type_name -> responses.McpUsage.DetailsEntry
	106, // 128: responses.ToolUsage.web_search_usage:type_name -> responses.WebSearchUsage
	107, // 129: responses.ToolUsage.mcp_usage:type_name -> responses.McpUsage
	65,  // 130: responses.OutputItem.output_message:type_name -> responses.ItemOutputMessage
	76,  // 131: responses.OutputItem.function_tool_call:type_name -> responses.ItemFunctionToolCall
	78,  // 132: responses.OutputItem.reasoning:type_name -> responses.ItemReasoning
	79,  // 133: responses.OutputItem.transcription:type_name -> responses.ItemTranscription
	66,  // 134: responses.OutputItem.function_web_search:type_name -> responses.ItemFunctionWebSearch
	67,  // 135: responses.OutputItem.function_image_process:type_name -> responses.ItemFunctionImageProcess
	68,  // 136: responses.OutputItem.function_mcp_approval_request:type_name -> responses.ItemFunctionMcpApprovalRequest
	71,  // 137: responses.OutputItem.function_mcp_list_tools:type_name -> responses.ItemFunctionMcpListTools
	72,  // 138: responses.OutputItem.function_mcp_call:type_name -> responses.ItemFunctionMcpCall
	112, // 139: responses.IncompleteDetails.content_filter:type_name -> responses.ContentFilter
	114, // 140: responses.Usage.input_tokens_details:type_name -> responses.InputTokensDetails
	115, // 141: responses.Usage.output_tokens_details:type_name -> responses.OutputTokensDetails
	138, // 142: responses.Event.response:type_name -> responses.ResponseEvent
	139, // 143: responses.Event.item:type_name -> responses.ItemEvent
	140, // 144: responses.Event.content_part:type_name -> responses.ContentPartEvent
	141, // 145: responses.Event.text:type_name -> responses.OutputTextEvent
	143, // 146: responses.Event.reasoning_part:type_name -> responses.ReasoningSummaryPartEvent
	145, // 147: responses.Event.reasoning_text:type_name -> responses.ReasoningSummaryTextEvent
	146, // 148: responses.Event.function_call_arguments:type_name -> responses.FunctionCallArgumentsEvent
	149, // 149: responses.Event.error:type_name -> responses.ErrorEvent
	147, // 150: responses.Event.transcription_part:type_name -> responses.TranscriptionPartEvent
	148, // 151: responses.Event.transcription_text:type_name -> responses.TranscriptionTextEvent
	118, // 152: responses.Event.response_web_search_call_in_progress:type_name -> responses.ResponseWebSearchCallInProgressEvent
	119, // 153: responses.Event.response_web_search_call_searching:type_name -> responses.ResponseWebSearchCallSearchingEvent
	120, // 154: responses.Event.response_web_search_call_completed:type_name -> responses.ResponseWebSearchCallCompletedEvent
	142, // 155: responses.Event.response_annotation_added:type_name -> responses.ResponseAnnotationAddedEvent
	128, // 156: responses.Event.response_image_process_call_in_progress:type_name -> responses.ResponseImageProcessCallInProgressEvent
	129, // 157: responses.Event.response_image_process_call_processing:type_name -> responses.ResponseImageProcessCallProcessingEvent
	130, // 158: responses.Event.response_image_process_call_completed:type_name -> responses.ResponseImageProcessCallCompletedEvent
	131, // 159: responses.Event.response_mcp_list_tools_in_progress:type_name -> responses.ResponseMcpListToolsInProgressEvent
	132, // 160: responses.Event.response_mcp_list_tools_completed:type_name -> responses.ResponseMcpListToolsCompletedEvent
	133, // 161: responses.Event.response_mcp_call_in_progress:type_name -> responses.ResponseMcpCallInProgressEvent
	134, // 162: responses.Event.response_mcp_call_arguments_delta:type_name -> responses.ResponseMcpCallArgumentsDeltaEvent
	135, // 163: responses.Event.response_mcp_call_arguments_done:type_name -> responses.ResponseMcpCallArgumentsDoneEvent
	136, // 164: responses.Event.response_mcp_call_completed:type_name -> responses.ResponseMcpCallCompletedEvent
	137, // 165: responses.Event.response_mcp_call_failed:type_name -> responses.ResponseMcpCallFailedEvent
	117, // 166: responses.Event.response_mcp_approval_request:type_name -> responses.ResponseMcpApprovalRequestEvent
	17,  // 167: responses.ResponseMcpApprovalRequestEvent.type:type_name -> responses.EventType.Enum
	68,  // 168: responses.ResponseMcpApprovalRequestEvent.function_mcp_approval_request:type_name -> responses.ItemFunctionMcpApprovalRequest
	17,  // 169: responses.ResponseWebSearchCallInProgressEvent.type:type_name -> responses.EventType.Enum
	17,  // 170: responses.ResponseWebSearchCallSearchingEvent.type:type_name -> responses.EventType.Enum
	17,  // 171: responses.ResponseWebSearchCallCompletedEvent.type:type_name -> responses.EventType.Enum
	122, // 172: responses.ResponseImageProcessArgs.point_args:type_name -> responses.ResponseImageProcessPointArgs
	124, // 173: responses.ResponseImageProcessArgs.grounding_args:type_name -> responses.ResponseImageProcessGroundingArgs
	125, // 174: responses.ResponseImageProcessArgs.rotate_args:type_name -> responses.ResponseImageProcessRotateArgs
	126, // 175: responses.ResponseImageProcessArgs.zoom_args:type_name -> responses.ResponseImageProcessZoomArgs
	17,  // 176: responses.ResponseImageProcessCallInProgressEvent.type:type_name -> responses.EventType.Enum
	17,  // 177: responses.ResponseImageProcessCallProcessingEvent.type:type_name -> responses.EventType.Enum
	121, // 178: responses.ResponseImageProcessCallProcessingEvent.action:type_name -> responses.ResponseImageProcessAction
	127, // 179: responses.ResponseImageProcessCallProcessingEvent.arguments:type_name -> responses.ResponseImageProcessArgs
	17,  // 180: responses.ResponseImageProcessCallCompletedEvent.type:type_name -> responses.EventType.Enum
	121, // 181: responses.ResponseImageProcessCallCompletedEvent.action:type_name -> responses.ResponseImageProcessAction
	127, // 182: responses.ResponseImageProcessCallCompletedEvent.arguments:type_name -> responses.ResponseImageProcessArgs
	123, // 183: responses.ResponseImageProcessCallCompletedEvent.error:type_name -> responses.ResponseImageProcessError
	17,  // 184: responses.ResponseMcpListToolsInProgressEvent.type:type_name -> responses.EventType.Enum
	17,  // 185: responses.ResponseMcpListToolsCompletedEvent.type:type_name -> responses.EventType.Enum
	17,  // 186: responses.ResponseMcpCallInProgressEvent.type:type_name -> responses.EventType.Enum
	17,  // 187: responses.ResponseMcpCallArgumentsDeltaEvent.type:type_name -> responses.EventType.Enum
	17,  // 188: responses.ResponseMcpCallArgumentsDoneEvent.type:type_name -> responses.EventType.Enum
	17,  // 189: responses.ResponseMcpCallCompletedEvent.type:type_name -> responses.EventType.Enum
	17,  // 190: responses.ResponseMcpCallFailedEvent.type:type_name -> responses.EventType.Enum
	17,  // 191: responses.ResponseEvent.type:type_name -> responses.EventType.Enum
	105, // 192: responses.ResponseEvent.response:type_name -> responses.ResponseObject
	17,  // 193: responses.ItemEvent.type:type_name -> responses.EventType.Enum
	109, // 194: responses.ItemEvent.item:type_name -> responses.OutputItem
	17,  // 195: responses.ContentPartEvent.type:type_name -> responses.EventType.Enum
	56,  // 196: responses.ContentPartEvent.part:type_name -> responses.OutputContentItem
	17,  // 197: responses.OutputTextEvent.type:type_name -> responses.EventType.Enum
	17,  // 198: responses.ResponseAnnotationAddedEvent.type:type_name -> responses.EventType.Enum
	29,  // 199: responses.ResponseAnnotationAddedEvent.annotation:type_name -> responses.Annotation
	17,  // 200: responses.ReasoningSummaryPartEvent.type:type_name -> responses.EventType.Enum
	144, // 201: responses.ReasoningSummaryPartEvent.part:type_name -> responses.ReasoningSummaryPart
	7,   // 202: responses.ReasoningSummaryPart.type:type_name -> responses.ContentItemType.Enum
	17,  // 203: responses.ReasoningSummaryTextEvent.type:type_name -> responses.EventType.Enum
	17,  // 204: responses.FunctionCallArgumentsEvent.type:type_name -> responses.EventType.Enum
	17,  // 205: responses.TranscriptionPartEvent.type:type_name -> responses.EventType.Enum
	80,  // 206: responses.TranscriptionPartEvent.part:type_name -> responses.TranscriptionPart
	17,  // 207: responses.TranscriptionTextEvent.type:type_name -> responses.EventType.Enum
	158, // 208: responses.TranscriptionTextEvent.chunks:type_name -> responses.AudioChunk
	17,  // 209: responses.ErrorEvent.type:type_name -> responses.EventType.Enum
	19,  // 210: responses.ResponsesCaching.type:type_name -> responses.CacheType.Enum
	152, // 211: responses.ResponsesText.format:type_name -> responses.TextFormat
	11,  // 212: responses.TextFormat.type:type_name -> responses.TextType.Enum
	104, // 213: responses.TextFormat.schema:type_name -> responses.Bytes
	15,  // 214: responses.DeleteResponseResponse.object:type_name -> responses.ObjectType.Enum
	18,  // 215: responses.ListInputItemsRequest.include:type_name -> responses.IncludeType.Enum
	15,  // 216: responses.ListInputItemsResponse.object:type_name -> responses.ObjectType.Enum
	51,  // 217: responses.ListInputItemsResponse.data:type_name -> responses.InputItem
	218, // [218:218] is the sub-list for method output_type
	218, // [218:218] is the sub-list for method input_type
	218, // [218:218] is the sub-list for extension type_name
	218, // [218:218] is the sub-list for extension extendee
	0,   // [0:218] is the sub-list for field type_name
}

func init() { file_responses_proto_init() }
func file_responses_proto_init() {
	if File_responses_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_responses_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponsesServiceTier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponsesTruncation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnnotationType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseImageProcessType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoverImage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Annotation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageRole); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContentItemImageDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContentItemType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThinkingType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToolChoiceMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToolType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserLocationType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReasoningEffort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncludeType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CacheType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChunkingStrategyType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponsesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponsesInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponsesReasoning); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputItemList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemEasyMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContentItemList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContentItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutputContentItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContentItemText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextTranslationOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImagePixelLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContentItemImage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContentItemAudio); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudioChunkingStrategy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContentItemVideo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemInputMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemOutputMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemFunctionWebSearch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemFunctionImageProcess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemFunctionMcpApprovalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemFunctionMcpApprovalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*McpTool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemFunctionMcpListTools); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemFunctionMcpCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Action); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutputContentItemText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemFunctionToolCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemFunctionToolCallOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemReasoning); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemTranscription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptionPart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponsesThinking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponsesToolChoice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FunctionToolChoice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponsesTool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SourceType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToolWebSearch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageProcessPointOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageProcessGroundingOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageProcessZoomOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageProcessRotateOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToolImageProcess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*McpAllowedToolsList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*McpAllowedToolsFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*McpAllowedTools); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*McpRequireApproval); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApprovalMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*McpToolApprovalFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*McpToolApprovalFilterAlways); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*McpToolApprovalFilterNever); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToolMcp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToolFunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bytes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebSearchUsage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*McpUsage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToolUsage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutputItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncompleteDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContentFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Usage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputTokensDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutputTokensDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseMcpApprovalRequestEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseWebSearchCallInProgressEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseWebSearchCallSearchingEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseWebSearchCallCompletedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseImageProcessAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseImageProcessPointArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseImageProcessError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseImageProcessGroundingArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseImageProcessRotateArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseImageProcessZoomArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseImageProcessArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseImageProcessCallInProgressEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseImageProcessCallProcessingEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseImageProcessCallCompletedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseMcpListToolsInProgressEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseMcpListToolsCompletedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseMcpCallInProgressEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseMcpCallArgumentsDeltaEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseMcpCallArgumentsDoneEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseMcpCallCompletedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseMcpCallFailedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContentPartEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutputTextEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseAnnotationAddedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReasoningSummaryPartEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReasoningSummaryPart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReasoningSummaryTextEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FunctionCallArgumentsEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptionPartEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptionTextEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponsesCaching); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponsesText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextFormat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteResponseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteResponseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResponseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInputItemsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInputItemsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_responses_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudioChunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_responses_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_responses_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_responses_proto_msgTypes[23].OneofWrappers = []interface{}{}
	file_responses_proto_msgTypes[24].OneofWrappers = []interface{}{
		(*ResponsesInput_StringValue)(nil),
		(*ResponsesInput_ListValue)(nil),
	}
	file_responses_proto_msgTypes[27].OneofWrappers = []interface{}{
		(*InputItem_EasyMessage)(nil),
		(*InputItem_InputMessage)(nil),
		(*InputItem_OutputMessage)(nil),
		(*InputItem_FunctionToolCall)(nil),
		(*InputItem_FunctionToolCallOutput)(nil),
		(*InputItem_Reasoning)(nil),
		(*InputItem_Reference)(nil),
		(*InputItem_ImageProcess)(nil),
		(*InputItem_McpApprovalRequest)(nil),
		(*InputItem_McpApprovalResponse)(nil),
		(*InputItem_McpListTools)(nil),
		(*InputItem_FunctionMcpCall)(nil),
		(*InputItem_FunctionWebSearchCall)(nil),
	}
	file_responses_proto_msgTypes[28].OneofWrappers = []interface{}{}
	file_responses_proto_msgTypes[29].OneofWrappers = []interface{}{
		(*MessageContent_StringValue)(nil),
		(*MessageContent_ListValue)(nil),
	}
	file_responses_proto_msgTypes[31].OneofWrappers = []interface{}{
		(*ContentItem_Text)(nil),
		(*ContentItem_Image)(nil),
		(*ContentItem_Video)(nil),
		(*ContentItem_Audio)(nil),
	}
	file_responses_proto_msgTypes[32].OneofWrappers = []interface{}{
		(*OutputContentItem_Text)(nil),
	}
	file_responses_proto_msgTypes[33].OneofWrappers = []interface{}{}
	file_responses_proto_msgTypes[35].OneofWrappers = []interface{}{}
	file_responses_proto_msgTypes[36].OneofWrappers = []interface{}{}
	file_responses_proto_msgTypes[37].OneofWrappers = []interface{}{}
	file_responses_proto_msgTypes[38].OneofWrappers = []interface{}{}
	file_responses_proto_msgTypes[39].OneofWrappers = []interface{}{}
	file_responses_proto_msgTypes[40].OneofWrappers = []interface{}{}
	file_responses_proto_msgTypes[43].OneofWrappers = []interface{}{}
	file_responses_proto_msgTypes[45].OneofWrappers = []interface{}{}
	file_responses_proto_msgTypes[46].OneofWrappers = []interface{}{}
	file_responses_proto_msgTypes[48].OneofWrappers = []interface{}{}
	file_responses_proto_msgTypes[52].OneofWrappers = []interface{}{}
	file_responses_proto_msgTypes[53].OneofWrappers = []interface{}{}
	file_responses_proto_msgTypes[54].OneofWrappers = []interface{}{}
	file_responses_proto_msgTypes[55].OneofWrappers = []interface{}{}
	file_responses_proto_msgTypes[57].OneofWrappers = []interface{}{}
	file_responses_proto_msgTypes[58].OneofWrappers = []interface{}{}
	file_responses_proto_msgTypes[59].OneofWrappers = []interface{}{
		(*ResponsesToolChoice_Mode)(nil),
		(*ResponsesToolChoice_FunctionToolChoice)(nil),
	}
	file_responses_proto_msgTypes[61].OneofWrappers = []interface{}{
		(*ResponsesTool_ToolFunction)(nil),
		(*ResponsesTool_ToolWebSearch)(nil),
		(*ResponsesTool_ToolImageProcess)(nil),
		(*ResponsesTool_ToolMcp)(nil),
	}
	file_responses_proto_msgTypes[63].OneofWrappers = []interface{}{}
	file_responses_proto_msgTypes[64].OneofWrappers = []interface{}{}
	file_responses_proto_msgTypes[65].OneofWrappers = []interface{}{}
	file_responses_proto_msgTypes[66].OneofWrappers = []interface{}{}
	file_responses_proto_msgTypes[67].OneofWrappers = []interface{}{}
	file_responses_proto_msgTypes[68].OneofWrappers = []interface{}{}
	file_responses_proto_msgTypes[69].OneofWrappers = []interface{}{}
	file_responses_proto_msgTypes[72].OneofWrappers = []interface{}{
		(*McpAllowedTools_List)(nil),
		(*McpAllowedTools_Filter)(nil),
	}
	file_responses_proto_msgTypes[73].OneofWrappers = []interface{}{
		(*McpRequireApproval_Mode)(nil),
		(*McpRequireApproval_Filter)(nil),
	}
	file_responses_proto_msgTypes[75].OneofWrappers = []interface{}{}
	file_responses_proto_msgTypes[78].OneofWrappers = []interface{}{}
	file_responses_proto_msgTypes[79].OneofWrappers = []interface{}{}
	file_responses_proto_msgTypes[81].OneofWrappers = []interface{}{}
	file_responses_proto_msgTypes[84].OneofWrappers = []interface{}{}
	file_responses_proto_msgTypes[85].OneofWrappers = []interface{}{
		(*OutputItem_OutputMessage)(nil),
		(*OutputItem_FunctionToolCall)(nil),
		(*OutputItem_Reasoning)(nil),
		(*OutputItem_Transcription)(nil),
		(*OutputItem_FunctionWebSearch)(nil),
		(*OutputItem_FunctionImageProcess)(nil),
		(*OutputItem_FunctionMcpApprovalRequest)(nil),
		(*OutputItem_FunctionMcpListTools)(nil),
		(*OutputItem_FunctionMcpCall)(nil),
	}
	file_responses_proto_msgTypes[87].OneofWrappers = []interface{}{}
	file_responses_proto_msgTypes[92].OneofWrappers = []interface{}{
		(*Event_Response)(nil),
		(*Event_Item)(nil),
		(*Event_ContentPart)(nil),
		(*Event_Text)(nil),
		(*Event_ReasoningPart)(nil),
		(*Event_ReasoningText)(nil),
		(*Event_FunctionCallArguments)(nil),
		(*Event_Error)(nil),
		(*Event_TranscriptionPart)(nil),
		(*Event_TranscriptionText)(nil),
		(*Event_ResponseWebSearchCallInProgress)(nil),
		(*Event_ResponseWebSearchCallSearching)(nil),
		(*Event_ResponseWebSearchCallCompleted)(nil),
		(*Event_ResponseAnnotationAdded)(nil),
		(*Event_ResponseImageProcessCallInProgress)(nil),
		(*Event_ResponseImageProcessCallProcessing)(nil),
		(*Event_ResponseImageProcessCallCompleted)(nil),
		(*Event_ResponseMcpListToolsInProgress)(nil),
		(*Event_ResponseMcpListToolsCompleted)(nil),
		(*Event_ResponseMcpCallInProgress)(nil),
		(*Event_ResponseMcpCallArgumentsDelta)(nil),
		(*Event_ResponseMcpCallArgumentsDone)(nil),
		(*Event_ResponseMcpCallCompleted)(nil),
		(*Event_ResponseMcpCallFailed)(nil),
		(*Event_ResponseMcpApprovalRequest)(nil),
	}
	file_responses_proto_msgTypes[97].OneofWrappers = []interface{}{}
	file_responses_proto_msgTypes[103].OneofWrappers = []interface{}{
		(*ResponseImageProcessArgs_PointArgs)(nil),
		(*ResponseImageProcessArgs_GroundingArgs)(nil),
		(*ResponseImageProcessArgs_RotateArgs)(nil),
		(*ResponseImageProcessArgs_ZoomArgs)(nil),
	}
	file_responses_proto_msgTypes[106].OneofWrappers = []interface{}{}
	file_responses_proto_msgTypes[117].OneofWrappers = []interface{}{}
	file_responses_proto_msgTypes[118].OneofWrappers = []interface{}{}
	file_responses_proto_msgTypes[121].OneofWrappers = []interface{}{}
	file_responses_proto_msgTypes[122].OneofWrappers = []interface{}{}
	file_responses_proto_msgTypes[124].OneofWrappers = []interface{}{}
	file_responses_proto_msgTypes[125].OneofWrappers = []interface{}{}
	file_responses_proto_msgTypes[126].OneofWrappers = []interface{}{}
	file_responses_proto_msgTypes[128].OneofWrappers = []interface{}{}
	file_responses_proto_msgTypes[132].OneofWrappers = []interface{}{}
	file_responses_proto_msgTypes[133].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_responses_proto_rawDesc,
			NumEnums:      24,
			NumMessages:   138,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_responses_proto_goTypes,
		DependencyIndexes: file_responses_proto_depIdxs,
		EnumInfos:         file_responses_proto_enumTypes,
		MessageInfos:      file_responses_proto_msgTypes,
	}.Build()
	File_responses_proto = out.File
	file_responses_proto_rawDesc = nil
	file_responses_proto_goTypes = nil
	file_responses_proto_depIdxs = nil
}
