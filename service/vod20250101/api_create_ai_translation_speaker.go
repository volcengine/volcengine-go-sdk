// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vod20250101

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opCreateAITranslationSpeakerCommon = "CreateAITranslationSpeaker"

// CreateAITranslationSpeakerCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateAITranslationSpeakerCommon operation. The "output" return
// value will be populated with the CreateAITranslationSpeakerCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateAITranslationSpeakerCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateAITranslationSpeakerCommon Send returns without error.
//
// See CreateAITranslationSpeakerCommon for more information on using the CreateAITranslationSpeakerCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateAITranslationSpeakerCommonRequest method.
//    req, resp := client.CreateAITranslationSpeakerCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VOD20250101) CreateAITranslationSpeakerCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateAITranslationSpeakerCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateAITranslationSpeakerCommon API operation for VOD20250101.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VOD20250101's
// API operation CreateAITranslationSpeakerCommon for usage and error information.
func (c *VOD20250101) CreateAITranslationSpeakerCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateAITranslationSpeakerCommonRequest(input)
	return out, req.Send()
}

// CreateAITranslationSpeakerCommonWithContext is the same as CreateAITranslationSpeakerCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateAITranslationSpeakerCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VOD20250101) CreateAITranslationSpeakerCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateAITranslationSpeakerCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateAITranslationSpeaker = "CreateAITranslationSpeaker"

// CreateAITranslationSpeakerRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateAITranslationSpeaker operation. The "output" return
// value will be populated with the CreateAITranslationSpeakerCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateAITranslationSpeakerCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateAITranslationSpeakerCommon Send returns without error.
//
// See CreateAITranslationSpeaker for more information on using the CreateAITranslationSpeaker
// API call, and error handling.
//
//    // Example sending a request using the CreateAITranslationSpeakerRequest method.
//    req, resp := client.CreateAITranslationSpeakerRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VOD20250101) CreateAITranslationSpeakerRequest(input *CreateAITranslationSpeakerInput) (req *request.Request, output *CreateAITranslationSpeakerOutput) {
	op := &request.Operation{
		Name:       opCreateAITranslationSpeaker,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateAITranslationSpeakerInput{}
	}

	output = &CreateAITranslationSpeakerOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateAITranslationSpeaker API operation for VOD20250101.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VOD20250101's
// API operation CreateAITranslationSpeaker for usage and error information.
func (c *VOD20250101) CreateAITranslationSpeaker(input *CreateAITranslationSpeakerInput) (*CreateAITranslationSpeakerOutput, error) {
	req, out := c.CreateAITranslationSpeakerRequest(input)
	return out, req.Send()
}

// CreateAITranslationSpeakerWithContext is the same as CreateAITranslationSpeaker with the addition of
// the ability to pass a context and additional request options.
//
// See CreateAITranslationSpeaker for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VOD20250101) CreateAITranslationSpeakerWithContext(ctx volcengine.Context, input *CreateAITranslationSpeakerInput, opts ...request.Option) (*CreateAITranslationSpeakerOutput, error) {
	req, out := c.CreateAITranslationSpeakerRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type CreateAITranslationSpeakerInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// ProjectId is a required field
	ProjectId *string `type:"string" json:",omitempty" required:"true"`

	// SpaceName is a required field
	SpaceName *string `type:"string" json:",omitempty" required:"true"`

	// SpeakerName is a required field
	SpeakerName *string `type:"string" json:",omitempty" required:"true"`

	// Voice is a required field
	Voice *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s CreateAITranslationSpeakerInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateAITranslationSpeakerInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateAITranslationSpeakerInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CreateAITranslationSpeakerInput"}
	if s.ProjectId == nil {
		invalidParams.Add(request.NewErrParamRequired("ProjectId"))
	}
	if s.SpaceName == nil {
		invalidParams.Add(request.NewErrParamRequired("SpaceName"))
	}
	if s.SpeakerName == nil {
		invalidParams.Add(request.NewErrParamRequired("SpeakerName"))
	}
	if s.Voice == nil {
		invalidParams.Add(request.NewErrParamRequired("Voice"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetProjectId sets the ProjectId field's value.
func (s *CreateAITranslationSpeakerInput) SetProjectId(v string) *CreateAITranslationSpeakerInput {
	s.ProjectId = &v
	return s
}

// SetSpaceName sets the SpaceName field's value.
func (s *CreateAITranslationSpeakerInput) SetSpaceName(v string) *CreateAITranslationSpeakerInput {
	s.SpaceName = &v
	return s
}

// SetSpeakerName sets the SpeakerName field's value.
func (s *CreateAITranslationSpeakerInput) SetSpeakerName(v string) *CreateAITranslationSpeakerInput {
	s.SpeakerName = &v
	return s
}

// SetVoice sets the Voice field's value.
func (s *CreateAITranslationSpeakerInput) SetVoice(v string) *CreateAITranslationSpeakerInput {
	s.Voice = &v
	return s
}

type CreateAITranslationSpeakerOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	ProjectBaseInfo *ProjectBaseInfoForCreateAITranslationSpeakerOutput `type:"structure" json:",omitempty"`

	Speaker *SpeakerForCreateAITranslationSpeakerOutput `type:"structure" json:",omitempty"`
}

// String returns the string representation
func (s CreateAITranslationSpeakerOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateAITranslationSpeakerOutput) GoString() string {
	return s.String()
}

// SetProjectBaseInfo sets the ProjectBaseInfo field's value.
func (s *CreateAITranslationSpeakerOutput) SetProjectBaseInfo(v *ProjectBaseInfoForCreateAITranslationSpeakerOutput) *CreateAITranslationSpeakerOutput {
	s.ProjectBaseInfo = v
	return s
}

// SetSpeaker sets the Speaker field's value.
func (s *CreateAITranslationSpeakerOutput) SetSpeaker(v *SpeakerForCreateAITranslationSpeakerOutput) *CreateAITranslationSpeakerOutput {
	s.Speaker = v
	return s
}

type ProjectBaseInfoForCreateAITranslationSpeakerOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	ProjectId *string `type:"string" json:",omitempty"`

	ProjectVersion *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ProjectBaseInfoForCreateAITranslationSpeakerOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ProjectBaseInfoForCreateAITranslationSpeakerOutput) GoString() string {
	return s.String()
}

// SetProjectId sets the ProjectId field's value.
func (s *ProjectBaseInfoForCreateAITranslationSpeakerOutput) SetProjectId(v string) *ProjectBaseInfoForCreateAITranslationSpeakerOutput {
	s.ProjectId = &v
	return s
}

// SetProjectVersion sets the ProjectVersion field's value.
func (s *ProjectBaseInfoForCreateAITranslationSpeakerOutput) SetProjectVersion(v string) *ProjectBaseInfoForCreateAITranslationSpeakerOutput {
	s.ProjectVersion = &v
	return s
}

type SpeakerForCreateAITranslationSpeakerOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	CurrentVoice *string `type:"string" json:",omitempty"`

	Id *string `type:"string" json:",omitempty"`

	Name *string `type:"string" json:",omitempty"`

	ProjectId *string `type:"string" json:",omitempty"`

	Voice *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s SpeakerForCreateAITranslationSpeakerOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s SpeakerForCreateAITranslationSpeakerOutput) GoString() string {
	return s.String()
}

// SetCurrentVoice sets the CurrentVoice field's value.
func (s *SpeakerForCreateAITranslationSpeakerOutput) SetCurrentVoice(v string) *SpeakerForCreateAITranslationSpeakerOutput {
	s.CurrentVoice = &v
	return s
}

// SetId sets the Id field's value.
func (s *SpeakerForCreateAITranslationSpeakerOutput) SetId(v string) *SpeakerForCreateAITranslationSpeakerOutput {
	s.Id = &v
	return s
}

// SetName sets the Name field's value.
func (s *SpeakerForCreateAITranslationSpeakerOutput) SetName(v string) *SpeakerForCreateAITranslationSpeakerOutput {
	s.Name = &v
	return s
}

// SetProjectId sets the ProjectId field's value.
func (s *SpeakerForCreateAITranslationSpeakerOutput) SetProjectId(v string) *SpeakerForCreateAITranslationSpeakerOutput {
	s.ProjectId = &v
	return s
}

// SetVoice sets the Voice field's value.
func (s *SpeakerForCreateAITranslationSpeakerOutput) SetVoice(v string) *SpeakerForCreateAITranslationSpeakerOutput {
	s.Voice = &v
	return s
}
