// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vod20250101

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opRefreshAITranslationProjectCommon = "RefreshAITranslationProject"

// RefreshAITranslationProjectCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the RefreshAITranslationProjectCommon operation. The "output" return
// value will be populated with the RefreshAITranslationProjectCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned RefreshAITranslationProjectCommon Request to send the API call to the service.
// the "output" return value is not valid until after RefreshAITranslationProjectCommon Send returns without error.
//
// See RefreshAITranslationProjectCommon for more information on using the RefreshAITranslationProjectCommon
// API call, and error handling.
//
//    // Example sending a request using the RefreshAITranslationProjectCommonRequest method.
//    req, resp := client.RefreshAITranslationProjectCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VOD20250101) RefreshAITranslationProjectCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opRefreshAITranslationProjectCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// RefreshAITranslationProjectCommon API operation for VOD20250101.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VOD20250101's
// API operation RefreshAITranslationProjectCommon for usage and error information.
func (c *VOD20250101) RefreshAITranslationProjectCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.RefreshAITranslationProjectCommonRequest(input)
	return out, req.Send()
}

// RefreshAITranslationProjectCommonWithContext is the same as RefreshAITranslationProjectCommon with the addition of
// the ability to pass a context and additional request options.
//
// See RefreshAITranslationProjectCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VOD20250101) RefreshAITranslationProjectCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.RefreshAITranslationProjectCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opRefreshAITranslationProject = "RefreshAITranslationProject"

// RefreshAITranslationProjectRequest generates a "volcengine/request.Request" representing the
// client's request for the RefreshAITranslationProject operation. The "output" return
// value will be populated with the RefreshAITranslationProjectCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned RefreshAITranslationProjectCommon Request to send the API call to the service.
// the "output" return value is not valid until after RefreshAITranslationProjectCommon Send returns without error.
//
// See RefreshAITranslationProject for more information on using the RefreshAITranslationProject
// API call, and error handling.
//
//    // Example sending a request using the RefreshAITranslationProjectRequest method.
//    req, resp := client.RefreshAITranslationProjectRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VOD20250101) RefreshAITranslationProjectRequest(input *RefreshAITranslationProjectInput) (req *request.Request, output *RefreshAITranslationProjectOutput) {
	op := &request.Operation{
		Name:       opRefreshAITranslationProject,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &RefreshAITranslationProjectInput{}
	}

	output = &RefreshAITranslationProjectOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// RefreshAITranslationProject API operation for VOD20250101.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VOD20250101's
// API operation RefreshAITranslationProject for usage and error information.
func (c *VOD20250101) RefreshAITranslationProject(input *RefreshAITranslationProjectInput) (*RefreshAITranslationProjectOutput, error) {
	req, out := c.RefreshAITranslationProjectRequest(input)
	return out, req.Send()
}

// RefreshAITranslationProjectWithContext is the same as RefreshAITranslationProject with the addition of
// the ability to pass a context and additional request options.
//
// See RefreshAITranslationProject for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VOD20250101) RefreshAITranslationProjectWithContext(ctx volcengine.Context, input *RefreshAITranslationProjectInput, opts ...request.Option) (*RefreshAITranslationProjectOutput, error) {
	req, out := c.RefreshAITranslationProjectRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ProjectBaseInfoForRefreshAITranslationProjectOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	ProjectId *string `type:"string" json:",omitempty"`

	ProjectVersion *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ProjectBaseInfoForRefreshAITranslationProjectOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ProjectBaseInfoForRefreshAITranslationProjectOutput) GoString() string {
	return s.String()
}

// SetProjectId sets the ProjectId field's value.
func (s *ProjectBaseInfoForRefreshAITranslationProjectOutput) SetProjectId(v string) *ProjectBaseInfoForRefreshAITranslationProjectOutput {
	s.ProjectId = &v
	return s
}

// SetProjectVersion sets the ProjectVersion field's value.
func (s *ProjectBaseInfoForRefreshAITranslationProjectOutput) SetProjectVersion(v string) *ProjectBaseInfoForRefreshAITranslationProjectOutput {
	s.ProjectVersion = &v
	return s
}

type RefreshAITranslationProjectInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// CurrentVersion is a required field
	CurrentVersion *string `type:"string" json:",omitempty" required:"true"`

	// ProjectId is a required field
	ProjectId *string `type:"string" json:",omitempty" required:"true"`

	// RefreshType is a required field
	RefreshType *string `type:"string" json:",omitempty" required:"true"`

	// SpaceName is a required field
	SpaceName *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s RefreshAITranslationProjectInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s RefreshAITranslationProjectInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *RefreshAITranslationProjectInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "RefreshAITranslationProjectInput"}
	if s.CurrentVersion == nil {
		invalidParams.Add(request.NewErrParamRequired("CurrentVersion"))
	}
	if s.ProjectId == nil {
		invalidParams.Add(request.NewErrParamRequired("ProjectId"))
	}
	if s.RefreshType == nil {
		invalidParams.Add(request.NewErrParamRequired("RefreshType"))
	}
	if s.SpaceName == nil {
		invalidParams.Add(request.NewErrParamRequired("SpaceName"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetCurrentVersion sets the CurrentVersion field's value.
func (s *RefreshAITranslationProjectInput) SetCurrentVersion(v string) *RefreshAITranslationProjectInput {
	s.CurrentVersion = &v
	return s
}

// SetProjectId sets the ProjectId field's value.
func (s *RefreshAITranslationProjectInput) SetProjectId(v string) *RefreshAITranslationProjectInput {
	s.ProjectId = &v
	return s
}

// SetRefreshType sets the RefreshType field's value.
func (s *RefreshAITranslationProjectInput) SetRefreshType(v string) *RefreshAITranslationProjectInput {
	s.RefreshType = &v
	return s
}

// SetSpaceName sets the SpaceName field's value.
func (s *RefreshAITranslationProjectInput) SetSpaceName(v string) *RefreshAITranslationProjectInput {
	s.SpaceName = &v
	return s
}

type RefreshAITranslationProjectOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	ProjectBaseInfo *ProjectBaseInfoForRefreshAITranslationProjectOutput `type:"structure" json:",omitempty"`
}

// String returns the string representation
func (s RefreshAITranslationProjectOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s RefreshAITranslationProjectOutput) GoString() string {
	return s.String()
}

// SetProjectBaseInfo sets the ProjectBaseInfo field's value.
func (s *RefreshAITranslationProjectOutput) SetProjectBaseInfo(v *ProjectBaseInfoForRefreshAITranslationProjectOutput) *RefreshAITranslationProjectOutput {
	s.ProjectBaseInfo = v
	return s
}
