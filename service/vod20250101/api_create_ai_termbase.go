// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vod20250101

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opCreateAITermbaseCommon = "CreateAITermbase"

// CreateAITermbaseCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateAITermbaseCommon operation. The "output" return
// value will be populated with the CreateAITermbaseCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateAITermbaseCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateAITermbaseCommon Send returns without error.
//
// See CreateAITermbaseCommon for more information on using the CreateAITermbaseCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateAITermbaseCommonRequest method.
//    req, resp := client.CreateAITermbaseCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VOD20250101) CreateAITermbaseCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateAITermbaseCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateAITermbaseCommon API operation for VOD20250101.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VOD20250101's
// API operation CreateAITermbaseCommon for usage and error information.
func (c *VOD20250101) CreateAITermbaseCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateAITermbaseCommonRequest(input)
	return out, req.Send()
}

// CreateAITermbaseCommonWithContext is the same as CreateAITermbaseCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateAITermbaseCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VOD20250101) CreateAITermbaseCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateAITermbaseCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateAITermbase = "CreateAITermbase"

// CreateAITermbaseRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateAITermbase operation. The "output" return
// value will be populated with the CreateAITermbaseCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateAITermbaseCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateAITermbaseCommon Send returns without error.
//
// See CreateAITermbase for more information on using the CreateAITermbase
// API call, and error handling.
//
//    // Example sending a request using the CreateAITermbaseRequest method.
//    req, resp := client.CreateAITermbaseRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VOD20250101) CreateAITermbaseRequest(input *CreateAITermbaseInput) (req *request.Request, output *CreateAITermbaseOutput) {
	op := &request.Operation{
		Name:       opCreateAITermbase,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateAITermbaseInput{}
	}

	output = &CreateAITermbaseOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateAITermbase API operation for VOD20250101.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VOD20250101's
// API operation CreateAITermbase for usage and error information.
func (c *VOD20250101) CreateAITermbase(input *CreateAITermbaseInput) (*CreateAITermbaseOutput, error) {
	req, out := c.CreateAITermbaseRequest(input)
	return out, req.Send()
}

// CreateAITermbaseWithContext is the same as CreateAITermbase with the addition of
// the ability to pass a context and additional request options.
//
// See CreateAITermbase for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VOD20250101) CreateAITermbaseWithContext(ctx volcengine.Context, input *CreateAITermbaseInput, opts ...request.Option) (*CreateAITermbaseOutput, error) {
	req, out := c.CreateAITermbaseRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type CreateAITermbaseInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Description *string `type:"string" json:",omitempty"`

	// Name is a required field
	Name *string `type:"string" json:",omitempty" required:"true"`

	// Scenario is a required field
	Scenario *string `type:"string" json:",omitempty" required:"true"`

	// SourceLanguage is a required field
	SourceLanguage *string `type:"string" json:",omitempty" required:"true"`

	// SpaceName is a required field
	SpaceName *string `type:"string" json:",omitempty" required:"true"`

	TargetLanguage *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s CreateAITermbaseInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateAITermbaseInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateAITermbaseInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CreateAITermbaseInput"}
	if s.Name == nil {
		invalidParams.Add(request.NewErrParamRequired("Name"))
	}
	if s.Scenario == nil {
		invalidParams.Add(request.NewErrParamRequired("Scenario"))
	}
	if s.SourceLanguage == nil {
		invalidParams.Add(request.NewErrParamRequired("SourceLanguage"))
	}
	if s.SpaceName == nil {
		invalidParams.Add(request.NewErrParamRequired("SpaceName"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDescription sets the Description field's value.
func (s *CreateAITermbaseInput) SetDescription(v string) *CreateAITermbaseInput {
	s.Description = &v
	return s
}

// SetName sets the Name field's value.
func (s *CreateAITermbaseInput) SetName(v string) *CreateAITermbaseInput {
	s.Name = &v
	return s
}

// SetScenario sets the Scenario field's value.
func (s *CreateAITermbaseInput) SetScenario(v string) *CreateAITermbaseInput {
	s.Scenario = &v
	return s
}

// SetSourceLanguage sets the SourceLanguage field's value.
func (s *CreateAITermbaseInput) SetSourceLanguage(v string) *CreateAITermbaseInput {
	s.SourceLanguage = &v
	return s
}

// SetSpaceName sets the SpaceName field's value.
func (s *CreateAITermbaseInput) SetSpaceName(v string) *CreateAITermbaseInput {
	s.SpaceName = &v
	return s
}

// SetTargetLanguage sets the TargetLanguage field's value.
func (s *CreateAITermbaseInput) SetTargetLanguage(v string) *CreateAITermbaseInput {
	s.TargetLanguage = &v
	return s
}

type CreateAITermbaseOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Termbase *TermbaseForCreateAITermbaseOutput `type:"structure" json:",omitempty"`
}

// String returns the string representation
func (s CreateAITermbaseOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateAITermbaseOutput) GoString() string {
	return s.String()
}

// SetTermbase sets the Termbase field's value.
func (s *CreateAITermbaseOutput) SetTermbase(v *TermbaseForCreateAITermbaseOutput) *CreateAITermbaseOutput {
	s.Termbase = v
	return s
}

type TermItemForCreateAITermbaseOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	SourceText *string `type:"string" json:",omitempty"`

	TargetText *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s TermItemForCreateAITermbaseOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s TermItemForCreateAITermbaseOutput) GoString() string {
	return s.String()
}

// SetSourceText sets the SourceText field's value.
func (s *TermItemForCreateAITermbaseOutput) SetSourceText(v string) *TermItemForCreateAITermbaseOutput {
	s.SourceText = &v
	return s
}

// SetTargetText sets the TargetText field's value.
func (s *TermItemForCreateAITermbaseOutput) SetTargetText(v string) *TermItemForCreateAITermbaseOutput {
	s.TargetText = &v
	return s
}

type TermbaseForCreateAITermbaseOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Description *string `type:"string" json:",omitempty"`

	Id *string `type:"string" json:",omitempty"`

	Name *string `type:"string" json:",omitempty"`

	Scenario *string `type:"string" json:",omitempty"`

	SourceLanguage *string `type:"string" json:",omitempty"`

	TargetLanguage *string `type:"string" json:",omitempty"`

	TermItems []*TermItemForCreateAITermbaseOutput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s TermbaseForCreateAITermbaseOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s TermbaseForCreateAITermbaseOutput) GoString() string {
	return s.String()
}

// SetDescription sets the Description field's value.
func (s *TermbaseForCreateAITermbaseOutput) SetDescription(v string) *TermbaseForCreateAITermbaseOutput {
	s.Description = &v
	return s
}

// SetId sets the Id field's value.
func (s *TermbaseForCreateAITermbaseOutput) SetId(v string) *TermbaseForCreateAITermbaseOutput {
	s.Id = &v
	return s
}

// SetName sets the Name field's value.
func (s *TermbaseForCreateAITermbaseOutput) SetName(v string) *TermbaseForCreateAITermbaseOutput {
	s.Name = &v
	return s
}

// SetScenario sets the Scenario field's value.
func (s *TermbaseForCreateAITermbaseOutput) SetScenario(v string) *TermbaseForCreateAITermbaseOutput {
	s.Scenario = &v
	return s
}

// SetSourceLanguage sets the SourceLanguage field's value.
func (s *TermbaseForCreateAITermbaseOutput) SetSourceLanguage(v string) *TermbaseForCreateAITermbaseOutput {
	s.SourceLanguage = &v
	return s
}

// SetTargetLanguage sets the TargetLanguage field's value.
func (s *TermbaseForCreateAITermbaseOutput) SetTargetLanguage(v string) *TermbaseForCreateAITermbaseOutput {
	s.TargetLanguage = &v
	return s
}

// SetTermItems sets the TermItems field's value.
func (s *TermbaseForCreateAITermbaseOutput) SetTermItems(v []*TermItemForCreateAITermbaseOutput) *TermbaseForCreateAITermbaseOutput {
	s.TermItems = v
	return s
}
