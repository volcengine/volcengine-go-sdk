// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vod20250101

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opSetAITermItemCommon = "SetAITermItem"

// SetAITermItemCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the SetAITermItemCommon operation. The "output" return
// value will be populated with the SetAITermItemCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned SetAITermItemCommon Request to send the API call to the service.
// the "output" return value is not valid until after SetAITermItemCommon Send returns without error.
//
// See SetAITermItemCommon for more information on using the SetAITermItemCommon
// API call, and error handling.
//
//    // Example sending a request using the SetAITermItemCommonRequest method.
//    req, resp := client.SetAITermItemCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VOD20250101) SetAITermItemCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opSetAITermItemCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// SetAITermItemCommon API operation for VOD20250101.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VOD20250101's
// API operation SetAITermItemCommon for usage and error information.
func (c *VOD20250101) SetAITermItemCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.SetAITermItemCommonRequest(input)
	return out, req.Send()
}

// SetAITermItemCommonWithContext is the same as SetAITermItemCommon with the addition of
// the ability to pass a context and additional request options.
//
// See SetAITermItemCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VOD20250101) SetAITermItemCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.SetAITermItemCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opSetAITermItem = "SetAITermItem"

// SetAITermItemRequest generates a "volcengine/request.Request" representing the
// client's request for the SetAITermItem operation. The "output" return
// value will be populated with the SetAITermItemCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned SetAITermItemCommon Request to send the API call to the service.
// the "output" return value is not valid until after SetAITermItemCommon Send returns without error.
//
// See SetAITermItem for more information on using the SetAITermItem
// API call, and error handling.
//
//    // Example sending a request using the SetAITermItemRequest method.
//    req, resp := client.SetAITermItemRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VOD20250101) SetAITermItemRequest(input *SetAITermItemInput) (req *request.Request, output *SetAITermItemOutput) {
	op := &request.Operation{
		Name:       opSetAITermItem,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &SetAITermItemInput{}
	}

	output = &SetAITermItemOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// SetAITermItem API operation for VOD20250101.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VOD20250101's
// API operation SetAITermItem for usage and error information.
func (c *VOD20250101) SetAITermItem(input *SetAITermItemInput) (*SetAITermItemOutput, error) {
	req, out := c.SetAITermItemRequest(input)
	return out, req.Send()
}

// SetAITermItemWithContext is the same as SetAITermItem with the addition of
// the ability to pass a context and additional request options.
//
// See SetAITermItem for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VOD20250101) SetAITermItemWithContext(ctx volcengine.Context, input *SetAITermItemInput, opts ...request.Option) (*SetAITermItemOutput, error) {
	req, out := c.SetAITermItemRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type SetAITermItemInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// SpaceName is a required field
	SpaceName *string `type:"string" json:",omitempty" required:"true"`

	TermItems []*TermItemForSetAITermItemInput `type:"list" json:",omitempty"`

	// TermbaseId is a required field
	TermbaseId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s SetAITermItemInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s SetAITermItemInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *SetAITermItemInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "SetAITermItemInput"}
	if s.SpaceName == nil {
		invalidParams.Add(request.NewErrParamRequired("SpaceName"))
	}
	if s.TermbaseId == nil {
		invalidParams.Add(request.NewErrParamRequired("TermbaseId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetSpaceName sets the SpaceName field's value.
func (s *SetAITermItemInput) SetSpaceName(v string) *SetAITermItemInput {
	s.SpaceName = &v
	return s
}

// SetTermItems sets the TermItems field's value.
func (s *SetAITermItemInput) SetTermItems(v []*TermItemForSetAITermItemInput) *SetAITermItemInput {
	s.TermItems = v
	return s
}

// SetTermbaseId sets the TermbaseId field's value.
func (s *SetAITermItemInput) SetTermbaseId(v string) *SetAITermItemInput {
	s.TermbaseId = &v
	return s
}

type SetAITermItemOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s SetAITermItemOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s SetAITermItemOutput) GoString() string {
	return s.String()
}

type TermItemForSetAITermItemInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	SourceText *string `type:"string" json:",omitempty"`

	TargetText *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s TermItemForSetAITermItemInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s TermItemForSetAITermItemInput) GoString() string {
	return s.String()
}

// SetSourceText sets the SourceText field's value.
func (s *TermItemForSetAITermItemInput) SetSourceText(v string) *TermItemForSetAITermItemInput {
	s.SourceText = &v
	return s
}

// SetTargetText sets the TargetText field's value.
func (s *TermItemForSetAITermItemInput) SetTargetText(v string) *TermItemForSetAITermItemInput {
	s.TargetText = &v
	return s
}
