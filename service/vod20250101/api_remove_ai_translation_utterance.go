// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vod20250101

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opRemoveAITranslationUtteranceCommon = "RemoveAITranslationUtterance"

// RemoveAITranslationUtteranceCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the RemoveAITranslationUtteranceCommon operation. The "output" return
// value will be populated with the RemoveAITranslationUtteranceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned RemoveAITranslationUtteranceCommon Request to send the API call to the service.
// the "output" return value is not valid until after RemoveAITranslationUtteranceCommon Send returns without error.
//
// See RemoveAITranslationUtteranceCommon for more information on using the RemoveAITranslationUtteranceCommon
// API call, and error handling.
//
//    // Example sending a request using the RemoveAITranslationUtteranceCommonRequest method.
//    req, resp := client.RemoveAITranslationUtteranceCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VOD20250101) RemoveAITranslationUtteranceCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opRemoveAITranslationUtteranceCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// RemoveAITranslationUtteranceCommon API operation for VOD20250101.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VOD20250101's
// API operation RemoveAITranslationUtteranceCommon for usage and error information.
func (c *VOD20250101) RemoveAITranslationUtteranceCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.RemoveAITranslationUtteranceCommonRequest(input)
	return out, req.Send()
}

// RemoveAITranslationUtteranceCommonWithContext is the same as RemoveAITranslationUtteranceCommon with the addition of
// the ability to pass a context and additional request options.
//
// See RemoveAITranslationUtteranceCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VOD20250101) RemoveAITranslationUtteranceCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.RemoveAITranslationUtteranceCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opRemoveAITranslationUtterance = "RemoveAITranslationUtterance"

// RemoveAITranslationUtteranceRequest generates a "volcengine/request.Request" representing the
// client's request for the RemoveAITranslationUtterance operation. The "output" return
// value will be populated with the RemoveAITranslationUtteranceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned RemoveAITranslationUtteranceCommon Request to send the API call to the service.
// the "output" return value is not valid until after RemoveAITranslationUtteranceCommon Send returns without error.
//
// See RemoveAITranslationUtterance for more information on using the RemoveAITranslationUtterance
// API call, and error handling.
//
//    // Example sending a request using the RemoveAITranslationUtteranceRequest method.
//    req, resp := client.RemoveAITranslationUtteranceRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VOD20250101) RemoveAITranslationUtteranceRequest(input *RemoveAITranslationUtteranceInput) (req *request.Request, output *RemoveAITranslationUtteranceOutput) {
	op := &request.Operation{
		Name:       opRemoveAITranslationUtterance,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &RemoveAITranslationUtteranceInput{}
	}

	output = &RemoveAITranslationUtteranceOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// RemoveAITranslationUtterance API operation for VOD20250101.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VOD20250101's
// API operation RemoveAITranslationUtterance for usage and error information.
func (c *VOD20250101) RemoveAITranslationUtterance(input *RemoveAITranslationUtteranceInput) (*RemoveAITranslationUtteranceOutput, error) {
	req, out := c.RemoveAITranslationUtteranceRequest(input)
	return out, req.Send()
}

// RemoveAITranslationUtteranceWithContext is the same as RemoveAITranslationUtterance with the addition of
// the ability to pass a context and additional request options.
//
// See RemoveAITranslationUtterance for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VOD20250101) RemoveAITranslationUtteranceWithContext(ctx volcengine.Context, input *RemoveAITranslationUtteranceInput, opts ...request.Option) (*RemoveAITranslationUtteranceOutput, error) {
	req, out := c.RemoveAITranslationUtteranceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type RemoveAITranslationUtteranceInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// ProjectId is a required field
	ProjectId *string `type:"string" json:",omitempty" required:"true"`

	// SpaceName is a required field
	SpaceName *string `type:"string" json:",omitempty" required:"true"`

	// UtteranceId is a required field
	UtteranceId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s RemoveAITranslationUtteranceInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s RemoveAITranslationUtteranceInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *RemoveAITranslationUtteranceInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "RemoveAITranslationUtteranceInput"}
	if s.ProjectId == nil {
		invalidParams.Add(request.NewErrParamRequired("ProjectId"))
	}
	if s.SpaceName == nil {
		invalidParams.Add(request.NewErrParamRequired("SpaceName"))
	}
	if s.UtteranceId == nil {
		invalidParams.Add(request.NewErrParamRequired("UtteranceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetProjectId sets the ProjectId field's value.
func (s *RemoveAITranslationUtteranceInput) SetProjectId(v string) *RemoveAITranslationUtteranceInput {
	s.ProjectId = &v
	return s
}

// SetSpaceName sets the SpaceName field's value.
func (s *RemoveAITranslationUtteranceInput) SetSpaceName(v string) *RemoveAITranslationUtteranceInput {
	s.SpaceName = &v
	return s
}

// SetUtteranceId sets the UtteranceId field's value.
func (s *RemoveAITranslationUtteranceInput) SetUtteranceId(v string) *RemoveAITranslationUtteranceInput {
	s.UtteranceId = &v
	return s
}

type RemoveAITranslationUtteranceOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s RemoveAITranslationUtteranceOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s RemoveAITranslationUtteranceOutput) GoString() string {
	return s.String()
}
