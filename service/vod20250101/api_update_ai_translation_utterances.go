// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vod20250101

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opUpdateAITranslationUtterancesCommon = "UpdateAITranslationUtterances"

// UpdateAITranslationUtterancesCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateAITranslationUtterancesCommon operation. The "output" return
// value will be populated with the UpdateAITranslationUtterancesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateAITranslationUtterancesCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateAITranslationUtterancesCommon Send returns without error.
//
// See UpdateAITranslationUtterancesCommon for more information on using the UpdateAITranslationUtterancesCommon
// API call, and error handling.
//
//    // Example sending a request using the UpdateAITranslationUtterancesCommonRequest method.
//    req, resp := client.UpdateAITranslationUtterancesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VOD20250101) UpdateAITranslationUtterancesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opUpdateAITranslationUtterancesCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateAITranslationUtterancesCommon API operation for VOD20250101.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VOD20250101's
// API operation UpdateAITranslationUtterancesCommon for usage and error information.
func (c *VOD20250101) UpdateAITranslationUtterancesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.UpdateAITranslationUtterancesCommonRequest(input)
	return out, req.Send()
}

// UpdateAITranslationUtterancesCommonWithContext is the same as UpdateAITranslationUtterancesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateAITranslationUtterancesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VOD20250101) UpdateAITranslationUtterancesCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.UpdateAITranslationUtterancesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opUpdateAITranslationUtterances = "UpdateAITranslationUtterances"

// UpdateAITranslationUtterancesRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateAITranslationUtterances operation. The "output" return
// value will be populated with the UpdateAITranslationUtterancesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateAITranslationUtterancesCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateAITranslationUtterancesCommon Send returns without error.
//
// See UpdateAITranslationUtterances for more information on using the UpdateAITranslationUtterances
// API call, and error handling.
//
//    // Example sending a request using the UpdateAITranslationUtterancesRequest method.
//    req, resp := client.UpdateAITranslationUtterancesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VOD20250101) UpdateAITranslationUtterancesRequest(input *UpdateAITranslationUtterancesInput) (req *request.Request, output *UpdateAITranslationUtterancesOutput) {
	op := &request.Operation{
		Name:       opUpdateAITranslationUtterances,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UpdateAITranslationUtterancesInput{}
	}

	output = &UpdateAITranslationUtterancesOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateAITranslationUtterances API operation for VOD20250101.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VOD20250101's
// API operation UpdateAITranslationUtterances for usage and error information.
func (c *VOD20250101) UpdateAITranslationUtterances(input *UpdateAITranslationUtterancesInput) (*UpdateAITranslationUtterancesOutput, error) {
	req, out := c.UpdateAITranslationUtterancesRequest(input)
	return out, req.Send()
}

// UpdateAITranslationUtterancesWithContext is the same as UpdateAITranslationUtterances with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateAITranslationUtterances for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VOD20250101) UpdateAITranslationUtterancesWithContext(ctx volcengine.Context, input *UpdateAITranslationUtterancesInput, opts ...request.Option) (*UpdateAITranslationUtterancesOutput, error) {
	req, out := c.UpdateAITranslationUtterancesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ProjectBaseInfoForUpdateAITranslationUtterancesOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	ProjectId *string `type:"string" json:",omitempty"`

	ProjectVersion *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ProjectBaseInfoForUpdateAITranslationUtterancesOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ProjectBaseInfoForUpdateAITranslationUtterancesOutput) GoString() string {
	return s.String()
}

// SetProjectId sets the ProjectId field's value.
func (s *ProjectBaseInfoForUpdateAITranslationUtterancesOutput) SetProjectId(v string) *ProjectBaseInfoForUpdateAITranslationUtterancesOutput {
	s.ProjectId = &v
	return s
}

// SetProjectVersion sets the ProjectVersion field's value.
func (s *ProjectBaseInfoForUpdateAITranslationUtterancesOutput) SetProjectVersion(v string) *ProjectBaseInfoForUpdateAITranslationUtterancesOutput {
	s.ProjectVersion = &v
	return s
}

type UpdateAITranslationUtterancesInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	InputSubtitleFileName *string `type:"string" json:",omitempty"`

	OutputSubtitleFileName *string `type:"string" json:",omitempty"`

	// ProjectId is a required field
	ProjectId *string `type:"string" json:",omitempty" required:"true"`

	// SpaceName is a required field
	SpaceName *string `type:"string" json:",omitempty" required:"true"`

	// UpdateType is a required field
	UpdateType *string `type:"string" json:",omitempty" required:"true"`

	Utterances []*UtteranceForUpdateAITranslationUtterancesInput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s UpdateAITranslationUtterancesInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateAITranslationUtterancesInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UpdateAITranslationUtterancesInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "UpdateAITranslationUtterancesInput"}
	if s.ProjectId == nil {
		invalidParams.Add(request.NewErrParamRequired("ProjectId"))
	}
	if s.SpaceName == nil {
		invalidParams.Add(request.NewErrParamRequired("SpaceName"))
	}
	if s.UpdateType == nil {
		invalidParams.Add(request.NewErrParamRequired("UpdateType"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetInputSubtitleFileName sets the InputSubtitleFileName field's value.
func (s *UpdateAITranslationUtterancesInput) SetInputSubtitleFileName(v string) *UpdateAITranslationUtterancesInput {
	s.InputSubtitleFileName = &v
	return s
}

// SetOutputSubtitleFileName sets the OutputSubtitleFileName field's value.
func (s *UpdateAITranslationUtterancesInput) SetOutputSubtitleFileName(v string) *UpdateAITranslationUtterancesInput {
	s.OutputSubtitleFileName = &v
	return s
}

// SetProjectId sets the ProjectId field's value.
func (s *UpdateAITranslationUtterancesInput) SetProjectId(v string) *UpdateAITranslationUtterancesInput {
	s.ProjectId = &v
	return s
}

// SetSpaceName sets the SpaceName field's value.
func (s *UpdateAITranslationUtterancesInput) SetSpaceName(v string) *UpdateAITranslationUtterancesInput {
	s.SpaceName = &v
	return s
}

// SetUpdateType sets the UpdateType field's value.
func (s *UpdateAITranslationUtterancesInput) SetUpdateType(v string) *UpdateAITranslationUtterancesInput {
	s.UpdateType = &v
	return s
}

// SetUtterances sets the Utterances field's value.
func (s *UpdateAITranslationUtterancesInput) SetUtterances(v []*UtteranceForUpdateAITranslationUtterancesInput) *UpdateAITranslationUtterancesInput {
	s.Utterances = v
	return s
}

type UpdateAITranslationUtterancesOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	ProjectBaseInfo *ProjectBaseInfoForUpdateAITranslationUtterancesOutput `type:"structure" json:",omitempty"`
}

// String returns the string representation
func (s UpdateAITranslationUtterancesOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateAITranslationUtterancesOutput) GoString() string {
	return s.String()
}

// SetProjectBaseInfo sets the ProjectBaseInfo field's value.
func (s *UpdateAITranslationUtterancesOutput) SetProjectBaseInfo(v *ProjectBaseInfoForUpdateAITranslationUtterancesOutput) *UpdateAITranslationUtterancesOutput {
	s.ProjectBaseInfo = v
	return s
}

type UtteranceForUpdateAITranslationUtterancesInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Id *string `type:"string" json:",omitempty"`

	SpeakerId *string `type:"string" json:",omitempty"`

	Text *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s UtteranceForUpdateAITranslationUtterancesInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UtteranceForUpdateAITranslationUtterancesInput) GoString() string {
	return s.String()
}

// SetId sets the Id field's value.
func (s *UtteranceForUpdateAITranslationUtterancesInput) SetId(v string) *UtteranceForUpdateAITranslationUtterancesInput {
	s.Id = &v
	return s
}

// SetSpeakerId sets the SpeakerId field's value.
func (s *UtteranceForUpdateAITranslationUtterancesInput) SetSpeakerId(v string) *UtteranceForUpdateAITranslationUtterancesInput {
	s.SpeakerId = &v
	return s
}

// SetText sets the Text field's value.
func (s *UtteranceForUpdateAITranslationUtterancesInput) SetText(v string) *UtteranceForUpdateAITranslationUtterancesInput {
	s.Text = &v
	return s
}
