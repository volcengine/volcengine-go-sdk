// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vod20250101

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opGetAITermbaseCommon = "GetAITermbase"

// GetAITermbaseCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the GetAITermbaseCommon operation. The "output" return
// value will be populated with the GetAITermbaseCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetAITermbaseCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetAITermbaseCommon Send returns without error.
//
// See GetAITermbaseCommon for more information on using the GetAITermbaseCommon
// API call, and error handling.
//
//    // Example sending a request using the GetAITermbaseCommonRequest method.
//    req, resp := client.GetAITermbaseCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VOD20250101) GetAITermbaseCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opGetAITermbaseCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// GetAITermbaseCommon API operation for VOD20250101.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VOD20250101's
// API operation GetAITermbaseCommon for usage and error information.
func (c *VOD20250101) GetAITermbaseCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.GetAITermbaseCommonRequest(input)
	return out, req.Send()
}

// GetAITermbaseCommonWithContext is the same as GetAITermbaseCommon with the addition of
// the ability to pass a context and additional request options.
//
// See GetAITermbaseCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VOD20250101) GetAITermbaseCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.GetAITermbaseCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opGetAITermbase = "GetAITermbase"

// GetAITermbaseRequest generates a "volcengine/request.Request" representing the
// client's request for the GetAITermbase operation. The "output" return
// value will be populated with the GetAITermbaseCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetAITermbaseCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetAITermbaseCommon Send returns without error.
//
// See GetAITermbase for more information on using the GetAITermbase
// API call, and error handling.
//
//    // Example sending a request using the GetAITermbaseRequest method.
//    req, resp := client.GetAITermbaseRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VOD20250101) GetAITermbaseRequest(input *GetAITermbaseInput) (req *request.Request, output *GetAITermbaseOutput) {
	op := &request.Operation{
		Name:       opGetAITermbase,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &GetAITermbaseInput{}
	}

	output = &GetAITermbaseOutput{}
	req = c.newRequest(op, input, output)

	return
}

// GetAITermbase API operation for VOD20250101.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VOD20250101's
// API operation GetAITermbase for usage and error information.
func (c *VOD20250101) GetAITermbase(input *GetAITermbaseInput) (*GetAITermbaseOutput, error) {
	req, out := c.GetAITermbaseRequest(input)
	return out, req.Send()
}

// GetAITermbaseWithContext is the same as GetAITermbase with the addition of
// the ability to pass a context and additional request options.
//
// See GetAITermbase for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VOD20250101) GetAITermbaseWithContext(ctx volcengine.Context, input *GetAITermbaseInput, opts ...request.Option) (*GetAITermbaseOutput, error) {
	req, out := c.GetAITermbaseRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type GetAITermbaseInput struct {
	_ struct{} `type:"structure"`

	// SpaceName is a required field
	SpaceName *string `type:"string" required:"true"`

	// TermbaseId is a required field
	TermbaseId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s GetAITermbaseInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetAITermbaseInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *GetAITermbaseInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "GetAITermbaseInput"}
	if s.SpaceName == nil {
		invalidParams.Add(request.NewErrParamRequired("SpaceName"))
	}
	if s.TermbaseId == nil {
		invalidParams.Add(request.NewErrParamRequired("TermbaseId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetSpaceName sets the SpaceName field's value.
func (s *GetAITermbaseInput) SetSpaceName(v string) *GetAITermbaseInput {
	s.SpaceName = &v
	return s
}

// SetTermbaseId sets the TermbaseId field's value.
func (s *GetAITermbaseInput) SetTermbaseId(v string) *GetAITermbaseInput {
	s.TermbaseId = &v
	return s
}

type GetAITermbaseOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	Termbase *TermbaseForGetAITermbaseOutput `type:"structure"`
}

// String returns the string representation
func (s GetAITermbaseOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetAITermbaseOutput) GoString() string {
	return s.String()
}

// SetTermbase sets the Termbase field's value.
func (s *GetAITermbaseOutput) SetTermbase(v *TermbaseForGetAITermbaseOutput) *GetAITermbaseOutput {
	s.Termbase = v
	return s
}

type TermItemForGetAITermbaseOutput struct {
	_ struct{} `type:"structure"`

	SourceText *string `type:"string"`

	TargetText *string `type:"string"`
}

// String returns the string representation
func (s TermItemForGetAITermbaseOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s TermItemForGetAITermbaseOutput) GoString() string {
	return s.String()
}

// SetSourceText sets the SourceText field's value.
func (s *TermItemForGetAITermbaseOutput) SetSourceText(v string) *TermItemForGetAITermbaseOutput {
	s.SourceText = &v
	return s
}

// SetTargetText sets the TargetText field's value.
func (s *TermItemForGetAITermbaseOutput) SetTargetText(v string) *TermItemForGetAITermbaseOutput {
	s.TargetText = &v
	return s
}

type TermbaseForGetAITermbaseOutput struct {
	_ struct{} `type:"structure"`

	Description *string `type:"string"`

	Id *string `type:"string"`

	Name *string `type:"string"`

	Scenario *string `type:"string"`

	SourceLanguage *string `type:"string"`

	TargetLanguage *string `type:"string"`

	TermItems []*TermItemForGetAITermbaseOutput `type:"list"`
}

// String returns the string representation
func (s TermbaseForGetAITermbaseOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s TermbaseForGetAITermbaseOutput) GoString() string {
	return s.String()
}

// SetDescription sets the Description field's value.
func (s *TermbaseForGetAITermbaseOutput) SetDescription(v string) *TermbaseForGetAITermbaseOutput {
	s.Description = &v
	return s
}

// SetId sets the Id field's value.
func (s *TermbaseForGetAITermbaseOutput) SetId(v string) *TermbaseForGetAITermbaseOutput {
	s.Id = &v
	return s
}

// SetName sets the Name field's value.
func (s *TermbaseForGetAITermbaseOutput) SetName(v string) *TermbaseForGetAITermbaseOutput {
	s.Name = &v
	return s
}

// SetScenario sets the Scenario field's value.
func (s *TermbaseForGetAITermbaseOutput) SetScenario(v string) *TermbaseForGetAITermbaseOutput {
	s.Scenario = &v
	return s
}

// SetSourceLanguage sets the SourceLanguage field's value.
func (s *TermbaseForGetAITermbaseOutput) SetSourceLanguage(v string) *TermbaseForGetAITermbaseOutput {
	s.SourceLanguage = &v
	return s
}

// SetTargetLanguage sets the TargetLanguage field's value.
func (s *TermbaseForGetAITermbaseOutput) SetTargetLanguage(v string) *TermbaseForGetAITermbaseOutput {
	s.TargetLanguage = &v
	return s
}

// SetTermItems sets the TermItems field's value.
func (s *TermbaseForGetAITermbaseOutput) SetTermItems(v []*TermItemForGetAITermbaseOutput) *TermbaseForGetAITermbaseOutput {
	s.TermItems = v
	return s
}
